[
  {
    "content": "import time\nimport board\nimport adafruit_veml6070\n\nimport board\nimport adafruit_veml6070\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nuv = adafruit_veml6070.VEML6070(i2c)\n# Alternative constructors with parameters",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/veml6070/examples/veml6070_simpletest.py",
      "library": "veml6070",
      "type": "example",
      "file_name": "veml6070_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_veml6070\n\nimport adafruit_veml6070\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nuv = adafruit_veml6070.VEML6070(i2c)\n# Alternative constructors with parameters\n# uv = adafruit_veml6070.VEML6070(i2c, 'VEML6070_1_T')\n# uv = adafruit_veml6070.VEML6070(i2c, 'VEML6070_HALF_T', True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/veml6070/examples/veml6070_simpletest.py",
      "library": "veml6070",
      "type": "example",
      "file_name": "veml6070_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# VEML6070 Driver Example Code\n\nimport time\n\nimport board\n\nimport adafruit_veml6070\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\nuv = adafruit_veml6070.VEML6070(i2c)\n# Alternative constructors with parameters\n# uv = adafruit_veml6070.VEML6070(i2c, 'VEML6070_1_T')\n# uv = adafruit_veml6070.VEML6070(i2c, 'VEML6070_HALF_T', True)\n\n# take 10 readings\nfor j in range(10):\n    uv_raw = uv.uv_raw\n    risk_level = uv.get_index(uv_raw)\n    print(f\"Reading: {uv_raw} | Risk Level: {risk_level}\")\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/veml6070/examples/veml6070_simpletest.py",
      "library": "veml6070",
      "type": "example",
      "file_name": "veml6070_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_lps2x\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nlps = adafruit_lps2x.LPS22(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps2x/examples/lps2x_displayio_simpletest.py",
      "library": "lps2x",
      "type": "example",
      "file_name": "lps2x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_lps2x\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nlps = adafruit_lps2x.LPS22(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps2x/examples/lps2x_displayio_simpletest.py",
      "library": "lps2x",
      "type": "example",
      "file_name": "lps2x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_lps2x\n\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps2x/examples/lps2x_displayio_simpletest.py",
      "library": "lps2x",
      "type": "example",
      "file_name": "lps2x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_lps2x\n\n# add the label(s) to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps2x/examples/lps2x_displayio_simpletest.py",
      "library": "lps2x",
      "type": "example",
      "file_name": "lps2x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_esp32spi.adafruit_esp32spi_wifimanager as wifimanager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_wsgi.esp32spi_wsgiserver as server\nfrom adafruit_wsgi.wsgi_app import WSGIApp\n\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/wsgi/examples/wsgi_simpletest.py",
      "library": "wsgi",
      "type": "example",
      "file_name": "wsgi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_esp32spi.adafruit_esp32spi_wifimanager as wifimanager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_wsgi.esp32spi_wsgiserver as server\nfrom adafruit_wsgi.wsgi_app import WSGIApp\n\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/wsgi/examples/wsgi_simpletest.py",
      "library": "wsgi",
      "type": "example",
      "file_name": "wsgi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_esp32spi.adafruit_esp32spi_wifimanager as wifimanager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_wsgi.esp32spi_wsgiserver as server\nfrom adafruit_wsgi.wsgi_app import WSGIApp\n\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/wsgi/examples/wsgi_simpletest.py",
      "library": "wsgi",
      "type": "example",
      "file_name": "wsgi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_esp32spi.adafruit_esp32spi_wifimanager as wifimanager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_wsgi.esp32spi_wsgiserver as server\nfrom adafruit_wsgi.wsgi_app import WSGIApp\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/wsgi/examples/wsgi_simpletest.py",
      "library": "wsgi",
      "type": "example",
      "file_name": "wsgi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_esp32spi.adafruit_esp32spi_wifimanager as wifimanager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_wsgi.esp32spi_wsgiserver as server\nfrom adafruit_wsgi.wsgi_app import WSGIApp\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/wsgi/examples/wsgi_simpletest.py",
      "library": "wsgi",
      "type": "example",
      "file_name": "wsgi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_esp32spi.adafruit_esp32spi_wifimanager as wifimanager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_wsgi.esp32spi_wsgiserver as server\nfrom adafruit_wsgi.wsgi_app import WSGIApp\n\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)  # Uncomment for Most Boards",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/wsgi/examples/wsgi_simpletest.py",
      "library": "wsgi",
      "type": "example",
      "file_name": "wsgi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_esp32spi.adafruit_esp32spi_wifimanager as wifimanager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_wsgi.esp32spi_wsgiserver as server\nfrom adafruit_wsgi.wsgi_app import WSGIApp\n\n@web_app.route('/led_on/<r>/<g>/<b>')\ndef led_on(request, r, g, b):\n    print('led on!')\n    status_pixel.fill((int(r), int(g), int(b)))\n    return ('200 OK', [], 'led on!')\n\n# Usage example:\n\n\n@web_app.route(\"/led_on/<r>/<g>/<b>\")\ndef led_on(request, r, g, b):\n    print(\"led on!\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/wsgi/examples/wsgi_simpletest.py",
      "library": "wsgi",
      "type": "example",
      "file_name": "wsgi_simpletest.py",
      "chunk_type": "function",
      "function_name": "led_on"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_esp32spi.adafruit_esp32spi_wifimanager as wifimanager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_wsgi.esp32spi_wsgiserver as server\nfrom adafruit_wsgi.wsgi_app import WSGIApp\n\n@web_app.route('/led_off')\ndef led_off(request):\n    print('led off!')\n    status_pixel.fill(0)\n    return ('200 OK', [], 'led off!')\n\n# Usage example:\n\n\n@web_app.route(\"/led_off\")\ndef led_off(request):\n    print(\"led off!\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/wsgi/examples/wsgi_simpletest.py",
      "library": "wsgi",
      "type": "example",
      "file_name": "wsgi_simpletest.py",
      "chunk_type": "function",
      "function_name": "led_off"
    }
  },
  {
    "content": "import time\nimport adafruit_tmp117\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\nclass gVars:\n\n    def __init__(self):\n        self.gVarsDict = {0: 'my_debug', 1: 'rtc', 2: 'temp_sensor', 3: 'lStart', 4: 'o_secs', 5: 'c_secs', 6: 'dt_refresh', 7: 'sDT_old', 8: 't0', 9: 't1', 10: 't2', 11: 'default_dt', 12: 'pge3_lbl_dflt', 13: 'pge4_lbl_dflt', 14: 'online_time_present', 15: 'temp_in_REPL', 16: 'old_temp', 17: 'use_ntp', 18: 'use_txt_in_month', 19: 'use_usa_notation', 20: 'content_sensor_idx', 21: 'temp_in_fahrenheit'}\n        self.gVars_rDict = {'my_debug': 0, 'rtc': 1, 'temp_sensor': 2, 'lStart': 3, 'o_secs': 4, 'c_secs': 5, 'dt_refresh': 6, 'sDT_old': 7, 't0': 8, 't1': 9, 't2': 10, 'default_dt': 11, 'pge3_lbl_dflt': 12, 'pge4_lbl_dflt': 13, 'online_time_present': 14, 'temp_in_REPL': 15, 'old_temp': 16, 'use_ntp': 17, 'use_txt_in_month': 18, 'use_usa_notation': 19, 'content_sensor_idx': 20, 'temp_in_fahrenheit': 21}\n        self.g_vars = {}\n\n    def write(self, s, value):\n        if isinstance(s, str):\n            if s in self.gVars_rDict:\n                n = self.gVars_rDict[s]\n                self.g_vars[n] = value\n            else:\n                raise KeyError(\"variable '{:>20s}' not found in self.gVars_rDict\".format(s))\n        else:\n            raise TypeError(f'myVars.write(): param s expected str, {type(s)} received')\n\n    def read(self, s):\n        RetVal = None\n        if isinstance(s, str):\n            if s in self.gVars_rDict:\n                n = self.gVars_rDict[s]\n                if n in self.g_vars:\n                    RetVal = self.g_vars[n]\n        return RetVal\n\n    def clean(self):\n        self.g_vars = {0: None, 1: None, 2: None, 3: None, 4: None, 5: None, 6: None, 7: None, 8: None, 9: None, 10: None, 11: None, 12: None, 13: None, 14: None, 15: None, 16: None, 17: None, 18: None, 19: None, 20: None, 21: None}\n\n    def list(self):\n        for i in range(0, len(self.g_vars) - 1):\n            print(\"self.g_vars['{:>20s}'] = {}\".format(self.gVarsDict[i], self.g_vars[i] if i in self.g_vars else 'None'))\n\n# Usage example:\n# | Definition for variables in the past defined as global|\n# +-------------------------------------------------------+\n# The gVars class is created\n# to elminate the need for global variables.\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_rtc.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_rtc.py",
      "chunk_type": "function",
      "function_name": "gVars"
    }
  },
  {
    "content": "import time\nimport adafruit_tmp117\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\ni2c = board.I2C()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_rtc.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_rtc.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_tmp117\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\n# degs_sign = chr(186)  # I preferred the real degrees sign which is: chr(176)\n# -----------------------------------\n# built-in display\ndisplay = board.DISPLAY\n# display.rotation = 90\ndisplay.rotation = 0\n# create and show main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_rtc.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_rtc.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_tmp117\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\ntest_page_layout = TabLayout(x=0, y=0, display=board.DISPLAY, tab_text_scale=2, custom_font=font_term, inactive_tab_spritesheet='bmps/inactive_tab_sprite.bmp', showing_tab_spritesheet='bmps/active_tab_sprite.bmp', showing_tab_text_color=43609, inactive_tab_text_color=15658734, inactive_tab_transparent_indexes=(0, 1), showing_tab_transparent_indexes=(0, 1), tab_count=4)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_rtc.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_rtc.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_tmp117\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\ndef connect_temp_sensor():\n    t = 'temperature sensor found'\n    try:\n        myVars.write('temp_sensor', adafruit_tmp117.TMP117(i2c))\n    except ValueError:\n        pass\n    print('connect_temp_sensor(): type(temp_sensor) object = ', type(myVars.read('temp_sensor')))\n    if myVars.read('temp_sensor') is not None:\n        print(t)\n        print('temperature sensor connected')\n        myVars.write('t0', 'Temperature')\n        if myVars.read('temp_in_fahrenheit'):\n            myVars.write('t1', chr(186) + 'F')\n        else:\n            myVars.write('t1', chr(186) + 'C')\n        myVars.write('t2', 27 * '_')\n    else:\n        print('no ' + t)\n        print('failed to connect temperature sensor')\n        myVars.write('t0', None)\n        myVars.write('t1', None)\n        myVars.write('t2', None)\n\n# Usage example:\n\n    print(\n        \"connect_temp_sensor(): type(temp_sensor) object = \",\n        type(myVars.read(\"temp_sensor\")),\n    )",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_rtc.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_rtc.py",
      "chunk_type": "function",
      "function_name": "connect_temp_sensor"
    }
  },
  {
    "content": "import time\nimport adafruit_tmp117\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\ndef connect_rtc():\n    t = 'RTC found'\n    try:\n        myVars.write('rtc', DS3231(i2c))\n    except ValueError:\n        pass\n    print('connect_rtc() type rtc object = ', type(myVars.read('rtc')))\n    if myVars.read('rtc') is not None:\n        print(t)\n        print('RTC connected')\n        if myVars.read('lStart'):\n            myVars.write('lStart', False)\n            myVars.read('rtc').datetime = myVars.read('default_dt')\n    else:\n        print('no ' + t)\n        print('Failed to connect RTC')\n\n# Usage example:\n        pass\n\n    print(\"connect_rtc() type rtc object = \", type(myVars.read(\"rtc\")))\n    if myVars.read(\"rtc\") is not None:\n        print(t)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_rtc.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_rtc.py",
      "chunk_type": "function",
      "function_name": "connect_rtc"
    }
  },
  {
    "content": "import time\nimport adafruit_tmp117\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\ndef get_temp():\n    showing_page_idx = test_page_layout.showing_page_index\n    RetVal = False\n    if myVars.read('temp_sensor') is not None:\n        try:\n            temp = myVars.read('temp_sensor').temperature\n            if myVars.read('temp_in_fahrenheit'):\n                temp = temp * 1.8 + 32\n            t = f'{temp:5.2f} ' + myVars.read('t1')\n            if myVars.read('my_debug') and temp is not None and (not myVars.read('temp_in_REPL')):\n                myVars.write('temp_in_REPL', True)\n                print('get_temp(): {} {}'.format(myVars.read('t0'), t))\n            if showing_page_idx == 3:\n                if temp is not None:\n                    if temp != myVars.read('old_temp'):\n                        myVars.write('old_temp', temp)\n                        t = f'{temp:5.2f} ' + myVars.read('t1')\n                        pge4_lbl.text = ''\n                        pge4_lbl2.text = myVars.read('t0')\n                        pge4_lbl3.text = t\n                        RetVal = True\n                else:\n                    t = ''\n                    pge4_lbl.text = myVars.read('pge4_lbl_dflt')\n        except OSError:\n            print('Temperature sensor has disconnected')\n            t = ''\n            myVars.write('temp_sensor', None)\n            pge4_lbl.text = myVars.read('pge4_lbl_dflt')\n            pge4_lbl2.text = ''\n            pge4_lbl3.text = ''\n    return RetVal\n\n# Usage example:\n            if myVars.read(\"my_debug\") and temp is not None and not myVars.read(\"temp_in_REPL\"):\n                myVars.write(\"temp_in_REPL\", True)\n                print(\"get_temp(): {} {}\".format(myVars.read(\"t0\"), t))\n            if showing_page_idx == 3:  # show temperature on most right Tab page\n                if temp is not None:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_rtc.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_rtc.py",
      "chunk_type": "function",
      "function_name": "get_temp"
    }
  },
  {
    "content": "import time\nimport adafruit_tmp117\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\ndef handle_dt(dt):\n    RetVal = False\n    s = 'Date/time: '\n    sYY = str(dt[yy])\n    sMO = months[dt[mo]] if myVars.read('use_txt_in_month') else '0' + str(dt[mo]) if dt[mo] < 10 else str(dt[mo])\n    dt_dict = {}\n    for _ in range(dd, ss + 1):\n        dt_dict[_] = '0' + str(dt[_]) if dt[_] < 10 else str(dt[_])\n    if myVars.read('my_debug'):\n        print('dt_dict = ', dt_dict)\n    myVars.write('c_secs', dt_dict[ss])\n    sDT = sMO + '-' + dt_dict[dd] + '-' + sYY if myVars.read('use_usa_notation') else sYY + '-' + sMO + '-' + dt_dict[dd]\n    if myVars.read('my_debug'):\n        print('handle_dt(): sDT_old = {}, sDT = {}'.format(myVars.read('sDT_old'), sDT))\n    if myVars.read('sDT_old') != sDT:\n        myVars.write('sDT_old', sDT)\n        myVars.write('dt_refresh', True)\n    sDT2 = dt_dict[hh] + ':' + dt_dict[mm] + ':' + dt_dict[ss]\n    if myVars.read('dt_refresh'):\n        myVars.write('dt_refresh', False)\n        pge3_lbl.text = s\n        pge3_lbl2.text = sDT\n    if myVars.read('c_secs') != myVars.read('o_secs'):\n        myVars.write('o_secs', myVars.read('c_secs'))\n        sDT3 = s + f'{sDT} {sDT2}'\n        print(sDT3)\n        pge3_lbl3.text = sDT2\n        if myVars.read('my_debug'):\n            print(f'pge3_lbl.text = {pge3_lbl.text}')\n            print(f'pge3_lbl2.text = {pge3_lbl2.text}')\n            print(f'pge3_lbl3.text = {pge3_lbl3.text}')\n        RetVal = True\n    return RetVal\n\n# Usage example:\n    )\n    if myVars.read(\"my_debug\"):\n        print(\"handle_dt(): sDT_old = {}, sDT = {}\".format(myVars.read(\"sDT_old\"), sDT))\n    if myVars.read(\"sDT_old\") != sDT:\n        myVars.write(\"sDT_old\", sDT)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_rtc.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_rtc.py",
      "chunk_type": "function",
      "function_name": "handle_dt"
    }
  },
  {
    "content": "import time\nimport adafruit_tmp117\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\ndef get_dt():\n    dt = None\n    RetVal = False\n    if myVars.read('rtc') is not None:\n        try:\n            dt = myVars.read('rtc').datetime\n        except OSError as exc:\n            if myVars.read('my_debug'):\n                print('Error number: ', exc.args[0])\n            if exc.args[0] == 5:\n                print('get_dt(): OSError occurred. RTC probably is disconnected')\n                pge3_lbl.text = myVars.read('pge3_lbl_dflt')\n                myVars.write('sDT_old', '')\n                pge3_lbl2.text = ''\n                pge3_lbl3.text = ''\n                return RetVal\n            raise\n    elif myVars.read('online_time_present') or myVars.read('use_ntp'):\n        dt = time.localtime()\n    if myVars.read('my_debug'):\n        print('get_dt(): dt = ', dt)\n    if dt is not None:\n        RetVal = handle_dt(dt)\n    else:\n        pge3_lbl.text = myVars.read('pge3_lbl_dflt')\n        pge3_lbl2.text = ''\n        pge3_lbl3.text = ''\n    return RetVal\n\n# Usage example:\n                print(\"Error number: \", exc.args[0])\n            if exc.args[0] == 5:  # Input/output error\n                print(\"get_dt(): OSError occurred. RTC probably is disconnected\")\n                pge3_lbl.text = myVars.read(\"pge3_lbl_dflt\")\n                myVars.write(\"sDT_old\", \"\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_rtc.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_rtc.py",
      "chunk_type": "function",
      "function_name": "get_dt"
    }
  },
  {
    "content": "import time\nimport adafruit_tmp117\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\ndef main():\n    cnt = 0\n    while True:\n        try:\n            print(f'Loop nr: {cnt:03d}')\n            if myVars.read('rtc') is not None:\n                get_dt()\n            else:\n                connect_rtc()\n            if myVars.read('temp_sensor') is not None:\n                get_temp()\n            else:\n                connect_temp_sensor()\n            cnt += 1\n            if cnt > 999:\n                cnt = 0\n            time.sleep(2)\n            test_page_layout.next_page()\n        except KeyboardInterrupt as exc:\n            raise KeyboardInterrupt('Keyboard interrupt...exiting...') from exc\n\n# Usage example:\ndisplay.rotation = 0\n\n# create and show main_group\nmain_group = displayio.Group()\ndisplay.root_group = main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_rtc.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_rtc.py",
      "chunk_type": "function",
      "function_name": "main"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lps2x\n\nimport board\nimport adafruit_lps2x\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# uncomment and comment out the line after to use with the LPS22\n# lps = adafruit_lps2x.LPS22(i2c)\nlps = adafruit_lps2x.LPS25(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps2x/examples/lps2x_simpletest.py",
      "library": "lps2x",
      "type": "example",
      "file_name": "lps2x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lps2x\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# uncomment and comment out the line after to use with the LPS22\n# lps = adafruit_lps2x.LPS22(i2c)\nlps = adafruit_lps2x.LPS25(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps2x/examples/lps2x_simpletest.py",
      "library": "lps2x",
      "type": "example",
      "file_name": "lps2x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_lps2x\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# uncomment and comment out the line after to use with the LPS22\n# lps = adafruit_lps2x.LPS22(i2c)\nlps = adafruit_lps2x.LPS25(i2c)\n\nwhile True:\n    print(\"Pressure: %.2f hPa\" % lps.pressure)\n    print(\"Temperature: %.2f C\" % lps.temperature)\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps2x/examples/lps2x_simpletest.py",
      "library": "lps2x",
      "type": "example",
      "file_name": "lps2x_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_icm20x\n\nimport board\nimport adafruit_icm20x\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nicm = adafruit_icm20x.ICM20649(i2c, address=0x69)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/icm20x/examples/icm20x_icm20649_simpletest.py",
      "library": "icm20x",
      "type": "example",
      "file_name": "icm20x_icm20649_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_icm20x\n\nicm = adafruit_icm20x.ICM20649(i2c, address=105)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/icm20x/examples/icm20x_icm20649_simpletest.py",
      "library": "icm20x",
      "type": "example",
      "file_name": "icm20x_icm20649_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_icm20x\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nicm = adafruit_icm20x.ICM20649(i2c, address=0x69)\n\nwhile True:\n    print(\"Acceleration: X:{:.2f}, Y: {:.2f}, Z: {:.2f} m/s^2\".format(*icm.acceleration))\n    print(\"Gyro X:{:.2f}, Y: {:.2f}, Z: {:.2f} rads/s\".format(*icm.gyro))\n    print(\"\")\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/icm20x/examples/icm20x_icm20649_simpletest.py",
      "library": "icm20x",
      "type": "example",
      "file_name": "icm20x_icm20649_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\nssid = getenv(\"CIRCUITPY_WIFI_SSID\")\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\nRELAY = DigitalInOut(board.D10)\nRELAY.direction = Direction.OUTPUT\n### WiFi ###",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\nRELAY.direction = Direction.OUTPUT\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D13)\n# esp32_ready = DigitalInOut(board.D11)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\n    spi = busio.SPI(board.SCK1, board.MOSI1, board.MISO1)\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\n# RED_LED = PWMOut.PWMOut(esp, 26)\n# GREEN_LED = PWMOut.PWMOut(esp, 27)\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password, status_pixel=status_pixel)\n# Define callback functions which will be called when certain events happen.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\ndef connected(client):\n    client.subscribe('lamp')\n\n# Usage example:\nesp32_reset = DigitalInOut(board.ESP_RESET)\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D13)\n# esp32_ready = DigitalInOut(board.D11)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_daughter.py",
      "chunk_type": "function",
      "function_name": "connected"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\ndef subscribe(client, userdata, topic, granted_qos):\n    print(f'Subscribed to {topic} with QOS level {granted_qos}')\n\n# Usage example:\n# Define callback functions which will be called when certain events happen.\ndef connected(client):\n    client.subscribe(\"lamp\")\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_daughter.py",
      "chunk_type": "function",
      "function_name": "subscribe"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\ndef on_lamp(client, topic, message):\n    RELAY.value = eval(message)\n\n# Usage example:\nio = IO_MQTT(mqtt_client)\n\nio.add_feed_callback(\"lamp\", on_lamp)\n# Connect the callback methods defined above to Adafruit IO\nio.on_connect = connected",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_daughter.py",
      "chunk_type": "function",
      "function_name": "on_lamp"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\n# Connect to WiFi\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(\n    broker=\"io.adafruit.com\",",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_nunchuk\n\nimport board\nimport adafruit_nunchuk\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nnc = adafruit_nunchuk.Nunchuk(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/nunchuk/examples/nunchuk_simpletest.py",
      "library": "nunchuk",
      "type": "example",
      "file_name": "nunchuk_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_nunchuk\n\nimport adafruit_nunchuk\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nnc = adafruit_nunchuk.Nunchuk(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/nunchuk/examples/nunchuk_simpletest.py",
      "library": "nunchuk",
      "type": "example",
      "file_name": "nunchuk_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_nunchuk\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nnc = adafruit_nunchuk.Nunchuk(i2c)\n\nwhile True:\n    x, y = nc.joystick\n    ax, ay, az = nc.acceleration\n    print(f\"joystick = {x},{y}\")\n    print(f\"accceleration ax={ax}, ay={ay}, az={az}\")\n\n    if nc.buttons.C:\n        print(\"button C\")\n    if nc.buttons.Z:\n        print(\"button Z\")\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/nunchuk/examples/nunchuk_simpletest.py",
      "library": "nunchuk",
      "type": "example",
      "file_name": "nunchuk_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "\n\ndef test_message(_can=builtin_bus_factory):\n    print('Testing Message')\n    assert Message(id=0, data=b'').id == 0\n    assert Message(id=1, data=b'').id == 1\n    for i in lengths:\n        b = bytes(range(i))\n        assert Message(id=0, data=b).data == b\n    assert not Message(id=0, data=b'').extended\n    assert not Message(id=0, extended=False, data=b'').extended\n    assert Message(id=0, extended=True, data=b'').extended\n\n# Usage example:\n\ntest_suite = [\n    test_message,\n    test_rtr_constructor,\n    test_rtr_receive,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp2515/examples/mcp2515_canio_test.py",
      "library": "mcp2515",
      "type": "example",
      "file_name": "mcp2515_canio_test.py",
      "chunk_type": "function",
      "function_name": "test_message"
    }
  },
  {
    "content": "\n\ndef test_rtr_constructor():\n    print('Testing RemoteTransmissionRequest')\n    assert RemoteTransmissionRequest(id=0, length=0).id == 0\n    assert RemoteTransmissionRequest(id=1, length=0).id == 1\n    for i in lengths:\n        assert RemoteTransmissionRequest(id=0, length=i).length == i\n    assert not RemoteTransmissionRequest(id=0, length=1).extended\n    assert not RemoteTransmissionRequest(id=0, extended=False, length=1).extended\n    assert RemoteTransmissionRequest(id=0, extended=True, length=1).extended\n\n# Usage example:\ntest_suite = [\n    test_message,\n    test_rtr_constructor,\n    test_rtr_receive,\n    test_iter,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp2515/examples/mcp2515_canio_test.py",
      "library": "mcp2515",
      "type": "example",
      "file_name": "mcp2515_canio_test.py",
      "chunk_type": "function",
      "function_name": "test_rtr_constructor"
    }
  },
  {
    "content": "\n\ndef test_rtr_receive(can=builtin_bus_factory):\n    with can() as b, b.listen(timeout=0.1) as l:\n        for length in lengths:\n            print('Test messages of length', length)\n            mo = RemoteTransmissionRequest(id=89478485, extended=True, length=length)\n            b.send(mo)\n            mi = l.receive()\n            assert mi\n            assert isinstance(mi, RemoteTransmissionRequest)\n            assert mi.id == 89478485, f'Extended ID does not match: 0x{mi.id:07X}'\n            assert mi.extended\n            assert mi.length == length\n            mo = RemoteTransmissionRequest(id=max_standard_id, length=length)\n            b.send(mo)\n            mi = l.receive()\n            assert mi\n            assert isinstance(mi, RemoteTransmissionRequest)\n            assert mi.id == max_standard_id, 'Max standard ID not sent/received properly: %s' % hex(mi.id)\n            assert mi.length == length\n            mo = RemoteTransmissionRequest(id=1365, length=length)\n            b.send(mo)\n            mi = l.receive()\n            assert mi\n            assert isinstance(mi, RemoteTransmissionRequest)\n            assert mi.id == 1365\n            assert mi.length == length\n            mo = RemoteTransmissionRequest(id=max_extended_id, extended=True, length=length)\n            assert mo.extended\n            b.send(mo)\n            mi = l.receive()\n            assert mi\n            assert isinstance(mi, RemoteTransmissionRequest)\n            assert mi.id == max_extended_id, 'Max extended ID not sent/received properly'\n            assert mi.length == length\n            data = bytes(range(length))\n            mo = Message(id=0, data=data)\n            b.send(mo)\n            mi = l.receive()\n            assert mi\n            assert isinstance(mi, Message)\n            assert mi.data == data\n            mo = Message(id=max_extended_id, extended=True, data=data)\n            b.send(mo)\n            mi = l.receive()\n            assert mi\n            assert isinstance(mi, Message)\n            assert mi.data == data\n\n# Usage example:\n    test_message,\n    test_rtr_constructor,\n    test_rtr_receive,\n    test_iter,\n    test_bus_state,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp2515/examples/mcp2515_canio_test.py",
      "library": "mcp2515",
      "type": "example",
      "file_name": "mcp2515_canio_test.py",
      "chunk_type": "function",
      "function_name": "test_rtr_receive"
    }
  },
  {
    "content": "\n\ndef test_filters1(can=builtin_bus_factory):\n    matches = [Match(1032), Match(1792, mask=2032), Match(67639669, extended=True), Match(8947712, mask=16777200, extended=True)]\n    print('Test filters')\n    with can() as b, b.listen(matches, timeout=0.1) as l:\n        mo = RemoteTransmissionRequest(id=1032, length=0)\n        b.send(mo)\n        mi = l.receive()\n        assert mi\n        mo = RemoteTransmissionRequest(id=1796, length=0)\n        b.send(mo)\n        mi = l.receive()\n        assert mi\n        mo = RemoteTransmissionRequest(id=1033, length=0)\n        b.send(mo)\n        mi = l.receive()\n        assert not mi, 'ID 0x409 not blocked by filters & masks'\n        mo = Message(id=67639669, extended=True, data=b'')\n        b.send(mo)\n        mi = l.receive()\n        assert mi\n        mo = Message(id=8947716, extended=True, data=b'')\n        b.send(mo)\n        mi = l.receive()\n        assert mi\n        mo = Message(id=67639685, extended=True, data=b'')\n        b.send(mo)\n        mi = l.receive()\n        assert not mi\n\n# Usage example:\n# set filter tests\nif CAN_TYPE == \"SAM-E\":\n    test_suite.append(test_filters1)\n    test_suite.append(test_filters2)\nelif CAN_TYPE == \"MCP2515\":",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp2515/examples/mcp2515_canio_test.py",
      "library": "mcp2515",
      "type": "example",
      "file_name": "mcp2515_canio_test.py",
      "chunk_type": "function",
      "function_name": "test_filters1"
    }
  },
  {
    "content": "\n\ndef test_filters2(can=builtin_bus_factory):\n    matches = [Match(1032), Match(1792, mask=2032), Match(67639669, extended=True), Match(8947712, mask=16777200, extended=True)]\n    print('Test filters 2')\n    with can() as b, b.listen(matches[0:2], timeout=0.1) as l1, b.listen(matches[2:4], timeout=0.1) as l2:\n        mo = RemoteTransmissionRequest(id=1032, length=0)\n        b.send(mo)\n        mi1 = l1.receive()\n        mi2 = l2.receive()\n        assert mi1\n        assert not mi2\n        mo = RemoteTransmissionRequest(id=1796, length=0)\n        b.send(mo)\n        mi1 = l1.receive()\n        mi2 = l2.receive()\n        assert mi1\n        assert not mi2\n        mo = RemoteTransmissionRequest(id=1033, length=0)\n        b.send(mo)\n        mi1 = l1.receive()\n        mi2 = l2.receive()\n        assert not mi1\n        assert not mi2\n        mo = Message(id=67639669, extended=True, data=b'')\n        b.send(mo)\n        mi1 = l1.receive()\n        mi2 = l2.receive()\n        assert not mi1\n        assert mi2\n        mo = Message(id=8947716, extended=True, data=b'')\n        b.send(mo)\n        mi1 = l1.receive()\n        mi2 = l2.receive()\n        assert not mi1\n        assert mi2\n        mo = Message(id=67639685, extended=True, data=b'')\n        b.send(mo)\n        mi1 = l1.receive()\n        mi2 = l2.receive()\n        assert not mi1\n        assert not mi2\n\n# Usage example:\nif CAN_TYPE == \"SAM-E\":\n    test_suite.append(test_filters1)\n    test_suite.append(test_filters2)\nelif CAN_TYPE == \"MCP2515\":\n    test_suite.append(test_mcp_standard_id_exact_filters)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp2515/examples/mcp2515_canio_test.py",
      "library": "mcp2515",
      "type": "example",
      "file_name": "mcp2515_canio_test.py",
      "chunk_type": "function",
      "function_name": "test_filters2"
    }
  },
  {
    "content": "\n\ndef test_iter(can=builtin_bus_factory):\n    print('Test iter()')\n    with can() as b, b.listen(timeout=0.1) as l:\n        assert iter(l) is l\n        mo = Message(id=67639685, extended=True, data=b'')\n        mo.data = b'\\xff'\n        b.send(mo)\n        for i, mi in zip(range(3), l):\n            print(i, mi.data)\n            assert mi\n            assert mi.data == mo.data\n            mo.data = bytes((i,))\n            b.send(mo)\n        mi = next(l)\n        assert mi\n        assert mi.data == mo.data\n        try:\n            next(l)\n        except StopIteration:\n            print('StopIteration')\n\n# Usage example:\n    test_rtr_constructor,\n    test_rtr_receive,\n    test_iter,\n    test_bus_state,\n    test_listener_deinit,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp2515/examples/mcp2515_canio_test.py",
      "library": "mcp2515",
      "type": "example",
      "file_name": "mcp2515_canio_test.py",
      "chunk_type": "function",
      "function_name": "test_iter"
    }
  },
  {
    "content": "\n\ndef test_mcp_standard_id_exact_filters(can=builtin_bus_factory):\n    print('Test MCP Standard ID filters')\n    standard_matches = [Match(1032), Match(max_standard_id)]\n    with can() as b, b.listen(standard_matches, timeout=0.1) as l:\n        mo = RemoteTransmissionRequest(id=1032, length=0)\n        b.send(mo)\n        mi = l.receive()\n        assert mi\n        mo = RemoteTransmissionRequest(id=max_standard_id, length=0)\n        b.send(mo)\n        mi = l.receive()\n        assert mi\n        mo = RemoteTransmissionRequest(id=1033, length=0)\n        b.send(mo)\n        mi = l.receive()\n        assert not mi, 'ID 0x409 not blocked by filters & masks'\n        mo = RemoteTransmissionRequest(id=max_standard_id - 1, length=0)\n        b.send(mo)\n        mi = l.receive()\n        assert not mi, 'ID %x not blocked by filters & masks' % (max_standard_id - 1)\n\n# Usage example:\n    test_suite.append(test_filters2)\nelif CAN_TYPE == \"MCP2515\":\n    test_suite.append(test_mcp_standard_id_exact_filters)\n    test_suite.append(test_mcp_standard_id_masked_filters)\n    test_suite.append(test_mcp_extended_id_exact_filters)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp2515/examples/mcp2515_canio_test.py",
      "library": "mcp2515",
      "type": "example",
      "file_name": "mcp2515_canio_test.py",
      "chunk_type": "function",
      "function_name": "test_mcp_standard_id_exact_filters"
    }
  },
  {
    "content": "\n\ndef test_mcp_standard_id_masked_filters(can=builtin_bus_factory):\n    print('Test MCP Standard ID masked filters')\n    standard_matches = [Match(1024, mask=2032), Match(1802, mask=1807)]\n    with can() as b, b.listen(standard_matches, timeout=0.1) as l:\n        mo = RemoteTransmissionRequest(id=1032, length=0)\n        b.send(mo)\n        mi = l.receive()\n        assert mi, 'ID 0x408 not blocked by masked filter'\n        mo = RemoteTransmissionRequest(id=1048, length=0)\n        b.send(mo)\n        mi = l.receive()\n        assert not mi, 'ID 0x418 not blocked by masked filter'\n        mo = RemoteTransmissionRequest(id=2042, length=0)\n        b.send(mo)\n        mi = l.receive()\n        assert mi, 'ID 0x7FA blocked by masked filter'\n        mo = RemoteTransmissionRequest(id=2043, length=0)\n        b.send(mo)\n        mi = l.receive()\n        assert not mi, 'ID 0x7FB not blocked by masked filter'\n\n# Usage example:\nelif CAN_TYPE == \"MCP2515\":\n    test_suite.append(test_mcp_standard_id_exact_filters)\n    test_suite.append(test_mcp_standard_id_masked_filters)\n    test_suite.append(test_mcp_extended_id_exact_filters)\n    test_suite.append(test_mcp_extended_id_masked_filters)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp2515/examples/mcp2515_canio_test.py",
      "library": "mcp2515",
      "type": "example",
      "file_name": "mcp2515_canio_test.py",
      "chunk_type": "function",
      "function_name": "test_mcp_standard_id_masked_filters"
    }
  },
  {
    "content": "\n\ndef test_mcp_extended_id_exact_filters(can=builtin_bus_factory):\n    print('Test MCP Extended ID filters')\n    extended_matches = [Match(67639669, extended=True), Match(max_extended_id, extended=True)]\n    with can() as b, b.listen(extended_matches, timeout=0.1) as l:\n        mo = Message(id=67639669, extended=True, data=b'')\n        b.send(mo)\n        mi = l.receive()\n        assert mi, 'Exact extended filter match blocked'\n        mo = Message(id=max_extended_id, extended=True, data=b'')\n        b.send(mo)\n        mi = l.receive()\n        assert mi\n        mo = Message(id=67639685, extended=True, data=b'')\n        b.send(mo)\n        mi = l.receive()\n        assert not mi\n        mo = Message(id=max_extended_id - 1, extended=True, data=b'')\n        b.send(mo)\n        mi = l.receive()\n        assert not mi, 'ID %x not blocked by filters & masks' % (max_extended_id - 1)\n\n# Usage example:\n    test_suite.append(test_mcp_standard_id_exact_filters)\n    test_suite.append(test_mcp_standard_id_masked_filters)\n    test_suite.append(test_mcp_extended_id_exact_filters)\n    test_suite.append(test_mcp_extended_id_masked_filters)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp2515/examples/mcp2515_canio_test.py",
      "library": "mcp2515",
      "type": "example",
      "file_name": "mcp2515_canio_test.py",
      "chunk_type": "function",
      "function_name": "test_mcp_extended_id_exact_filters"
    }
  },
  {
    "content": "\n\ndef test_mcp_extended_id_masked_filters(can=builtin_bus_factory):\n    print('Test MCP Extended ID filters')\n    extended_matches = [Match(536857342, mask=65535, extended=True), Match(200208384, mask=536866816, extended=True)]\n    with can() as b, b.listen(extended_matches, timeout=0.1) as l:\n        mo = Message(id=536857342, extended=True, data=b'')\n        b.send(mo)\n        mi = l.receive()\n        assert mi, 'Exact extended filter match blocked'\n        mo = Message(id=200208384, extended=True, data=b'')\n        b.send(mo)\n        mi = l.receive()\n        assert mi\n        mo = Message(id=536869631, extended=True, data=b'')\n        b.send(mo)\n        mi = l.receive()\n        assert not mi\n        mo = Message(id=12513024, extended=True, data=b'')\n        b.send(mo)\n        mi = l.receive()\n        assert not mi, 'ID %x not blocked by filters & masks' % (max_extended_id - 1)\n\n# Usage example:\n    test_suite.append(test_mcp_standard_id_masked_filters)\n    test_suite.append(test_mcp_extended_id_exact_filters)\n    test_suite.append(test_mcp_extended_id_masked_filters)\n\nfailures = []",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp2515/examples/mcp2515_canio_test.py",
      "library": "mcp2515",
      "type": "example",
      "file_name": "mcp2515_canio_test.py",
      "chunk_type": "function",
      "function_name": "test_mcp_extended_id_masked_filters"
    }
  },
  {
    "content": "\n\ndef test_bus_state(can=builtin_bus_factory):\n    print('Test `BusState` support')\n    with can() as b:\n        assert b.state in {BusState.BUS_OFF, BusState.ERROR_PASSIVE, BusState.ERROR_WARNING, BusState.ERROR_ACTIVE}\n\n# Usage example:\n    test_rtr_receive,\n    test_iter,\n    test_bus_state,\n    test_listener_deinit,\n]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp2515/examples/mcp2515_canio_test.py",
      "library": "mcp2515",
      "type": "example",
      "file_name": "mcp2515_canio_test.py",
      "chunk_type": "function",
      "function_name": "test_bus_state"
    }
  },
  {
    "content": "\n\ndef test_listener_deinit(can=builtin_bus_factory):\n    with can() as b:\n        extended_matches = [Match(536857342, mask=65535, extended=True), Match(200208384, mask=536866816, extended=True)]\n        standard_matches = [Match(1024, mask=2032), Match(1802, mask=1807)]\n        with b.listen(extended_matches, timeout=0.1) as l:\n            mo = Message(id=200208384, extended=True, data=b'')\n            b.send(mo)\n            mi = l.receive()\n            assert mi\n            mo = Message(id=536869631, extended=True, data=b'')\n            b.send(mo)\n            mi = l.receive()\n            assert not mi\n        with b.listen(standard_matches, timeout=0.1) as l:\n            mo = RemoteTransmissionRequest(id=1048, length=0)\n            b.send(mo)\n            mi = l.receive()\n            assert not mi, 'ID 0x418 not blocked by masked filter'\n            mo = RemoteTransmissionRequest(id=2042, length=0)\n            b.send(mo)\n            mi = l.receive()\n            assert mi, 'ID 0x7FA blocked by masked filter'\n\n# Usage example:\n    test_iter,\n    test_bus_state,\n    test_listener_deinit,\n]\n# set filter tests",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp2515/examples/mcp2515_canio_test.py",
      "library": "mcp2515",
      "type": "example",
      "file_name": "mcp2515_canio_test.py",
      "chunk_type": "function",
      "function_name": "test_listener_deinit"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport adafruit_as7341\n\nimport board\nimport adafruit_as7341\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_as7341.AS7341(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/as7341/examples/as7341_led_test.py",
      "library": "as7341",
      "type": "example",
      "file_name": "as7341_led_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport adafruit_as7341\n\nimport adafruit_as7341\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_as7341.AS7341(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/as7341/examples/as7341_led_test.py",
      "library": "as7341",
      "type": "example",
      "file_name": "as7341_led_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 Bryan Siepert, written for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\nfrom time import sleep\n\nimport board\n\nimport adafruit_as7341\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_as7341.AS7341(i2c)\n\nprint(\"out of init!\")\nprint(\"Current current is\")\nprint(sensor.led_current)\nprint(\"Setting current\")\nsensor.led_current = 50\nprint(\"enabling led\")\nsensor.led = True\nsleep(0.5)\nprint(\"disabling LED\")\nsensor.led = False\n\nprint(\"led status:\", sensor.led)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/as7341/examples/as7341_led_test.py",
      "library": "as7341",
      "type": "example",
      "file_name": "as7341_led_test.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.blink import Blink\nfrom adafruit_led_animation.animation.chase import Chase\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_led_animation.color import AMBER, JADE, PURPLE\nfrom adafruit_led_animation.sequence import AnimationSequence\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\npixel_num = 32\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_sequence.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_sequence.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.blink import Blink\nfrom adafruit_led_animation.animation.chase import Chase\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_led_animation.color import AMBER, JADE, PURPLE\nfrom adafruit_led_animation.sequence import AnimationSequence\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\npixel_num = 32\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)\nblink = Blink(pixels, speed=0.5, color=JADE)\ncomet = Comet(pixels, speed=0.01, color=PURPLE, tail_length=10, bounce=True)\nchase = Chase(pixels, speed=0.1, size=3, spacing=6, color=AMBER)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_sequence.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_sequence.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_bus_device.spi_device import SPIDevice\n\nA_DEVICE_REGISTER = 0xD0  # device id register on the BMP280 board\n# The follow is for SPI communications\ncs = digitalio.DigitalInOut(board.A2)\ncomm_port = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\ndevice = SPIDevice(comm_port, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/bus_device/examples/busdevice_read_register_spi_simpletest.py",
      "library": "bus_device",
      "type": "example",
      "file_name": "busdevice_read_register_spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_bus_device.spi_device import SPIDevice\n\nA_DEVICE_REGISTER = 0xD0  # device id register on the BMP280 board\n# The follow is for SPI communications\ncs = digitalio.DigitalInOut(board.A2)\ncomm_port = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\ndevice = SPIDevice(comm_port, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/bus_device/examples/busdevice_read_register_spi_simpletest.py",
      "library": "bus_device",
      "type": "example",
      "file_name": "busdevice_read_register_spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport busio\nimport digitalio\n\nfrom adafruit_bus_device.spi_device import SPIDevice\n\nA_DEVICE_REGISTER = 0xD0  # device id register on the BMP280 board\n\n# The follow is for SPI communications\ncs = digitalio.DigitalInOut(board.A2)\ncomm_port = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\ndevice = SPIDevice(comm_port, cs)\n\nwith device as bus_device:\n    bus_device.write(bytes([A_DEVICE_REGISTER]))\n    result = bytearray(1)\n    bus_device.readinto(result)\n\nprint(\"\".join(f\"{x:02x}\" for x in result))\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/bus_device/examples/busdevice_read_register_spi_simpletest.py",
      "library": "bus_device",
      "type": "example",
      "file_name": "busdevice_read_register_spi_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_node1_ack.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_node1_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_node1_ack.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_node1_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\n# uncommnet the desired import and rfm initialization depending on the radio boards being used",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_node1_ack.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_node1_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_aw9523\n\nimport board\nimport busio\nimport adafruit_aw9523\ni2c = busio.I2C(board.SCL, board.SDA)\naw = adafruit_aw9523.AW9523(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/aw9523/examples/aw9523_set_all_outputs.py",
      "library": "aw9523",
      "type": "example",
      "file_name": "aw9523_set_all_outputs.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_aw9523\n\nimport busio\nimport adafruit_aw9523\ni2c = busio.I2C(board.SCL, board.SDA)\naw = adafruit_aw9523.AW9523(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/aw9523/examples/aw9523_set_all_outputs.py",
      "library": "aw9523",
      "type": "example",
      "file_name": "aw9523_set_all_outputs.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2020 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport busio\n\nimport adafruit_aw9523\n\ni2c = busio.I2C(board.SCL, board.SDA)\naw = adafruit_aw9523.AW9523(i2c)\nprint(\"Found AW9523\")\n\n# Set all pins to outputs\naw.directions = 0xFFFF\n\nwhile True:\n    # write all outputs, flipping each pin on and off\n    aw.outputs = 0x5A5A\n    time.sleep(0.1)\n    aw.outputs = 0xA5A5\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/aw9523/examples/aw9523_set_all_outputs.py",
      "library": "aw9523",
      "type": "example",
      "file_name": "aw9523_set_all_outputs.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom analogio import AnalogIn\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_analog_in.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_analog_in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom analogio import AnalogIn\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_analog_in.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_analog_in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom analogio import AnalogIn\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_analog_in.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_analog_in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom analogio import AnalogIn\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_analog_in.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_analog_in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom analogio import AnalogIn\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_analog_in.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_analog_in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom analogio import AnalogIn\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_analog_in.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_analog_in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom analogio import AnalogIn\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_analog_in.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_analog_in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom analogio import AnalogIn\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_analog_in.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_analog_in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom analogio import AnalogIn\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n    # If no 'light' feed exists, create one\n    light_feed = io.create_new_feed(\"light\")\n# Set up an ADC\nadc = AnalogIn(board.A0)\nSENSOR_DELAY = 30",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_analog_in.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_analog_in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom rainbowio import colorwheel\nimport neopixel\n\nimport neopixel\nNUMPIXELS = 12  # Update this to match the number of LEDs.\nSPEED = 0.05  # Increase to slow down the rainbow. Decrease to speed it up.\nBRIGHTNESS = 0.2  # A number between 0.0 and 1.0, where 0.0 is off, and 1.0 is max.\nPIN = board.A3  # This is the default pin on the 5x5 NeoPixel Grid BFF.\npixels = neopixel.NeoPixel(PIN, NUMPIXELS, brightness=BRIGHTNESS, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopixel/examples/neopixel_rainbowio_simpletest.py",
      "library": "neopixel",
      "type": "example",
      "file_name": "neopixel_rainbowio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom rainbowio import colorwheel\nimport neopixel\n\nNUMPIXELS = 12  # Update this to match the number of LEDs.\nSPEED = 0.05  # Increase to slow down the rainbow. Decrease to speed it up.\nBRIGHTNESS = 0.2  # A number between 0.0 and 1.0, where 0.0 is off, and 1.0 is max.\nPIN = board.A3  # This is the default pin on the 5x5 NeoPixel Grid BFF.\npixels = neopixel.NeoPixel(PIN, NUMPIXELS, brightness=BRIGHTNESS, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopixel/examples/neopixel_rainbowio_simpletest.py",
      "library": "neopixel",
      "type": "example",
      "file_name": "neopixel_rainbowio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom rainbowio import colorwheel\nimport neopixel\n\ndef rainbow_cycle(wait):\n    for color in range(255):\n        for pixel in range(len(pixels)):\n            pixel_index = pixel * 256 // len(pixels) + color * 5\n            pixels[pixel] = colorwheel(pixel_index & 255)\n        pixels.show()\n        time.sleep(wait)\n\n# Usage example:\n\nwhile True:\n    rainbow_cycle(SPEED)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopixel/examples/neopixel_rainbowio_simpletest.py",
      "library": "neopixel",
      "type": "example",
      "file_name": "neopixel_rainbowio_simpletest.py",
      "chunk_type": "function",
      "function_name": "rainbow_cycle"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2022 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nfrom rainbowio import colorwheel\n\nimport neopixel\n\nNUMPIXELS = 12  # Update this to match the number of LEDs.\nSPEED = 0.05  # Increase to slow down the rainbow. Decrease to speed it up.\nBRIGHTNESS = 0.2  # A number between 0.0 and 1.0, where 0.0 is off, and 1.0 is max.\nPIN = board.A3  # This is the default pin on the 5x5 NeoPixel Grid BFF.\n\npixels = neopixel.NeoPixel(PIN, NUMPIXELS, brightness=BRIGHTNESS, auto_write=False)\n\n\ndef rainbow_cycle(wait):\n    for color in range(255):\n        for pixel in range(len(pixels)):\n            pixel_index = (pixel * 256 // len(pixels)) + color * 5\n            pixels[pixel] = colorwheel(pixel_index & 255)\n        pixels.show()\n        time.sleep(wait)\n\n\nwhile True:\n    rainbow_cycle(SPEED)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopixel/examples/neopixel_rainbowio_simpletest.py",
      "library": "neopixel",
      "type": "example",
      "file_name": "neopixel_rainbowio_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_ads1x15.ads1015 as ADS\nfrom adafruit_ads1x15.analog_in import AnalogIn\n\nimport adafruit_ads1x15.ads1015 as ADS\n# Create the I2C bus\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create the ADC object using the I2C bus\nads = ADS.ADS1015(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ads1x15/examples/ads1x15_simpletest.py",
      "library": "ads1x15",
      "type": "example",
      "file_name": "ads1x15_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport busio\n\nimport adafruit_ads1x15.ads1015 as ADS\nfrom adafruit_ads1x15.analog_in import AnalogIn\n\n# Create the I2C bus\ni2c = busio.I2C(board.SCL, board.SDA)\n\n# Create the ADC object using the I2C bus\nads = ADS.ADS1015(i2c)\n\n# Create single-ended input on channel 0\nchan = AnalogIn(ads, ADS.P0)\n\n# Create differential input between channel 0 and 1\n# chan = AnalogIn(ads, ADS.P0, ADS.P1)\n\nprint(\"{:>5}\\t{:>5}\".format(\"raw\", \"v\"))\n\nwhile True:\n    print(f\"{chan.value:>5}\\t{chan.voltage:>5.3f}\")\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ads1x15/examples/ads1x15_simpletest.py",
      "library": "ads1x15",
      "type": "example",
      "file_name": "ads1x15_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_tca8418 import TCA8418\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntca = TCA8418(i2c)\n# get a 'digitalio' like pin from the tca",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca8418/examples/tca8418_digitalio_blink.py",
      "library": "tca8418",
      "type": "example",
      "file_name": "tca8418_digitalio_blink.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2022 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\n\nfrom adafruit_tca8418 import TCA8418\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntca = TCA8418(i2c)\n\n# get a 'digitalio' like pin from the tca\nled = tca.get_pin(TCA8418.R0)\n\n# Setup R0 as an output that's at a low logic level default\nled.switch_to_output(value=False)\n\nwhile True:\n    led.value = True\n    time.sleep(0.2)\n    led.value = False\n    time.sleep(0.2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca8418/examples/tca8418_digitalio_blink.py",
      "library": "tca8418",
      "type": "example",
      "file_name": "tca8418_digitalio_blink.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_max1704x\n\nimport board\nimport adafruit_max1704x\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmax17 = adafruit_max1704x.MAX17048(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max1704x/examples/max1704x_simpletest.py",
      "library": "max1704x",
      "type": "example",
      "file_name": "max1704x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_max1704x\n\nimport adafruit_max1704x\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmax17 = adafruit_max1704x.MAX17048(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max1704x/examples/max1704x_simpletest.py",
      "library": "max1704x",
      "type": "example",
      "file_name": "max1704x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2022 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\n\nimport adafruit_max1704x\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmax17 = adafruit_max1704x.MAX17048(i2c)\n\nprint(\n    \"Found MAX1704x with chip version\",\n    hex(max17.chip_version),\n    \"and id\",\n    hex(max17.chip_id),\n)\n\n# Quick starting allows an instant 'auto-calibration' of the battery. However, its a bad idea\n# to do this right when the battery is first plugged in or if there's a lot of load on the battery\n# so uncomment only if you're sure you want to 'reset' the chips charge calculator.\n# print(\"Quick starting\")\n# max17.quick_start = True\n\nwhile True:\n    print(f\"Battery voltage: {max17.cell_voltage:.2f} Volts\")\n    print(f\"Battery state  : {max17.cell_percent:.1f} %\")\n    print(\"\")\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max1704x/examples/max1704x_simpletest.py",
      "library": "max1704x",
      "type": "example",
      "file_name": "max1704x_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\n# built-in, silkscreen labelled SPI bus\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ntft_rst = board.D9",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_172x320_1.47_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_172x320_1.47_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\n# built-in, silkscreen labelled SPI bus\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ntft_rst = board.D9\n# If using a Raspberry Pi Pico or Pico-w",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_172x320_1.47_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_172x320_1.47_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# built-in, silkscreen labelled SPI bus\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ntft_rst = board.D9\n# If using a Raspberry Pi Pico or Pico-w\n# Uncomment the below code to use GP (General Purpose) pins",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_172x320_1.47_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_172x320_1.47_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# built-in, silkscreen labelled SPI bus\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ntft_rst = board.D9\n# If using a Raspberry Pi Pico or Pico-w\n# Uncomment the below code to use GP (General Purpose) pins\n# instead of D (Digital)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_172x320_1.47_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_172x320_1.47_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import gc\nimport time\nimport board\nimport displayio\nfrom adafruit_display_shapes.circle import Circle\n\n# use built in display (MagTag, PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\n# Make the display context\nmain_group = displayio.Group()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-shapes/examples/display_shapes_circle_animation.py",
      "library": "display-shapes",
      "type": "example",
      "file_name": "display_shapes_circle_animation.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_ina260 import INA260, AveragingCount\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nina260 = INA260(i2c)\n# Raise the averaging count to a larger number to smooth out the results",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ina260/examples/ina260_averaging.py",
      "library": "ina260",
      "type": "example",
      "file_name": "ina260_averaging.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport adafruit_ssd1322\n\nimport adafruit_ssd1322\n# This pinout works on a Metro and may need to be altered for other boards.\nspi = busio.SPI(board.SCL, board.SDA)\ntft_cs = board.D6\ntft_dc = board.D9\ntft_reset = board.D5",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1322/examples/ssd1322_gamma.py",
      "library": "ssd1322",
      "type": "example",
      "file_name": "ssd1322_gamma.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport adafruit_ssd1322\n\n# This pinout works on a Metro and may need to be altered for other boards.\nspi = busio.SPI(board.SCL, board.SDA)\ntft_cs = board.D6\ntft_dc = board.D9\ntft_reset = board.D5\ndisplay_bus = fourwire.FourWire(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1322/examples/ssd1322_gamma.py",
      "library": "ssd1322",
      "type": "example",
      "file_name": "ssd1322_gamma.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport adafruit_ssd1322\n\n# This pinout works on a Metro and may need to be altered for other boards.\nspi = busio.SPI(board.SCL, board.SDA)\ntft_cs = board.D6\ntft_dc = board.D9\ntft_reset = board.D5\ndisplay_bus = fourwire.FourWire(\n    spi, command=tft_dc, chip_select=tft_cs, reset=tft_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1322/examples/ssd1322_gamma.py",
      "library": "ssd1322",
      "type": "example",
      "file_name": "ssd1322_gamma.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport adafruit_ssd1322\n\n# This pinout works on a Metro and may need to be altered for other boards.\nspi = busio.SPI(board.SCL, board.SDA)\ntft_cs = board.D6\ntft_dc = board.D9\ntft_reset = board.D5\ndisplay_bus = fourwire.FourWire(\n    spi, command=tft_dc, chip_select=tft_cs, reset=tft_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1322/examples/ssd1322_gamma.py",
      "library": "ssd1322",
      "type": "example",
      "file_name": "ssd1322_gamma.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport adafruit_ssd1322\n\ndisplay_bus = fourwire.FourWire(\n    spi, command=tft_dc, chip_select=tft_cs, reset=tft_reset, baudrate=1000000\ndisplay = adafruit_ssd1322.SSD1322(display_bus, width=256, height=64, colstart=28)\ng = displayio.Group()\ndimension = min(display.width, display.height)\ncolor_count = 16",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1322/examples/ssd1322_gamma.py",
      "library": "ssd1322",
      "type": "example",
      "file_name": "ssd1322_gamma.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport adafruit_ssd1322\n\nimport adafruit_ssd1322\n# This pinout works on a Metro and may need to be altered for other boards.\nspi = busio.SPI(board.SCL, board.SDA)\ntft_cs = board.D6\ntft_dc = board.D9\ntft_reset = board.D5",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1322/examples/ssd1322_simpletest.py",
      "library": "ssd1322",
      "type": "example",
      "file_name": "ssd1322_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport adafruit_ssd1322\n\n# This pinout works on a Metro and may need to be altered for other boards.\nspi = busio.SPI(board.SCL, board.SDA)\ntft_cs = board.D6\ntft_dc = board.D9\ntft_reset = board.D5\ndisplay_bus = fourwire.FourWire(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1322/examples/ssd1322_simpletest.py",
      "library": "ssd1322",
      "type": "example",
      "file_name": "ssd1322_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport adafruit_ssd1322\n\n# This pinout works on a Metro and may need to be altered for other boards.\nspi = busio.SPI(board.SCL, board.SDA)\ntft_cs = board.D6\ntft_dc = board.D9\ntft_reset = board.D5\ndisplay_bus = fourwire.FourWire(\n    spi, command=tft_dc, chip_select=tft_cs, reset=tft_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1322/examples/ssd1322_simpletest.py",
      "library": "ssd1322",
      "type": "example",
      "file_name": "ssd1322_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport adafruit_ssd1322\n\n# This pinout works on a Metro and may need to be altered for other boards.\nspi = busio.SPI(board.SCL, board.SDA)\ntft_cs = board.D6\ntft_dc = board.D9\ntft_reset = board.D5\ndisplay_bus = fourwire.FourWire(\n    spi, command=tft_dc, chip_select=tft_cs, reset=tft_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1322/examples/ssd1322_simpletest.py",
      "library": "ssd1322",
      "type": "example",
      "file_name": "ssd1322_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport adafruit_ssd1322\n\ndisplay_bus = fourwire.FourWire(\n    spi, command=tft_dc, chip_select=tft_cs, reset=tft_reset, baudrate=1000000\ndisplay = adafruit_ssd1322.SSD1322(display_bus, width=256, height=64, colstart=28)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1322/examples/ssd1322_simpletest.py",
      "library": "ssd1322",
      "type": "example",
      "file_name": "ssd1322_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport busio\nimport displayio\nimport fourwire\n\nimport adafruit_ssd1322\n\ndisplayio.release_displays()\n\n# This pinout works on a Metro and may need to be altered for other boards.\nspi = busio.SPI(board.SCL, board.SDA)\ntft_cs = board.D6\ntft_dc = board.D9\ntft_reset = board.D5\n\ndisplay_bus = fourwire.FourWire(\n    spi, command=tft_dc, chip_select=tft_cs, reset=tft_reset, baudrate=1000000\n)\ntime.sleep(1)\ndisplay = adafruit_ssd1322.SSD1322(display_bus, width=256, height=64, colstart=28)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1322/examples/ssd1322_simpletest.py",
      "library": "ssd1322",
      "type": "example",
      "file_name": "ssd1322_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport busio\nimport adafruit_ds1841\n\nimport board\nimport busio\nimport adafruit_ds1841\ni2c = busio.I2C(board.SCL, board.SDA)\nds1841 = adafruit_ds1841.DS1841(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds1841/examples/ds1841_blinka_simpletest.py",
      "library": "ds1841",
      "type": "example",
      "file_name": "ds1841_blinka_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport busio\nimport adafruit_ds1841\n\nimport busio\nimport adafruit_ds1841\ni2c = busio.I2C(board.SCL, board.SDA)\nds1841 = adafruit_ds1841.DS1841(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds1841/examples/ds1841_blinka_simpletest.py",
      "library": "ds1841",
      "type": "example",
      "file_name": "ds1841_blinka_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n####### NOTE ################\n# This example is meant for use with Blinka/rasberry Pi due to the lack of analog pins.\n# CircuitPython board users should run the \"ds1841_simpletest.py\" example\n\n# WIRING:\n# 1 Wire connecting  VCC to RH to make a voltage divider using the\n#   internal resistor between RH and RW\n\n# As this code runs, measure the voltage between ground and the RW (wiper) pin\n# with a multimeter. You should see the voltage change with each print statement.\nfrom time import sleep\n\nimport board\nimport busio\n\nimport adafruit_ds1841\n\ni2c = busio.I2C(board.SCL, board.SDA)\nds1841 = adafruit_ds1841.DS1841(i2c)\n\nwhile True:\n    ds1841.wiper = 127\n    print(\"Wiper value set to 127\")\n    sleep(5.0)\n\n    ds1841.wiper = 0\n    print(\"Wiper value set to 0\")\n    sleep(5.0)\n\n    ds1841.wiper = 63\n    print(\"Wiper value set to 63\")\n    sleep(5.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds1841/examples/ds1841_blinka_simpletest.py",
      "library": "ds1841",
      "type": "example",
      "file_name": "ds1841_blinka_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport displayio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_text import label\n\nimport displayio\ndisplay = board.DISPLAY\n# Font definition. You can choose any two fonts available in your system\nMEDIUM_FONT = bitmap_font.load_font(\"LeagueSpartan-Bold-16.bdf\")\nBIG_FONT = bitmap_font.load_font(\"LibreBodoniv2002-Bold-27.bdf\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-text/examples/display_text_label_align_baseline_comparison.py",
      "library": "display-text",
      "type": "example",
      "file_name": "display_text_label_align_baseline_comparison.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import serial\nimport adafruit_fingerprint\n\n# uart = serial.Serial(\"/dev/ttyS0\", baudrate=57600, timeout=1)\n# If using with Linux/Raspberry Pi 3 with pi3-disable-bte\n# uart = serial.Serial(\"/dev/ttyAMA0\", baudrate=57600, timeout=1)\nfinger = adafruit_fingerprint.Adafruit_Fingerprint(uart)\n##################################################",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_template_file_compare.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_template_file_compare.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import serial\nimport adafruit_fingerprint\n\n# Reset sensor\ndef sensor_reset():\n    \"\"\"Reset sensor\"\"\"\n    print('Resetting sensor...')\n    if finger.soft_reset() != adafruit_fingerprint.OK:\n        print('Unable to reset sensor!')\n    print('Sensor is reset.')\n\n# Usage example:\n        fingerprint_check_file()\n    elif c == \"r\":\n        sensor_reset()\n    else:\n        print(\"Invalid choice: Try again\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_template_file_compare.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_template_file_compare.py",
      "chunk_type": "function",
      "function_name": "sensor_reset"
    }
  },
  {
    "content": "import serial\nimport adafruit_fingerprint\n\n# Compares a new fingerprint template to an existing template stored in a file\nThis is useful when templates are stored centrally (i.e. in a database)\ndef fingerprint_check_file():\n    \"\"\"Compares a new fingerprint template to an existing template stored in a file\n    This is useful when templates are stored centrally (i.e. in a database)\"\"\"\n    print('Waiting for finger print...')\n    set_led_local(color=3, mode=1)\n    while finger.get_image() != adafruit_fingerprint.OK:\n        pass\n    print('Templating...')\n    if finger.image_2_tz(1) != adafruit_fingerprint.OK:\n        return False\n    print('Loading file template...', end='')\n    with open('template0.dat', 'rb') as file:\n        data = file.read()\n    finger.send_fpdata(list(data), 'char', 2)\n    i = finger.compare_templates()\n    if i == adafruit_fingerprint.OK:\n        set_led_local(color=2, speed=150, mode=6)\n        print('Fingerprint match template in file.')\n        return True\n    if i == adafruit_fingerprint.NOMATCH:\n        set_led_local(color=1, mode=2, speed=20, cycles=10)\n        print('Templates do not match!')\n    else:\n        print('Other error!')\n    return False\n\n# Usage example:\n        enroll_save_to_file()\n    elif c == \"c\":\n        fingerprint_check_file()\n    elif c == \"r\":\n        sensor_reset()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_template_file_compare.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_template_file_compare.py",
      "chunk_type": "function",
      "function_name": "fingerprint_check_file"
    }
  },
  {
    "content": "import serial\nimport adafruit_fingerprint\n\n# Take a 2 finger images and template it, then store it in a file\ndef enroll_save_to_file():\n    \"\"\"Take a 2 finger images and template it, then store it in a file\"\"\"\n    set_led_local(color=3, mode=1)\n    for fingerimg in range(1, 3):\n        if fingerimg == 1:\n            print('Place finger on sensor...', end='')\n        else:\n            print('Place same finger again...', end='')\n        while True:\n            i = finger.get_image()\n            if i == adafruit_fingerprint.OK:\n                print('Image taken')\n                break\n            if i == adafruit_fingerprint.NOFINGER:\n                print('.', end='')\n            elif i == adafruit_fingerprint.IMAGEFAIL:\n                set_led_local(color=1, mode=2, speed=20, cycles=10)\n                print('Imaging error')\n                return False\n            else:\n                set_led_local(color=1, mode=2, speed=20, cycles=10)\n                print('Other error')\n                return False\n        print('Templating...', end='')\n        i = finger.image_2_tz(fingerimg)\n        if i == adafruit_fingerprint.OK:\n            print('Templated')\n        else:\n            if i == adafruit_fingerprint.IMAGEMESS:\n                set_led_local(color=1, mode=2, speed=20, cycles=10)\n                print('Image too messy')\n            elif i == adafruit_fingerprint.FEATUREFAIL:\n                set_led_local(color=1, mode=2, speed=20, cycles=10)\n                print('Could not identify features')\n            elif i == adafruit_fingerprint.INVALIDIMAGE:\n                set_led_local(color=1, mode=2, speed=20, cycles=10)\n                print('Image invalid')\n            else:\n                set_led_local(color=1, mode=2, speed=20, cycles=10)\n                print('Other error')\n            return False\n        if fingerimg == 1:\n            print('Remove finger')\n            while i != adafruit_fingerprint.NOFINGER:\n                i = finger.get_image()\n    print('Creating model...', end='')\n    i = finger.create_model()\n    if i == adafruit_fingerprint.OK:\n        print('Created')\n    else:\n        if i == adafruit_fingerprint.ENROLLMISMATCH:\n            set_led_local(color=1, mode=2, speed=20, cycles=10)\n            print('Prints did not match')\n        else:\n            set_led_local(color=1, mode=2, speed=20, cycles=10)\n            print('Other error')\n        return False\n    print('Downloading template...')\n    data = finger.get_fpdata('char', 1)\n    with open('template0.dat', 'wb') as file:\n        file.write(bytearray(data))\n    set_led_local(color=2, speed=150, mode=6)\n    print('Template is saved in template0.dat file.')\n    return True\n\n# Usage example:\n        raise SystemExit\n    if c == \"e\":\n        enroll_save_to_file()\n    elif c == \"c\":\n        fingerprint_check_file()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_template_file_compare.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_template_file_compare.py",
      "chunk_type": "function",
      "function_name": "enroll_save_to_file"
    }
  },
  {
    "content": "import serial\nimport adafruit_fingerprint\n\n# this is to make sure LED doesn't interfer with example\nrunning on models without LED support - needs testing\ndef set_led_local(color=1, mode=3, speed=128, cycles=0):\n    \"\"\"this is to make sure LED doesn't interfer with example\n    running on models without LED support - needs testing\"\"\"\n    try:\n        finger.set_led(color, mode, speed, cycles)\n    except Exception as exc:\n        print('INFO: Sensor les not support LED. Error:', str(exc))\n\n# Usage example:\n    This is useful when templates are stored centrally (i.e. in a database)\"\"\"\n    print(\"Waiting for finger print...\")\n    set_led_local(color=3, mode=1)\n    while finger.get_image() != adafruit_fingerprint.OK:\n        pass",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_template_file_compare.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_template_file_compare.py",
      "chunk_type": "function",
      "function_name": "set_led_local"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\n# Modify this if you have a different sized character LCD\nlcd_columns = 16\nlcd_rows = 2\n# Metro M0/M4 Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_custom_character_nyan_cat.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_custom_character_nyan_cat.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_columns = 16\nlcd_rows = 2\n# Metro M0/M4 Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_custom_character_nyan_cat.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_custom_character_nyan_cat.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_rows = 2\n# Metro M0/M4 Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nlcd_backlight = digitalio.DigitalInOut(board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_custom_character_nyan_cat.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_custom_character_nyan_cat.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\n# Metro M0/M4 Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nlcd_backlight = digitalio.DigitalInOut(board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_custom_character_nyan_cat.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_custom_character_nyan_cat.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\n# Metro M0/M4 Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nlcd_backlight = digitalio.DigitalInOut(board.D13)\n# Initialise the LCD class",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_custom_character_nyan_cat.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_custom_character_nyan_cat.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nlcd_backlight = digitalio.DigitalInOut(board.D13)\n# Initialise the LCD class\nlcd = characterlcd.Character_LCD_Mono(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_custom_character_nyan_cat.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_custom_character_nyan_cat.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nlcd_backlight = digitalio.DigitalInOut(board.D13)\n# Initialise the LCD class\nlcd = characterlcd.Character_LCD_Mono(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_custom_character_nyan_cat.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_custom_character_nyan_cat.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_wm8960 import WM8960, Input\n\nimport board\ncodec = WM8960(board.I2C())\ncodec.loopback = True\ncodec.input = Input.MIC1\ncodec.gain = 0.5\ncodec.volume = 1.0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wm8960/examples/wm8960_3d_enhance.py",
      "library": "wm8960",
      "type": "example",
      "file_name": "wm8960_3d_enhance.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom adafruit_ht16k33 import matrix\n\n# Import the HT16K33 LED matrix module.\n# Create the I2C interface.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create the matrix class.\n# This creates a 16x8 matrix:\nmatrix = matrix.Matrix16x8(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ht16k33/examples/ht16k33_matrix_simpletest.py",
      "library": "ht16k33",
      "type": "example",
      "file_name": "ht16k33_matrix_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_tmp117\n\nimport board\nimport adafruit_tmp117\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntmp117 = adafruit_tmp117.TMP117(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tmp117/examples/tmp117_offset_test.py",
      "library": "tmp117",
      "type": "example",
      "file_name": "tmp117_offset_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_tmp117\n\nimport adafruit_tmp117\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntmp117 = adafruit_tmp117.TMP117(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tmp117/examples/tmp117_offset_test.py",
      "library": "tmp117",
      "type": "example",
      "file_name": "tmp117_offset_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 Bryan Siepert, written for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\nimport time\n\nimport board\n\nimport adafruit_tmp117\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\ntmp117 = adafruit_tmp117.TMP117(i2c)\n\nprint(\"Temperature without offset: %.2f degrees C\" % tmp117.temperature)\ntmp117.temperature_offset = 10.0\nwhile True:\n    print(\"Temperature w/ offset: %.2f degrees C\" % tmp117.temperature)\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tmp117/examples/tmp117_offset_test.py",
      "library": "tmp117",
      "type": "example",
      "file_name": "tmp117_offset_test.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_displayio_layout.layouts.grid_layout import GridLayout\n\n# use built in display (PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\n# Make the display context\nmain_group = displayio.Group()\ndisplay.root_group = main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_gridlayout_simpletest.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_gridlayout_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import rp2pio\nimport adafruit_pioasm\n\ncode = adafruit_pioasm.Program('\\n.program uart_tx\\n.side_set 1 opt\\n\\n; An 8n1 UART transmit program.\\n; OUT pin 0 and side-set pin 0 are both mapped to UART TX pin.\\n\\n  pull side 1 [7] ; Assert stop bit, or stall with line in idle state\\n  set x, 7 side 0 [7] ; Preload bit counter, assert start bit for 8 clocks\\nbitloop: ; This loop will run 8 times (8n1 UART)\\n  out pins, 1 ; Shift 1 bit from OSR to the first OUT pin\\n  jmp x-- bitloop [6] ; Each loop iteration is 8 cycles.\\n\\n')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_txuart.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_txuart.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import rp2pio\nimport adafruit_pioasm\n\nclass TXUART:\n\n    def __init__(self, *, tx, baudrate=9600):\n        self.pio = rp2pio.StateMachine(code.assembled, first_out_pin=tx, first_sideset_pin=tx, frequency=8 * baudrate, initial_sideset_pin_state=1, initial_sideset_pin_direction=1, initial_out_pin_state=1, initial_out_pin_direction=1, **code.pio_kwargs)\n\n    @property\n    def timeout(self):\n        return 0\n\n    @property\n    def baudrate(self):\n        return self.pio.frequency // 8\n\n    @baudrate.setter\n    def baudrate(self, frequency):\n        self.pio.frequency = frequency * 8\n\n    def write(self, buf):\n        return self.pio.write(buf)\n\n# Usage example:\n\n\nclass TXUART:\n    def __init__(self, *, tx, baudrate=9600):\n        self.pio = rp2pio.StateMachine(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_txuart.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_txuart.py",
      "chunk_type": "function",
      "function_name": "TXUART"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nimport adafruit_miniesptool\n\nimport adafruit_miniesptool\nuart = busio.UART(board.TX, board.RX, baudrate=115200, timeout=1)\nresetpin = DigitalInOut(board.D5)\ngpio0pin = DigitalInOut(board.D6)\n# On ESP8266 we will 'sync' to the baudrate in initialization\nesptool = adafruit_miniesptool.miniesptool(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniesptool/examples/miniesptool_esp8266program.py",
      "library": "miniesptool",
      "type": "example",
      "file_name": "miniesptool_esp8266program.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nimport adafruit_miniesptool\n\nimport adafruit_miniesptool\nuart = busio.UART(board.TX, board.RX, baudrate=115200, timeout=1)\nresetpin = DigitalInOut(board.D5)\ngpio0pin = DigitalInOut(board.D6)\n# On ESP8266 we will 'sync' to the baudrate in initialization\nesptool = adafruit_miniesptool.miniesptool(\n    uart, gpio0pin, resetpin, flashsize=1024 * 1024, baudrate=256000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniesptool/examples/miniesptool_esp8266program.py",
      "library": "miniesptool",
      "type": "example",
      "file_name": "miniesptool_esp8266program.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nimport adafruit_miniesptool\n\nuart = busio.UART(board.TX, board.RX, baudrate=115200, timeout=1)\nresetpin = DigitalInOut(board.D5)\ngpio0pin = DigitalInOut(board.D6)\n# On ESP8266 we will 'sync' to the baudrate in initialization\nesptool = adafruit_miniesptool.miniesptool(\n    uart, gpio0pin, resetpin, flashsize=1024 * 1024, baudrate=256000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniesptool/examples/miniesptool_esp8266program.py",
      "library": "miniesptool",
      "type": "example",
      "file_name": "miniesptool_esp8266program.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nimport adafruit_miniesptool\n\nesptool = adafruit_miniesptool.miniesptool(uart, gpio0pin, resetpin, flashsize=1024 * 1024, baudrate=256000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniesptool/examples/miniesptool_esp8266program.py",
      "library": "miniesptool",
      "type": "example",
      "file_name": "miniesptool_esp8266program.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport busio\nfrom digitalio import DigitalInOut\n\nimport adafruit_miniesptool\n\nprint(\"ESP8266 mini prog\")\n\nuart = busio.UART(board.TX, board.RX, baudrate=115200, timeout=1)\nresetpin = DigitalInOut(board.D5)\ngpio0pin = DigitalInOut(board.D6)\n# On ESP8266 we will 'sync' to the baudrate in initialization\nesptool = adafruit_miniesptool.miniesptool(\n    uart, gpio0pin, resetpin, flashsize=1024 * 1024, baudrate=256000\n)\n\nesptool.debug = False\nesptool.sync()\n\nprint(\"Synced\")\nprint(esptool.chip_name)\nprint(\"MAC ADDR: \", [hex(i) for i in esptool.mac_addr])\nesptool.flash_file(\"esp8266/AT_firmware_1.6.2.0.bin\", 0x0)\n# 0x3FC000 esp_init_data_default_v05.bin\nesptool.flash_file(\"esp8266/esp_init_data_default_v05.bin\", 0x3FC000)\n# 0x3FE000 blank.bin\nesptool.flash_file(\"esp8266/blank.bin\", 0x3FE000)\nesptool.reset()\ntime.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniesptool/examples/miniesptool_esp8266program.py",
      "library": "miniesptool",
      "type": "example",
      "file_name": "miniesptool_esp8266program.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import microcontroller\nimport socketpool\nimport wifi\nfrom adafruit_httpserver import JSONResponse, Request, Server\n\n# Return the current CPU temperature, frequency, and voltage as JSON.\n@server.route('/cpu-information', append_slash=True)\ndef cpu_information_handler(request: Request):\n    \"\"\"\n    Return the current CPU temperature, frequency, and voltage as JSON.\n    \"\"\"\n    data = {'temperature': microcontroller.cpu.temperature, 'frequency': microcontroller.cpu.frequency, 'voltage': microcontroller.cpu.voltage}\n    return JSONResponse(request, data)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/httpserver/examples/httpserver_cpu_information.py",
      "library": "httpserver",
      "type": "example",
      "file_name": "httpserver_cpu_information.py",
      "chunk_type": "function",
      "function_name": "cpu_information_handler"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2022 Dan Halbert for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport microcontroller\nimport socketpool\nimport wifi\n\nfrom adafruit_httpserver import JSONResponse, Request, Server\n\npool = socketpool.SocketPool(wifi.radio)\nserver = Server(pool, debug=True)\n\n# (Optional) Allow cross-origin requests.\nserver.headers = {\n    \"Access-Control-Allow-Origin\": \"*\",\n}\n\n\n@server.route(\"/cpu-information\", append_slash=True)\ndef cpu_information_handler(request: Request):\n    \"\"\"\n    Return the current CPU temperature, frequency, and voltage as JSON.\n    \"\"\"\n\n    data = {\n        \"temperature\": microcontroller.cpu.temperature,\n        \"frequency\": microcontroller.cpu.frequency,\n        \"voltage\": microcontroller.cpu.voltage,\n    }\n\n    return JSONResponse(request, data)\n\n\nserver.serve_forever(str(wifi.radio.ipv4_address))\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/httpserver/examples/httpserver_cpu_information.py",
      "library": "httpserver",
      "type": "example",
      "file_name": "httpserver_cpu_information.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport adafruit_imageload\n\nimport adafruit_imageload\n# use built in display (PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\n# wait until the display is ready",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_magtag_simpletest.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_magtag_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport adafruit_imageload\n\nimage, palette = adafruit_imageload.load('images/magtag_2x2_test.bmp')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_magtag_simpletest.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_magtag_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nBasic imageload example script\nadapted for use on MagTag.\n\"\"\"\n\nimport time\n\nimport board\nimport displayio\n\nimport adafruit_imageload\n\n# use built in display (PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\n\n# wait until the display is ready\ntime.sleep(display.time_to_refresh)\n\nimage, palette = adafruit_imageload.load(\"images/magtag_2x2_test.bmp\")\n\ntile_grid = displayio.TileGrid(image, pixel_shader=palette)\n\n# scale 8 for full screen\ngroup = displayio.Group(scale=8)\ngroup.append(tile_grid)\n\n# show the group and refresh\ndisplay.root_group = group\ndisplay.refresh()\n\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_magtag_simpletest.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_magtag_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport displayio\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.line import Line\nfrom adafruit_display_shapes.polygon import Polygon\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.roundrect import RoundRect\nfrom adafruit_display_shapes.triangle import Triangle\n\n# use built in display (PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\n# Make the display context\nsplash = displayio.Group()\ndisplay.root_group = splash",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-shapes/examples/display_shapes_simpletest_magtag.py",
      "library": "display-shapes",
      "type": "example",
      "file_name": "display_shapes_simpletest_magtag.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_il0398\n\nimport adafruit_il0398\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0398/examples/il0398_4.2_color.py",
      "library": "il0398",
      "type": "example",
      "file_name": "il0398_4.2_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_il0398\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0398/examples/il0398_4.2_color.py",
      "library": "il0398",
      "type": "example",
      "file_name": "il0398_4.2_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_il0398\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0398/examples/il0398_4.2_color.py",
      "library": "il0398",
      "type": "example",
      "file_name": "il0398_4.2_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_il0398\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0398/examples/il0398_4.2_color.py",
      "library": "il0398",
      "type": "example",
      "file_name": "il0398_4.2_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_il0398\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0398/examples/il0398_4.2_color.py",
      "library": "il0398",
      "type": "example",
      "file_name": "il0398_4.2_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_il0398\n\ndisplay = adafruit_il0398.IL0398(display_bus, width=400, height=300, seconds_per_frame=20, highlight_color=16711680, busy_pin=epd_busy)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0398/examples/il0398_4.2_color.py",
      "library": "il0398",
      "type": "example",
      "file_name": "il0398_4.2_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_bluefruit_connect.color_packet import ColorPacket\nfrom adafruit_bluefruit_connect.packet import Packet\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_ble.services.nordic import UARTService\n\nble = BLERadio()\nuart_service = UARTService()\nadvertisement = ProvideServicesAdvertisement(uart_service)\npixels = neopixel.NeoPixel(board.NEOPIXEL, 10, brightness=0.1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_bluefruit_color_picker.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_bluefruit_color_picker.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport serial\nimport adafruit_fingerprint\n\n# uart = serial.Serial(\"/dev/ttyS0\", baudrate=57600, timeout=1)\n# If using with Linux/Raspberry Pi 3 with pi3-disable-bt\n# uart = serial.Serial(\"/dev/ttyAMA0\", baudrate=57600, timeout=1)\nfinger = adafruit_fingerprint.Adafruit_Fingerprint(uart)\n##################################################",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_simpletest_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_simpletest_rpi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport serial\nimport adafruit_fingerprint\n\n# Get a finger print image, template it, and see if it matches!\ndef get_fingerprint():\n    \"\"\"Get a finger print image, template it, and see if it matches!\"\"\"\n    print('Waiting for image...')\n    while finger.get_image() != adafruit_fingerprint.OK:\n        pass\n    print('Templating...')\n    if finger.image_2_tz(1) != adafruit_fingerprint.OK:\n        return False\n    print('Searching...')\n    if finger.finger_search() != adafruit_fingerprint.OK:\n        return False\n    return True\n\n# Usage example:\n        enroll_finger(get_num(finger.library_size))\n    if c == \"f\":\n        if get_fingerprint():\n            print(\"Detected #\", finger.finger_id, \"with confidence\", finger.confidence)\n        else:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_simpletest_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_simpletest_rpi.py",
      "chunk_type": "function",
      "function_name": "get_fingerprint"
    }
  },
  {
    "content": "import time\nimport serial\nimport adafruit_fingerprint\n\n# Get a finger print image, template it, and see if it matches!\nThis time, print out each error instead of just returning on failure\ndef get_fingerprint_detail():\n    \"\"\"Get a finger print image, template it, and see if it matches!\n    This time, print out each error instead of just returning on failure\"\"\"\n    print('Getting image...', end='')\n    i = finger.get_image()\n    if i == adafruit_fingerprint.OK:\n        print('Image taken')\n    else:\n        if i == adafruit_fingerprint.NOFINGER:\n            print('No finger detected')\n        elif i == adafruit_fingerprint.IMAGEFAIL:\n            print('Imaging error')\n        else:\n            print('Other error')\n        return False\n    print('Templating...', end='')\n    i = finger.image_2_tz(1)\n    if i == adafruit_fingerprint.OK:\n        print('Templated')\n    else:\n        if i == adafruit_fingerprint.IMAGEMESS:\n            print('Image too messy')\n        elif i == adafruit_fingerprint.FEATUREFAIL:\n            print('Could not identify features')\n        elif i == adafruit_fingerprint.INVALIDIMAGE:\n            print('Image invalid')\n        else:\n            print('Other error')\n        return False\n    print('Searching...', end='')\n    i = finger.finger_fast_search()\n    if i == adafruit_fingerprint.OK:\n        print('Found fingerprint!')\n        return True\n    else:\n        if i == adafruit_fingerprint.NOTFOUND:\n            print('No match found')\n        else:\n            print('Other error')\n        return False",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_simpletest_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_simpletest_rpi.py",
      "chunk_type": "function",
      "function_name": "get_fingerprint_detail"
    }
  },
  {
    "content": "import time\nimport serial\nimport adafruit_fingerprint\n\n# Take a 2 finger images and template it, then store in 'location'\ndef enroll_finger(location):\n    \"\"\"Take a 2 finger images and template it, then store in 'location'\"\"\"\n    for fingerimg in range(1, 3):\n        if fingerimg == 1:\n            print('Place finger on sensor...', end='')\n        else:\n            print('Place same finger again...', end='')\n        while True:\n            i = finger.get_image()\n            if i == adafruit_fingerprint.OK:\n                print('Image taken')\n                break\n            if i == adafruit_fingerprint.NOFINGER:\n                print('.', end='')\n            elif i == adafruit_fingerprint.IMAGEFAIL:\n                print('Imaging error')\n                return False\n            else:\n                print('Other error')\n                return False\n        print('Templating...', end='')\n        i = finger.image_2_tz(fingerimg)\n        if i == adafruit_fingerprint.OK:\n            print('Templated')\n        else:\n            if i == adafruit_fingerprint.IMAGEMESS:\n                print('Image too messy')\n            elif i == adafruit_fingerprint.FEATUREFAIL:\n                print('Could not identify features')\n            elif i == adafruit_fingerprint.INVALIDIMAGE:\n                print('Image invalid')\n            else:\n                print('Other error')\n            return False\n        if fingerimg == 1:\n            print('Remove finger')\n            time.sleep(1)\n            while i != adafruit_fingerprint.NOFINGER:\n                i = finger.get_image()\n    print('Creating model...', end='')\n    i = finger.create_model()\n    if i == adafruit_fingerprint.OK:\n        print('Created')\n    else:\n        if i == adafruit_fingerprint.ENROLLMISMATCH:\n            print('Prints did not match')\n        else:\n            print('Other error')\n        return False\n    print('Storing model #%d...' % location, end='')\n    i = finger.store_model(location)\n    if i == adafruit_fingerprint.OK:\n        print('Stored')\n    else:\n        if i == adafruit_fingerprint.BADLOCATION:\n            print('Bad storage location')\n        elif i == adafruit_fingerprint.FLASHERR:\n            print('Flash storage error')\n        else:\n            print('Other error')\n        return False\n    return True\n\n# Usage example:\n\n    if c == \"e\":\n        enroll_finger(get_num(finger.library_size))\n    if c == \"f\":\n        if get_fingerprint():",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_simpletest_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_simpletest_rpi.py",
      "chunk_type": "function",
      "function_name": "enroll_finger"
    }
  },
  {
    "content": "import time\nimport serial\nimport adafruit_fingerprint\n\n# Scan fingerprint then save image to filename.\ndef save_fingerprint_image(filename):\n    \"\"\"Scan fingerprint then save image to filename.\"\"\"\n    while finger.get_image():\n        pass\n    from PIL import Image\n    img = Image.new('L', (256, 288), 'white')\n    pixeldata = img.load()\n    mask = 15\n    result = finger.get_fpdata(sensorbuffer='image')\n    x = 0\n    y = 0\n    for i in range(len(result)):\n        pixeldata[x, y] = (int(result[i]) >> 4) * 17\n        x += 1\n        pixeldata[x, y] = (int(result[i]) & mask) * 17\n        if x == 255:\n            x = 0\n            y += 1\n        else:\n            x += 1\n    if not img.save(filename):\n        return True\n    return False\n\n# Usage example:\n            print(\"Failed to delete\")\n    if c == \"s\":\n        if save_fingerprint_image(\"fingerprint.png\"):\n            print(\"Fingerprint image saved\")\n        else:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_simpletest_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_simpletest_rpi.py",
      "chunk_type": "function",
      "function_name": "save_fingerprint_image"
    }
  },
  {
    "content": "import time\nimport serial\nimport adafruit_fingerprint\n\n# Use input() to get a valid number from 0 to the maximum size\nof the library. Retry till success!\ndef get_num(max_number):\n    \"\"\"Use input() to get a valid number from 0 to the maximum size\n    of the library. Retry till success!\"\"\"\n    i = -1\n    while i > max_number - 1 or i < 0:\n        try:\n            i = int(input(f'Enter ID # from 0-{max_number - 1}: '))\n        except ValueError:\n            pass\n    return i\n\n# Usage example:\n\n    if c == \"e\":\n        enroll_finger(get_num(finger.library_size))\n    if c == \"f\":\n        if get_fingerprint():",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_simpletest_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_simpletest_rpi.py",
      "chunk_type": "function",
      "function_name": "get_num"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_fram\n\nimport busio\nimport adafruit_fram\n## Create a FRAM object (default address used).\ni2c = busio.I2C(board.SCL, board.SDA)\nfram = adafruit_fram.FRAM_I2C(i2c)\n## Optional FRAM object with a different I2C address, as well\n## as a pin to control the hardware write protection ('WP'",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fram/examples/fram_i2c_simpletest.py",
      "library": "fram",
      "type": "example",
      "file_name": "fram_i2c_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_fram\n\nimport adafruit_fram\n## Create a FRAM object (default address used).\ni2c = busio.I2C(board.SCL, board.SDA)\nfram = adafruit_fram.FRAM_I2C(i2c)\n## Optional FRAM object with a different I2C address, as well\n## as a pin to control the hardware write protection ('WP'\n## pin on breakout). 'write_protected()' can be used",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fram/examples/fram_i2c_simpletest.py",
      "library": "fram",
      "type": "example",
      "file_name": "fram_i2c_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_motor import stepper\n\ncoils = (digitalio.DigitalInOut(board.D9), digitalio.DigitalInOut(board.D10), digitalio.DigitalInOut(board.D11), digitalio.DigitalInOut(board.D12))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/motor/examples/motor_stepper_digitalio.py",
      "library": "motor",
      "type": "example",
      "file_name": "motor_stepper_digitalio.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.pacman import Pacman\nfrom adafruit_led_animation.color import WHITE\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\nnum_pixels = 50\n# Create the NeoPixel object",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_pacman.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_pacman.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.pacman import Pacman\nfrom adafruit_led_animation.color import WHITE\n\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\nnum_pixels = 50\n# Create the NeoPixel object\nORDER = neopixel.GRB\npixels = neopixel.NeoPixel(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_pacman.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_pacman.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.pacman import Pacman\nfrom adafruit_led_animation.color import WHITE\n\npixels = neopixel.NeoPixel(pixel_pin, num_pixels, brightness=0.5, auto_write=False, pixel_order=ORDER)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_pacman.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_pacman.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2025 Jose D. Montoya\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nThis example animates a Pacman on a NeoPixel strip.\n\"\"\"\n\nimport board\nimport neopixel\n\nfrom adafruit_led_animation.animation.pacman import Pacman\nfrom adafruit_led_animation.color import WHITE\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\nnum_pixels = 50\n\n# Create the NeoPixel object\nORDER = neopixel.GRB\npixels = neopixel.NeoPixel(\n    pixel_pin,\n    num_pixels,\n    brightness=0.5,\n    auto_write=False,\n    pixel_order=ORDER,\n)\n\n# Create the Pacman animation object\npacman = Pacman(pixels, speed=0.1, color=WHITE)\n\n# Main loop\nwhile True:\n    pacman.animate()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_pacman.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_pacman.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_bh1750\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = adafruit_bh1750.BH1750(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bh1750/examples/bh1750_displayio_simpletest.py",
      "library": "bh1750",
      "type": "example",
      "file_name": "bh1750_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_bh1750\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = adafruit_bh1750.BH1750(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bh1750/examples/bh1750_displayio_simpletest.py",
      "library": "bh1750",
      "type": "example",
      "file_name": "bh1750_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_bh1750\n\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bh1750/examples/bh1750_displayio_simpletest.py",
      "library": "bh1750",
      "type": "example",
      "file_name": "bh1750_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_bh1750\n\n# add the label(s) to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bh1750/examples/bh1750_displayio_simpletest.py",
      "library": "bh1750",
      "type": "example",
      "file_name": "bh1750_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_displayio_ssd1306\n\nimport adafruit_displayio_ssd1306\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndisplay_bus = I2CDisplayBus(i2c, device_address=0x3C)\ndisplay = adafruit_displayio_ssd1306.SSD1306(display_bus, width=128, height=32)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_ssd1306/examples/displayio_ssd1306_featherwing.py",
      "library": "displayio_ssd1306",
      "type": "example",
      "file_name": "displayio_ssd1306_featherwing.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_displayio_ssd1306\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndisplay_bus = I2CDisplayBus(i2c, device_address=0x3C)\ndisplay = adafruit_displayio_ssd1306.SSD1306(display_bus, width=128, height=32)\n# Make the display context\nsplash = displayio.Group()\ndisplay.root_group = splash",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_ssd1306/examples/displayio_ssd1306_featherwing.py",
      "library": "displayio_ssd1306",
      "type": "example",
      "file_name": "displayio_ssd1306_featherwing.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ek79686\n\n# Used to ensure the display is free in CircuitPython\n# Define the pins needed for display use on the Metro\nspi = board.SPI()\nepd_cs = board.D10\nepd_dc = board.D9\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ek79686/examples/ek79686_simpletest.py",
      "library": "ek79686",
      "type": "example",
      "file_name": "ek79686_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ek79686\n\n# Used to ensure the display is free in CircuitPython\n# Define the pins needed for display use on the Metro\nspi = board.SPI()\nepd_cs = board.D10\nepd_dc = board.D9\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ek79686/examples/ek79686_simpletest.py",
      "library": "ek79686",
      "type": "example",
      "file_name": "ek79686_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ek79686\n\n# Define the pins needed for display use on the Metro\nspi = board.SPI()\nepd_cs = board.D10\nepd_dc = board.D9\nepd_reset = board.D5\nepd_busy = board.D6\n# Create the displayio connection to the display pins",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ek79686/examples/ek79686_simpletest.py",
      "library": "ek79686",
      "type": "example",
      "file_name": "ek79686_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ek79686\n\n# Define the pins needed for display use on the Metro\nspi = board.SPI()\nepd_cs = board.D10\nepd_dc = board.D9\nepd_reset = board.D5\nepd_busy = board.D6\n# Create the displayio connection to the display pins\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ek79686/examples/ek79686_simpletest.py",
      "library": "ek79686",
      "type": "example",
      "file_name": "ek79686_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ek79686\n\n# Define the pins needed for display use on the Metro\nspi = board.SPI()\nepd_cs = board.D10\nepd_dc = board.D9\nepd_reset = board.D5\nepd_busy = board.D6\n# Create the displayio connection to the display pins\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ek79686/examples/ek79686_simpletest.py",
      "library": "ek79686",
      "type": "example",
      "file_name": "ek79686_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ek79686\n\ndisplay = adafruit_ek79686.EK79686(display_bus, width=264, height=176, busy_pin=epd_busy, highlight_color=16711680, rotation=90)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ek79686/examples/ek79686_simpletest.py",
      "library": "ek79686",
      "type": "example",
      "file_name": "ek79686_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_motorkit import MotorKit\n\nimport board\nkit = MotorKit(i2c=board.I2C())\nkit.motor1.throttle = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/motorkit/examples/motorkit_dc_test.py",
      "library": "motorkit",
      "type": "example",
      "file_name": "motorkit_dc_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import atexit\nimport random\nimport threading\nimport time\nimport board\nfrom adafruit_motor import stepper as STEPPER\nfrom adafruit_motorkit import MotorKit\n\n# create a default object, no changes to I2C address or frequency\nkit = MotorKit(i2c=board.I2C())\n# create empty threads (these will hold the stepper 1 and 2 threads)\nst1 = threading.Thread()\nst2 = threading.Thread()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/motorkit/examples/motorkit_dual_stepper_test.py",
      "library": "motorkit",
      "type": "example",
      "file_name": "motorkit_dual_stepper_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import atexit\nimport random\nimport threading\nimport time\nimport board\nfrom adafruit_motor import stepper as STEPPER\nfrom adafruit_motorkit import MotorKit\n\ndef turnOffMotors():\n    kit.stepper1.release()\n    kit.stepper2.release()\n\n# Usage example:\n\n\natexit.register(turnOffMotors)\n\nstepstyles = [STEPPER.SINGLE, STEPPER.DOUBLE, STEPPER.INTERLEAVE, STEPPER.MICROSTEP]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/motorkit/examples/motorkit_dual_stepper_test.py",
      "library": "motorkit",
      "type": "example",
      "file_name": "motorkit_dual_stepper_test.py",
      "chunk_type": "function",
      "function_name": "turnOffMotors"
    }
  },
  {
    "content": "import atexit\nimport random\nimport threading\nimport time\nimport board\nfrom adafruit_motor import stepper as STEPPER\nfrom adafruit_motorkit import MotorKit\n\ndef stepper_worker(stepper, numsteps, direction, style):\n    for _ in range(numsteps):\n        stepper.onestep(direction=direction, style=style)\n\n# Usage example:\n        print(\"%d steps\" % randomsteps)\n        st1 = threading.Thread(\n            target=stepper_worker,\n            args=(\n                kit.stepper1,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/motorkit/examples/motorkit_dual_stepper_test.py",
      "library": "motorkit",
      "type": "example",
      "file_name": "motorkit_dual_stepper_test.py",
      "chunk_type": "function",
      "function_name": "stepper_worker"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_l3gd20\n\nimport board\nimport adafruit_l3gd20\n# Hardware I2C setup:\nI2C = board.I2C()  # uses board.SCL and board.SDA\n# I2C = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Initializes L3GD20 object using default range, 250dps\nSENSOR = adafruit_l3gd20.L3GD20_I2C(I2C)\n# Initialize L3GD20 object using a custom range and output data rate (ODR).",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/l3gd20/examples/l3gd20_simpletest.py",
      "library": "l3gd20",
      "type": "example",
      "file_name": "l3gd20_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_l3gd20\n\n# Hardware I2C setup:\nI2C = board.I2C()  # uses board.SCL and board.SDA\n# I2C = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Initializes L3GD20 object using default range, 250dps\nSENSOR = adafruit_l3gd20.L3GD20_I2C(I2C)\n# Initialize L3GD20 object using a custom range and output data rate (ODR).\n# SENSOR = adafruit_l3gd20.L3GD20_I2C(\n#    I2C, rng=adafruit_l3gd20.L3DS20_RANGE_500DPS, rate=adafruit_l3gd20.L3DS20_RATE_200HZ\n# )",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/l3gd20/examples/l3gd20_simpletest.py",
      "library": "l3gd20",
      "type": "example",
      "file_name": "l3gd20_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_tsl2591\n\nimport board\nimport adafruit_tsl2591\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Initialize the sensor.\nsensor = adafruit_tsl2591.TSL2591(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tsl2591/examples/tsl2591_simpletest.py",
      "library": "tsl2591",
      "type": "example",
      "file_name": "tsl2591_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_tsl2591\n\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Initialize the sensor.\nsensor = adafruit_tsl2591.TSL2591(i2c)\n# You can optionally change the gain and integration time:\n# sensor.gain = adafruit_tsl2591.GAIN_LOW (1x gain)\n# sensor.gain = adafruit_tsl2591.GAIN_MED (25x gain, the default)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tsl2591/examples/tsl2591_simpletest.py",
      "library": "tsl2591",
      "type": "example",
      "file_name": "tsl2591_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_pcd8544\n\nimport digitalio\nimport adafruit_pcd8544\n# Initialize SPI bus and control pins\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\ndc = digitalio.DigitalInOut(board.D6)  # data/command\ncs = digitalio.DigitalInOut(board.D5)  # Chip select\nreset = digitalio.DigitalInOut(board.D9)  # reset",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcd8544/examples/pcd8544_simpletest.py",
      "library": "pcd8544",
      "type": "example",
      "file_name": "pcd8544_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_pcd8544\n\nimport adafruit_pcd8544\n# Initialize SPI bus and control pins\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\ndc = digitalio.DigitalInOut(board.D6)  # data/command\ncs = digitalio.DigitalInOut(board.D5)  # Chip select\nreset = digitalio.DigitalInOut(board.D9)  # reset\ndisplay = adafruit_pcd8544.PCD8544(spi, dc, cs, reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcd8544/examples/pcd8544_simpletest.py",
      "library": "pcd8544",
      "type": "example",
      "file_name": "pcd8544_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_pcd8544\n\nimport adafruit_pcd8544\n# Initialize SPI bus and control pins\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\ndc = digitalio.DigitalInOut(board.D6)  # data/command\ncs = digitalio.DigitalInOut(board.D5)  # Chip select\nreset = digitalio.DigitalInOut(board.D9)  # reset\ndisplay = adafruit_pcd8544.PCD8544(spi, dc, cs, reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcd8544/examples/pcd8544_simpletest.py",
      "library": "pcd8544",
      "type": "example",
      "file_name": "pcd8544_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_pcd8544\n\n# Initialize SPI bus and control pins\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\ndc = digitalio.DigitalInOut(board.D6)  # data/command\ncs = digitalio.DigitalInOut(board.D5)  # Chip select\nreset = digitalio.DigitalInOut(board.D9)  # reset\ndisplay = adafruit_pcd8544.PCD8544(spi, dc, cs, reset)\ndisplay.bias = 4",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcd8544/examples/pcd8544_simpletest.py",
      "library": "pcd8544",
      "type": "example",
      "file_name": "pcd8544_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_pcd8544\n\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\ndc = digitalio.DigitalInOut(board.D6)  # data/command\ncs = digitalio.DigitalInOut(board.D5)  # Chip select\nreset = digitalio.DigitalInOut(board.D9)  # reset\ndisplay = adafruit_pcd8544.PCD8544(spi, dc, cs, reset)\ndisplay.bias = 4\ndisplay.contrast = 60",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcd8544/examples/pcd8544_simpletest.py",
      "library": "pcd8544",
      "type": "example",
      "file_name": "pcd8544_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_pcd8544\n\ndisplay.bias = 4\ndisplay.contrast = 60\n# Turn on the Backlight LED\nbacklight = digitalio.DigitalInOut(board.D10)  # backlight",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcd8544/examples/pcd8544_simpletest.py",
      "library": "pcd8544",
      "type": "example",
      "file_name": "pcd8544_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import array\nimport math\nimport time\nimport audiobusio\nimport audiocore\nimport board\nimport busio\nimport adafruit_pcm51xx\n\nimport busio\nimport adafruit_pcm51xx\n# Initialize I2C\ni2c = board.I2C()\n# Initialize PCM5122",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcm51xx/examples/pcm51xx_sinetone.py",
      "library": "pcm51xx",
      "type": "example",
      "file_name": "pcm51xx_sinetone.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import array\nimport math\nimport time\nimport audiobusio\nimport audiocore\nimport board\nimport busio\nimport adafruit_pcm51xx\n\n# Initialize I2C\ni2c = board.I2C()\n# Initialize PCM5122\npcm = adafruit_pcm51xx.PCM51XX(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcm51xx/examples/pcm51xx_sinetone.py",
      "library": "pcm51xx",
      "type": "example",
      "file_name": "pcm51xx_sinetone.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import array\nimport math\nimport time\nimport audiobusio\nimport audiocore\nimport board\nimport busio\nimport adafruit_pcm51xx\n\n# Unmute the DAC\npcm.mute = False\naudio = audiobusio.I2SOut(board.D9, board.D10, board.D11)\ntone_volume = 0.5  # Increase this to increase the volume of the tone.\nfrequency = 440  # Set this to the Hz of the tone you want to generate.\nlength = 8000 // frequency",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcm51xx/examples/pcm51xx_sinetone.py",
      "library": "pcm51xx",
      "type": "example",
      "file_name": "pcm51xx_sinetone.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mlx90393\n\nimport board\nimport adafruit_mlx90393\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90393/examples/mlx90393_temperature.py",
      "library": "mlx90393",
      "type": "example",
      "file_name": "mlx90393_temperature.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2023 Jose D. Montoya\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_mlx90393\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntry:\n    SENSOR = adafruit_mlx90393.MLX90393(i2c, gain=adafruit_mlx90393.GAIN_1X)\nexcept ValueError:\n    SENSOR = adafruit_mlx90393.MLX90393(i2c, gain=adafruit_mlx90393.GAIN_1X, address=0x18)\n\n\nwhile True:\n    temp = SENSOR.temperature\n\n    print(f\"Temperature: {temp} \u00b0C\")\n\n    # Display the status field if an error occurred, etc.\n    if SENSOR.last_status > adafruit_mlx90393.STATUS_OK:\n        SENSOR.display_status()\n    time.sleep(1.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90393/examples/mlx90393_temperature.py",
      "library": "mlx90393",
      "type": "example",
      "file_name": "mlx90393_temperature.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\n# set GPIO pins as necessary -- this example is for Raspberry Pi\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1_ack.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\n# set GPIO pins as necessary -- this example is for Raspberry Pi\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1_ack.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# set GPIO pins as necessary -- this example is for Raspberry Pi\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm9x = adafruit_rfm9x.RFM9x(spi, CS, RESET, RADIO_FREQ_MHZ)\n# set delay before sending ACK",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1_ack.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm9x = adafruit_rfm9x.RFM9x(spi, CS, RESET, RADIO_FREQ_MHZ)\n# set delay before sending ACK\nrfm9x.ack_delay = 0.1\n# set node addresses",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1_ack.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_tmp117 import TMP117, AverageCount\n\n# SPDX-License-Identifier: Unlicense\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntmp117 = TMP117(i2c)\n# uncomment different options below to see how it affects the reported temperature",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tmp117/examples/tmp117_single_measurement_test.py",
      "library": "tmp117",
      "type": "example",
      "file_name": "tmp117_single_measurement_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport board\nimport busio\nimport digitalio\nfrom adafruit_ra8875 import ra8875\nfrom adafruit_ra8875.ra8875 import color565\n\nWHITE = color565(255, 255, 255)\n# Configuration for CS and RST pins:\ncs_pin = digitalio.DigitalInOut(board.D9)\nrst_pin = digitalio.DigitalInOut(board.D10)\n# Config for display baudrate (default max is 6mhz):\nBAUDRATE = 8000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ra8875/examples/ra8875_bmptest.py",
      "library": "ra8875",
      "type": "example",
      "file_name": "ra8875_bmptest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport board\nimport busio\nimport digitalio\nfrom adafruit_ra8875 import ra8875\nfrom adafruit_ra8875.ra8875 import color565\n\nWHITE = color565(255, 255, 255)\n# Configuration for CS and RST pins:\ncs_pin = digitalio.DigitalInOut(board.D9)\nrst_pin = digitalio.DigitalInOut(board.D10)\n# Config for display baudrate (default max is 6mhz):\nBAUDRATE = 8000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ra8875/examples/ra8875_bmptest.py",
      "library": "ra8875",
      "type": "example",
      "file_name": "ra8875_bmptest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport board\nimport busio\nimport digitalio\nfrom adafruit_ra8875 import ra8875\nfrom adafruit_ra8875.ra8875 import color565\n\n# Config for display baudrate (default max is 6mhz):\nBAUDRATE = 8000000\n# Setup SPI bus using hardware SPI:\nspi = busio.SPI(clock=board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Create and setup the RA8875 display:\ndisplay = ra8875.RA8875(spi, cs=cs_pin, rst=rst_pin, baudrate=BAUDRATE)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ra8875/examples/ra8875_bmptest.py",
      "library": "ra8875",
      "type": "example",
      "file_name": "ra8875_bmptest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport board\nimport busio\nimport digitalio\nfrom adafruit_ra8875 import ra8875\nfrom adafruit_ra8875.ra8875 import color565\n\ndef convert_555_to_565(rgb):\n    return (rgb & 32736) << 1 | 32 | rgb & 31\n\n# Usage example:\n                        break\n                    if self.bpp == 16:\n                        color = convert_555_to_565(line_data[i] | line_data[i + 1] << 8)\n                    if self.bpp in {24, 32}:\n                        color = color565(line_data[i + 2], line_data[i + 1], line_data[i])",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ra8875/examples/ra8875_bmptest.py",
      "library": "ra8875",
      "type": "example",
      "file_name": "ra8875_bmptest.py",
      "chunk_type": "function",
      "function_name": "convert_555_to_565"
    }
  },
  {
    "content": "import struct\nimport board\nimport busio\nimport digitalio\nfrom adafruit_ra8875 import ra8875\nfrom adafruit_ra8875.ra8875 import color565\n\nclass BMP:\n\n    def __init__(self, filename):\n        self.filename = filename\n        self.colors = None\n        self.data = 0\n        self.data_size = 0\n        self.bpp = 0\n        self.width = 0\n        self.height = 0\n        self.read_header()\n\n    def read_header(self):\n        if self.colors:\n            return\n        with open(self.filename, 'rb') as f:\n            f.seek(10)\n            self.data = int.from_bytes(f.read(4), 'little')\n            f.seek(18)\n            self.width = int.from_bytes(f.read(4), 'little')\n            self.height = int.from_bytes(f.read(4), 'little')\n            f.seek(28)\n            self.bpp = int.from_bytes(f.read(2), 'little')\n            f.seek(34)\n            self.data_size = int.from_bytes(f.read(4), 'little')\n            f.seek(46)\n            self.colors = int.from_bytes(f.read(4), 'little')\n\n    def draw(self, disp, x=0, y=0):\n        print(f'{self.width:d}x{self.height:d} image')\n        print(f'{self.bpp:d}-bit encoding detected')\n        line = 0\n        line_size = self.width * (self.bpp // 8)\n        if line_size % 4 != 0:\n            line_size += 4 - line_size % 4\n        current_line_data = b''\n        with open(self.filename, 'rb') as f:\n            f.seek(self.data)\n            disp.set_window(x, y, self.width, self.height)\n            for line in range(self.height):\n                current_line_data = b''\n                line_data = f.read(line_size)\n                for i in range(0, line_size, self.bpp // 8):\n                    if line_size - i < self.bpp // 8:\n                        break\n                    if self.bpp == 16:\n                        color = convert_555_to_565(line_data[i] | line_data[i + 1] << 8)\n                    if self.bpp in {24, 32}:\n                        color = color565(line_data[i + 2], line_data[i + 1], line_data[i])\n                    current_line_data = current_line_data + struct.pack('>H', color)\n                disp.setxy(x, self.height - line + y)\n                disp.push_pixels(current_line_data)\n            disp.set_window(0, 0, disp.width, disp.height)\n\n# Usage example:\n\n\nclass BMP:\n    def __init__(self, filename):\n        self.filename = filename",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ra8875/examples/ra8875_bmptest.py",
      "library": "ra8875",
      "type": "example",
      "file_name": "ra8875_bmptest.py",
      "chunk_type": "function",
      "function_name": "BMP"
    }
  },
  {
    "content": "import board\nfrom rainbowio import colorwheel\nfrom adafruit_seesaw import digitalio, neopixel, rotaryio, seesaw\n\n# For use with the STEMMA connector on QT Py RP2040\n# import busio\n# i2c = busio.I2C(board.SCL1, board.SDA1)\n# seesaw = seesaw.Seesaw(i2c, 0x36)\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nseesaw = seesaw.Seesaw(i2c, 0x36)\nencoder = rotaryio.IncrementalEncoder(seesaw)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_rotary_neopixel.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_rotary_neopixel.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom rainbowio import colorwheel\nfrom adafruit_seesaw import digitalio, neopixel, rotaryio, seesaw\n\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nseesaw = seesaw.Seesaw(i2c, 0x36)\nencoder = rotaryio.IncrementalEncoder(seesaw)\nswitch = digitalio.DigitalIO(seesaw, 24)\npixel = neopixel.NeoPixel(seesaw, 6, 1)\npixel.brightness = 0.5",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_rotary_neopixel.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_rotary_neopixel.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom rainbowio import colorwheel\nfrom adafruit_seesaw import digitalio, neopixel, rotaryio, seesaw\n\nencoder = rotaryio.IncrementalEncoder(seesaw)\nswitch = digitalio.DigitalIO(seesaw, 24)\npixel = neopixel.NeoPixel(seesaw, 6, 1)\npixel.brightness = 0.5\nlast_position = -1\ncolor = 0  # start at red",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_rotary_neopixel.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_rotary_neopixel.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_bno08x\nfrom adafruit_bno08x.i2c import BNO08X_I2C\n\nimport busio\nimport adafruit_bno08x\ni2c = busio.I2C(board.SCL, board.SDA, frequency=800000)\nbno = BNO08X_I2C(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno08x/examples/bno08x_more_reports.py",
      "library": "bno08x",
      "type": "example",
      "file_name": "bno08x_more_reports.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel\nimport adafruit_ht16k33.segments\n\nimport board\nimport neopixel\nimport adafruit_ht16k33.segments\ni2c = board.I2C()\nsegment_display = adafruit_ht16k33.segments.Seg14x4(i2c)\npixel_pin = board.NEOPIXEL\npixels = neopixel.NeoPixel(pixel_pin, 1, brightness=0.1, auto_write=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ht16k33/examples/ht16k33_segments_non_blocking_marquee.py",
      "library": "ht16k33",
      "type": "example",
      "file_name": "ht16k33_segments_non_blocking_marquee.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel\nimport adafruit_ht16k33.segments\n\nimport neopixel\nimport adafruit_ht16k33.segments\ni2c = board.I2C()\nsegment_display = adafruit_ht16k33.segments.Seg14x4(i2c)\npixel_pin = board.NEOPIXEL\npixels = neopixel.NeoPixel(pixel_pin, 1, brightness=0.1, auto_write=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ht16k33/examples/ht16k33_segments_non_blocking_marquee.py",
      "library": "ht16k33",
      "type": "example",
      "file_name": "ht16k33_segments_non_blocking_marquee.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel\nimport adafruit_ht16k33.segments\n\nimport adafruit_ht16k33.segments\ni2c = board.I2C()\nsegment_display = adafruit_ht16k33.segments.Seg14x4(i2c)\npixel_pin = board.NEOPIXEL\npixels = neopixel.NeoPixel(pixel_pin, 1, brightness=0.1, auto_write=True)\npixels[0] = 0xFF0000\nlast_blink = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ht16k33/examples/ht16k33_segments_non_blocking_marquee.py",
      "library": "ht16k33",
      "type": "example",
      "file_name": "ht16k33_segments_non_blocking_marquee.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel\nimport adafruit_ht16k33.segments\n\ni2c = board.I2C()\nsegment_display = adafruit_ht16k33.segments.Seg14x4(i2c)\npixel_pin = board.NEOPIXEL\npixels = neopixel.NeoPixel(pixel_pin, 1, brightness=0.1, auto_write=True)\npixels[0] = 0xFF0000\nlast_blink = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ht16k33/examples/ht16k33_segments_non_blocking_marquee.py",
      "library": "ht16k33",
      "type": "example",
      "file_name": "ht16k33_segments_non_blocking_marquee.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2023 Tim Cocks for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\"\"\"\nExample that uses Non-Blocking Marquee to scroll text on 14x4 segment\nwhile also blinking the on-board neopixel at a different rate from the\nmarquee scrolling.\n\"\"\"\n\nimport time\n\nimport board\nimport neopixel\n\nimport adafruit_ht16k33.segments\n\ni2c = board.I2C()\nsegment_display = adafruit_ht16k33.segments.Seg14x4(i2c)\n\npixel_pin = board.NEOPIXEL\npixels = neopixel.NeoPixel(pixel_pin, 1, brightness=0.1, auto_write=True)\n\npixels[0] = 0xFF0000\nlast_blink = 0\nwhile True:\n    now = time.monotonic()\n    if now > last_blink + 0.3:\n        if pixels[0] == (255, 0, 255):\n            pixels[0] = 0x00FF00\n        else:\n            pixels[0] = 0xFF00FF\n        last_blink = now\n    segment_display.non_blocking_marquee(\"CircuitPython <3\", delay=0.2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ht16k33/examples/ht16k33_segments_non_blocking_marquee.py",
      "library": "ht16k33",
      "type": "example",
      "file_name": "ht16k33_segments_non_blocking_marquee.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import socket as pool\nimport ssl\nimport adafruit_requests\n\nimport ssl\nimport adafruit_requests\n# Initialize a requests session\nrequests = adafruit_requests.Session(pool, ssl.create_default_context())\nJSON_GET_URL = \"https://httpbin.org/get\"\n# Define a custom header as a dict.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/cpython/requests_cpython_advanced.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_cpython_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport socket as pool\nimport ssl\n\nimport adafruit_requests\n\n# Initialize a requests session\nrequests = adafruit_requests.Session(pool, ssl.create_default_context())\n\nJSON_GET_URL = \"https://httpbin.org/get\"\n\n# Define a custom header as a dict.\nheaders = {\"user-agent\": \"blinka/1.0.0\"}\n\nprint(\"Fetching JSON data from %s...\" % JSON_GET_URL)\nwith requests.get(JSON_GET_URL, headers=headers) as response:\n    print(\"-\" * 60)\n    json_data = response.json()\n    headers = json_data[\"headers\"]\n    print(\"Response's Custom User-Agent Header: {0}\".format(headers[\"User-Agent\"]))\n    print(\"-\" * 60)\n\n    # Read Response's HTTP status code\n    print(\"Response HTTP Status Code: \", response.status_code)\n    print(\"-\" * 60)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/cpython/requests_cpython_advanced.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_cpython_advanced.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\nGATEWAY_ADDRESS = (192, 168, 0, 1)\nDNS_SERVER = (8, 8, 8, 8)\ncs = digitalio.DigitalInOut(board.D10)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialize ethernet interface without DHCP\neth = WIZNET5K(spi_bus, cs, is_dhcp=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_simpletest_manual_network.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_simpletest_manual_network.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\nDNS_SERVER = (8, 8, 8, 8)\ncs = digitalio.DigitalInOut(board.D10)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialize ethernet interface without DHCP\neth = WIZNET5K(spi_bus, cs, is_dhcp=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_simpletest_manual_network.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_simpletest_manual_network.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\n# Set network configuration\neth.ifconfig = (IP_ADDRESS, SUBNET_MASK, GATEWAY_ADDRESS, DNS_SERVER)\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(eth)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(eth)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_simpletest_manual_network.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_simpletest_manual_network.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\n# Set network configuration\neth.ifconfig = (IP_ADDRESS, SUBNET_MASK, GATEWAY_ADDRESS, DNS_SERVER)\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(eth)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(eth)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_simpletest_manual_network.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_simpletest_manual_network.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\neth.ifconfig = (IP_ADDRESS, SUBNET_MASK, GATEWAY_ADDRESS, DNS_SERVER)\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(eth)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(eth)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_simpletest_manual_network.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_simpletest_manual_network.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_bmp3xx\n\nimport adafruit_bmp3xx\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nbmp = adafruit_bmp3xx.BMP3XX_I2C(i2c)\nbmp.pressure_oversampling = 8\nbmp.temperature_oversampling = 2",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp3xx/examples/bmp3xx_displayio_simpletest.py",
      "library": "bmp3xx",
      "type": "example",
      "file_name": "bmp3xx_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_bmp3xx\n\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nbmp = adafruit_bmp3xx.BMP3XX_I2C(i2c)\nbmp.pressure_oversampling = 8\nbmp.temperature_oversampling = 2",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp3xx/examples/bmp3xx_displayio_simpletest.py",
      "library": "bmp3xx",
      "type": "example",
      "file_name": "bmp3xx_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_bmp3xx\n\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)\n# place the label in the middle of the screen with anchored positioning\ndisplay_output_label.anchor_point = (0, 0)\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2)\n# add the label to the main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp3xx/examples/bmp3xx_displayio_simpletest.py",
      "library": "bmp3xx",
      "type": "example",
      "file_name": "bmp3xx_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_bmp3xx\n\n# add the label to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp3xx/examples/bmp3xx_displayio_simpletest.py",
      "library": "bmp3xx",
      "type": "example",
      "file_name": "bmp3xx_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_icm20x import ICM20649, AccelRange, GyroRange\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\nism = ICM20649(i2c, address=0x69)\nism.accelerometer_range = AccelRange.RANGE_4G",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/icm20x/examples/icm20x_icm20649_data_rate_test.py",
      "library": "icm20x",
      "type": "example",
      "file_name": "icm20x_icm20649_data_rate_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\nssid = getenv(\"CIRCUITPY_WIFI_SSID\")\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\ncs = DigitalInOut(board.D10)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_eth.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_eth.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\ncs = DigitalInOut(board.D10)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_eth.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_eth.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef connected(client):\n    print('Connected to Adafruit IO!  Listening for DemoFeed changes...')\n    client.subscribe('DemoFeed')\n\n# Usage example:\n# Define callback functions which will be called when certain events happen.\ndef connected(client):\n    # Connected function will be called when the client is connected to Adafruit IO.\n    # This is a good place to subscribe to feed changes.  The client parameter\n    # passed to this function is the Adafruit IO MQTT client so you can make",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_eth.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_eth.py",
      "chunk_type": "function",
      "function_name": "connected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef subscribe(client, userdata, topic, granted_qos):\n    print(f'Subscribed to {topic} with QOS level {granted_qos}')\n\n# Usage example:\n\n# Example of using the Adafruit IO CircuitPython MQTT client\n# to subscribe to an Adafruit IO feed and publish random data\n# to be received by the feed.\nimport time",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_eth.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_eth.py",
      "chunk_type": "function",
      "function_name": "subscribe"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef unsubscribe(client, userdata, topic, pid):\n    print(f'Unsubscribed from {topic} with PID {pid}')\n\n# Usage example:\n\ndef unsubscribe(client, userdata, topic, pid):\n    # This method is called when the client unsubscribes from a feed.\n    print(f\"Unsubscribed from {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_eth.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_eth.py",
      "chunk_type": "function",
      "function_name": "unsubscribe"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef disconnected(client):\n    print('Disconnected from Adafruit IO!')\n\n# Usage example:\n# Connect the callback methods defined above to Adafruit IO\nio.on_connect = connected\nio.on_disconnect = disconnected\nio.on_subscribe = subscribe\nio.on_unsubscribe = unsubscribe",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_eth.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_eth.py",
      "chunk_type": "function",
      "function_name": "disconnected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef publish(client, userdata, topic, pid):\n    print(f'Published to {topic} with PID {pid}')\n    if userdata is not None:\n        print('Published User data: ', end='')\n        print(userdata)\n\n# Usage example:\n\n# Example of using the Adafruit IO CircuitPython MQTT client\n# to subscribe to an Adafruit IO feed and publish random data\n# to be received by the feed.\nimport time",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_eth.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_eth.py",
      "chunk_type": "function",
      "function_name": "publish"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef message(client, feed_id, payload):\n    print(f'Feed {feed_id} received new value: {payload}')\n\n# Usage example:\nio.on_subscribe = subscribe\nio.on_unsubscribe = unsubscribe\nio.on_message = message\nio.on_publish = publish\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_eth.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_eth.py",
      "chunk_type": "function",
      "function_name": "message"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n    # The feed_id parameter identifies the feed, and the payload parameter has\n    # the new value.\npool = adafruit_connection_manager.get_radio_socketpool(eth)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(eth)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_eth.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_eth.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n    # the new value.\npool = adafruit_connection_manager.get_radio_socketpool(eth)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(eth)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(\n    broker=\"io.adafruit.com\",",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_eth.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_eth.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_pn532.i2c import PN532_I2C\n\n# from adafruit_pn532.spi import PN532_SPI\n# from adafruit_pn532.uart import PN532_UART\n# I2C connection:\ni2c = busio.I2C(board.SCL, board.SDA)\n# Non-hardware\n# pn532 = PN532_I2C(i2c, debug=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pn532/examples/pn532_low_power.py",
      "library": "pn532",
      "type": "example",
      "file_name": "pn532_low_power.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_pn532.i2c import PN532_I2C\n\n# Non-hardware\n# pn532 = PN532_I2C(i2c, debug=False)\n# With I2C, we recommend connecting RSTPD_N (reset) to a digital pin for manual\n# harware reset\nreset_pin = DigitalInOut(board.D6)\n# On Raspberry Pi, you must also connect a pin to P32 \"H_Request\" for hardware\n# wakeup! this means we don't need to do the I2C clock-stretch thing\nreq_pin = DigitalInOut(board.D12)\npn532 = PN532_I2C(i2c, debug=False, reset=reset_pin, req=req_pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pn532/examples/pn532_low_power.py",
      "library": "pn532",
      "type": "example",
      "file_name": "pn532_low_power.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_pn532.i2c import PN532_I2C\n\n# With I2C, we recommend connecting RSTPD_N (reset) to a digital pin for manual\n# harware reset\nreset_pin = DigitalInOut(board.D6)\n# On Raspberry Pi, you must also connect a pin to P32 \"H_Request\" for hardware\n# wakeup! this means we don't need to do the I2C clock-stretch thing\nreq_pin = DigitalInOut(board.D12)\npn532 = PN532_I2C(i2c, debug=False, reset=reset_pin, req=req_pin)\n# SPI connection:\n# spi = busio.SPI(board.SCK, board.MOSI, board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pn532/examples/pn532_low_power.py",
      "library": "pn532",
      "type": "example",
      "file_name": "pn532_low_power.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_lsm6ds.ism330dhcx import ISM330DHCX\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = ISM330DHCX(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm6ds/examples/lsm6ds_ism330dhcx_simpletest.py",
      "library": "lsm6ds",
      "type": "example",
      "file_name": "lsm6ds_ism330dhcx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2020 Bryan Siepert for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\nimport time\n\nimport board\n\nfrom adafruit_lsm6ds.ism330dhcx import ISM330DHCX\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = ISM330DHCX(i2c)\n\nwhile True:\n    accel_x, accel_y, accel_z = sensor.acceleration\n    print(f\"Acceleration: X:{accel_x:.2f}, Y: {accel_y:.2f}, Z: {accel_z:.2f} m/s^2\")\n    gyro_x, gyro_y, gyro_z = sensor.gyro\n    print(f\"Gyro X:{gyro_x:.2f}, Y: {gyro_y:.2f}, Z: {gyro_z:.2f} radians/s\")\n    print(\"\")\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm6ds/examples/lsm6ds_ism330dhcx_simpletest.py",
      "library": "lsm6ds",
      "type": "example",
      "file_name": "lsm6ds_ism330dhcx_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport adafruit_mmc56x3\n\nimport board\nimport adafruit_mmc56x3\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_mmc56x3.MMC5603(i2c)\nsensor.data_rate = 10  # in Hz, from 1-255 or 1000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mmc56x3/examples/mmc56x3_continuous.py",
      "library": "mmc56x3",
      "type": "example",
      "file_name": "mmc56x3_continuous.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_mmc56x3\n\nimport adafruit_mmc56x3\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_mmc56x3.MMC5603(i2c)\nsensor.data_rate = 10  # in Hz, from 1-255 or 1000\nsensor.continuous_mode = True",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mmc56x3/examples/mmc56x3_continuous.py",
      "library": "mmc56x3",
      "type": "example",
      "file_name": "mmc56x3_continuous.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Display magnetometer data very quickly using the continuous data capture mode\"\"\"\n\nimport board\n\nimport adafruit_mmc56x3\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_mmc56x3.MMC5603(i2c)\n\nsensor.data_rate = 10  # in Hz, from 1-255 or 1000\nsensor.continuous_mode = True\n\nwhile True:\n    mag_x, mag_y, mag_z = sensor.magnetic\n    print(f\"X:{mag_x:10.2f}, Y:{mag_y:10.2f}, Z:{mag_z:10.2f} uT\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mmc56x3/examples/mmc56x3_continuous.py",
      "library": "mmc56x3",
      "type": "example",
      "file_name": "mmc56x3_continuous.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_ov2640\n\nimport board\nimport busio\nimport adafruit_ov2640\nbus = busio.I2C(scl=board.CAMERA_SIOC, sda=board.CAMERA_SIOD)\ncam = adafruit_ov2640.OV2640(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_ov2640\n\ncam = adafruit_ov2640.OV2640(bus, data_pins=board.CAMERA_DATA, clock=board.CAMERA_PCLK, vsync=board.CAMERA_VSYNC, href=board.CAMERA_HREF, mclk=board.CAMERA_XCLK, mclk_frequency=20000000, size=adafruit_ov2640.OV2640_SIZE_QVGA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_ov2640\n\npid = cam.product_id\nver = cam.product_version\nprint(f\"Detected pid={pid:x} ver={ver:x}\")\n# cam.test_pattern = True\ncam.colorspace = adafruit_ov2640.OV2640_COLOR_JPEG\nb = bytearray(cam.capture_buffer_size)\njpeg = cam.capture(b)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport storage\n\nfrom adafruit_pyoa import PYOA_Graphics\n\ntry:\n    try:\n        import sdcardio\n\n        sdcard = sdcardio.SDCard(board.SPI, board.SD_CS)\n    except ImportError:\n        import adafruit_sdcard\n        import digitalio\n\n        sdcard = adafruit_sdcard.SDCard(\n            board.SPI(),\n            digitalio.DigitalInOut(board.SD_CS),\n        )\n    vfs = storage.VfsFat(sdcard)\n    storage.mount(vfs, \"/sd\")\n    print(\"SD card found\")  # no biggie\nexcept OSError:\n    print(\"No SD card found\")  # no biggie\n\ngfx = PYOA_Graphics()\n\ngfx.load_game(\"/cyoa\")\ncurrent_card = 0  # start with first card\n\nwhile True:\n    print(\"Current card:\", current_card)\n    current_card = gfx.display_card(current_card)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pyoa/examples/pyoa_simpletest.py",
      "library": "pyoa",
      "type": "example",
      "file_name": "pyoa_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\nTEXT_COLOR = 0xFFFF00\n# Release any resources currently in use for the displays\ntft_cs = board.GP17\ntft_dc = board.GP16\nspi_mosi = board.GP19\nspi_clk = board.GP18\nspi = busio.SPI(spi_clk, spi_mosi)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x135_simpletest_Pimoroni_Pico_Display_Pack.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x135_simpletest_Pimoroni_Pico_Display_Pack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\ntft_cs = board.GP17\ntft_dc = board.GP16\nspi_mosi = board.GP19\nspi_clk = board.GP18\nspi = busio.SPI(spi_clk, spi_mosi)\nbacklight = board.GP20",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x135_simpletest_Pimoroni_Pico_Display_Pack.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x135_simpletest_Pimoroni_Pico_Display_Pack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\ntft_cs = board.GP17\ntft_dc = board.GP16\nspi_mosi = board.GP19\nspi_clk = board.GP18\nspi = busio.SPI(spi_clk, spi_mosi)\nbacklight = board.GP20",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x135_simpletest_Pimoroni_Pico_Display_Pack.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x135_simpletest_Pimoroni_Pico_Display_Pack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\ntft_cs = board.GP17\ntft_dc = board.GP16\nspi_mosi = board.GP19\nspi_clk = board.GP18\nspi = busio.SPI(spi_clk, spi_mosi)\nbacklight = board.GP20\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x135_simpletest_Pimoroni_Pico_Display_Pack.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x135_simpletest_Pimoroni_Pico_Display_Pack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\ntft_cs = board.GP17\ntft_dc = board.GP16\nspi_mosi = board.GP19\nspi_clk = board.GP18\nspi = busio.SPI(spi_clk, spi_mosi)\nbacklight = board.GP20\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x135_simpletest_Pimoroni_Pico_Display_Pack.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x135_simpletest_Pimoroni_Pico_Display_Pack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\ntft_cs = board.GP17\ntft_dc = board.GP16\nspi_mosi = board.GP19\nspi_clk = board.GP18\nspi = busio.SPI(spi_clk, spi_mosi)\nbacklight = board.GP20\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = ST7789(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x135_simpletest_Pimoroni_Pico_Display_Pack.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x135_simpletest_Pimoroni_Pico_Display_Pack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"This is a basic sensor node that uses the internal temperature sensor and reports it every 10\nseconds.\"\"\"\n\nimport time\n\nimport microcontroller\n\nimport adafruit_ble_broadcastnet\n\nprint(\"This is BroadcastNet sensor:\", adafruit_ble_broadcastnet.device_address)\n\nwhile True:\n    measurement = adafruit_ble_broadcastnet.AdafruitSensorMeasurement()\n    measurement.temperature = microcontroller.cpu.temperature\n    print(measurement)\n    adafruit_ble_broadcastnet.broadcast(measurement)\n    time.sleep(10)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_simpletest.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_vcnl4200\n\nimport board\nimport adafruit_vcnl4200\ni2c = board.I2C()\nsensor = adafruit_vcnl4200.Adafruit_VCNL4200(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4200/examples/vcnl4200_simpletest.py",
      "library": "vcnl4200",
      "type": "example",
      "file_name": "vcnl4200_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_vcnl4200\n\nimport adafruit_vcnl4200\ni2c = board.I2C()\nsensor = adafruit_vcnl4200.Adafruit_VCNL4200(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4200/examples/vcnl4200_simpletest.py",
      "library": "vcnl4200",
      "type": "example",
      "file_name": "vcnl4200_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2024 Liz Clark for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_vcnl4200\n\ni2c = board.I2C()\n\nsensor = adafruit_vcnl4200.Adafruit_VCNL4200(i2c)\n\nwhile True:\n    print(f\"Proximity is: {sensor.proximity}\")\n    print(f\"Ambient is: {sensor.lux}\")\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4200/examples/vcnl4200_simpletest.py",
      "library": "vcnl4200",
      "type": "example",
      "file_name": "vcnl4200_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nfrom adafruit_ble_eddystone import uid, url\n\nimport adafruit_ble\nradio = adafruit_ble.BLERadio()\n# Reuse the BLE address as our Eddystone instance id.\neddystone_uid = uid.EddystoneUID(radio.address_bytes)\neddystone_url = url.EddystoneURL(\"https://adafru.it/discord\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_eddystone/examples/ble_eddystone_simpletest.py",
      "library": "ble_eddystone",
      "type": "example",
      "file_name": "ble_eddystone_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"This example broadcasts our Mac Address as our Eddystone ID and a link to the Adafruit Discord\nserver.\"\"\"\n\nimport time\n\nimport adafruit_ble\n\nfrom adafruit_ble_eddystone import uid, url\n\nradio = adafruit_ble.BLERadio()\n\n# Reuse the BLE address as our Eddystone instance id.\neddystone_uid = uid.EddystoneUID(radio.address_bytes)\neddystone_url = url.EddystoneURL(\"https://adafru.it/discord\")\n\nwhile True:\n    # Alternate between advertising our ID and our URL.\n    radio.start_advertising(eddystone_uid)\n    time.sleep(0.5)\n    radio.stop_advertising()\n\n    radio.start_advertising(eddystone_url)\n    time.sleep(0.5)\n    radio.stop_advertising()\n\n    time.sleep(4)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_eddystone/examples/ble_eddystone_simpletest.py",
      "library": "ble_eddystone",
      "type": "example",
      "file_name": "ble_eddystone_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import datetime\nimport socket\nimport ssl\nfrom os import getenv\nfrom random import randint\nimport adafruit_requests\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\nssid = getenv(\"CIRCUITPY_WIFI_SSID\")\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\nrequests = adafruit_requests.Session(socket, ssl.create_default_context())\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_batch_cpython.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_batch_cpython.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_msa3xx import MSA301\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmsa = MSA301(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/msa301/examples/msa301_simpletest.py",
      "library": "msa301",
      "type": "example",
      "file_name": "msa301_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nfrom adafruit_msa3xx import MSA301\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmsa = MSA301(i2c)\n\nwhile True:\n    print(\"{} {} {}\".format(*msa.acceleration))\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/msa301/examples/msa301_simpletest.py",
      "library": "msa301",
      "type": "example",
      "file_name": "msa301_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ina260\n\nimport board\nimport adafruit_ina260\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nina260 = adafruit_ina260.INA260(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ina260/examples/ina260_simpletest.py",
      "library": "ina260",
      "type": "example",
      "file_name": "ina260_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ina260\n\nimport adafruit_ina260\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nina260 = adafruit_ina260.INA260(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ina260/examples/ina260_simpletest.py",
      "library": "ina260",
      "type": "example",
      "file_name": "ina260_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_ina260\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nina260 = adafruit_ina260.INA260(i2c)\nwhile True:\n    print(\n        f\"Current: {ina260.current:.2f} mA Voltage: {ina260.voltage:.2f} V Power:{ina260.power:.2f} mW\"  # noqa: E501\n    )\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ina260/examples/ina260_simpletest.py",
      "library": "ina260",
      "type": "example",
      "file_name": "ina260_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_motorkit import MotorKit\n\nimport board\nkit = MotorKit(i2c=board.I2C())",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/motorkit/examples/motorkit_stepper_simpletest.py",
      "library": "motorkit",
      "type": "example",
      "file_name": "motorkit_stepper_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Simple test for using adafruit_motorkit with a stepper motor\"\"\"\n\nimport time\n\nimport board\n\nfrom adafruit_motorkit import MotorKit\n\nkit = MotorKit(i2c=board.I2C())\n\nfor i in range(100):\n    kit.stepper1.onestep()\n    time.sleep(0.01)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/motorkit/examples/motorkit_stepper_simpletest.py",
      "library": "motorkit",
      "type": "example",
      "file_name": "motorkit_stepper_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import sys\nimport time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_ov7670 import OV7670, OV7670_COLOR_YUV, OV7670_SIZE_DIV16, OV7670_TEST_PATTERN_COLOR_BAR_FADE\n\ncam = OV7670(bus, data0=board.PCC_D0, clock=board.PCC_CLK, vsync=board.PCC_DEN1, href=board.PCC_DEN2, mclk=board.D29, shutdown=board.D39, reset=board.D38)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov7670/examples/ov7670_simpletest.py",
      "library": "ov7670",
      "type": "example",
      "file_name": "ov7670_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import turtle\n\nimport board\nturtle = turtle(board.DISPLAY)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_circle_hex.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_circle_hex.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\n\nfrom adafruit_turtle import turtle\n\nturtle = turtle(board.DISPLAY)\nturtle.pendown()\n\nfor _ in range(32):\n    turtle.circle(50, steps=6)\n    turtle.right(11.1111)\n\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_circle_hex.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_circle_hex.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"This uses the CircuitPlayground Bluefruit as a sensor node.\"\"\"\n\nimport time\n\nfrom adafruit_circuitplayground import cp\n\nimport adafruit_ble_broadcastnet\n\nprint(\"This is BroadcastNet sensor:\", adafruit_ble_broadcastnet.device_address)\n\nwhile True:\n    measurement = adafruit_ble_broadcastnet.AdafruitSensorMeasurement()\n\n    measurement.temperature = cp.temperature\n    measurement.sound_level = cp.sound_level\n    measurement.light = cp.light\n    measurement.value = cp.switch\n    # measurement.acceleration = cp.acceleration\n\n    print(measurement)\n    adafruit_ble_broadcastnet.broadcast(measurement)\n    time.sleep(60)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_cpb.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_cpb.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import adafruit_fancyled.adafruit_fancyled as fancyled\nimport board\nimport busio\nimport adafruit_tlc59711\n\n# spi_mosi.direction = digitalio.Direction.OUTPUT\n# spi_miso = digitalio.DigitalInOut(board.MISO)\n# spi_miso.direction = digitalio.Direction.INPUT\n# print((42 * '*') + \"\\n\" + \"init busio.SPI\")\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\n##########################################",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_fancyled.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_fancyled.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_fancyled.adafruit_fancyled as fancyled\nimport board\nimport busio\nimport adafruit_tlc59711\n\npixels = adafruit_tlc59711.TLC59711(spi=spi, pixel_count=NUM_LEDS)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_fancyled.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_fancyled.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom adafruit_tla202x import TLA2024\n\nimport board\nimport busio\ni2c = busio.I2C(board.SCL, board.SDA)\ntla = TLA2024(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tla202x/examples/tla202x_simpletest.py",
      "library": "tla202x",
      "type": "example",
      "file_name": "tla202x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 Bryan Siepert, written for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n# pylint:disable=no-member\nimport board\nimport busio\n\nfrom adafruit_tla202x import TLA2024\n\ni2c = busio.I2C(board.SCL, board.SDA)\ntla = TLA2024(i2c)\n\nfor i in range(4):\n    channel = i\n    tla.input_channel = channel\n    print(\"Channel\", channel, \":\", tla.voltage)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tla202x/examples/tla202x_simpletest.py",
      "library": "tla202x",
      "type": "example",
      "file_name": "tla202x_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\nimport adafruit_ssd1680\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.13_tricolor_breakout.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.13_tricolor_breakout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.13_tricolor_breakout.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.13_tricolor_breakout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.13_tricolor_breakout.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.13_tricolor_breakout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.13_tricolor_breakout.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.13_tricolor_breakout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.13_tricolor_breakout.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.13_tricolor_breakout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\ndisplay = adafruit_ssd1680.SSD1680(display_bus, width=250, height=122, highlight_color=16711680, rotation=270)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.13_tricolor_breakout.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.13_tricolor_breakout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_fingerprint\n\nimport busio\nimport adafruit_fingerprint\nled = DigitalInOut(board.D13)\nled.direction = Direction.OUTPUT\nuart = busio.UART(board.TX, board.RX, baudrate=57600)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_simpletest.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_fingerprint\n\nimport adafruit_fingerprint\nled = DigitalInOut(board.D13)\nled.direction = Direction.OUTPUT\nuart = busio.UART(board.TX, board.RX, baudrate=57600)\n# If using with a computer such as Linux/RaspberryPi, Mac, Windows with USB/serial converter:\n# import serial\n# uart = serial.Serial(\"/dev/ttyUSB0\", baudrate=57600, timeout=1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_simpletest.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_fingerprint\n\n# If using with Linux/Raspberry Pi and hardware UART:\n# import serial\n# uart = serial.Serial(\"/dev/ttyS0\", baudrate=57600, timeout=1)\nfinger = adafruit_fingerprint.Adafruit_Fingerprint(uart)\n##################################################",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_simpletest.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_fingerprint\n\n# Get a finger print image, template it, and see if it matches!\ndef get_fingerprint():\n    \"\"\"Get a finger print image, template it, and see if it matches!\"\"\"\n    print('Waiting for image...')\n    while finger.get_image() != adafruit_fingerprint.OK:\n        pass\n    print('Templating...')\n    if finger.image_2_tz(1) != adafruit_fingerprint.OK:\n        return False\n    print('Searching...')\n    if finger.finger_search() != adafruit_fingerprint.OK:\n        return False\n    return True\n\n# Usage example:\n        enroll_finger(get_num())\n    if c == \"f\":\n        if get_fingerprint():\n            print(\"Detected #\", finger.finger_id, \"with confidence\", finger.confidence)\n        else:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_simpletest.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_simpletest.py",
      "chunk_type": "function",
      "function_name": "get_fingerprint"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_fingerprint\n\n# Get a finger print image, template it, and see if it matches!\nThis time, print out each error instead of just returning on failure\ndef get_fingerprint_detail():\n    \"\"\"Get a finger print image, template it, and see if it matches!\n    This time, print out each error instead of just returning on failure\"\"\"\n    print('Getting image...', end='')\n    i = finger.get_image()\n    if i == adafruit_fingerprint.OK:\n        print('Image taken')\n    else:\n        if i == adafruit_fingerprint.NOFINGER:\n            print('No finger detected')\n        elif i == adafruit_fingerprint.IMAGEFAIL:\n            print('Imaging error')\n        else:\n            print('Other error')\n        return False\n    print('Templating...', end='')\n    i = finger.image_2_tz(1)\n    if i == adafruit_fingerprint.OK:\n        print('Templated')\n    else:\n        if i == adafruit_fingerprint.IMAGEMESS:\n            print('Image too messy')\n        elif i == adafruit_fingerprint.FEATUREFAIL:\n            print('Could not identify features')\n        elif i == adafruit_fingerprint.INVALIDIMAGE:\n            print('Image invalid')\n        else:\n            print('Other error')\n        return False\n    print('Searching...', end='')\n    i = finger.finger_fast_search()\n    if i == adafruit_fingerprint.OK:\n        print('Found fingerprint!')\n        return True\n    else:\n        if i == adafruit_fingerprint.NOTFOUND:\n            print('No match found')\n        else:\n            print('Other error')\n        return False",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_simpletest.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_simpletest.py",
      "chunk_type": "function",
      "function_name": "get_fingerprint_detail"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_fingerprint\n\n# Take a 2 finger images and template it, then store in 'location'\ndef enroll_finger(location):\n    \"\"\"Take a 2 finger images and template it, then store in 'location'\"\"\"\n    for fingerimg in range(1, 3):\n        if fingerimg == 1:\n            print('Place finger on sensor...', end='')\n        else:\n            print('Place same finger again...', end='')\n        while True:\n            i = finger.get_image()\n            if i == adafruit_fingerprint.OK:\n                print('Image taken')\n                break\n            if i == adafruit_fingerprint.NOFINGER:\n                print('.', end='')\n            elif i == adafruit_fingerprint.IMAGEFAIL:\n                print('Imaging error')\n                return False\n            else:\n                print('Other error')\n                return False\n        print('Templating...', end='')\n        i = finger.image_2_tz(fingerimg)\n        if i == adafruit_fingerprint.OK:\n            print('Templated')\n        else:\n            if i == adafruit_fingerprint.IMAGEMESS:\n                print('Image too messy')\n            elif i == adafruit_fingerprint.FEATUREFAIL:\n                print('Could not identify features')\n            elif i == adafruit_fingerprint.INVALIDIMAGE:\n                print('Image invalid')\n            else:\n                print('Other error')\n            return False\n        if fingerimg == 1:\n            print('Remove finger')\n            time.sleep(1)\n            while i != adafruit_fingerprint.NOFINGER:\n                i = finger.get_image()\n    print('Creating model...', end='')\n    i = finger.create_model()\n    if i == adafruit_fingerprint.OK:\n        print('Created')\n    else:\n        if i == adafruit_fingerprint.ENROLLMISMATCH:\n            print('Prints did not match')\n        else:\n            print('Other error')\n        return False\n    print('Storing model #%d...' % location, end='')\n    i = finger.store_model(location)\n    if i == adafruit_fingerprint.OK:\n        print('Stored')\n    else:\n        if i == adafruit_fingerprint.BADLOCATION:\n            print('Bad storage location')\n        elif i == adafruit_fingerprint.FLASHERR:\n            print('Flash storage error')\n        else:\n            print('Other error')\n        return False\n    return True\n\n# Usage example:\n\n    if c == \"e\":\n        enroll_finger(get_num())\n    if c == \"f\":\n        if get_fingerprint():",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_simpletest.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_simpletest.py",
      "chunk_type": "function",
      "function_name": "enroll_finger"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_fingerprint\n\n# Use input() to get a valid number from 1 to 127. Retry till success!\ndef get_num():\n    \"\"\"Use input() to get a valid number from 1 to 127. Retry till success!\"\"\"\n    i = 0\n    while i > 127 or i < 1:\n        try:\n            i = int(input('Enter ID # from 1-127: '))\n        except ValueError:\n            pass\n    return i\n\n# Usage example:\n\n    if c == \"e\":\n        enroll_finger(get_num())\n    if c == \"f\":\n        if get_fingerprint():",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_simpletest.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_simpletest.py",
      "chunk_type": "function",
      "function_name": "get_num"
    }
  },
  {
    "content": "import socket as pool\nimport ssl\nimport adafruit_requests\n\nimport ssl\nimport adafruit_requests\n# Initialize a requests session\nrequests = adafruit_requests.Session(pool, ssl.create_default_context())\nTEXT_URL = \"http://wifitest.adafruit.com/testwifi/index.html\"\nJSON_GET_URL = \"https://httpbin.org/get\"\nJSON_POST_URL = \"https://httpbin.org/post\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/cpython/requests_cpython_simpletest.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_cpython_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_seesaw.seesaw import Seesaw\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nss = Seesaw(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_attiny_simpletest.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_attiny_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 Kattni Rembor for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\"\"\"\nSimple seesaw test for ATtiny8x7 breakout using built-in LED on pin 5.\n\"\"\"\n\nimport time\n\nimport board\n\nfrom adafruit_seesaw.seesaw import Seesaw\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nss = Seesaw(i2c)\n\nss.pin_mode(5, ss.OUTPUT)\n\nwhile True:\n    ss.digital_write(5, False)  # Turn the LED on (the built-in LED is active low!)\n    time.sleep(1)  # Wait for one second\n    ss.digital_write(5, True)  # Turn the LED off\n    time.sleep(1)  # Wait for one second\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_attiny_simpletest.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_attiny_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.blink import Blink\nfrom adafruit_led_animation.color import PURPLE, YELLOW\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.A3\n# Update to match the number of NeoPixels you have connected\npixel_num = 30\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_blink_with_background.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_blink_with_background.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.blink import Blink\nfrom adafruit_led_animation.color import PURPLE, YELLOW\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.A3\n# Update to match the number of NeoPixels you have connected\npixel_num = 30\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)\nblink = Blink(pixels, speed=0.5, color=PURPLE, background_color=YELLOW)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_blink_with_background.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_blink_with_background.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2025 Jose D. Montoya\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nThis example blinks the LEDs purple with a yellow background at a 0.5 second interval.\n\nFor QT Py Haxpress and a NeoPixel strip. Update pixel_pin and pixel_num to match your wiring if\nusing a different board or form of NeoPixels.\n\nThis example will run on SAMD21 (M0) Express boards (such as Circuit Playground Express or QT Py\nHaxpress), but not on SAMD21 non-Express boards (such as QT Py or Trinket).\n\"\"\"\n\nimport board\nimport neopixel\n\nfrom adafruit_led_animation.animation.blink import Blink\nfrom adafruit_led_animation.color import PURPLE, YELLOW\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.A3\n# Update to match the number of NeoPixels you have connected\npixel_num = 30\n\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)\n\nblink = Blink(pixels, speed=0.5, color=PURPLE, background_color=YELLOW)\n\nwhile True:\n    blink.animate()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_blink_with_background.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_blink_with_background.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_as726x import AS726x_I2C\n\ndef graph_map(x):\n    return min(int(x * max_graph / max_val), max_graph)\n\n# Usage example:\n    # plot plot the data\n    print(\"\\n\")\n    print(\"V: \" + graph_map(sensor.violet) * \"=\")\n    print(\"B: \" + graph_map(sensor.blue) * \"=\")\n    print(\"G: \" + graph_map(sensor.green) * \"=\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/as726x/examples/as726x_simpletest.py",
      "library": "as726x",
      "type": "example",
      "file_name": "as726x_simpletest.py",
      "chunk_type": "function",
      "function_name": "graph_map"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_as726x import AS726x_I2C\n\n# for I2C use:\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = AS726x_I2C(i2c)\n# for UART use:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/as726x/examples/as726x_simpletest.py",
      "library": "as726x",
      "type": "example",
      "file_name": "as726x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = busio.SPI(board.SCL, MOSI=board.SDA)\ntft_cs = board.RX\ntft_dc = board.TX\ntft_backlight = board.A3",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_tft_gizmo_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_tft_gizmo_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = busio.SPI(board.SCL, MOSI=board.SDA)\ntft_cs = board.RX\ntft_dc = board.TX\ntft_backlight = board.A3\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_tft_gizmo_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_tft_gizmo_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = busio.SPI(board.SCL, MOSI=board.SDA)\ntft_cs = board.RX\ntft_dc = board.TX\ntft_backlight = board.A3\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_tft_gizmo_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_tft_gizmo_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\nspi = busio.SPI(board.SCL, MOSI=board.SDA)\ntft_cs = board.RX\ntft_dc = board.TX\ntft_backlight = board.A3\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = ST7789(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_tft_gizmo_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_tft_gizmo_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import analogio\nimport board\nimport storage\n\nimport storage\nV_MODE = 1.98\nV_RECORD = 2.41\na = analogio.AnalogIn(board.IO6)\na_voltage = a.value * a.reference_voltage / 65535",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_kaluga1_3_boot.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_kaluga1_3_boot.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2017 Scott Shawcroft, written for Adafruit Industries\n# SPDX-FileCopyrightText: Copyright (c) 2021 Jeff Epler for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\"\"\"Use this file as CIRCUITPY/boot.py in conjunction with ov2640_jpeg_kaluga1_3.py\n\nIt makes the CIRCUITPY filesystem writable to CircuitPython\n(and read-only to the PC) unless the \"MODE\" button on the audio\ndaughterboard is held while the board is powered on or reset.\n\"\"\"\n\nimport analogio\nimport board\nimport storage\n\nV_MODE = 1.98\nV_RECORD = 2.41\n\na = analogio.AnalogIn(board.IO6)\na_voltage = a.value * a.reference_voltage / 65535\nif abs(a_voltage - V_MODE) > 0.05:  # If mode is NOT pressed...\n    print(\"storage writable by CircuitPython\")\n    storage.remount(\"/\", readonly=False)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_kaluga1_3_boot.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_kaluga1_3_boot.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_sht31d\n\nimport board\nimport adafruit_sht31d\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_sht31d.SHT31D(i2c)\nprint(\"\\033[1mSensor\\033[0m = SHT31-D\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sht31/examples/sht31d_periodic_mode.py",
      "library": "sht31",
      "type": "example",
      "file_name": "sht31d_periodic_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_sht31d\n\nimport adafruit_sht31d\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_sht31d.SHT31D(i2c)\nprint(\"\\033[1mSensor\\033[0m = SHT31-D\")\nprint(\"\\033[1mSerial Number\\033[0m = \", sensor.serial_number, \"\\n\")\nsensor.frequency = adafruit_sht31d.FREQUENCY_1",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sht31/examples/sht31d_periodic_mode.py",
      "library": "sht31",
      "type": "example",
      "file_name": "sht31d_periodic_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_sht31d\n\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_sht31d.SHT31D(i2c)\nprint(\"\\033[1mSensor\\033[0m = SHT31-D\")\nprint(\"\\033[1mSerial Number\\033[0m = \", sensor.serial_number, \"\\n\")\nsensor.frequency = adafruit_sht31d.FREQUENCY_1\nsensor.mode = adafruit_sht31d.MODE_PERIODIC",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sht31/examples/sht31d_periodic_mode.py",
      "library": "sht31",
      "type": "example",
      "file_name": "sht31d_periodic_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_sht31d\n\nsensor = adafruit_sht31d.SHT31D(i2c)\nprint(\"\\033[1mSensor\\033[0m = SHT31-D\")\nprint(\"\\033[1mSerial Number\\033[0m = \", sensor.serial_number, \"\\n\")\nsensor.frequency = adafruit_sht31d.FREQUENCY_1\nsensor.mode = adafruit_sht31d.MODE_PERIODIC",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sht31/examples/sht31d_periodic_mode.py",
      "library": "sht31",
      "type": "example",
      "file_name": "sht31d_periodic_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_sht31d\n\n        sensor.heater = False\nsensor.mode = adafruit_sht31d.MODE_SINGLE",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sht31/examples/sht31d_periodic_mode.py",
      "library": "sht31",
      "type": "example",
      "file_name": "sht31d_periodic_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_icm20x import ICM20948\n\nimport board\ncycles = 200\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nicm = ICM20948(i2c)\n# Cycle between two data rates",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/icm20x/examples/icm20x_icm20948_gyro_data_rate_test.py",
      "library": "icm20x",
      "type": "example",
      "file_name": "icm20x_icm20948_gyro_data_rate_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nfrom adafruit_icm20x import ICM20948\n\ncycles = 200\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nicm = ICM20948(i2c)\n\n# Cycle between two data rates\n# Best viewed in the Mu serial plotter where you can see how\n# the data rate affects the resolution of the data\nwhile True:\n    icm.gyro_data_rate_divisor = 0  # minimum\n    print(\"Data Rate:\", icm.gyro_data_rate)\n    time.sleep(2)\n    for i in range(cycles):\n        print(icm.gyro)\n\n    icm.gyro_data_rate_divisor = 255  # maximum\n    print(\"Data Rate:\", icm.gyro_data_rate)\n    time.sleep(2)\n    for i in range(cycles):\n        print(icm.gyro)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/icm20x/examples/icm20x_icm20948_gyro_data_rate_test.py",
      "library": "icm20x",
      "type": "example",
      "file_name": "icm20x_icm20948_gyro_data_rate_test.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_veml7700\n\n# Simple demo of the VEML7700 light sensor.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nveml7700 = adafruit_veml7700.VEML7700(i2c)\n# Create two Labels to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/veml7700/examples/veml7700_displayio_simpletest.py",
      "library": "veml7700",
      "type": "example",
      "file_name": "veml7700_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_veml7700\n\n# Simple demo of the VEML7700 light sensor.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nveml7700 = adafruit_veml7700.VEML7700(i2c)\n# Create two Labels to show the readings. If you have a very small\n# display you may need to change to scale=1.\nlight_lux_output_label = Label(FONT, text=\"\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/veml7700/examples/veml7700_displayio_simpletest.py",
      "library": "veml7700",
      "type": "example",
      "file_name": "veml7700_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_veml7700\n\nlight_lux_output_label.anchored_position = (4, board.DISPLAY.height // 2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/veml7700/examples/veml7700_displayio_simpletest.py",
      "library": "veml7700",
      "type": "example",
      "file_name": "veml7700_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_veml7700\n\n# add the label to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/veml7700/examples/veml7700_displayio_simpletest.py",
      "library": "veml7700",
      "type": "example",
      "file_name": "veml7700_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_tc74\n\nimport board\nimport adafruit_tc74\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntc = adafruit_tc74.TC74(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tc74/examples/tc74_simpletest.py",
      "library": "tc74",
      "type": "example",
      "file_name": "tc74_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_tc74\n\nimport adafruit_tc74\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntc = adafruit_tc74.TC74(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tc74/examples/tc74_simpletest.py",
      "library": "tc74",
      "type": "example",
      "file_name": "tc74_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_tc74\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntc = adafruit_tc74.TC74(i2c)\n\nwhile True:\n    print(f\"Temperature: {tc.temperature} C\")\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tc74/examples/tc74_simpletest.py",
      "library": "tc74",
      "type": "example",
      "file_name": "tc74_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport usb_hid\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keyboard_layout_us import KeyboardLayoutUS\nimport adafruit_ducky\n\nduck = adafruit_ducky.Ducky('duckyscript.txt', keyboard, keyboard_layout)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ducky/examples/ducky_simpletest.py",
      "library": "ducky",
      "type": "example",
      "file_name": "ducky_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2017 Scott Shawcroft, written for Adafruit Industries\n# SPDX-FileCopyrightText: Copyright (c) 2021 Eva Herrada for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\nimport time\n\nimport usb_hid\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keyboard_layout_us import KeyboardLayoutUS\n\nimport adafruit_ducky\n\ntime.sleep(1)  # Sleep for a bit to avoid a race condition on some systems\nkeyboard = Keyboard(usb_hid.devices)\nkeyboard_layout = KeyboardLayoutUS(keyboard)  # We're in the US :)\n\nduck = adafruit_ducky.Ducky(\"duckyscript.txt\", keyboard, keyboard_layout)\n\nresult = True\nwhile result is not False:\n    result = duck.loop()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ducky/examples/ducky_simpletest.py",
      "library": "ducky",
      "type": "example",
      "file_name": "ducky_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_node1.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_node1.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_node1.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_node1.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\n# uncommnet the desired import and rfm initialization depending on the radio boards being used",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_node1.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_node1.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mcp3421.mcp3421 as ADC\nfrom adafruit_mcp3421.analog_in import AnalogIn\n\nimport board\nimport adafruit_mcp3421.mcp3421 as ADC\ni2c = board.I2C()\nadc = ADC.MCP3421(i2c, gain=1, resolution=14, continuous_mode=True)\nadc_channel = AnalogIn(adc)\n# gain, resolution and mode can also be set after instantiation:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp3421/examples/mcp3421_simpletest.py",
      "library": "mcp3421",
      "type": "example",
      "file_name": "mcp3421_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2024 Liz Clark for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_mcp3421.mcp3421 as ADC\nfrom adafruit_mcp3421.analog_in import AnalogIn\n\ni2c = board.I2C()\n\nadc = ADC.MCP3421(i2c, gain=1, resolution=14, continuous_mode=True)\nadc_channel = AnalogIn(adc)\n# gain, resolution and mode can also be set after instantiation:\n\n# set gain to 1, 2, 4 or 8x\n# defaults to 1\n# adc.gain = 1\n\n# set resolution to 12, 14, 16 or 18\n# defaults to 14\n# adc.resolution = 14\n\n# set continuous read mode True or False for one-shot\n# defaults to True\n# adc.continuous_mode = True\n\nwhile True:\n    print(f\"ADC value: {adc_channel.value}\")\n    print(f\"Current gain: {adc.gain}X\")\n    print(f\"Current resolution: {adc.resolution}-bit\")\n    if adc.continuous_mode:\n        mode = \"continuous\"\n    else:\n        mode = \"one-shot\"\n    print(f\"Mode: {mode}\")\n    print()\n    time.sleep(0.01)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp3421/examples/mcp3421_simpletest.py",
      "library": "mcp3421",
      "type": "example",
      "file_name": "mcp3421_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef connected(client, userdata, flags, rc):\n    print(f'Connected to Adafruit IO! Listening for topic changes on {onoff_feed}')\n    client.subscribe(onoff_feed)\n\n# Usage example:\n# Define callback methods which are called when events occur\ndef connected(client, userdata, flags, rc):\n    # This function will be called when the client is connected\n    # successfully to the broker.\n    print(f\"Connected to Adafruit IO! Listening for topic changes on {onoff_feed}\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/native_networking/minimqtt_adafruitio_native_networking.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_native_networking.py",
      "chunk_type": "function",
      "function_name": "connected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef disconnected(client, userdata, rc):\n    print('Disconnected from Adafruit IO!')\n\n# Usage example:\n\ndef disconnected(client, userdata, rc):\n    # This method is called when the client is disconnected\n    print(\"Disconnected from Adafruit IO!\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/native_networking/minimqtt_adafruitio_native_networking.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_native_networking.py",
      "chunk_type": "function",
      "function_name": "disconnected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef message(client, topic, message):\n    print(f'New message on topic {topic}: {message}')\n\n# Usage example:\ndef message(client, topic, message):\n    # This method is called when a topic the client is subscribed to\n    # has a new message.\n    print(f\"New message on topic {topic}: {message}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/native_networking/minimqtt_adafruitio_native_networking.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_native_networking.py",
      "chunk_type": "function",
      "function_name": "message"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n    # has a new message.\n# Create a socket pool and ssl_context\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\n# If you need to use certificate/key pair authentication (e.g. X.509), you can load them in the\n# ssl context by uncommenting the lines below and adding the following keys to your settings.toml:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/native_networking/minimqtt_adafruitio_native_networking.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_native_networking.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# Create a socket pool and ssl_context\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\n# If you need to use certificate/key pair authentication (e.g. X.509), you can load them in the\n# ssl context by uncommenting the lines below and adding the following keys to your settings.toml:\n# \"device_cert_path\" - Path to the Device Certificate",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/native_networking/minimqtt_adafruitio_native_networking.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_native_networking.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lps28\n\nimport board\nimport adafruit_lps28\ni2c = board.I2C()\nsensor = adafruit_lps28.LPS28(i2c)\n# Data Rate in hz\n# 1, 4, 10, 25, 50, 75, 100 or 200",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps28/examples/lps28_oneshot.py",
      "library": "lps28",
      "type": "example",
      "file_name": "lps28_oneshot.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lps28\n\nimport board\nimport adafruit_lps28\ni2c = board.I2C()\nsensor = adafruit_lps28.LPS28(i2c)\n# Data Rate in hz\n# 1, 4, 10, 25, 50, 75, 100 or 200\nsensor.data_rate = 4",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps28/examples/lps28_oneshot.py",
      "library": "lps28",
      "type": "example",
      "file_name": "lps28_oneshot.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2025 Liz Clark for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_lps28\n\ni2c = board.I2C()\nsensor = adafruit_lps28.LPS28(i2c)\n\n# Data Rate in hz\n# 1, 4, 10, 25, 50, 75, 100 or 200\nsensor.data_rate = 4\n# Number of samples to average per measurement\n# 4, 8, 16, 32, 64, 128, 512\nsensor.averaging = 512\n\n# Enable/Disable Interrupts Defaults\n\n# sensor.data_ready_int = True # Data Ready Interrupt\n# sensor.data_ready_pulse = False # Data-ready interrupt as a pulse\n# sensor.fifo_full_int = False # FIFO full interrupt\n# sensor.fifo_overrun_int = False # FIFO overrun interrupt\n# sensor.fifo_watermark_int = False # FIFO watermark interrupt\n\nwhile True:\n    # Trigger one-shot measurement\n    sensor.trigger_one_shot = True\n\n    # Wait for data ready\n    if sensor.data_ready:\n        print(f\"Pressure: {sensor.pressure:.1f} hPa\")\n        print(f\"Temperature: {sensor.temperature:.1f} \u00b0C\")\n        print(\"-\" * 40)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps28/examples/lps28_oneshot.py",
      "library": "lps28",
      "type": "example",
      "file_name": "lps28_oneshot.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nimport wifi\nimport adafruit_requests\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Time between API refreshes",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_queuetimes.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_queuetimes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nimport adafruit_requests\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Time between API refreshes\n# 900 = 15 mins, 1800 = 30 mins, 3600 = 1 hour",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_queuetimes.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_queuetimes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nimport adafruit_requests\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Time between API refreshes\n# 900 = 15 mins, 1800 = 30 mins, 3600 = 1 hour\nSLEEP_TIME = 300",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_queuetimes.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_queuetimes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Converts seconds to minutes/hours/days\ndef time_calc(input_time):\n    \"\"\"Converts seconds to minutes/hours/days\"\"\"\n    if input_time < 60:\n        return f'{input_time:.0f} seconds'\n    if input_time < 3600:\n        return f'{input_time / 60:.0f} minutes'\n    if input_time < 86400:\n        return f'{input_time / 60 / 60:.0f} hours'\n    return f'{input_time / 60 / 60 / 24:.1f} days'",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_queuetimes.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_queuetimes.py",
      "chunk_type": "function",
      "function_name": "time_calc"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_dps310.basic import DPS310\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndps310 = DPS310(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dps310/examples/dps310_simpletest.py",
      "library": "dps310",
      "type": "example",
      "file_name": "dps310_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nfrom adafruit_dps310.basic import DPS310\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndps310 = DPS310(i2c)\n\nwhile True:\n    print(\"Temperature = %.2f *C\" % dps310.temperature)\n    print(\"Pressure = %.2f hPa\" % dps310.pressure)\n    print(\"\")\n    time.sleep(1.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dps310/examples/dps310_simpletest.py",
      "library": "dps310",
      "type": "example",
      "file_name": "dps310_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom adafruit_is31fl3731.charlie_wing import CharlieWing as Display\n\n# from adafruit_is31fl3731.matrix_11x7 import Matrix11x7 as Display\n# uncomment this line if you use a Pico, here with SCL=GP21 and SDA=GP20.\n# i2c = busio.I2C(board.GP21, board.GP20)\ni2c = busio.I2C(board.SCL, board.SDA)\n# arrow pattern in bits; top row-> bottom row, 8 bits in each row\narrow = bytearray((0x08, 0x0C, 0xFE, 0xFF, 0xFE, 0x0C, 0x08, 0x00, 0x00))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3731/examples/is31fl3731_frame_example.py",
      "library": "is31fl3731",
      "type": "example",
      "file_name": "is31fl3731_frame_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport storage\nimport usb.core\nimport adafruit_usb_host_mass_storage\n\nmsc = adafruit_usb_host_mass_storage.USBMassStorage(device)\nvfs = storage.VfsFat(msc)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/usb_host_mass_storage/examples/usb_host_mass_storage_simpletest.py",
      "library": "usb_host_mass_storage",
      "type": "example",
      "file_name": "usb_host_mass_storage_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_vl53l0x\n\nimport adafruit_vl53l0x\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nvl53 = adafruit_vl53l0x.VL53L0X(i2c)\n# Create a Label to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l0x/examples/vl53l0x_displayio_simpletest.py",
      "library": "vl53l0x",
      "type": "example",
      "file_name": "vl53l0x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_vl53l0x\n\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nvl53 = adafruit_vl53l0x.VL53L0X(i2c)\n# Create a Label to show the readings. If you have a very small\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l0x/examples/vl53l0x_displayio_simpletest.py",
      "library": "vl53l0x",
      "type": "example",
      "file_name": "vl53l0x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_vl53l0x\n\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)\n# place the label in the middle of the screen with anchored positioning\ndisplay_output_label.anchor_point = (0, 0)\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2)\n# add the label to the main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l0x/examples/vl53l0x_displayio_simpletest.py",
      "library": "vl53l0x",
      "type": "example",
      "file_name": "vl53l0x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_vl53l0x\n\n# add the label to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l0x/examples/vl53l0x_displayio_simpletest.py",
      "library": "vl53l0x",
      "type": "example",
      "file_name": "vl53l0x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# API Polling Rate\n# 900 = 15 mins, 1800 = 30 mins, 3600 = 1 hour\nSLEEP_TIME = 900\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_mastodon.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_mastodon.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# 900 = 15 mins, 1800 = 30 mins, 3600 = 1 hour\nSLEEP_TIME = 900\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_mastodon.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_mastodon.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nSLEEP_TIME = 900\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_mastodon.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_mastodon.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Converts seconds to minutes/hours/days\ndef time_calc(input_time):\n    \"\"\"Converts seconds to minutes/hours/days\"\"\"\n    if input_time < 60:\n        return f'{input_time:.0f} seconds'\n    if input_time < 3600:\n        return f'{input_time / 60:.0f} minutes'\n    if input_time < 86400:\n        return f'{input_time / 60 / 60:.0f} hours'\n    return f'{input_time / 60 / 60 / 24:.1f} days'\n\n# Usage example:\n        print(\"\\nFinished!\")\n        print(f\"Board Uptime: {time.monotonic()}\")\n        print(f\"Next Update: {time_calc(SLEEP_TIME)}\")\n        print(\"===============================\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_mastodon.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_mastodon.py",
      "chunk_type": "function",
      "function_name": "time_calc"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_mcp3xxx.mcp3004 as MCP\nfrom adafruit_mcp3xxx.analog_in import AnalogIn\n\nimport adafruit_mcp3xxx.mcp3004 as MCP\n# create the spi bus\nspi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)\n# create the cs (chip select)\ncs = digitalio.DigitalInOut(board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp3xxx/examples/mcp3xxx_mcp3004_single_ended_simpletest.py",
      "library": "mcp3xxx",
      "type": "example",
      "file_name": "mcp3xxx_mcp3004_single_ended_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_mcp3xxx.mcp3004 as MCP\nfrom adafruit_mcp3xxx.analog_in import AnalogIn\n\n# create the spi bus\nspi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)\n# create the cs (chip select)\ncs = digitalio.DigitalInOut(board.D5)\n# create the mcp object\nmcp = MCP.MCP3004(spi, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp3xxx/examples/mcp3xxx_mcp3004_single_ended_simpletest.py",
      "library": "mcp3xxx",
      "type": "example",
      "file_name": "mcp3xxx_mcp3004_single_ended_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport busio\nimport digitalio\n\nimport adafruit_mcp3xxx.mcp3004 as MCP\nfrom adafruit_mcp3xxx.analog_in import AnalogIn\n\n# create the spi bus\nspi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)\n\n# create the cs (chip select)\ncs = digitalio.DigitalInOut(board.D5)\n\n# create the mcp object\nmcp = MCP.MCP3004(spi, cs)\n\n# create an analog input channel on pin 0\nchan = AnalogIn(mcp, MCP.P0)\n\nprint(\"Raw ADC Value: \", chan.value)\nprint(\"ADC Voltage: \" + str(chan.voltage) + \"V\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp3xxx/examples/mcp3xxx_mcp3004_single_ended_simpletest.py",
      "library": "mcp3xxx",
      "type": "example",
      "file_name": "mcp3xxx_mcp3004_single_ended_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_ssd1327\n\nimport adafruit_ssd1327\n# Use for I2C\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndisplay_bus = I2CDisplayBus(i2c, device_address=0x3D)\n# Use for SPI",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1327/examples/ssd1327_simpletest.py",
      "library": "ssd1327",
      "type": "example",
      "file_name": "ssd1327_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_ssd1327\n\nWIDTH = 128\nHEIGHT = 128\nBORDER = 8\nFONTSCALE = 1\ndisplay = adafruit_ssd1327.SSD1327(display_bus, width=WIDTH, height=HEIGHT)\n# Make the display context\nsplash = displayio.Group()\ndisplay.root_group = splash",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1327/examples/ssd1327_simpletest.py",
      "library": "ssd1327",
      "type": "example",
      "file_name": "ssd1327_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_vl6180x\n\nimport busio\nimport adafruit_vl6180x\n# Create I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create sensor instance.\nsensor = adafruit_vl6180x.VL6180X(i2c)\n# You can add an offset to distance measurements here (e.g. calibration)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl6180x/examples/vl6180x_simpletest.py",
      "library": "vl6180x",
      "type": "example",
      "file_name": "vl6180x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_vl6180x\n\n# Create I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create sensor instance.\nsensor = adafruit_vl6180x.VL6180X(i2c)\n# You can add an offset to distance measurements here (e.g. calibration)\n# Swapping for the following would add a +10 millimeter offset to measurements:\n# sensor = adafruit_vl6180x.VL6180X(i2c, offset=10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl6180x/examples/vl6180x_simpletest.py",
      "library": "vl6180x",
      "type": "example",
      "file_name": "vl6180x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_espatcontrol import adafruit_espatcontrol, adafruit_espatcontrol_wifimanager\n\nesp = adafruit_espatcontrol.ESP_ATcontrol(uart, 115200, reset_pin=resetpin, rts_pin=rtspin, debug=debugflag)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_aio_post.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_aio_post.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_espatcontrol import adafruit_espatcontrol, adafruit_espatcontrol_wifimanager\n\nesp = adafruit_espatcontrol.ESP_ATcontrol(\n    uart, 115200, reset_pin=resetpin, rts_pin=rtspin, debug=debugflag\nwifi = adafruit_espatcontrol_wifimanager.ESPAT_WiFiManager(esp, secrets, status_light)\ncounter = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_aio_post.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_aio_post.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_pn532.i2c import PN532_I2C\n\n# from adafruit_pn532.spi import PN532_SPI\n# from adafruit_pn532.uart import PN532_UART\n# I2C connection:\ni2c = busio.I2C(board.SCL, board.SDA)\n# Non-hardware\n# pn532 = PN532_I2C(i2c, debug=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pn532/examples/pn532_simplelisten.py",
      "library": "pn532",
      "type": "example",
      "file_name": "pn532_simplelisten.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_pn532.i2c import PN532_I2C\n\n# Non-hardware\n# pn532 = PN532_I2C(i2c, debug=False)\n# With I2C, we recommend connecting RSTPD_N (reset) to a digital pin for manual\n# harware reset\nreset_pin = DigitalInOut(board.D6)\n# On Raspberry Pi, you must also connect a pin to P32 \"H_Request\" for hardware\n# wakeup! this means we don't need to do the I2C clock-stretch thing\nreq_pin = DigitalInOut(board.D12)\n# Using the IRQ pin allows us to determine when a card is present by checking",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pn532/examples/pn532_simplelisten.py",
      "library": "pn532",
      "type": "example",
      "file_name": "pn532_simplelisten.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_pn532.i2c import PN532_I2C\n\n# With I2C, we recommend connecting RSTPD_N (reset) to a digital pin for manual\n# harware reset\nreset_pin = DigitalInOut(board.D6)\n# On Raspberry Pi, you must also connect a pin to P32 \"H_Request\" for hardware\n# wakeup! this means we don't need to do the I2C clock-stretch thing\nreq_pin = DigitalInOut(board.D12)\n# Using the IRQ pin allows us to determine when a card is present by checking\n# to see if the pin is pulled low.\nirq_pin = DigitalInOut(board.D10)\npn532 = PN532_I2C(i2c, debug=False, reset=reset_pin, req=req_pin, irq=irq_pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pn532/examples/pn532_simplelisten.py",
      "library": "pn532",
      "type": "example",
      "file_name": "pn532_simplelisten.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_pn532.i2c import PN532_I2C\n\n# On Raspberry Pi, you must also connect a pin to P32 \"H_Request\" for hardware\n# wakeup! this means we don't need to do the I2C clock-stretch thing\nreq_pin = DigitalInOut(board.D12)\n# Using the IRQ pin allows us to determine when a card is present by checking\n# to see if the pin is pulled low.\nirq_pin = DigitalInOut(board.D10)\npn532 = PN532_I2C(i2c, debug=False, reset=reset_pin, req=req_pin, irq=irq_pin)\n# SPI connection:\n# spi = busio.SPI(board.SCK, board.MOSI, board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pn532/examples/pn532_simplelisten.py",
      "library": "pn532",
      "type": "example",
      "file_name": "pn532_simplelisten.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_pioasm\n\nprogram = adafruit_pioasm.Program(text_program, build_debuginfo=True)\nprogram.print_c_program(\"pio_ws2812\", qualifier=\"static const\")\nprogram = adafruit_pioasm.Program(text_program, build_debuginfo=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_print_c_program.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_print_c_program.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_pioasm\n\nprogram = adafruit_pioasm.Program(text_program, build_debuginfo=True)\nprogram.print_c_program(\"pio_ws2812\", qualifier=\"static const\")\nprogram = adafruit_pioasm.Program(text_program, build_debuginfo=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_print_c_program.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_print_c_program.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 Scott Shawcroft, written for Adafruit Industries\n# SPDX-FileCopyrightText: 2022 Jeff Epler, written for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nimport adafruit_pioasm\n\n# NeoPixels are 800khz bit streams. Zeroes are 1/3 duty cycle (~416ns) and ones\n# are 2/3 duty cycle (~833ns).\ntext_program = \"\"\"\n.program ws2812\n.side_set 1\n.wrap_target\nbitloop:\n  out x 1        side 0 [1]; Side-set still takes place when instruction stalls\n  jmp !x do_zero side 1 [1]; Branch on the bit we shifted out. Positive pulse\ndo_one:\n  jmp  bitloop   side 1 [1]; Continue driving high, for a long pulse\ndo_zero:\n  nop            side 0 [1]; Or drive low, for a short pulse\n.wrap\n\"\"\"\n\nprogram = adafruit_pioasm.Program(text_program, build_debuginfo=True)\nprogram.print_c_program(\"pio_ws2812\", qualifier=\"static const\")\n\nprogram = adafruit_pioasm.Program(text_program, build_debuginfo=False)\nprogram.print_c_program(\"pio_ws2812_short\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_print_c_program.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_print_c_program.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import asyncio\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_asyncio_listen.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_asyncio_listen.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import asyncio\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_asyncio_listen.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_asyncio_listen.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import asyncio\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\n# uncommnet the desired import and rfm initialization depending on the radio boards being used",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_asyncio_listen.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_asyncio_listen.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import asyncio\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\n# Simple class to hold an  value. Use .value to to read or write.\nclass Packet:\n    \"\"\"Simple class to hold an  value. Use .value to to read or write.\"\"\"\n\n    def __init__(self):\n        self.received = False\n\n# Usage example:\n\n# pylint: disable=too-few-public-methods\nclass Packet:\n    \"\"\"Simple class to hold an  value. Use .value to to read or write.\"\"\"\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_asyncio_listen.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_asyncio_listen.py",
      "chunk_type": "function",
      "function_name": "Packet"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_ili9341\n\nimport adafruit_ili9341\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D9\ntft_dc = board.D10\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D6)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ili9341/examples/ili9341_simpletest.py",
      "library": "ili9341",
      "type": "example",
      "file_name": "ili9341_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_ili9341\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D9\ntft_dc = board.D10\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D6)\ndisplay = adafruit_ili9341.ILI9341(display_bus, width=320, height=240)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ili9341/examples/ili9341_simpletest.py",
      "library": "ili9341",
      "type": "example",
      "file_name": "ili9341_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_ili9341\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D9\ntft_dc = board.D10\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D6)\ndisplay = adafruit_ili9341.ILI9341(display_bus, width=320, height=240)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ili9341/examples/ili9341_simpletest.py",
      "library": "ili9341",
      "type": "example",
      "file_name": "ili9341_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_ili9341\n\nspi = board.SPI()\ntft_cs = board.D9\ntft_dc = board.D10\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D6)\ndisplay = adafruit_ili9341.ILI9341(display_bus, width=320, height=240)\n# Make the display context\nsplash = displayio.Group()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ili9341/examples/ili9341_simpletest.py",
      "library": "ili9341",
      "type": "example",
      "file_name": "ili9341_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_ili9341\n\nspi = board.SPI()\ntft_cs = board.D9\ntft_dc = board.D10\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D6)\ndisplay = adafruit_ili9341.ILI9341(display_bus, width=320, height=240)\n# Make the display context\nsplash = displayio.Group()\ndisplay.root_group = splash",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ili9341/examples/ili9341_simpletest.py",
      "library": "ili9341",
      "type": "example",
      "file_name": "ili9341_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nfrom adafruit_as7341 import AS7341\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = AS7341(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/as7341/examples/as7341_simpletest.py",
      "library": "as7341",
      "type": "example",
      "file_name": "as7341_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nfrom adafruit_as7341 import AS7341\n\ndef bar_graph(read_value):\n    scaled = int(read_value / 1000)\n    return '[%5d] ' % read_value + scaled * '*'\n\n# Usage example:\n\nwhile True:\n    print(\"F1 - 415nm/Violet  %s\" % bar_graph(sensor.channel_415nm))\n    print(\"F2 - 445nm//Indigo %s\" % bar_graph(sensor.channel_445nm))\n    print(\"F3 - 480nm//Blue   %s\" % bar_graph(sensor.channel_480nm))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/as7341/examples/as7341_simpletest.py",
      "library": "as7341",
      "type": "example",
      "file_name": "as7341_simpletest.py",
      "chunk_type": "function",
      "function_name": "bar_graph"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_rgb_display import color565, ili9341\nimport adafruit_stmpe610\n\nimport adafruit_stmpe610\n# Create library object using our Bus SPI port\nspi = busio.SPI(clock=board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Adafruit Metro M0 + 2.8\" Capacitive touch shield\ncs_pin = digitalio.DigitalInOut(board.D9)\ndc_pin = digitalio.DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/stmpe610/examples/stmpe610_paint_demo.py",
      "library": "stmpe610",
      "type": "example",
      "file_name": "stmpe610_paint_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_rgb_display import color565, ili9341\nimport adafruit_stmpe610\n\n# Create library object using our Bus SPI port\nspi = busio.SPI(clock=board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Adafruit Metro M0 + 2.8\" Capacitive touch shield\ncs_pin = digitalio.DigitalInOut(board.D9)\ndc_pin = digitalio.DigitalInOut(board.D10)\n# Initialize display\ndisplay = ili9341.ILI9341(spi, cs=cs_pin, dc=dc_pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/stmpe610/examples/stmpe610_paint_demo.py",
      "library": "stmpe610",
      "type": "example",
      "file_name": "stmpe610_paint_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_rgb_display import color565, ili9341\nimport adafruit_stmpe610\n\n# Create library object using our Bus SPI port\nspi = busio.SPI(clock=board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Adafruit Metro M0 + 2.8\" Capacitive touch shield\ncs_pin = digitalio.DigitalInOut(board.D9)\ndc_pin = digitalio.DigitalInOut(board.D10)\n# Initialize display\ndisplay = ili9341.ILI9341(spi, cs=cs_pin, dc=dc_pin)\n# Fill with black!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/stmpe610/examples/stmpe610_paint_demo.py",
      "library": "stmpe610",
      "type": "example",
      "file_name": "stmpe610_paint_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_rgb_display import color565, ili9341\nimport adafruit_stmpe610\n\n# Initialize display\ndisplay = ili9341.ILI9341(spi, cs=cs_pin, dc=dc_pin)\n# Fill with black!\nst_cs_pin = digitalio.DigitalInOut(board.D6)\nst = adafruit_stmpe610.Adafruit_STMPE610_SPI(spi, st_cs_pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/stmpe610/examples/stmpe610_paint_demo.py",
      "library": "stmpe610",
      "type": "example",
      "file_name": "stmpe610_paint_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_rgb_display import color565, ili9341\nimport adafruit_stmpe610\n\ndisplay = ili9341.ILI9341(spi, cs=cs_pin, dc=dc_pin)\n# Fill with black!\nst_cs_pin = digitalio.DigitalInOut(board.D6)\nst = adafruit_stmpe610.Adafruit_STMPE610_SPI(spi, st_cs_pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/stmpe610/examples/stmpe610_paint_demo.py",
      "library": "stmpe610",
      "type": "example",
      "file_name": "stmpe610_paint_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import sys\nimport board\nfrom PIL import Image\nfrom adafruit_is31fl3731.charlie_bonnet import CharlieBonnet as Display\n\n# uncomment next line if you are using Pimoroni Scroll Phat HD LED 17 x 7\n# from adafruit_is31fl3731.scroll_phat_hd import ScrollPhatHD as Display\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndisplay = Display(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3731/examples/is31fl3731_pillow_animated_gif.py",
      "library": "is31fl3731",
      "type": "example",
      "file_name": "is31fl3731_pillow_animated_gif.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_connection_manager\nimport adafruit_fancyled.adafruit_fancyled as fancy\nimport adafruit_requests\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\nimport neopixel\ncs = DigitalInOut(board.D10)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_cheerlights.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_cheerlights.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_connection_manager\nimport adafruit_fancyled.adafruit_fancyled as fancy\nimport adafruit_requests\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\ncs = DigitalInOut(board.D10)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_cheerlights.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_cheerlights.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_connection_manager\nimport adafruit_fancyled.adafruit_fancyled as fancy\nimport adafruit_requests\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(eth)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(eth)\nrequests = adafruit_requests.Session(pool, ssl_context)\nDATA_SOURCE = \"http://api.thingspeak.com/channels/1417/feeds.json?results=1\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_cheerlights.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_cheerlights.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_connection_manager\nimport adafruit_fancyled.adafruit_fancyled as fancy\nimport adafruit_requests\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(eth)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(eth)\nrequests = adafruit_requests.Session(pool, ssl_context)\nDATA_SOURCE = \"http://api.thingspeak.com/channels/1417/feeds.json?results=1\"\nDATA_LOCATION = [\"feeds\", 0, \"field2\"]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_cheerlights.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_cheerlights.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_connection_manager\nimport adafruit_fancyled.adafruit_fancyled as fancy\nimport adafruit_requests\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\neth = WIZNET5K(spi_bus, cs)\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(eth)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(eth)\nrequests = adafruit_requests.Session(pool, ssl_context)\nDATA_SOURCE = \"http://api.thingspeak.com/channels/1417/feeds.json?results=1\"\nDATA_LOCATION = [\"feeds\", 0, \"field2\"]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_cheerlights.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_cheerlights.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_connection_manager\nimport adafruit_fancyled.adafruit_fancyled as fancy\nimport adafruit_requests\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\nDATA_SOURCE = \"http://api.thingspeak.com/channels/1417/feeds.json?results=1\"\nDATA_LOCATION = [\"feeds\", 0, \"field2\"]\n# neopixels\npixels = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.3)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_cheerlights.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_cheerlights.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport pwmio\nimport adafruit_avrprog\n\nimport busio\nimport pwmio\nimport adafruit_avrprog\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\navrprog = adafruit_avrprog.AVRprog()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/avrprog/examples/avrprog_read_signature_simpletest.py",
      "library": "avrprog",
      "type": "example",
      "file_name": "avrprog_read_signature_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport pwmio\nimport adafruit_avrprog\n\nimport pwmio\nimport adafruit_avrprog\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\navrprog = adafruit_avrprog.AVRprog()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/avrprog/examples/avrprog_read_signature_simpletest.py",
      "library": "avrprog",
      "type": "example",
      "file_name": "avrprog_read_signature_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport pwmio\nimport adafruit_avrprog\n\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\navrprog = adafruit_avrprog.AVRprog()\n# we can generate an 6 MHz clock for driving bare chips too!\nclock_pwm = pwmio.PWMOut(board.D9, frequency=6000000, duty_cycle=65536 // 2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/avrprog/examples/avrprog_read_signature_simpletest.py",
      "library": "avrprog",
      "type": "example",
      "file_name": "avrprog_read_signature_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nRead Signature Test - All this does is read the signature from the chip to\ncheck connectivity!\n\"\"\"\n\nimport board\nimport busio\nimport pwmio\n\nimport adafruit_avrprog\n\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\navrprog = adafruit_avrprog.AVRprog()\navrprog.init(spi, board.D5)\n\n# we can generate an 6 MHz clock for driving bare chips too!\nclock_pwm = pwmio.PWMOut(board.D9, frequency=6000000, duty_cycle=65536 // 2)\n\navrprog.begin()\nprint(\"Signature bytes: \", [hex(i) for i in avrprog.read_signature()])\navrprog.end()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/avrprog/examples/avrprog_read_signature_simpletest.py",
      "library": "avrprog",
      "type": "example",
      "file_name": "avrprog_read_signature_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_tmp117 import TMP117, AverageCount, MeasurementDelay\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntmp117 = TMP117(i2c)\n# uncomment different options below to see how it affects the reported temperature",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tmp117/examples/tmp117_rate_and_averaging_test.py",
      "library": "tmp117",
      "type": "example",
      "file_name": "tmp117_rate_and_averaging_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_jd79661\n\nimport adafruit_jd79661\nspi = board.SPI()\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D6\nepd_busy = board.D5",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/jd79661/examples/jd79661_simpletest.py",
      "library": "jd79661",
      "type": "example",
      "file_name": "jd79661_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_jd79661\n\nimport adafruit_jd79661\nspi = board.SPI()\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D6\nepd_busy = board.D5",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/jd79661/examples/jd79661_simpletest.py",
      "library": "jd79661",
      "type": "example",
      "file_name": "jd79661_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_jd79661\n\nspi = board.SPI()\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D6\nepd_busy = board.D5\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/jd79661/examples/jd79661_simpletest.py",
      "library": "jd79661",
      "type": "example",
      "file_name": "jd79661_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_jd79661\n\nspi = board.SPI()\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D6\nepd_busy = board.D5\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/jd79661/examples/jd79661_simpletest.py",
      "library": "jd79661",
      "type": "example",
      "file_name": "jd79661_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_jd79661\n\nspi = board.SPI()\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D6\nepd_busy = board.D5\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/jd79661/examples/jd79661_simpletest.py",
      "library": "jd79661",
      "type": "example",
      "file_name": "jd79661_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_jd79661\n\ndisplay = adafruit_jd79661.JD79661(display_bus, width=250, height=122, busy_pin=epd_busy, rotation=270, colstart=0, highlight_color=65280, highlight_color2=16711680)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/jd79661/examples/jd79661_simpletest.py",
      "library": "jd79661",
      "type": "example",
      "file_name": "jd79661_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_74hc595\n\nimport digitalio\nimport adafruit_74hc595\n# note: D2 port is close to SCK and MOSI pins for Itsy Bitsy M0\nlatch_pin = digitalio.DigitalInOut(board.D2)\nsr = adafruit_74hc595.ShiftRegister74HC595(board.SPI(), latch_pin, number_of_shift_registers=2)\nshift_register_pin_num = 10\nshift_register_pins = [sr.get_pin(n) for n in range(shift_register_pin_num)]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/74hc595/examples/74hc595_daisy_chain/74hc595_daisy_chain.py",
      "library": "74hc595",
      "type": "example",
      "file_name": "74hc595_daisy_chain.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_74hc595\n\nimport adafruit_74hc595\n# note: D2 port is close to SCK and MOSI pins for Itsy Bitsy M0\nlatch_pin = digitalio.DigitalInOut(board.D2)\nsr = adafruit_74hc595.ShiftRegister74HC595(board.SPI(), latch_pin, number_of_shift_registers=2)\nshift_register_pin_num = 10\nshift_register_pins = [sr.get_pin(n) for n in range(shift_register_pin_num)]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/74hc595/examples/74hc595_daisy_chain/74hc595_daisy_chain.py",
      "library": "74hc595",
      "type": "example",
      "file_name": "74hc595_daisy_chain.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_vl53l0x\n\nimport busio\nimport adafruit_vl53l0x\n# Initialize I2C bus and sensor.\ni2c = busio.I2C(board.SCL, board.SDA)\nvl53 = adafruit_vl53l0x.VL53L0X(i2c)\n# Optionally adjust the measurement timing budget to change speed and accuracy.\n# See the example here for more details:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l0x/examples/vl53l0x_simplecontinuous.py",
      "library": "vl53l0x",
      "type": "example",
      "file_name": "vl53l0x_simplecontinuous.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_vl53l0x\n\nimport adafruit_vl53l0x\n# Initialize I2C bus and sensor.\ni2c = busio.I2C(board.SCL, board.SDA)\nvl53 = adafruit_vl53l0x.VL53L0X(i2c)\n# Optionally adjust the measurement timing budget to change speed and accuracy.\n# See the example here for more details:\n#   https://github.com/pololu/vl53l0x-arduino/blob/master/examples/Single/Single.ino",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l0x/examples/vl53l0x_simplecontinuous.py",
      "library": "vl53l0x",
      "type": "example",
      "file_name": "vl53l0x_simplecontinuous.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_onewire.bus import OneWireBus\nfrom adafruit_ds18x20 import DS18X20\n\n# Initialize one-wire bus on board pin D5.\now_bus = OneWireBus(board.D5)\n# Scan for sensors and grab the first one found.\nds18 = DS18X20(ow_bus, ow_bus.scan()[0])",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds18x20/examples/ds18x20_simpletest.py",
      "library": "ds18x20",
      "type": "example",
      "file_name": "ds18x20_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# Simple demo of printing the temperature from the first found DS18x20 sensor every second.\n# Author: Tony DiCola\n\n# A 4.7Kohm pullup between DATA and POWER is REQUIRED!\n\nimport time\n\nimport board\nfrom adafruit_onewire.bus import OneWireBus\n\nfrom adafruit_ds18x20 import DS18X20\n\n# Initialize one-wire bus on board pin D5.\now_bus = OneWireBus(board.D5)\n\n# Scan for sensors and grab the first one found.\nds18 = DS18X20(ow_bus, ow_bus.scan()[0])\n\n# Main loop to print the temperature every second.\nwhile True:\n    print(f\"Temperature: {ds18.temperature:0.3f}C\")\n    time.sleep(1.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds18x20/examples/ds18x20_simpletest.py",
      "library": "ds18x20",
      "type": "example",
      "file_name": "ds18x20_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_weather.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_weather.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_weather.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_weather.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_weather.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_weather.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_weather.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_weather.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_weather.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_weather.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_weather.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_weather.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_weather.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_weather.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_weather.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_weather.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport time\nimport board\nimport wifi\nfrom adafruit_neokey.neokey1x4 import NeoKey1x4\nfrom adafruit_wiz import SCENE_IDS, WizConnectedLight\n\nudp_port = 38899  # Default port is 38899, change if your light is configured differently\nmy_lamp = WizConnectedLight(udp_host, udp_port, wifi.radio, debug=True)\n# use default I2C bus\ni2c_bus = board.STEMMA_I2C()\n# Create a NeoKey object\nneokey = NeoKey1x4(i2c_bus, addr=0x30)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/wiz/examples/wiz_neokey1x4_controller.py",
      "library": "wiz",
      "type": "example",
      "file_name": "wiz_neokey1x4_controller.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import re\nimport time\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\n\ndef version_compare(version1, version2):\n\n    def normalize(v):\n        return [int(x) for x in re.sub('(\\\\.0+)*$', '', v).split('.')]\n    return (normalize(version1) > normalize(version2)) - (normalize(version1) < normalize(version2))\n\n# Usage example:\n# is running at least that version, otherwise, bail out\nassert (\n    version_compare(esp.firmware_version, \"1.3.0\") >= 0\n), \"Incorrect ESP32 firmware version; >= 1.3.0 required.\"\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_wpa2ent_simpletest.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_wpa2ent_simpletest.py",
      "chunk_type": "function",
      "function_name": "version_compare"
    }
  },
  {
    "content": "import re\nimport time\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n# Secondary (SCK1) SPI used to connect to WiFi board on Arduino Nano Connect RP2040\n    spi = busio.SPI(board.SCK1, board.MOSI1, board.MISO1)\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_wpa2ent_simpletest.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_wpa2ent_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import re\nimport time\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n    spi = busio.SPI(board.SCK1, board.MOSI1, board.MISO1)\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\nif esp.status == adafruit_esp32spi.WL_IDLE_STATUS:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_wpa2ent_simpletest.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_wpa2ent_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import re\nimport time\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\nif esp.status == adafruit_esp32spi.WL_IDLE_STATUS:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_wpa2ent_simpletest.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_wpa2ent_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import re\nimport time\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\nif esp.status == adafruit_esp32spi.WL_IDLE_STATUS:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_wpa2ent_simpletest.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_wpa2ent_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_ht16k33 import segments\nfrom adafruit_seesaw import digitalio, rotaryio, seesaw\n\n# For use with the STEMMA connector on QT Py RP2040\n# import busio\n# i2c = busio.I2C(board.SCL1, board.SDA1)\n# seesaw = seesaw.Seesaw(i2c, 0x49)\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nseesaw = seesaw.Seesaw(i2c, addr=0x49)\ndisplay = segments.Seg14x4(i2c, address=0x70)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_ano_rotary_7segment_demo.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_ano_rotary_7segment_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_ht16k33 import segments\nfrom adafruit_seesaw import digitalio, rotaryio, seesaw\n\nselect = digitalio.DigitalIO(seesaw, 1)\nselect_held = False\nup = digitalio.DigitalIO(seesaw, 2)\nup_held = False\nleft = digitalio.DigitalIO(seesaw, 3)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_ano_rotary_7segment_demo.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_ano_rotary_7segment_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_ht16k33 import segments\nfrom adafruit_seesaw import digitalio, rotaryio, seesaw\n\nselect = digitalio.DigitalIO(seesaw, 1)\nselect_held = False\nup = digitalio.DigitalIO(seesaw, 2)\nup_held = False\nleft = digitalio.DigitalIO(seesaw, 3)\nleft_held = False\ndown = digitalio.DigitalIO(seesaw, 4)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_ano_rotary_7segment_demo.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_ano_rotary_7segment_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_ht16k33 import segments\nfrom adafruit_seesaw import digitalio, rotaryio, seesaw\n\nselect = digitalio.DigitalIO(seesaw, 1)\nselect_held = False\nup = digitalio.DigitalIO(seesaw, 2)\nup_held = False\nleft = digitalio.DigitalIO(seesaw, 3)\nleft_held = False\ndown = digitalio.DigitalIO(seesaw, 4)\ndown_held = False\nright = digitalio.DigitalIO(seesaw, 5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_ano_rotary_7segment_demo.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_ano_rotary_7segment_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_ht16k33 import segments\nfrom adafruit_seesaw import digitalio, rotaryio, seesaw\n\nselect_held = False\nup = digitalio.DigitalIO(seesaw, 2)\nup_held = False\nleft = digitalio.DigitalIO(seesaw, 3)\nleft_held = False\ndown = digitalio.DigitalIO(seesaw, 4)\ndown_held = False\nright = digitalio.DigitalIO(seesaw, 5)\nright_held = False",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_ano_rotary_7segment_demo.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_ano_rotary_7segment_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_ht16k33 import segments\nfrom adafruit_seesaw import digitalio, rotaryio, seesaw\n\nup_held = False\nleft = digitalio.DigitalIO(seesaw, 3)\nleft_held = False\ndown = digitalio.DigitalIO(seesaw, 4)\ndown_held = False\nright = digitalio.DigitalIO(seesaw, 5)\nright_held = False\nencoder = rotaryio.IncrementalEncoder(seesaw)\nlast_position = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_ano_rotary_7segment_demo.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_ano_rotary_7segment_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import Color, turtle\n\nimport board\nturtle = turtle(board.DISPLAY)\nstarsize = min(board.DISPLAY.width, board.DISPLAY.height) * 0.9  # 90% of screensize",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_star.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_star.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import Color, turtle\n\nimport board\nturtle = turtle(board.DISPLAY)\nstarsize = min(board.DISPLAY.width, board.DISPLAY.height) * 0.9  # 90% of screensize",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_star.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_star.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\n\nfrom adafruit_turtle import Color, turtle\n\nturtle = turtle(board.DISPLAY)\nstarsize = min(board.DISPLAY.width, board.DISPLAY.height) * 0.9  # 90% of screensize\n\nprint(\"Turtle time! Lets draw a star\")\n\nturtle.pencolor(Color.BLUE)\nturtle.setheading(90)\n\nturtle.penup()\nturtle.goto(-starsize / 2, 0)\nturtle.pendown()\n\nstart = turtle.pos()\nwhile True:\n    turtle.forward(starsize)\n    turtle.left(170)\n    if abs(turtle.pos() - start) < 1:\n        break\n\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_star.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_star.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_ccs811\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nccs811 = adafruit_ccs811.CCS811(i2c)\n# Wait for the sensor to be ready",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ccs811/examples/ccs811_displayio_simpletest.py",
      "library": "ccs811",
      "type": "example",
      "file_name": "ccs811_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_ccs811\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nccs811 = adafruit_ccs811.CCS811(i2c)\n# Wait for the sensor to be ready",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ccs811/examples/ccs811_displayio_simpletest.py",
      "library": "ccs811",
      "type": "example",
      "file_name": "ccs811_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_ccs811\n\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ccs811/examples/ccs811_displayio_simpletest.py",
      "library": "ccs811",
      "type": "example",
      "file_name": "ccs811_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_ccs811\n\n# add the label(s) to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ccs811/examples/ccs811_displayio_simpletest.py",
      "library": "ccs811",
      "type": "example",
      "file_name": "ccs811_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nimport adafruit_bno08x\nfrom adafruit_bno08x.i2c import BNO08X_I2C\n\nimport adafruit_bno08x\ni2c = busio.I2C(board.SCL, board.SDA)\nreset_pin = DigitalInOut(board.D5)\nbno = BNO08X_I2C(i2c, reset=reset_pin, debug=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno08x/examples/bno08x_calibration.py",
      "library": "bno08x",
      "type": "example",
      "file_name": "bno08x_calibration.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nimport adafruit_bno08x\nfrom adafruit_bno08x.i2c import BNO08X_I2C\n\nimport adafruit_bno08x\ni2c = busio.I2C(board.SCL, board.SDA)\nreset_pin = DigitalInOut(board.D5)\nbno = BNO08X_I2C(i2c, reset=reset_pin, debug=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno08x/examples/bno08x_calibration.py",
      "library": "bno08x",
      "type": "example",
      "file_name": "bno08x_calibration.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_bmp280\n\n# Simple demo of the BMP280 barometric pressure sensor.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nbmp280 = adafruit_bmp280.Adafruit_BMP280_I2C(i2c)\n# change this to match the location's pressure (hPa) at sea level\nbmp280.sea_level_pressure = 1013.25",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp280/examples/bmp280_displayio_simpletest.py",
      "library": "bmp280",
      "type": "example",
      "file_name": "bmp280_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_bmp280\n\n# Simple demo of the BMP280 barometric pressure sensor.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nbmp280 = adafruit_bmp280.Adafruit_BMP280_I2C(i2c)\n# change this to match the location's pressure (hPa) at sea level\nbmp280.sea_level_pressure = 1013.25",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp280/examples/bmp280_displayio_simpletest.py",
      "library": "bmp280",
      "type": "example",
      "file_name": "bmp280_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_bmp280\n\ntempandpress_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 40)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp280/examples/bmp280_displayio_simpletest.py",
      "library": "bmp280",
      "type": "example",
      "file_name": "bmp280_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_bmp280\n\ntempandpress_output_label.anchored_position = (\naltitude_output_label.anchor_point = (0, 0)\naltitude_output_label.anchored_position = (4, board.DISPLAY.height // 2 + 20)\n# add the label to the main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp280/examples/bmp280_displayio_simpletest.py",
      "library": "bmp280",
      "type": "example",
      "file_name": "bmp280_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_bmp280\n\n# add the label to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp280/examples/bmp280_displayio_simpletest.py",
      "library": "bmp280",
      "type": "example",
      "file_name": "bmp280_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\nfrom digitalio import DigitalInOut\nimport adafruit_lifx\n\nssid = getenv(\"CIRCUITPY_WIFI_SSID\")\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\nlifx_token = getenv(\"lifx_token\")\n# ESP32 SPI\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/lifx/examples/lifx_simpletest.py",
      "library": "lifx",
      "type": "example",
      "file_name": "lifx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\nfrom digitalio import DigitalInOut\nimport adafruit_lifx\n\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\nlifx_token = getenv(\"lifx_token\")\n# ESP32 SPI\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/lifx/examples/lifx_simpletest.py",
      "library": "lifx",
      "type": "example",
      "file_name": "lifx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\nfrom digitalio import DigitalInOut\nimport adafruit_lifx\n\nlifx_token = getenv(\"lifx_token\")\n# ESP32 SPI\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)\nwifi = WiFiManager(esp, ssid, password, status_pixel=status_pixel)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/lifx/examples/lifx_simpletest.py",
      "library": "lifx",
      "type": "example",
      "file_name": "lifx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\nfrom digitalio import DigitalInOut\nimport adafruit_lifx\n\n# ESP32 SPI\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)\nwifi = WiFiManager(esp, ssid, password, status_pixel=status_pixel)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/lifx/examples/lifx_simpletest.py",
      "library": "lifx",
      "type": "example",
      "file_name": "lifx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\nfrom digitalio import DigitalInOut\nimport adafruit_lifx\n\n# ESP32 SPI\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)\nwifi = WiFiManager(esp, ssid, password, status_pixel=status_pixel)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/lifx/examples/lifx_simpletest.py",
      "library": "lifx",
      "type": "example",
      "file_name": "lifx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\nfrom digitalio import DigitalInOut\nimport adafruit_lifx\n\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)\nwifi = WiFiManager(esp, ssid, password, status_pixel=status_pixel)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/lifx/examples/lifx_simpletest.py",
      "library": "lifx",
      "type": "example",
      "file_name": "lifx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\nfrom digitalio import DigitalInOut\nimport adafruit_lifx\n\n# Set this to your LIFX light separator label\n# https://api.developer.lifx.com/docs/selectors\nlifx_light = \"label:Lamp\"\n# Initialize the LIFX API Client\nlifx = adafruit_lifx.LIFX(wifi, lifx_token)\n# List all lights\nlights = lifx.list_lights()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/lifx/examples/lifx_simpletest.py",
      "library": "lifx",
      "type": "example",
      "file_name": "lifx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import array\nimport board\nimport rp2pio\nimport adafruit_pioasm\n\nclass IncrementalEncoder:\n    _state_look_up_table = array.array('b', [0, -1, +1, +2, +1, 0, +2, -1, -1, +2, 0, +1, +2, +1, -1, 0, 0, -1, +1, -2, +1, 0, -2, -1, -1, -2, 0, +1, -2, +1, -1, 0])\n    _sm_code = adafruit_pioasm.assemble('\\n    again:\\n        in pins, 2\\n        mov x, isr\\n        jmp x!=y, push_data\\n        mov isr, null\\n        jmp again\\n    push_data:\\n        push\\n        mov y, x\\n    ')\n    _sm_init = adafruit_pioasm.assemble('set y 31')\n\n    def __init__(self, pin_a, pin_b):\n        if not rp2pio.pins_are_sequential([pin_a, pin_b]):\n            raise ValueError('Pins must be sequential')\n        self._sm = rp2pio.StateMachine(self._sm_code, 160000, init=self._sm_init, first_in_pin=pin_a, in_pin_count=2, pull_in_pin_up=3, in_shift_right=False)\n        self._counter = 0\n        self._direction = 0\n        self._lut_index = 0\n        self._buffer = bytearray(1)\n\n    def _update_state_machine(self, state):\n        lut_index = self._lut_index | state & 3\n        lut = self._state_look_up_table[lut_index]\n        self._counter += lut\n        if lut:\n            self._direction = 1 if lut > 0 else 0\n        self._lut_index = lut_index << 2 & 12 | self._direction << 4\n\n    def deinit(self):\n        self._sm.deinit()\n\n    @property\n    def value(self):\n        while self._sm.in_waiting:\n            self._sm.readinto(self._buffer)\n            self._update_state_machine(self._buffer[0])\n        return self._counter\n\n# Usage example:\n\n\nclass IncrementalEncoder:\n    _state_look_up_table = array.array(\n        \"b\",",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_rotaryencoder.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_rotaryencoder.py",
      "chunk_type": "function",
      "function_name": "IncrementalEncoder"
    }
  },
  {
    "content": "import array\nimport board\nimport rp2pio\nimport adafruit_pioasm\n\nencoder = IncrementalEncoder(board.GP2, board.GP3)\nold_value = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_rotaryencoder.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_rotaryencoder.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nfrom adafruit_msa3xx import MSA301\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nmsa = MSA301(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/msa301/examples/msa301_displayio_simpletest.py",
      "library": "msa301",
      "type": "example",
      "file_name": "msa301_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nfrom adafruit_msa3xx import MSA301\n\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/msa301/examples/msa301_displayio_simpletest.py",
      "library": "msa301",
      "type": "example",
      "file_name": "msa301_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nfrom adafruit_msa3xx import MSA301\n\n# add the label(s) to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/msa301/examples/msa301_displayio_simpletest.py",
      "library": "msa301",
      "type": "example",
      "file_name": "msa301_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport adafruit_pixelbuf\nfrom rp2pio import StateMachine\nfrom adafruit_pioasm import Program\n\nclass NeoPixelBackground(adafruit_pixelbuf.PixelBuf):\n\n    def __init__(self, pin, n, *, bpp=3, brightness=1.0, auto_write=True, pixel_order=None):\n        if not pixel_order:\n            pixel_order = GRB if bpp == 3 else GRBW\n        elif isinstance(pixel_order, tuple):\n            order_list = [RGBW[order] for order in pixel_order]\n            pixel_order = ''.join(order_list)\n        byte_count = bpp * n\n        bit_count = byte_count * 8\n        padding_count = -byte_count % 4\n        header = struct.pack('>L', bit_count - 1)\n        trailer = b'\\x00' * padding_count + struct.pack('>L', 3840)\n        self._sm = StateMachine(_program.assembled, auto_pull=False, first_sideset_pin=pin, out_shift_right=False, pull_threshold=32, frequency=12800000, **_program.pio_kwargs)\n        self._first = True\n        super().__init__(n, brightness=brightness, byteorder=pixel_order, auto_write=False, header=header, trailer=trailer)\n        self._auto_write = False\n        self._auto_writing = False\n        self.auto_write = auto_write\n\n    @property\n    def auto_write(self):\n        return self._auto_write\n\n    @auto_write.setter\n    def auto_write(self, value):\n        self._auto_write = bool(value)\n        if not value and self._auto_writing:\n            self._sm.background_write()\n            self._auto_writing = False\n        elif value:\n            self.show()\n\n    def _transmit(self, buf):\n        if self._auto_write:\n            if not self._auto_writing:\n                self._sm.background_write(loop=memoryview(buf).cast('L'), swap=True)\n                self._auto_writing = True\n        else:\n            self._sm.background_write(memoryview(buf).cast('L'), swap=True)\n\n# Usage example:\n\"\"\"Demonstrate background writing with NeoPixels\n\nThe NeoPixelBackground class defined here is largely compatible with the\nstandard NeoPixel class, except that the ``show()`` method returns immediately,\nwriting data to the LEDs in the background, and setting `auto_write` to true",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_neopixel_bg.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_neopixel_bg.py",
      "chunk_type": "function",
      "function_name": "NeoPixelBackground"
    }
  },
  {
    "content": "import gc\nimport time\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport neopixel\nfrom adafruit_ht16k33 import segments\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_espatcontrol.adafruit_espatcontrol_socket as pool\nfrom adafruit_espatcontrol import adafruit_espatcontrol\n\nesp = adafruit_espatcontrol.ESP_ATcontrol(uart, 115200, run_baudrate=921600, reset_pin=resetpin, rts_pin=rtspin, debug=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_countviewer.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_countviewer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import gc\nimport time\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport neopixel\nfrom adafruit_ht16k33 import segments\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_espatcontrol.adafruit_espatcontrol_socket as pool\nfrom adafruit_espatcontrol import adafruit_espatcontrol\n\nesp = adafruit_espatcontrol.ESP_ATcontrol(\n    uart, 115200, run_baudrate=921600, reset_pin=resetpin, rts_pin=rtspin, debug=False\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# display",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_countviewer.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_countviewer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import gc\nimport time\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport neopixel\nfrom adafruit_ht16k33 import segments\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_espatcontrol.adafruit_espatcontrol_socket as pool\nfrom adafruit_espatcontrol import adafruit_espatcontrol\n\n    uart, 115200, run_baudrate=921600, reset_pin=resetpin, rts_pin=rtspin, debug=False\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# display",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_countviewer.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_countviewer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import gc\nimport time\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport neopixel\nfrom adafruit_ht16k33 import segments\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_espatcontrol.adafruit_espatcontrol_socket as pool\nfrom adafruit_espatcontrol import adafruit_espatcontrol\n\n# Light up LEDs and play a tune\ndef chime_light():\n    \"\"\"Light up LEDs and play a tune\"\"\"\n    if NEOPIXELS_ON_CHANGE:\n        for i in range(0, 100, 10):\n            if pixel_type == 'RGB/GRB':\n                pixels.fill((i, i, i))\n            elif pixel_type == 'RGBW/GRBW':\n                pixels.fill((i, i, i, i))\n            pixels.show()\n            time.sleep(1)\n    if PLAY_SOUND_ON_CHANGE:\n        with audioio.AudioOut(board.A0) as audio:\n            audio.play(wave)\n            while audio.playing:\n                pass\n    if NEOPIXELS_ON_CHANGE:\n        for i in range(100, 0, -10):\n            if pixel_type == 'RGB/GRB':\n                pixels.fill((i, i, i))\n            elif pixel_type == 'RGBW/GRBW':\n                pixels.fill((i, i, i, i))\n            pixels.show()\n            time.sleep(1)\n        pixels.fill(0)\n\n# Usage example:\n\n    if last_value != value:\n        chime_light()  # animate the neopixels\n        last_value = value\n    times += 1",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_countviewer.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_countviewer.py",
      "chunk_type": "function",
      "function_name": "chime_light"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom adafruit_bno08x import BNO_REPORT_ACCELEROMETER, BNO_REPORT_GYROSCOPE, BNO_REPORT_MAGNETOMETER, BNO_REPORT_ROTATION_VECTOR\nfrom adafruit_bno08x.i2c import BNO08X_I2C\n\ni2c = busio.I2C(board.SCL, board.SDA, frequency=400000)\nbno = BNO08X_I2C(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno08x/examples/bno08x_simpletest.py",
      "library": "bno08x",
      "type": "example",
      "file_name": "bno08x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom micropython import const\nfrom adafruit_seesaw.seesaw import Seesaw\n\nJOY2_X = const(0)\nJOY2_Y = const(16)\nbutton_mask = const((1 << BUTTON_1) | (1 << BUTTON_2) | (1 << BUTTON_3) | (1 << BUTTON_4))\ni2c_bus = board.STEMMA_I2C()  # The built-in STEMMA QT connector on the microcontroller\n# i2c_bus = board.I2C()  # Uses board.SCL and board.SDA. Use with breadboard.\nseesaw = Seesaw(i2c_bus, addr=0x49)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_pc_joystick.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_pc_joystick.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ds3231\n\nimport board\nimport adafruit_ds3231\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nrtc = adafruit_ds3231.DS3231(i2c)\n# Lookup table for names of days (nicer printing).",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds3231/examples/ds3231_simpletest.py",
      "library": "ds3231",
      "type": "example",
      "file_name": "ds3231_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ds3231\n\nimport adafruit_ds3231\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nrtc = adafruit_ds3231.DS3231(i2c)\n# Lookup table for names of days (nicer printing).\ndays = (\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds3231/examples/ds3231_simpletest.py",
      "library": "ds3231",
      "type": "example",
      "file_name": "ds3231_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_vl53l4cd\n\nimport digitalio\nimport adafruit_vl53l4cd\n# Define the I2C pins.\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nxshut = [\n    # Update the D6 and D5 pins to match the pins to which you wired your sensor XSHUT pins.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l4cd/examples/vl53l4cd_set_address_multiple_sensors.py",
      "library": "vl53l4cd",
      "type": "example",
      "file_name": "vl53l4cd_set_address_multiple_sensors.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_vl53l4cd\n\nxshut = [digitalio.DigitalInOut(board.D6), digitalio.DigitalInOut(board.D5)]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l4cd/examples/vl53l4cd_set_address_multiple_sensors.py",
      "library": "vl53l4cd",
      "type": "example",
      "file_name": "vl53l4cd_set_address_multiple_sensors.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport board\nimport digitalio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom adafruit_httpserver import Request, Response, Server\n\n# For Adafruit Ethernet FeatherWing\ncs = digitalio.DigitalInOut(board.D10)\n# For Particle Ethernet FeatherWing\n# cs = digitalio.DigitalInOut(board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/httpserver/examples/httpserver_simpletest_manual_ethernet.py",
      "library": "httpserver",
      "type": "example",
      "file_name": "httpserver_simpletest_manual_ethernet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport board\nimport digitalio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom adafruit_httpserver import Request, Response, Server\n\ncs = digitalio.DigitalInOut(board.D10)\n# For Particle Ethernet FeatherWing\n# cs = digitalio.DigitalInOut(board.D5)\nspi_bus = board.SPI()\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/httpserver/examples/httpserver_simpletest_manual_ethernet.py",
      "library": "httpserver",
      "type": "example",
      "file_name": "httpserver_simpletest_manual_ethernet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport board\nimport digitalio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom adafruit_httpserver import Request, Response, Server\n\nspi_bus = board.SPI()\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)\npool = adafruit_connection_manager.get_radio_socketpool(eth)\nserver = Server(pool, \"/static\", debug=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/httpserver/examples/httpserver_simpletest_manual_ethernet.py",
      "library": "httpserver",
      "type": "example",
      "file_name": "httpserver_simpletest_manual_ethernet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport board\nimport digitalio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom adafruit_httpserver import Request, Response, Server\n\n# Serve a default static plain text message.\n@server.route('/')\ndef base(request: Request):\n    \"\"\"\n    Serve a default static plain text message.\n    \"\"\"\n    return Response(request, 'Hello from the CircuitPython HTTP Server!')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/httpserver/examples/httpserver_simpletest_manual_ethernet.py",
      "library": "httpserver",
      "type": "example",
      "file_name": "httpserver_simpletest_manual_ethernet.py",
      "chunk_type": "function",
      "function_name": "base"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2023 Tim C for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nimport adafruit_connection_manager\nimport board\nimport digitalio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\nfrom adafruit_httpserver import Request, Response, Server\n\n# For Adafruit Ethernet FeatherWing\ncs = digitalio.DigitalInOut(board.D10)\n\n# For Particle Ethernet FeatherWing\n# cs = digitalio.DigitalInOut(board.D5)\n\nspi_bus = board.SPI()\n\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)\n\npool = adafruit_connection_manager.get_radio_socketpool(eth)\n\nserver = Server(pool, \"/static\", debug=True)\n\n\n@server.route(\"/\")\ndef base(request: Request):\n    \"\"\"\n    Serve a default static plain text message.\n    \"\"\"\n    return Response(request, \"Hello from the CircuitPython HTTP Server!\")\n\n\nserver.serve_forever(str(eth.pretty_ip(eth.ip_address)))\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/httpserver/examples/httpserver_simpletest_manual_ethernet.py",
      "library": "httpserver",
      "type": "example",
      "file_name": "httpserver_simpletest_manual_ethernet.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tlc59711\n\nimport adafruit_tlc59711\n##########################################\nPIXEL_COUNT = 16\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\npixels = adafruit_tlc59711.TLC59711(spi, pixel_count=PIXEL_COUNT)\n##########################################",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_fastset.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_fastset.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tlc59711\n\n##########################################\nPIXEL_COUNT = 16\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\npixels = adafruit_tlc59711.TLC59711(spi, pixel_count=PIXEL_COUNT)\n##########################################\n# test function",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_fastset.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_fastset.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tlc59711\n\n# Channel check pixel.\ndef channelcheck_update_pixel(offset):\n    \"\"\"Channel check pixel.\"\"\"\n    pixels.set_pixel_16bit_value(offset, 1000, 100, 0)\n    last = offset - 1\n    if last < 0:\n        last = PIXEL_COUNT - 1\n    pixels.set_pixel_16bit_value(last, 0, 0, 1)\n    pixels.show()\n    offset += 1\n    if offset >= PIXEL_COUNT:\n        time.sleep(0.2)\n        offset = 0\n        print('clear')\n        pixels.set_pixel_all_16bit_value(0, 1, 0)\n        pixels.show()\n    return offset\n\n# Usage example:\n    print(\"loop:\")\n    while True:\n        offset = channelcheck_update_pixel(offset)\n        time.sleep(0.2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_fastset.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_fastset.py",
      "chunk_type": "function",
      "function_name": "channelcheck_update_pixel"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tlc59711\n\n# Test Main.\ndef test_main():\n    \"\"\"Test Main.\"\"\"\n    print(42 * '*', end='')\n    print(__doc__, end='')\n    print(42 * '*')\n    bcvalues = adafruit_tlc59711.TLC59711.calculate_BCData(Ioclmax=18, IoutR=18, IoutG=11, IoutB=13)\n    print(f'bcvalues = {bcvalues}')\n    pixels.bcr = bcvalues[0]\n    pixels.bcg = bcvalues[1]\n    pixels.bcb = bcvalues[2]\n    pixels.update_BCData()\n    pixels.show()\n    offset = 0\n    print('loop:')\n    while True:\n        offset = channelcheck_update_pixel(offset)\n        time.sleep(0.2)\n\n# Usage example:\n\nif __name__ == \"__main__\":\n    test_main()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_fastset.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_fastset.py",
      "chunk_type": "function",
      "function_name": "test_main"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8179\n\nimport adafruit_uc8179\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8179/examples/uc8179_ThinkInk_583_Tricolor_AABMFGNR.py",
      "library": "uc8179",
      "type": "example",
      "file_name": "uc8179_ThinkInk_583_Tricolor_AABMFGNR.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8179\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8179/examples/uc8179_ThinkInk_583_Tricolor_AABMFGNR.py",
      "library": "uc8179",
      "type": "example",
      "file_name": "uc8179_ThinkInk_583_Tricolor_AABMFGNR.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8179\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8179/examples/uc8179_ThinkInk_583_Tricolor_AABMFGNR.py",
      "library": "uc8179",
      "type": "example",
      "file_name": "uc8179_ThinkInk_583_Tricolor_AABMFGNR.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8179\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8179/examples/uc8179_ThinkInk_583_Tricolor_AABMFGNR.py",
      "library": "uc8179",
      "type": "example",
      "file_name": "uc8179_ThinkInk_583_Tricolor_AABMFGNR.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8179\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8179/examples/uc8179_ThinkInk_583_Tricolor_AABMFGNR.py",
      "library": "uc8179",
      "type": "example",
      "file_name": "uc8179_ThinkInk_583_Tricolor_AABMFGNR.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8179\n\ndisplay = adafruit_uc8179.UC8179(display_bus, width=648, height=480, busy_pin=epd_busy, rotation=180, black_bits_inverted=True, highlight_color=16711680, colstart=0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8179/examples/uc8179_ThinkInk_583_Tricolor_AABMFGNR.py",
      "library": "uc8179",
      "type": "example",
      "file_name": "uc8179_ThinkInk_583_Tricolor_AABMFGNR.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import busio\nfrom board import SCL, SDA\nfrom PIL import Image\nimport adafruit_ssd1306\n\nimport adafruit_ssd1306\n# Create the I2C interface.\ni2c = busio.I2C(SCL, SDA)\n# Create the SSD1306 OLED class.\n# The first two parameters are the pixel width and pixel height.  Change these\n# to the right size for your display!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_pillow_images.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_pillow_images.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import busio\nfrom board import SCL, SDA\nfrom PIL import Image\nimport adafruit_ssd1306\n\ni2c = busio.I2C(SCL, SDA)\n# Create the SSD1306 OLED class.\n# The first two parameters are the pixel width and pixel height.  Change these\n# to the right size for your display!\ndisp = adafruit_ssd1306.SSD1306_I2C(128, 64, i2c)\n# Note you can change the I2C address, or add a reset pin:\n# disp = adafruit_ssd1306.SSD1306_I2C(128, 32, i2c, addr=0x3c, reset=reset_pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_pillow_images.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_pillow_images.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_waveform import sine\n\nimport board\nimport digitalio\nLED = digitalio.DigitalInOut(board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/waveform/examples/waveform_sine_simpletest.py",
      "library": "waveform",
      "type": "example",
      "file_name": "waveform_sine_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"\n'sine_demo.py'.\n\n=================================================\ntoggles the builtin LED using a sine wave\n\"\"\"\n\nimport time\n\nimport board\nimport digitalio\n\nfrom adafruit_waveform import sine\n\nLED = digitalio.DigitalInOut(board.D13)\nLED.switch_to_output()\n\nSINE_SAMPLE = sine.sine_wave(150, 50)\n\nwhile True:\n    for i in range(len(SINE_SAMPLE)):\n        LED.value = i\n        print(LED.value)\n        time.sleep(0.50)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/waveform/examples/waveform_sine_simpletest.py",
      "library": "waveform",
      "type": "example",
      "file_name": "waveform_sine_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_stmpe610\n\nimport digitalio\nimport adafruit_stmpe610\n# Instantiate the touchpad\nts_cs_pin = digitalio.DigitalInOut(board.D6)\nts = adafruit_stmpe610.Adafruit_STMPE610_SPI(board.SPI(), ts_cs_pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/stmpe610/examples/stmpe610_touch_point_simpletest.py",
      "library": "stmpe610",
      "type": "example",
      "file_name": "stmpe610_touch_point_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_stmpe610\n\nimport adafruit_stmpe610\n# Instantiate the touchpad\nts_cs_pin = digitalio.DigitalInOut(board.D6)\nts = adafruit_stmpe610.Adafruit_STMPE610_SPI(board.SPI(), ts_cs_pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/stmpe610/examples/stmpe610_touch_point_simpletest.py",
      "library": "stmpe610",
      "type": "example",
      "file_name": "stmpe610_touch_point_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2022 CedarGroveMakerStudios for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nSimple print-to-REPL demo using the STMPE610 resistive touch controller.\n\"\"\"\n\nimport board\nimport digitalio\n\nimport adafruit_stmpe610\n\n# Instantiate the touchpad\nts_cs_pin = digitalio.DigitalInOut(board.D6)\nts = adafruit_stmpe610.Adafruit_STMPE610_SPI(board.SPI(), ts_cs_pin)\n\nprint(\"Go Ahead - Touch the Screen - Make My Day!\")\nprint(\"(x, y, pressure)\")\nwhile True:\n    point = ts.touch_point\n    if point:\n        print(point)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/stmpe610/examples/stmpe610_touch_point_simpletest.py",
      "library": "stmpe610",
      "type": "example",
      "file_name": "stmpe610_touch_point_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1306\n\nimport adafruit_ssd1306\n# Setting some variables for our reset pin etc.\nRESET_PIN = digitalio.DigitalInOut(board.D4)\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_pillow_clock.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_pillow_clock.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1306\n\nimport adafruit_ssd1306\n# Setting some variables for our reset pin etc.\nRESET_PIN = digitalio.DigitalInOut(board.D4)\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Create the SSD1306 OLED class.\n# The first two parameters are the pixel width and pixel height.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_pillow_clock.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_pillow_clock.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1306\n\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Create the SSD1306 OLED class.\n# The first two parameters are the pixel width and pixel height.\n# Change these to the right size for your display!\noled = adafruit_ssd1306.SSD1306_I2C(128, 64, i2c)\n# Note you can change the I2C address, or add a reset pin:\n# oled = adafruit_ssd1306.SSD1306_I2C(128, 64, i2c, addr=0x3D, reset=RESET_PIN)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_pillow_clock.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_pillow_clock.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\n# set GPIO pins as necessary -- this example is for Raspberry Pi\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1_ack.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\n# set GPIO pins as necessary -- this example is for Raspberry Pi\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1_ack.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# set GPIO pins as necessary -- this example is for Raspberry Pi\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm69 = adafruit_rfm69.RFM69(spi, CS, RESET, RADIO_FREQ_MHZ)\n# Optionally set an encryption key (16 byte AES key). MUST match both",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1_ack.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm69 = adafruit_rfm69.RFM69(spi, CS, RESET, RADIO_FREQ_MHZ)\n# Optionally set an encryption key (16 byte AES key). MUST match both\n# on the transmitter and receiver (or be set to None to disable/the default).\nrfm69.encryption_key = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1_ack.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_debouncer import Button\n\n# This example shows how to count short clicks or detect a long press\npin = digitalio.DigitalInOut(board.D12)\npin.direction = digitalio.Direction.INPUT\npin.pull = digitalio.Pull.UP\nswitch = Button(pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debouncer/examples/debouncer_multi.py",
      "library": "debouncer",
      "type": "example",
      "file_name": "debouncer_multi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_debouncer import Button\n\n# This example shows how to count short clicks or detect a long press\npin = digitalio.DigitalInOut(board.D12)\npin.direction = digitalio.Direction.INPUT\npin.pull = digitalio.Pull.UP\nswitch = Button(pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debouncer/examples/debouncer_multi.py",
      "library": "debouncer",
      "type": "example",
      "file_name": "debouncer_multi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_debouncer import Button\n\n# This example shows how to count short clicks or detect a long press\npin = digitalio.DigitalInOut(board.D12)\npin.direction = digitalio.Direction.INPUT\npin.pull = digitalio.Pull.UP\nswitch = Button(pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debouncer/examples/debouncer_multi.py",
      "library": "debouncer",
      "type": "example",
      "file_name": "debouncer_multi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2022 david gauchard\n# SPDX-License-Identifier: MIT\n\nimport board\nimport digitalio\n\nfrom adafruit_debouncer import Button\n\n# This example shows how to count short clicks or detect a long press\n\npin = digitalio.DigitalInOut(board.D12)\npin.direction = digitalio.Direction.INPUT\npin.pull = digitalio.Pull.UP\nswitch = Button(pin)\n\nwhile True:\n    switch.update()\n    if switch.long_press:\n        print(\"Long Press\")\n    if switch.short_count != 0:\n        print(\"Short Press Count =\", switch.short_count)\n    if switch.long_press and switch.short_count == 1:\n        print(\"That's a long double press !\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debouncer/examples/debouncer_multi.py",
      "library": "debouncer",
      "type": "example",
      "file_name": "debouncer_multi.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_tcs34725\n\nimport board\nimport adafruit_tcs34725\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_tcs34725.TCS34725(i2c)\n# Change sensor integration time to values between 2.4 and 614.4 milliseconds",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tcs34725/examples/tcs34725_simpletest.py",
      "library": "tcs34725",
      "type": "example",
      "file_name": "tcs34725_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_tcs34725\n\nimport adafruit_tcs34725\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_tcs34725.TCS34725(i2c)\n# Change sensor integration time to values between 2.4 and 614.4 milliseconds\n# sensor.integration_time = 150",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tcs34725/examples/tcs34725_simpletest.py",
      "library": "tcs34725",
      "type": "example",
      "file_name": "tcs34725_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.EPD_SCK, MOSI=board.EPD_MOSI, MISO=None)\nepd_cs = digitalio.DigitalInOut(board.EPD_CS)\nepd_dc = digitalio.DigitalInOut(board.EPD_DC)\nepd_reset = digitalio.DigitalInOut(board.EPD_RESET)\nepd_busy = digitalio.DigitalInOut(board.EPD_BUSY)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/feather_epd_blinka.py",
      "library": "epd",
      "type": "example",
      "file_name": "feather_epd_blinka.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.EPD_SCK, MOSI=board.EPD_MOSI, MISO=None)\nepd_cs = digitalio.DigitalInOut(board.EPD_CS)\nepd_dc = digitalio.DigitalInOut(board.EPD_DC)\nepd_reset = digitalio.DigitalInOut(board.EPD_RESET)\nepd_busy = digitalio.DigitalInOut(board.EPD_BUSY)\nsrcs = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/feather_epd_blinka.py",
      "library": "epd",
      "type": "example",
      "file_name": "feather_epd_blinka.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.EPD_SCK, MOSI=board.EPD_MOSI, MISO=None)\nepd_cs = digitalio.DigitalInOut(board.EPD_CS)\nepd_dc = digitalio.DigitalInOut(board.EPD_DC)\nepd_reset = digitalio.DigitalInOut(board.EPD_RESET)\nepd_busy = digitalio.DigitalInOut(board.EPD_BUSY)\nsrcs = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/feather_epd_blinka.py",
      "library": "epd",
      "type": "example",
      "file_name": "feather_epd_blinka.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.EPD_SCK, MOSI=board.EPD_MOSI, MISO=None)\nepd_cs = digitalio.DigitalInOut(board.EPD_CS)\nepd_dc = digitalio.DigitalInOut(board.EPD_DC)\nepd_reset = digitalio.DigitalInOut(board.EPD_RESET)\nepd_busy = digitalio.DigitalInOut(board.EPD_BUSY)\nsrcs = None\ndisplay = Adafruit_SSD1680(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/feather_epd_blinka.py",
      "library": "epd",
      "type": "example",
      "file_name": "feather_epd_blinka.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.EPD_SCK, MOSI=board.EPD_MOSI, MISO=None)\nepd_cs = digitalio.DigitalInOut(board.EPD_CS)\nepd_dc = digitalio.DigitalInOut(board.EPD_DC)\nepd_reset = digitalio.DigitalInOut(board.EPD_RESET)\nepd_busy = digitalio.DigitalInOut(board.EPD_BUSY)\nsrcs = None\ndisplay = Adafruit_SSD1680(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/feather_epd_blinka.py",
      "library": "epd",
      "type": "example",
      "file_name": "feather_epd_blinka.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_vc0706\n\nimport busio\nimport adafruit_vc0706\n# Create a serial connection for the VC0706 connection, speed is auto-detected.\nuart = busio.UART(board.TX, board.RX)\n# Setup VC0706 camera\nvc0706 = adafruit_vc0706.VC0706(uart)\n# Print the version string from the camera.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vc0706/examples/vc0706_snapshot_motiondetect.py",
      "library": "vc0706",
      "type": "example",
      "file_name": "vc0706_snapshot_motiondetect.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_vc0706\n\nimport adafruit_vc0706\n# Create a serial connection for the VC0706 connection, speed is auto-detected.\nuart = busio.UART(board.TX, board.RX)\n# Setup VC0706 camera\nvc0706 = adafruit_vc0706.VC0706(uart)\n# Print the version string from the camera.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vc0706/examples/vc0706_snapshot_motiondetect.py",
      "library": "vc0706",
      "type": "example",
      "file_name": "vc0706_snapshot_motiondetect.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_vc0706\n\n# Set the baud rate to 115200 for fastest transfer (its the max speed)\nvc0706.baudrate = 115200\n# Set the image size.\nvc0706.image_size = adafruit_vc0706.IMAGE_SIZE_160x120  # Or set IMAGE_SIZE_320x240 or\n# Note you can also read the property and compare against those values to\n# see the current size:\nsize = vc0706.image_size",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vc0706/examples/vc0706_snapshot_motiondetect.py",
      "library": "vc0706",
      "type": "example",
      "file_name": "vc0706_snapshot_motiondetect.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_adafruitio_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_adafruitio_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_adafruitio_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_adafruitio_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_adafruitio_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)  # Uncomment for Most Boards",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_adafruitio_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef connected(client, userdata, flags, rc):\n    print(f'Connected to Adafruit IO! Listening for topic changes on {onoff_feed}')\n    client.subscribe(onoff_feed)\n\n# Usage example:\nesp32_reset = DigitalInOut(board.ESP_RESET)\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_adafruitio_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_esp32spi.py",
      "chunk_type": "function",
      "function_name": "connected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef disconnected(client, userdata, rc):\n    print('Disconnected from Adafruit IO!')\n\n# Usage example:\n\ndef disconnected(client, userdata, rc):\n    # This method is called when the client is disconnected\n    print(\"Disconnected from Adafruit IO!\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_adafruitio_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_esp32spi.py",
      "chunk_type": "function",
      "function_name": "disconnected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef message(client, topic, message):\n    print(f'New message on topic {topic}: {message}')\n\n# Usage example:\ndef message(client, topic, message):\n    # This method is called when a topic the client is subscribed to\n    # has a new message.\n    print(f\"New message on topic {topic}: {message}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_adafruitio_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_esp32spi.py",
      "chunk_type": "function",
      "function_name": "message"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# Connect to WiFi\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Set up a MiniMQTT Client\nmqtt_client = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_adafruitio_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Set up a MiniMQTT Client\nmqtt_client = MQTT.MQTT(\n    broker=\"io.adafruit.com\",",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_adafruitio_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nimport adafruit_ssd1306\n\n# Import the SSD1306 module.\nimport adafruit_ssd1306\n# Create the I2C interface.\ni2c = busio.I2C(board.SCL, board.SDA)\n# A reset line may be required if there is no auto-reset circuitry\nreset_pin = DigitalInOut(board.D5)\n# Create the SSD1306 OLED class.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_framebuftest.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_framebuftest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nimport adafruit_ssd1306\n\nimport adafruit_ssd1306\n# Create the I2C interface.\ni2c = busio.I2C(board.SCL, board.SDA)\n# A reset line may be required if there is no auto-reset circuitry\nreset_pin = DigitalInOut(board.D5)\n# Create the SSD1306 OLED class.\n# The first two parameters are the pixel width and pixel height.  Change these\n# to the right size for your display!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_framebuftest.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_framebuftest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nimport adafruit_ssd1306\n\ndisplay = adafruit_ssd1306.SSD1306_I2C(128, 32, i2c, addr=60, reset=reset_pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_framebuftest.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_framebuftest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_mcp2515 import MCP2515 as CAN\nfrom adafruit_mcp2515.canio import Message, RemoteTransmissionRequest\n\nNODE_ID = 0x1234ABCD\ncs = DigitalInOut(board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp2515/examples/mcp2515_send_and_receive.py",
      "library": "mcp2515",
      "type": "example",
      "file_name": "mcp2515_send_and_receive.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_mcp2515 import MCP2515 as CAN\nfrom adafruit_mcp2515.canio import Message, RemoteTransmissionRequest\n\nNODE_ID = 0x1234ABCD\ncs = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\ncan_bus = CAN(spi, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp2515/examples/mcp2515_send_and_receive.py",
      "library": "mcp2515",
      "type": "example",
      "file_name": "mcp2515_send_and_receive.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation import helper\nfrom adafruit_led_animation.animation.chase import Chase\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_led_animation.animation.rainbow import Rainbow\nfrom adafruit_led_animation.animation.rainbowchase import RainbowChase\nfrom adafruit_led_animation.animation.rainbowcomet import RainbowComet\nfrom adafruit_led_animation.color import AMBER, JADE, PURPLE\nfrom adafruit_led_animation.sequence import AnimationSequence\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\npixel_num = 32\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_pixel_map.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_pixel_map.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation import helper\nfrom adafruit_led_animation.animation.chase import Chase\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_led_animation.animation.rainbow import Rainbow\nfrom adafruit_led_animation.animation.rainbowchase import RainbowChase\nfrom adafruit_led_animation.animation.rainbowcomet import RainbowComet\nfrom adafruit_led_animation.color import AMBER, JADE, PURPLE\nfrom adafruit_led_animation.sequence import AnimationSequence\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\npixel_num = 32\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)\npixel_wing_vertical = helper.PixelMap.vertical_lines(\n    pixels, 8, 4, helper.horizontal_strip_gridmap(8, alternating=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_pixel_map.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_pixel_map.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_displayio_layout.layouts.page_layout import PageLayout\n\n# built-in display\ndisplay = board.DISPLAY\n# create and show main_group\nmain_group = displayio.Group()\ndisplay.root_group = main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_page_layout_advancedtest.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_page_layout_advancedtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_rtttl\n\nimport board\nimport digitalio\nimport adafruit_rtttl\nenable = digitalio.DigitalInOut(board.SPEAKER_ENABLE)\nenable.switch_to_output(value=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rtttl/examples/rtttl_simpletest.py",
      "library": "rtttl",
      "type": "example",
      "file_name": "rtttl_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_max1704x\n\nimport board\nimport adafruit_max1704x\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmax17 = adafruit_max1704x.MAX17048(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max1704x/examples/max1704x_advanced.py",
      "library": "max1704x",
      "type": "example",
      "file_name": "max1704x_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_max1704x\n\nimport adafruit_max1704x\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmax17 = adafruit_max1704x.MAX17048(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max1704x/examples/max1704x_advanced.py",
      "library": "max1704x",
      "type": "example",
      "file_name": "max1704x_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_character_lcd.character_lcd_spi as character_lcd\n\n# Modify this if you have a different sized character LCD\nlcd_columns = 16\nlcd_rows = 2\n# Backpack connection configuration:\nclk = board.SCK  # Pin connected to backpack CLK.\ndata = board.MOSI  # Pin connected to backpack DAT/data.\nlatch = board.D5  # Pin connected to backpack LAT/latch.\n# Initialise SPI bus.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_spi_mono_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_spi_mono_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_character_lcd.character_lcd_spi as character_lcd\n\nlcd_columns = 16\nlcd_rows = 2\n# Backpack connection configuration:\nclk = board.SCK  # Pin connected to backpack CLK.\ndata = board.MOSI  # Pin connected to backpack DAT/data.\nlatch = board.D5  # Pin connected to backpack LAT/latch.\n# Initialise SPI bus.\nspi = busio.SPI(clk, MOSI=data)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_spi_mono_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_spi_mono_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_character_lcd.character_lcd_spi as character_lcd\n\nlcd_rows = 2\n# Backpack connection configuration:\nclk = board.SCK  # Pin connected to backpack CLK.\ndata = board.MOSI  # Pin connected to backpack DAT/data.\nlatch = board.D5  # Pin connected to backpack LAT/latch.\n# Initialise SPI bus.\nspi = busio.SPI(clk, MOSI=data)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_spi_mono_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_spi_mono_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_character_lcd.character_lcd_spi as character_lcd\n\nclk = board.SCK  # Pin connected to backpack CLK.\ndata = board.MOSI  # Pin connected to backpack DAT/data.\nlatch = board.D5  # Pin connected to backpack LAT/latch.\n# Initialise SPI bus.\nspi = busio.SPI(clk, MOSI=data)\n# Initialise the LCD class\nlatch = digitalio.DigitalInOut(latch)\nlcd = character_lcd.Character_LCD_SPI(spi, latch, lcd_columns, lcd_rows)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_spi_mono_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_spi_mono_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_character_lcd.character_lcd_spi as character_lcd\n\n# Initialise SPI bus.\nspi = busio.SPI(clk, MOSI=data)\n# Initialise the LCD class\nlatch = digitalio.DigitalInOut(latch)\nlcd = character_lcd.Character_LCD_SPI(spi, latch, lcd_columns, lcd_rows)\n# Turn backlight on\nlcd.backlight = True",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_spi_mono_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_spi_mono_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_vl53l4cd\n\nimport board\nimport adafruit_vl53l4cd\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nvl53 = adafruit_vl53l4cd.VL53L4CD(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l4cd/examples/vl53l4cd_simpletest.py",
      "library": "vl53l4cd",
      "type": "example",
      "file_name": "vl53l4cd_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_vl53l4cd\n\nimport adafruit_vl53l4cd\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nvl53 = adafruit_vl53l4cd.VL53L4CD(i2c)\n# OPTIONAL: can set non-default values\nvl53.inter_measurement = 0\nvl53.timing_budget = 200",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l4cd/examples/vl53l4cd_simpletest.py",
      "library": "vl53l4cd",
      "type": "example",
      "file_name": "vl53l4cd_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom displayio import CIRCUITPYTHON_TERMINAL\nfrom adafruit_pyportal import PyPortal\n\n# Set a data source URL\nTEXT_URL = \"http://wifitest.adafruit.com/testwifi/index.html\"\n# Create the PyPortal object\npyportal = PyPortal(url=TEXT_URL, status_neopixel=board.NEOPIXEL)\n# Set display to show REPL\nboard.DISPLAY.root_group = CIRCUITPYTHON_TERMINAL",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pyportal/examples/pyportal_simpletest.py",
      "library": "pyportal",
      "type": "example",
      "file_name": "pyportal_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom displayio import CIRCUITPYTHON_TERMINAL\nfrom adafruit_pyportal import PyPortal\n\n# Create the PyPortal object\npyportal = PyPortal(url=TEXT_URL, status_neopixel=board.NEOPIXEL)\n# Set display to show REPL\nboard.DISPLAY.root_group = CIRCUITPYTHON_TERMINAL\n# Go get that data",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pyportal/examples/pyportal_simpletest.py",
      "library": "pyportal",
      "type": "example",
      "file_name": "pyportal_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2017 Scott Shawcroft, written for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\n# NOTE: Make sure you've created your settings.toml file before running this example\n# https://learn.adafruit.com/adafruit-pyportal/create-your-settings-toml-file\nimport board\nfrom displayio import CIRCUITPYTHON_TERMINAL\n\nfrom adafruit_pyportal import PyPortal\n\n# Set a data source URL\nTEXT_URL = \"http://wifitest.adafruit.com/testwifi/index.html\"\n\n# Create the PyPortal object\npyportal = PyPortal(url=TEXT_URL, status_neopixel=board.NEOPIXEL)\n\n# Set display to show REPL\nboard.DISPLAY.root_group = CIRCUITPYTHON_TERMINAL\n\n# Go get that data\nprint(\"Fetching text from\", TEXT_URL)\ndata = pyportal.fetch()\n\n# Print out what we got\nprint(\"-\" * 40)\nprint(data)\nprint(\"-\" * 40)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pyportal/examples/pyportal_simpletest.py",
      "library": "pyportal",
      "type": "example",
      "file_name": "pyportal_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lis3mdl\n\nimport board\nimport adafruit_lis3mdl\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lis3mdl.LIS3MDL(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3mdl/examples/lis3mdl_simpletest.py",
      "library": "lis3mdl",
      "type": "example",
      "file_name": "lis3mdl_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lis3mdl\n\nimport adafruit_lis3mdl\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lis3mdl.LIS3MDL(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3mdl/examples/lis3mdl_simpletest.py",
      "library": "lis3mdl",
      "type": "example",
      "file_name": "lis3mdl_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Display magnetometer data once per second\"\"\"\n\nimport time\n\nimport board\n\nimport adafruit_lis3mdl\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lis3mdl.LIS3MDL(i2c)\n\nwhile True:\n    mag_x, mag_y, mag_z = sensor.magnetic\n\n    print(f\"X:{mag_x:10.2f}, Y:{mag_y:10.2f}, Z:{mag_z:10.2f} uT\")\n    print(\"\")\n    time.sleep(1.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3mdl/examples/lis3mdl_simpletest.py",
      "library": "lis3mdl",
      "type": "example",
      "file_name": "lis3mdl_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.customcolorchase import CustomColorChase\nfrom adafruit_led_animation.color import BLUE, GREEN, PINK, RED, colorwheel\nfrom adafruit_led_animation.sequence import AnimationSequence\n\n# Colors for customcolorchase examples\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.D5\n# Update to match the number of NeoPixels you have connected\npixel_num = 30\nbrightness = 0.3",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_customcolorchase.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_customcolorchase.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.customcolorchase import CustomColorChase\nfrom adafruit_led_animation.color import BLUE, GREEN, PINK, RED, colorwheel\nfrom adafruit_led_animation.sequence import AnimationSequence\n\npixel_pin = board.D5\n# Update to match the number of NeoPixels you have connected\npixel_num = 30\nbrightness = 0.3\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=brightness, auto_write=False)\n# colors default to RAINBOW as defined in color.py\ncustom_color_chase_rainbow = CustomColorChase(pixels, speed=0.1, size=2, spacing=3)\ncustom_color_chase_rainbow_r = CustomColorChase(pixels, speed=0.1, size=3, spacing=3, reverse=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_customcolorchase.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_customcolorchase.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_tlc59711\n\n# Define SPI bus connected to chip.\n# You only need the clock and MOSI (output) line to use this chip.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\npixels = adafruit_tlc59711.TLC59711AutoShow(spi)\n# Ways to set the values:\n# just a list or tuple with 3 integer values: R G B",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_singlechip_autoshow.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_singlechip_autoshow.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_tlc59711\n\n# Define SPI bus connected to chip.\n# You only need the clock and MOSI (output) line to use this chip.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\npixels = adafruit_tlc59711.TLC59711AutoShow(spi)\n# Ways to set the values:\n# just a list or tuple with 3 integer values: R G B\n# each 0 - 65535 or 0.0 - 1.0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_singlechip_autoshow.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_singlechip_autoshow.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1306\n\nimport adafruit_ssd1306\n# Setting some variables for our reset pin etc.\nRESET_PIN = digitalio.DigitalInOut(board.D4)\n# Very important... This lets py-gaugette 'know' what pins to use in order to reset the display\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_pillow_text.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_pillow_text.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1306\n\n# Setting some variables for our reset pin etc.\nRESET_PIN = digitalio.DigitalInOut(board.D4)\n# Very important... This lets py-gaugette 'know' what pins to use in order to reset the display\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Create the SSD1306 OLED class.\n# The first two parameters are the pixel width and pixel height.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_pillow_text.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_pillow_text.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1306\n\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Create the SSD1306 OLED class.\n# The first two parameters are the pixel width and pixel height.\n# Change these to the right size for your display!\noled = adafruit_ssd1306.SSD1306_I2C(128, 64, i2c)\n# Note you can change the I2C address, or add a reset pin:\n# oled = adafruit_ssd1306.SSD1306_I2C(128, 64, i2c, addr=0x3D, reset=RESET_PIN)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_pillow_text.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_pillow_text.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import monotonic\nimport microcontroller\nimport socketpool\nimport wifi\nfrom adafruit_httpserver import GET, Request, Response, Server, SSEResponse\n\n@server.route('/client', GET)\ndef client(request: Request):\n    return Response(request, HTML_TEMPLATE, content_type='text/html')\n\n# Usage example:\n        <p>CPU temperature: <strong>-</strong>&deg;C</p>\n        <script>\n            const eventSource = new EventSource('/connect-client');\n            const cpuTemp = document.querySelector('strong');\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/httpserver/examples/httpserver_sse.py",
      "library": "httpserver",
      "type": "example",
      "file_name": "httpserver_sse.py",
      "chunk_type": "function",
      "function_name": "client"
    }
  },
  {
    "content": "from time import monotonic\nimport microcontroller\nimport socketpool\nimport wifi\nfrom adafruit_httpserver import GET, Request, Response, Server, SSEResponse\n\n@server.route('/connect-client', GET)\ndef connect_client(request: Request):\n    global sse_response\n    if sse_response is not None:\n        sse_response.close()\n    sse_response = SSEResponse(request)\n    return sse_response",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/httpserver/examples/httpserver_sse.py",
      "library": "httpserver",
      "type": "example",
      "file_name": "httpserver_sse.py",
      "chunk_type": "function",
      "function_name": "connect_client"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport displayio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_text.label import Label\n\ndemos = [\"CircuitPython = Code + Community\", \"accents - \u00fc\u00e0\u00ea\u00f9\u00e9\u00e1\u00e7\u00e3\u00cd\u00f3\u00ed\", \"others - \uf0de\u03b1\u03c8\u25cc\"]\nsplash = displayio.Group()\nboard.DISPLAY.root_group = splash\nmax_y = 0\ny = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-text/examples/display_text_pyportal.py",
      "library": "display-text",
      "type": "example",
      "file_name": "display_text_pyportal.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import sys\nimport time\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keyboard_layout_us import KeyboardLayoutUS\nimport adafruit_ble\nfrom adafruit_ble.advertising import Advertisement\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_ble.services.standard.device_info import DeviceInfoService\nfrom adafruit_ble.services.standard.hid import HIDService\n\ndevice_info = DeviceInfoService(software_revision=adafruit_ble.__version__, manufacturer='Adafruit Industries')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_hid_periph.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_hid_periph.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import sys\nimport time\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keyboard_layout_us import KeyboardLayoutUS\nimport adafruit_ble\nfrom adafruit_ble.advertising import Advertisement\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_ble.services.standard.device_info import DeviceInfoService\nfrom adafruit_ble.services.standard.hid import HIDService\n\nadvertisement = ProvideServicesAdvertisement(hid)\nadvertisement.appearance = 961\nscan_response = Advertisement()\nble = adafruit_ble.BLERadio()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_hid_periph.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_hid_periph.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from asyncio import create_task, gather, run\nfrom asyncio import sleep as async_sleep\nimport board\nimport microcontroller\nimport neopixel\nimport socketpool\nimport wifi\nfrom adafruit_httpserver import GET, Request, Response, Server, Websocket\n\npool = socketpool.SocketPool(wifi.radio)\nserver = Server(pool, debug=True)\npixel = neopixel.NeoPixel(board.NEOPIXEL, 1)\nwebsocket: Websocket = None\nHTML_TEMPLATE = \"\"\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/httpserver/examples/httpserver_websocket.py",
      "library": "httpserver",
      "type": "example",
      "file_name": "httpserver_websocket.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from asyncio import create_task, gather, run\nfrom asyncio import sleep as async_sleep\nimport board\nimport microcontroller\nimport neopixel\nimport socketpool\nimport wifi\nfrom adafruit_httpserver import GET, Request, Response, Server, Websocket\n\n@server.route('/client', GET)\ndef client(request: Request):\n    return Response(request, HTML_TEMPLATE, content_type='text/html')\n\n# Usage example:\n\n\n@server.route(\"/client\", GET)\ndef client(request: Request):\n    return Response(request, HTML_TEMPLATE, content_type=\"text/html\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/httpserver/examples/httpserver_websocket.py",
      "library": "httpserver",
      "type": "example",
      "file_name": "httpserver_websocket.py",
      "chunk_type": "function",
      "function_name": "client"
    }
  },
  {
    "content": "from asyncio import create_task, gather, run\nfrom asyncio import sleep as async_sleep\nimport board\nimport microcontroller\nimport neopixel\nimport socketpool\nimport wifi\nfrom adafruit_httpserver import GET, Request, Response, Server, Websocket\n\n@server.route('/connect-websocket', GET)\ndef connect_client(request: Request):\n    global websocket\n    if websocket is not None:\n        websocket.close()\n    websocket = Websocket(request)\n    return websocket",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/httpserver/examples/httpserver_websocket.py",
      "library": "httpserver",
      "type": "example",
      "file_name": "httpserver_websocket.py",
      "chunk_type": "function",
      "function_name": "connect_client"
    }
  },
  {
    "content": "import time\nimport busio\nimport digitalio\nfrom adafruit_max7219 import bcddigits\nfrom board import D1, D2, RX, TX\nimport adafruit_dht\n\nimport adafruit_dht\nclk = RX\ndin = TX\ncs = digitalio.DigitalInOut(D1)\nspi = busio.SPI(clk, MOSI=din)\ndisplay = bcddigits.BCDDigits(spi, cs, nDigits=8)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dht/examples/dht_to_led_display.py",
      "library": "dht",
      "type": "example",
      "file_name": "dht_to_led_display.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport busio\nimport digitalio\nfrom adafruit_max7219 import bcddigits\nfrom board import D1, D2, RX, TX\nimport adafruit_dht\n\nimport adafruit_dht\nclk = RX\ndin = TX\ncs = digitalio.DigitalInOut(D1)\nspi = busio.SPI(clk, MOSI=din)\ndisplay = bcddigits.BCDDigits(spi, cs, nDigits=8)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dht/examples/dht_to_led_display.py",
      "library": "dht",
      "type": "example",
      "file_name": "dht_to_led_display.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport busio\nimport digitalio\nfrom adafruit_max7219 import bcddigits\nfrom board import D1, D2, RX, TX\nimport adafruit_dht\n\nspi = busio.SPI(clk, MOSI=din)\ndisplay = bcddigits.BCDDigits(spi, cs, nDigits=8)\n# initial the dht device\ndhtDevice = adafruit_dht.DHT22(D2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dht/examples/dht_to_led_display.py",
      "library": "dht",
      "type": "example",
      "file_name": "dht_to_led_display.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\nimport adafruit_ssd1680\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.9_tricolor_breakout.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.9_tricolor_breakout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.9_tricolor_breakout.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.9_tricolor_breakout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.9_tricolor_breakout.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.9_tricolor_breakout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.9_tricolor_breakout.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.9_tricolor_breakout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.9_tricolor_breakout.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.9_tricolor_breakout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\ndisplay = adafruit_ssd1680.SSD1680(display_bus, width=296, height=128, highlight_color=16711680, rotation=270)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.9_tricolor_breakout.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.9_tricolor_breakout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_wii_classic\n\nimport board\nimport adafruit_wii_classic\ni2c = board.STEMMA_I2C()\nctrl_pad = adafruit_wii_classic.Wii_Classic(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wii_classic/examples/wii_classic_simpletest.py",
      "library": "wii_classic",
      "type": "example",
      "file_name": "wii_classic_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_wii_classic\n\nimport board\nimport adafruit_wii_classic\ni2c = board.STEMMA_I2C()\nctrl_pad = adafruit_wii_classic.Wii_Classic(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wii_classic/examples/wii_classic_simpletest.py",
      "library": "wii_classic",
      "type": "example",
      "file_name": "wii_classic_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2023 Liz Clark for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_wii_classic\n\ni2c = board.STEMMA_I2C()\nctrl_pad = adafruit_wii_classic.Wii_Classic(i2c)\n\nwhile True:\n    left_x, left_y = ctrl_pad.joystick_l\n    right_x, right_y = ctrl_pad.joystick_r\n    left_pressure = ctrl_pad.l_shoulder.LEFT_FORCE\n    right_pressure = ctrl_pad.r_shoulder.RIGHT_FORCE\n    print(f\"joystick_l = {left_x},{left_y}\")\n    print(f\"joystick_r = {right_x},{left_y}\")\n    print(f\"left shoulder = {left_pressure}\")\n    print(f\"right shoulder = {right_pressure}\")\n    if ctrl_pad.buttons.A:\n        print(\"button A\")\n    if ctrl_pad.buttons.B:\n        print(\"button B\")\n    if ctrl_pad.d_pad.UP:\n        print(\"dpad Up\")\n    if ctrl_pad.d_pad.DOWN:\n        print(\"dpad Down\")\n    if ctrl_pad.d_pad.LEFT:\n        print(\"dpad Left\")\n    if ctrl_pad.d_pad.RIGHT:\n        print(\"dpad Right\")\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wii_classic/examples/wii_classic_simpletest.py",
      "library": "wii_classic",
      "type": "example",
      "file_name": "wii_classic_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_tca8418 import TCA8418\n\nimport board\nimport digitalio\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntca = TCA8418(i2c)\n# get a 'digitalio' like pins from the tca",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca8418/examples/tca8418_digitalio_button.py",
      "library": "tca8418",
      "type": "example",
      "file_name": "tca8418_digitalio_button.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2022 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\nimport digitalio\n\nfrom adafruit_tca8418 import TCA8418\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntca = TCA8418(i2c)\n\n# get a 'digitalio' like pins from the tca\nled = tca.get_pin(TCA8418.R0)\nbutton = tca.get_pin(TCA8418.R1)\n\n# Setup R0 as an output that's at a low logic level default\nled.switch_to_output(value=False)\n# Setup R1 as an input with pullup\nbutton.switch_to_input(pull=digitalio.Pull.UP)\n\nwhile True:\n    led.value = button.value\n    time.sleep(0.01)  # debounce\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca8418/examples/tca8418_digitalio_button.py",
      "library": "tca8418",
      "type": "example",
      "file_name": "tca8418_digitalio_button.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)  # Uncomment for Most Boards",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef connected(client, userdata, flags, rc):\n    print(f'Connected to MQTT broker! Listening for topic changes on {default_topic}')\n    client.subscribe(default_topic)\n\n# Usage example:\nesp32_reset = DigitalInOut(board.ESP_RESET)\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_esp32spi.py",
      "chunk_type": "function",
      "function_name": "connected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef disconnected(client, userdata, rc):\n    print('Disconnected from MQTT Broker!')\n\n# Usage example:\n\ndef disconnected(client, userdata, rc):\n    # This method is called when the client is disconnected\n    print(\"Disconnected from MQTT Broker!\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_esp32spi.py",
      "chunk_type": "function",
      "function_name": "disconnected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# Method callled when a client's subscribed feed has a new\nvalue.\n:param str topic: The topic of the feed with a new value.\n:param str message: The new value\ndef message(client, topic, message):\n    \"\"\"Method callled when a client's subscribed feed has a new\n    value.\n    :param str topic: The topic of the feed with a new value.\n    :param str message: The new value\n    \"\"\"\n    print(f'New message on topic {topic}: {message}')\n\n# Usage example:\n    value.\n    :param str topic: The topic of the feed with a new value.\n    :param str message: The new value\n    \"\"\"\n    print(f\"New message on topic {topic}: {message}\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_esp32spi.py",
      "chunk_type": "function",
      "function_name": "message"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# Connect to WiFi\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Set up a MiniMQTT Client\nmqtt_client = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Set up a MiniMQTT Client\nmqtt_client = MQTT.MQTT(\n    broker=\"io.adafruit.com\",",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_husb238\n\nimport board\nimport adafruit_husb238\ni2c = board.I2C()\n# Initialize HUSB238\npd = adafruit_husb238.Adafruit_HUSB238(i2c)\nvoltages = pd.available_voltages",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/husb238/examples/husb238_simpletest.py",
      "library": "husb238",
      "type": "example",
      "file_name": "husb238_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_husb238\n\nimport adafruit_husb238\ni2c = board.I2C()\n# Initialize HUSB238\npd = adafruit_husb238.Adafruit_HUSB238(i2c)\nvoltages = pd.available_voltages",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/husb238/examples/husb238_simpletest.py",
      "library": "husb238",
      "type": "example",
      "file_name": "husb238_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2023 Liz Clark for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\"\"\"\nSimple test for the HUSB238.\nReads available voltages and then sets each available voltage.\nReads the set voltage and current from the attached PD power supply.\n\"\"\"\n\nimport time\n\nimport board\n\nimport adafruit_husb238\n\ni2c = board.I2C()\n\n# Initialize HUSB238\npd = adafruit_husb238.Adafruit_HUSB238(i2c)\nvoltages = pd.available_voltages\nprint(\"The following voltages are available:\")\nfor i, volts in enumerate(voltages):\n    print(f\"{volts}V\")\n\nv = 0\n\nwhile True:\n    while pd.attached:\n        print(f\"Setting to {voltages[v]}V!\")\n        pd.voltage = voltages[v]\n        print(f\"It is set to {pd.voltage}V/{pd.current}A\")\n        print()\n        v = (v + 1) % len(voltages)\n        time.sleep(2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/husb238/examples/husb238_simpletest.py",
      "library": "husb238",
      "type": "example",
      "file_name": "husb238_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_pcf8591.pcf8591 as PCF\nfrom adafruit_pcf8591.analog_in import AnalogIn\nfrom adafruit_pcf8591.analog_out import AnalogOut\n\n# Wiring:\n# Connect the DAC output to the first ADC channel, in addition to the\n# normal power and I2C connections\n#\n#####################################################################\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = PCF.PCF8591(i2c)\npcf_in_0 = AnalogIn(pcf, PCF.A0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8591/examples/pcf8591_simpletest.py",
      "library": "pcf8591",
      "type": "example",
      "file_name": "pcf8591_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport microcontroller\nimport wifi\nfrom adafruit_io.adafruit_io import IO_HTTP\n\n# Connect to Wi-Fi using credentials from settings.toml\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_create_and_get_feed.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_create_and_get_feed.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport microcontroller\nimport wifi\nfrom adafruit_io.adafruit_io import IO_HTTP\n\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_create_and_get_feed.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_create_and_get_feed.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport microcontroller\nimport wifi\nfrom adafruit_io.adafruit_io import IO_HTTP\n\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_create_and_get_feed.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_create_and_get_feed.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport microcontroller\nimport wifi\nfrom adafruit_io.adafruit_io import IO_HTTP\n\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)\n# Create temperature variable using the CPU temperature and print the current value.\ntemperature = microcontroller.cpu.temperature",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_create_and_get_feed.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_create_and_get_feed.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\n\n    esp32_cs = DigitalInOut(board.D13)\n    esp32_ready = DigitalInOut(board.D11)\n    esp32_reset = DigitalInOut(board.D12)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_twin_operations.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_twin_operations.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\n\n    esp32_cs = DigitalInOut(board.D13)\n    esp32_ready = DigitalInOut(board.D11)\n    esp32_reset = DigitalInOut(board.D12)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_twin_operations.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_twin_operations.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\n\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)  # Uncomment for Most Boards",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_twin_operations.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_twin_operations.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\n\n# from adafruit_esp32spi import PWMOut\n# RED_LED = PWMOut.PWMOut(esp, 26)\n# GREEN_LED = PWMOut.PWMOut(esp, 27)\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password, status_pixel=status_pixel)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_twin_operations.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_twin_operations.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\n\n#\n# From the Adafruit CircuitPython Bundle https://github.com/adafruit/Adafruit_CircuitPython_Bundle:\n# * adafruit-circuitpython-minimqtt\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Create an IoT Hub device client and connect\ndevice = IoTHubDevice(pool, ssl_context, device_connection_string)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_twin_operations.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_twin_operations.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\n\n# From the Adafruit CircuitPython Bundle https://github.com/adafruit/Adafruit_CircuitPython_Bundle:\n# * adafruit-circuitpython-minimqtt\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Create an IoT Hub device client and connect\ndevice = IoTHubDevice(pool, ssl_context, device_connection_string)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_twin_operations.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_twin_operations.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\n\ndef device_twin_desired_updated(desired_property_name: str, desired_property_value, desired_version: int):\n    print('Property', desired_property_name, 'updated to', str(desired_property_value), 'version', desired_version)\n\n# Usage example:\n\n# Subscribe to the device twin desired property updated event\ndevice.on_device_twin_desired_updated = device_twin_desired_updated\n\nprint(\"Connecting to Azure IoT Hub...\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_twin_operations.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_twin_operations.py",
      "chunk_type": "function",
      "function_name": "device_twin_desired_updated"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_lsm6ds import AccelRange, GyroRange, Rate\nfrom adafruit_lsm6ds.lsm6dsox import LSM6DSOX\n\nimport board\ni2c = board.STEMMA_I2C()  # uses board.SCL and board.SDA\n# Vibration detection example\nUCF_FILE = \"lsm6dsox_vibration_monitoring.ucf\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm6ds/examples/lsm6ds_lsm6dsox_mlc_test.py",
      "library": "lsm6ds",
      "type": "example",
      "file_name": "lsm6ds_lsm6dsox_mlc_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport terminalio\nfrom adafruit_matrixportal.matrixportal import MatrixPortal\n\ndef text_transform(val):\n    if CURRENCY == 'USD':\n        return '$%d' % val\n    if CURRENCY == 'EUR':\n        return '\\u200e\u20ac%d' % val\n    if CURRENCY == 'GBP':\n        return '\u00a3%d' % val\n    return '%d' % val\n\n# Usage example:\n    text_position=(16, 16),\n    text_color=0xFFFFFF,\n    text_transform=text_transform,\n)\nmatrixportal.preload_font(b\"$012345789\")  # preload numbers",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/matrixportal/examples/matrixportal_simpletest.py",
      "library": "matrixportal",
      "type": "example",
      "file_name": "matrixportal_simpletest.py",
      "chunk_type": "function",
      "function_name": "text_transform"
    }
  },
  {
    "content": "import time\nimport board\nimport terminalio\nfrom adafruit_matrixportal.matrixportal import MatrixPortal\n\nmatrixportal = MatrixPortal(url=DATA_SOURCE, json_path=DATA_LOCATION, status_neopixel=board.NEOPIXEL)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/matrixportal/examples/matrixportal_simpletest.py",
      "library": "matrixportal",
      "type": "example",
      "file_name": "matrixportal_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_htu21d import HTU21D\n\nimport board\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = HTU21D(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/htu21d/examples/htu21d_simpletest.py",
      "library": "htu21d",
      "type": "example",
      "file_name": "htu21d_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nfrom adafruit_htu21d import HTU21D\n\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = HTU21D(i2c)\n\n\nwhile True:\n    print(\"\\nTemperature: %0.1f C\" % sensor.temperature)\n    print(\"Humidity: %0.1f %%\" % sensor.relative_humidity)\n    time.sleep(2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/htu21d/examples/htu21d_simpletest.py",
      "library": "htu21d",
      "type": "example",
      "file_name": "htu21d_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_bno08x.spi import BNO08X_SPI\n\n# need to limit clock to 3Mhz\nspi = busio.SPI(board.SCK, MISO=board.MISO, MOSI=board.MOSI)\ncs = DigitalInOut(board.D5)\ncs.direction = Direction.OUTPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno08x/examples/bno08x_simpletest_spi.py",
      "library": "bno08x",
      "type": "example",
      "file_name": "bno08x_simpletest_spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_bno08x.spi import BNO08X_SPI\n\n# need to limit clock to 3Mhz\nspi = busio.SPI(board.SCK, MISO=board.MISO, MOSI=board.MOSI)\ncs = DigitalInOut(board.D5)\ncs.direction = Direction.OUTPUT\nint_pin = DigitalInOut(board.D6)\nint_pin.direction = Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno08x/examples/bno08x_simpletest_spi.py",
      "library": "bno08x",
      "type": "example",
      "file_name": "bno08x_simpletest_spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_bno08x.spi import BNO08X_SPI\n\nspi = busio.SPI(board.SCK, MISO=board.MISO, MOSI=board.MOSI)\ncs = DigitalInOut(board.D5)\ncs.direction = Direction.OUTPUT\nint_pin = DigitalInOut(board.D6)\nint_pin.direction = Direction.INPUT\nwake_pin = DigitalInOut(board.D9)\nwake_pin.direction = Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno08x/examples/bno08x_simpletest_spi.py",
      "library": "bno08x",
      "type": "example",
      "file_name": "bno08x_simpletest_spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_bno08x.spi import BNO08X_SPI\n\ncs.direction = Direction.OUTPUT\nint_pin = DigitalInOut(board.D6)\nint_pin.direction = Direction.INPUT\nwake_pin = DigitalInOut(board.D9)\nwake_pin.direction = Direction.INPUT\nreset_pin = DigitalInOut(board.D9)\nreset_pin.direction = Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno08x/examples/bno08x_simpletest_spi.py",
      "library": "bno08x",
      "type": "example",
      "file_name": "bno08x_simpletest_spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_bno08x.spi import BNO08X_SPI\n\nint_pin.direction = Direction.INPUT\nwake_pin = DigitalInOut(board.D9)\nwake_pin.direction = Direction.INPUT\nreset_pin = DigitalInOut(board.D9)\nreset_pin.direction = Direction.INPUT\nbno = BNO08X_SPI(spi, cs, int_pin, wake_pin, reset_pin, debug=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno08x/examples/bno08x_simpletest_spi.py",
      "library": "bno08x",
      "type": "example",
      "file_name": "bno08x_simpletest_spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 Bryan Siepert, written for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\nfrom time import sleep\n\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\n\nfrom adafruit_bno08x.spi import BNO08X_SPI\n\n# need to limit clock to 3Mhz\nspi = busio.SPI(board.SCK, MISO=board.MISO, MOSI=board.MOSI)\n\ncs = DigitalInOut(board.D5)\ncs.direction = Direction.OUTPUT\n\nint_pin = DigitalInOut(board.D6)\nint_pin.direction = Direction.INPUT\n\nwake_pin = DigitalInOut(board.D9)\nwake_pin.direction = Direction.INPUT\n\nreset_pin = DigitalInOut(board.D9)\nreset_pin.direction = Direction.INPUT\n\nbno = BNO08X_SPI(spi, cs, int_pin, wake_pin, reset_pin, debug=True)\n\nwhile True:\n    print(\"getting quat\")\n    quat = bno.quaternion\n    print(\"Rotation Vector Quaternion:\")\n    print(\"I: %0.6f  J: %0.6f K: %0.6f  Real: %0.6f\" % (quat.i, quat.j, quat.k, quat.real))\n    print(\"\")\n    sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno08x/examples/bno08x_simpletest_spi.py",
      "library": "bno08x",
      "type": "example",
      "file_name": "bno08x_simpletest_spi.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\nimport adafruit_ssd1680\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.9_grayscale_magtag2025.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.9_grayscale_magtag2025.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.9_grayscale_magtag2025.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.9_grayscale_magtag2025.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.9_grayscale_magtag2025.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.9_grayscale_magtag2025.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.9_grayscale_magtag2025.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.9_grayscale_magtag2025.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.9_grayscale_magtag2025.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.9_grayscale_magtag2025.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\ndisplay = adafruit_ssd1680.SSD1680(display_bus, width=296, height=128, busy_pin=epd_busy, rotation=270, colstart=0, vcom=40, vsh2=174, custom_lut=ti_290mfgn_gray4_lut_code, grayscale=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.9_grayscale_magtag2025.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.9_grayscale_magtag2025.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_is31fl3741\n\nimport board\nimport adafruit_is31fl3741\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nis31 = adafruit_is31fl3741.IS31FL3741(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3741/examples/is31fl3741_simpletest.py",
      "library": "is31fl3741",
      "type": "example",
      "file_name": "is31fl3741_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_is31fl3741\n\nimport adafruit_is31fl3741\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nis31 = adafruit_is31fl3741.IS31FL3741(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3741/examples/is31fl3741_simpletest.py",
      "library": "is31fl3741",
      "type": "example",
      "file_name": "is31fl3741_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_is31fl3741\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nis31 = adafruit_is31fl3741.IS31FL3741(i2c)\n\nis31.set_led_scaling(0xFF)  # turn on LEDs all the way\nis31.global_current = 0xFF  # set current to max\nis31.enable = True  # enable!\n\n# light up every LED, one at a time\nwhile True:\n    for pixel in range(351):\n        is31[pixel] = 255\n        time.sleep(0.01)\n        is31[pixel] = 0\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3741/examples/is31fl3741_simpletest.py",
      "library": "is31fl3741",
      "type": "example",
      "file_name": "is31fl3741_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_spd1656\n\nimport adafruit_spd1656\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_4in_acep.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_4in_acep.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_spd1656\n\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_4in_acep.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_4in_acep.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_spd1656\n\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12\ndisplay_bus = fourwire.FourWire(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_4in_acep.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_4in_acep.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_spd1656\n\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12\ndisplay_bus = fourwire.FourWire(\n    spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_4in_acep.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_4in_acep.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_spd1656\n\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12\ndisplay_bus = fourwire.FourWire(\n    spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_4in_acep.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_4in_acep.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_spd1656\n\ndisplay_bus = fourwire.FourWire(\n    spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000\ndisplay = adafruit_spd1656.SPD1656(display_bus, width=600, height=448, busy_pin=epd_busy)\ng = displayio.Group()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_4in_acep.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_4in_acep.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom adafruit_pcf8523.clock import Clock\nfrom adafruit_pcf8523.timer import Timer\n\nLOW_FREQ_TIMER = 10\nHIGH_FREQ_TIMER = 0.02\nHIGH_FREQ_TIME = 10\nPIN_SDA = board.GP2\nPIN_SCL = board.GP3\n# use board.SCL and board.SDA if available\ni2c = busio.I2C(PIN_SCL, PIN_SDA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8523/examples/pcf8523_timer_flag.py",
      "library": "pcf8523",
      "type": "example",
      "file_name": "pcf8523_timer_flag.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom adafruit_pcf8523.clock import Clock\nfrom adafruit_pcf8523.timer import Timer\n\nLOW_FREQ_TIMER = 10\nHIGH_FREQ_TIMER = 0.02\nHIGH_FREQ_TIME = 10\nPIN_SDA = board.GP2\nPIN_SCL = board.GP3\n# use board.SCL and board.SDA if available\ni2c = busio.I2C(PIN_SCL, PIN_SDA)\n# or i2c = board.I2C() if available",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8523/examples/pcf8523_timer_flag.py",
      "library": "pcf8523",
      "type": "example",
      "file_name": "pcf8523_timer_flag.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom adafruit_pcf8523.clock import Clock\nfrom adafruit_pcf8523.timer import Timer\n\nHIGH_FREQ_TIME = 10\nPIN_SDA = board.GP2\nPIN_SCL = board.GP3\n# use board.SCL and board.SDA if available\ni2c = busio.I2C(PIN_SCL, PIN_SDA)\n# or i2c = board.I2C() if available\ntimer = Timer(i2c)\nclock = Clock(timer.i2c_device)\nclock.clockout_frequency = clock.CLOCKOUT_FREQ_DISABLED",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8523/examples/pcf8523_timer_flag.py",
      "library": "pcf8523",
      "type": "example",
      "file_name": "pcf8523_timer_flag.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_bme280 import basic as adafruit_bme280\nfrom adafruit_display_text import label\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_displayio_ssd1306 as ssd1306\n\n# Reinitalizes display upon any soft reboot or hard reset\n# Pi Pico RP2040 I2C0 bus initialization (SSD1306 display)\ni2c0 = busio.I2C(board.GP3, board.GP2)\n# Pi Pico RP2040 I2C1 bus initialization (temp sensor from Stemma port)\ni2c1 = busio.I2C(board.GP5, board.GP4)\n# i2c = board.I2C()  # other boards use board.SCL and board.SDA",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_ssd1306/examples/displayio_ssd1306_picowbell_tempsensor.py",
      "library": "displayio_ssd1306",
      "type": "example",
      "file_name": "displayio_ssd1306_picowbell_tempsensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_bme280 import basic as adafruit_bme280\nfrom adafruit_display_text import label\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_displayio_ssd1306 as ssd1306\n\n# Pi Pico RP2040 I2C0 bus initialization (SSD1306 display)\ni2c0 = busio.I2C(board.GP3, board.GP2)\n# Pi Pico RP2040 I2C1 bus initialization (temp sensor from Stemma port)\ni2c1 = busio.I2C(board.GP5, board.GP4)\n# i2c = board.I2C()  # other boards use board.SCL and board.SDA\n# Initialize BME280 sensor\nbme280 = adafruit_bme280.Adafruit_BME280_I2C(i2c1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_ssd1306/examples/displayio_ssd1306_picowbell_tempsensor.py",
      "library": "displayio_ssd1306",
      "type": "example",
      "file_name": "displayio_ssd1306_picowbell_tempsensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_bme280 import basic as adafruit_bme280\nfrom adafruit_display_text import label\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_displayio_ssd1306 as ssd1306\n\n# Pi Pico RP2040 I2C1 bus initialization (temp sensor from Stemma port)\ni2c1 = busio.I2C(board.GP5, board.GP4)\n# i2c = board.I2C()  # other boards use board.SCL and board.SDA\n# Initialize BME280 sensor\nbme280 = adafruit_bme280.Adafruit_BME280_I2C(i2c1)\n# Configure display size\nssd_width = 128\nssd_height = 32",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_ssd1306/examples/displayio_ssd1306_picowbell_tempsensor.py",
      "library": "displayio_ssd1306",
      "type": "example",
      "file_name": "displayio_ssd1306_picowbell_tempsensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_pcf8575\n\nimport adafruit_pcf8575\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8575.PCF8575(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8575/examples/pcf8575_read16inputs.py",
      "library": "pcf8575",
      "type": "example",
      "file_name": "pcf8575_read16inputs.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_pcf8575\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8575.PCF8575(i2c)\n# turn on all 16 weak pullups",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8575/examples/pcf8575_read16inputs.py",
      "library": "pcf8575",
      "type": "example",
      "file_name": "pcf8575_read16inputs.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2022 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\n\nimport adafruit_pcf8575\n\nprint(\"PCF8575 16 input button test\")\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8575.PCF8575(i2c)\n\n\n# turn on all 16 weak pullups\npcf.write_gpio(0xFFFF)\n\nwhile True:\n    vals = pcf.read_gpio()\n    for b in range(16):\n        if not vals & (1 << b):\n            print(\"button #%d pressed\" % b)\n    time.sleep(0.01)  # debounce delay\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8575/examples/pcf8575_read16inputs.py",
      "library": "pcf8575",
      "type": "example",
      "file_name": "pcf8575_read16inputs.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_onewire.bus import OneWireBus\nimport adafruit_ds2413\n\nimport adafruit_ds2413\n# Create OneWire bus\now_bus = OneWireBus(board.D2)\n# Create the DS2413 object from the first one found on the bus\nds = adafruit_ds2413.DS2413(ow_bus, ow_bus.scan()[0])",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds2413/examples/ds2413_simpletest.py",
      "library": "ds2413",
      "type": "example",
      "file_name": "ds2413_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_onewire.bus import OneWireBus\nimport adafruit_ds2413\n\n# Create OneWire bus\now_bus = OneWireBus(board.D2)\n# Create the DS2413 object from the first one found on the bus\nds = adafruit_ds2413.DS2413(ow_bus, ow_bus.scan()[0])\n# LED on IOA\nled = ds.IOA",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds2413/examples/ds2413_simpletest.py",
      "library": "ds2413",
      "type": "example",
      "file_name": "ds2413_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_onewire.bus import OneWireBus\nimport adafruit_ds2413\n\n# LED on IOA\nled = ds.IOA\n# button on IOB\nbutton = ds.IOB\nbutton.direction = adafruit_ds2413.INPUT\n# Loop forever",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds2413/examples/ds2413_simpletest.py",
      "library": "ds2413",
      "type": "example",
      "file_name": "ds2413_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bno055\n\nimport board\nimport adafruit_bno055\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_bno055.BNO055_I2C(i2c)\n# If you are going to use UART uncomment these lines",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno055/examples/bno055_simpletest.py",
      "library": "bno055",
      "type": "example",
      "file_name": "bno055_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bno055\n\nimport adafruit_bno055\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_bno055.BNO055_I2C(i2c)\n# If you are going to use UART uncomment these lines\n# uart = board.UART()\n# sensor = adafruit_bno055.BNO055_UART(uart)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno055/examples/bno055_simpletest.py",
      "library": "bno055",
      "type": "example",
      "file_name": "bno055_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bno055\n\ndef temperature():\n    global last_val\n    result = sensor.temperature\n    if abs(result - last_val) == 128:\n        result = sensor.temperature\n        if abs(result - last_val) == 128:\n            return 63 & result\n    last_val = result\n    return result\n\n# Usage example:\ndef temperature():\n    global last_val  # noqa: PLW0603\n    result = sensor.temperature\n    if abs(result - last_val) == 128:\n        result = sensor.temperature",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno055/examples/bno055_simpletest.py",
      "library": "bno055",
      "type": "example",
      "file_name": "bno055_simpletest.py",
      "chunk_type": "function",
      "function_name": "temperature"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mpu6050\n\nimport board\nimport adafruit_mpu6050\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmpu = adafruit_mpu6050.MPU6050(i2c)\nmpu.accelerometer_range = adafruit_mpu6050.Range.RANGE_2_G\nmpu.gyro_range = adafruit_mpu6050.GyroRange.RANGE_250_DPS",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpu6050/examples/mpu6050_plotter_example.py",
      "library": "mpu6050",
      "type": "example",
      "file_name": "mpu6050_plotter_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mpu6050\n\nimport adafruit_mpu6050\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmpu = adafruit_mpu6050.MPU6050(i2c)\nmpu.accelerometer_range = adafruit_mpu6050.Range.RANGE_2_G\nmpu.gyro_range = adafruit_mpu6050.GyroRange.RANGE_250_DPS",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpu6050/examples/mpu6050_plotter_example.py",
      "library": "mpu6050",
      "type": "example",
      "file_name": "mpu6050_plotter_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mpu6050\n\nimport adafruit_mpu6050\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmpu = adafruit_mpu6050.MPU6050(i2c)\nmpu.accelerometer_range = adafruit_mpu6050.Range.RANGE_2_G\nmpu.gyro_range = adafruit_mpu6050.GyroRange.RANGE_250_DPS",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpu6050/examples/mpu6050_plotter_example.py",
      "library": "mpu6050",
      "type": "example",
      "file_name": "mpu6050_plotter_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mpu6050\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmpu = adafruit_mpu6050.MPU6050(i2c)\nmpu.accelerometer_range = adafruit_mpu6050.Range.RANGE_2_G\nmpu.gyro_range = adafruit_mpu6050.GyroRange.RANGE_250_DPS",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpu6050/examples/mpu6050_plotter_example.py",
      "library": "mpu6050",
      "type": "example",
      "file_name": "mpu6050_plotter_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_mpu6050\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmpu = adafruit_mpu6050.MPU6050(i2c)\nmpu.accelerometer_range = adafruit_mpu6050.Range.RANGE_2_G\nmpu.gyro_range = adafruit_mpu6050.GyroRange.RANGE_250_DPS\n\nwhile True:\n    # this prints out all the values like a tuple which Mu's plotter prefer\n    print(\n        f\"({mpu.acceleration[0]:.2f}, {mpu.acceleration[1]:.2f}, {mpu.acceleration[2]:.2f} \",\n        end=\", \",\n    )\n    print(f\"{mpu.gyro[0]:.2f}, {mpu.gyro[1]:.2f}, {mpu.gyro[2]:.2f})\")\n    time.sleep(0.010)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpu6050/examples/mpu6050_plotter_example.py",
      "library": "mpu6050",
      "type": "example",
      "file_name": "mpu6050_plotter_example.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_dps310.advanced import DPS310_Advanced as DPS310\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndps310 = DPS310(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dps310/examples/dps310_simpletest_advanced.py",
      "library": "dps310",
      "type": "example",
      "file_name": "dps310_simpletest_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 Jose David M.\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nfrom adafruit_dps310.advanced import DPS310_Advanced as DPS310\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndps310 = DPS310(i2c)\n\nwhile True:\n    print(\"Temperature = %.2f *C\" % dps310.temperature)\n    print(\"Pressure = %.2f hPa\" % dps310.pressure)\n    print(\"\")\n    time.sleep(1.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dps310/examples/dps310_simpletest_advanced.py",
      "library": "dps310",
      "type": "example",
      "file_name": "dps310_simpletest_advanced.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_neotrellis.neotrellis import NeoTrellis\n\nimport board\n# create the i2c object for the trellis\ni2c_bus = board.I2C()  # uses board.SCL and board.SDA\n# i2c_bus = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# create the trellis\ntrellis = NeoTrellis(i2c_bus)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neotrellis/examples/neotrellis_simpletest.py",
      "library": "neotrellis",
      "type": "example",
      "file_name": "neotrellis_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_neotrellis.neotrellis import NeoTrellis\n\ndef blink(event):\n    if event.edge == NeoTrellis.EDGE_RISING:\n        trellis.pixels[event.number] = CYAN\n    elif event.edge == NeoTrellis.EDGE_FALLING:\n        trellis.pixels[event.number] = OFF\n\n# Usage example:\n    # activate falling edge events on all keys\n    trellis.activate_key(i, NeoTrellis.EDGE_FALLING)\n    # set all keys to trigger the blink callback\n    trellis.callbacks[i] = blink\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neotrellis/examples/neotrellis_simpletest.py",
      "library": "neotrellis",
      "type": "example",
      "file_name": "neotrellis_simpletest.py",
      "chunk_type": "function",
      "function_name": "blink"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_thermistor\n\nimport adafruit_thermistor\n# these values work with the Adafruit CircuitPlayground Express.\n# they may work with other thermistors as well, as they're fairly standard,\n# though the pin will likely need to change (ie board.A1)\npin = board.TEMPERATURE\nresistor = 10000\nresistance = 10000\nnominal_temp = 25\nb_coefficient = 3950",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/thermistor/examples/thermistor_simpletest.py",
      "library": "thermistor",
      "type": "example",
      "file_name": "thermistor_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_thermistor\n\nresistor = 10000\nresistance = 10000\nnominal_temp = 25\nb_coefficient = 3950\nthermistor = adafruit_thermistor.Thermistor(pin, resistor, resistance, nominal_temp, b_coefficient)\n# print the temperature in C and F to the serial console every second",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/thermistor/examples/thermistor_simpletest.py",
      "library": "thermistor",
      "type": "example",
      "file_name": "thermistor_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_thermistor\n\n# these values work with the Adafruit CircuitPlayground Express.\n# they may work with other thermistors as well, as they're fairly standard,\n# though the pin will likely need to change (ie board.A1)\npin = board.TEMPERATURE\nresistor = 10000\nresistance = 10000\nnominal_temp = 25\nb_coefficient = 3950\n\nthermistor = adafruit_thermistor.Thermistor(pin, resistor, resistance, nominal_temp, b_coefficient)\n\n# print the temperature in C and F to the serial console every second\nwhile True:\n    celsius = thermistor.temperature\n    fahrenheit = (celsius * 9 / 5) + 32\n    print(f\"== Temperature ==\\n{celsius} *C\\n{fahrenheit} *F\\n\")\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/thermistor/examples/thermistor_simpletest.py",
      "library": "thermistor",
      "type": "example",
      "file_name": "thermistor_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport adafruit_ds3502\n\nimport board\nimport adafruit_ds3502\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nds3502 = adafruit_ds3502.DS3502(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds3502/examples/ds3502_set_default.py",
      "library": "ds3502",
      "type": "example",
      "file_name": "ds3502_set_default.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_ds3502\n\nimport adafruit_ds3502\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nds3502 = adafruit_ds3502.DS3502(i2c)\n#   Steps to test `set_default`:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds3502/examples/ds3502_set_default.py",
      "library": "ds3502",
      "type": "example",
      "file_name": "ds3502_set_default.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\n\nimport adafruit_ds3502\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nds3502 = adafruit_ds3502.DS3502(i2c)\n\n\n#   Steps to test `set_default`:\n\n#   1. Run the program once to see what the current default value is\n#   2. Uncomment the call to `setWiperDefault` below and run it again.\n#   3. Once the program has run with the `set_default` call,\n#       comment out the line below again, then powercycle the DS3502\n#       by removing then reattaching VCC\n#   4. Then run the program again with the line commented out to see the\n#       new default wiper value\n\n# ds3502.set_default(99)\n\n\nprint(\"Default wiper value: %d\" % ds3502.wiper)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds3502/examples/ds3502_set_default.py",
      "library": "ds3502",
      "type": "example",
      "file_name": "ds3502_set_default.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import binascii\nimport os\nimport struct\nimport time\nimport adafruit_ble\nimport adafruit_ble_creation\nimport adafruit_ble_file_transfer\nfrom adafruit_ble_file_transfer import FileTransferService\n\nimport adafruit_ble_creation\nimport adafruit_ble_file_transfer\ncid = adafruit_ble_creation.creation_ids[os.uname().machine]\nble = adafruit_ble.BLERadio()\n# ble._adapter.erase_bonding()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_file_transfer/examples/ble_file_transfer_stub_server.py",
      "library": "ble_file_transfer",
      "type": "example",
      "file_name": "ble_file_transfer_stub_server.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport os\nimport struct\nimport time\nimport adafruit_ble\nimport adafruit_ble_creation\nimport adafruit_ble_file_transfer\nfrom adafruit_ble_file_transfer import FileTransferService\n\nimport adafruit_ble_file_transfer\ncid = adafruit_ble_creation.creation_ids[os.uname().machine]\nble = adafruit_ble.BLERadio()\n# ble._adapter.erase_bonding()\nservice = FileTransferService()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_file_transfer/examples/ble_file_transfer_stub_server.py",
      "library": "ble_file_transfer",
      "type": "example",
      "file_name": "ble_file_transfer_stub_server.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport os\nimport struct\nimport time\nimport adafruit_ble\nimport adafruit_ble_creation\nimport adafruit_ble_file_transfer\nfrom adafruit_ble_file_transfer import FileTransferService\n\nble = adafruit_ble.BLERadio()\n# ble._adapter.erase_bonding()\nservice = FileTransferService()\nadvert = adafruit_ble_creation.Creation(creation_id=cid, services=[service])",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_file_transfer/examples/ble_file_transfer_stub_server.py",
      "library": "ble_file_transfer",
      "type": "example",
      "file_name": "ble_file_transfer_stub_server.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport os\nimport struct\nimport time\nimport adafruit_ble\nimport adafruit_ble_creation\nimport adafruit_ble_file_transfer\nfrom adafruit_ble_file_transfer import FileTransferService\n\ndef find_dir(full_path):\n    parts = full_path.split('/')\n    parent_dir = stored_data\n    k = 1\n    while k < len(parts) - 1:\n        part = parts[k]\n        if part not in parent_dir:\n            return None\n        parent_dir = parent_dir[part]\n        k += 1\n    return parent_dir\n\n# Usage example:\n            path = read_complete_path(p[path_start:], path_length)\n\n            d = find_dir(path)\n            filename = path.rsplit(\"/\", maxsplit=1)[-1]\n            if filename not in d:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_file_transfer/examples/ble_file_transfer_stub_server.py",
      "library": "ble_file_transfer",
      "type": "example",
      "file_name": "ble_file_transfer_stub_server.py",
      "chunk_type": "function",
      "function_name": "find_dir"
    }
  },
  {
    "content": "import binascii\nimport os\nimport struct\nimport time\nimport adafruit_ble\nimport adafruit_ble_creation\nimport adafruit_ble_file_transfer\nfrom adafruit_ble_file_transfer import FileTransferService\n\ndef read_packets(buf, *, target_size=None):\n    if not target_size:\n        target_size = len(buf)\n    total_read = 0\n    buf = memoryview(buf)\n    while total_read < target_size:\n        count = service.raw.readinto(buf[total_read:])\n        total_read += count\n    return total_read\n\n# Usage example:\n    complete_path[:current_path_length] = starting_path\n    if remaining_path > 0:\n        read_packets(memoryview(complete_path)[current_path_length:], target_size=remaining_path)\n    return str(complete_path, \"utf-8\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_file_transfer/examples/ble_file_transfer_stub_server.py",
      "library": "ble_file_transfer",
      "type": "example",
      "file_name": "ble_file_transfer_stub_server.py",
      "chunk_type": "function",
      "function_name": "read_packets"
    }
  },
  {
    "content": "import binascii\nimport os\nimport struct\nimport time\nimport adafruit_ble\nimport adafruit_ble_creation\nimport adafruit_ble_file_transfer\nfrom adafruit_ble_file_transfer import FileTransferService\n\ndef write_packets(buf):\n    packet_length = service.raw.outgoing_packet_length\n    if len(buf) <= packet_length:\n        service.raw.write(buf)\n        return\n    full_packet = memoryview(bytearray(packet_length))\n    sent = 0\n    while offset < len(buf):\n        this_packet = full_packet[:len(buf) - sent]\n        for k in range(len(this_packet)):\n            this_packet[k] = buf[sent + k]\n        sent += len(this_packet)\n        service.raw.write(this_packet)\n\n# Usage example:\n                    next_amount,\n                )\n                write_packets(header)\n                read = read_packets(packet_buffer, target_size=next_amount + write_data_header_size)\n                cmd, status, offset, data_size = struct.unpack_from(\"<BBxxII\", packet_buffer)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_file_transfer/examples/ble_file_transfer_stub_server.py",
      "library": "ble_file_transfer",
      "type": "example",
      "file_name": "ble_file_transfer_stub_server.py",
      "chunk_type": "function",
      "function_name": "write_packets"
    }
  },
  {
    "content": "import binascii\nimport os\nimport struct\nimport time\nimport adafruit_ble\nimport adafruit_ble_creation\nimport adafruit_ble_file_transfer\nfrom adafruit_ble_file_transfer import FileTransferService\n\ndef read_complete_path(starting_path, total_length):\n    complete_path = bytearray(total_length)\n    current_path_length = len(starting_path)\n    remaining_path = total_length - current_path_length\n    complete_path[:current_path_length] = starting_path\n    if remaining_path > 0:\n        read_packets(memoryview(complete_path)[current_path_length:], target_size=remaining_path)\n    return str(complete_path, 'utf-8')\n\n# Usage example:\n            ) = struct.unpack_from(\"<xHIQI\", p, offset=1)\n            path_start = struct.calcsize(\"<BxHIQI\")\n            path = read_complete_path(p[path_start:], path_length)\n\n            d = find_dir(path)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_file_transfer/examples/ble_file_transfer_stub_server.py",
      "library": "ble_file_transfer",
      "type": "example",
      "file_name": "ble_file_transfer_stub_server.py",
      "chunk_type": "function",
      "function_name": "read_complete_path"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_seesaw.digitalio import DigitalIO\nfrom adafruit_seesaw.seesaw import Seesaw\n\n# For most boards.\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# For the QT Py RP2040, QT Py ESP32-S2, other boards that have SCL1/SDA1 as the STEMMA QT port.\n# import busio",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_arcade_qt_multi_board.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_arcade_qt_multi_board.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.blink import Blink\nfrom adafruit_led_animation.animation.chase import Chase\nfrom adafruit_led_animation.animation.colorcycle import ColorCycle\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_led_animation.animation.customcolorchase import CustomColorChase\nfrom adafruit_led_animation.animation.pulse import Pulse\nfrom adafruit_led_animation.animation.rainbow import Rainbow\nfrom adafruit_led_animation.animation.rainbowchase import RainbowChase\nfrom adafruit_led_animation.animation.rainbowcomet import RainbowComet\nfrom adafruit_led_animation.animation.rainbowsparkle import RainbowSparkle\nfrom adafruit_led_animation.animation.solid import Solid\nfrom adafruit_led_animation.animation.sparkle import Sparkle\nfrom adafruit_led_animation.animation.sparklepulse import SparklePulse\nfrom adafruit_led_animation.color import AMBER, JADE, MAGENTA, ORANGE, PURPLE, WHITE\nfrom adafruit_led_animation.sequence import AnimationSequence\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\npixel_num = 32\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_all_animations.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_all_animations.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.blink import Blink\nfrom adafruit_led_animation.animation.chase import Chase\nfrom adafruit_led_animation.animation.colorcycle import ColorCycle\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_led_animation.animation.customcolorchase import CustomColorChase\nfrom adafruit_led_animation.animation.pulse import Pulse\nfrom adafruit_led_animation.animation.rainbow import Rainbow\nfrom adafruit_led_animation.animation.rainbowchase import RainbowChase\nfrom adafruit_led_animation.animation.rainbowcomet import RainbowComet\nfrom adafruit_led_animation.animation.rainbowsparkle import RainbowSparkle\nfrom adafruit_led_animation.animation.solid import Solid\nfrom adafruit_led_animation.animation.sparkle import Sparkle\nfrom adafruit_led_animation.animation.sparklepulse import SparklePulse\nfrom adafruit_led_animation.color import AMBER, JADE, MAGENTA, ORANGE, PURPLE, WHITE\nfrom adafruit_led_animation.sequence import AnimationSequence\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\npixel_num = 32\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)\nblink = Blink(pixels, speed=0.5, color=JADE)\ncolorcycle = ColorCycle(pixels, speed=0.4, colors=[MAGENTA, ORANGE])\ncomet = Comet(pixels, speed=0.01, color=PURPLE, tail_length=10, bounce=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_all_animations.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_all_animations.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_touchscreen\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_button import Button\n\n# use built in display (MagTag, PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\n# --| Button Config |-------------------------------------------------\nBUTTON_X = 110\nBUTTON_Y = 95",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-button/examples/display_button_simpletest.py",
      "library": "display-button",
      "type": "example",
      "file_name": "display_button_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_touchscreen\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_button import Button\n\nts = adafruit_touchscreen.Touchscreen(board.TOUCH_XL, board.TOUCH_XR, board.TOUCH_YD, board.TOUCH_YU, calibration=((5200, 59000), (5800, 57000)), size=(display.width, display.height))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-button/examples/display_button_simpletest.py",
      "library": "display-button",
      "type": "example",
      "file_name": "display_button_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_is31fl3731.charlie_bonnet import CharlieBonnet as Display\n\n# uncomment next line if you are using Pimoroni Scroll Phat HD LED 17 x 7\n# from adafruit_is31fl3731.scroll_phat_hd import ScrollPhatHD as Display\nBRIGHTNESS = 32  # Brightness can be between 0-255\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndisplay = Display(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3731/examples/is31fl3731_pillow_numbers.py",
      "library": "is31fl3731",
      "type": "example",
      "file_name": "is31fl3731_pillow_numbers.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport busio\nimport neopixel\nfrom micropython import const\nimport adafruit_lis3dh\n\nimport adafruit_lis3dh\n# Configuration:\nACCEL_RANGE = adafruit_lis3dh.RANGE_16_G  # Accelerometer range.\nTAP_THRESHOLD = 20  # Accelerometer tap threshold.  Higher values\n# mean you need to tap harder to start a spin.\nSPINNER_DECAY = 0.5  # Decay rate for the spinner.  Set to a value\n# from 0 to 1.0 where lower values mean the",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3dh/examples/lis3dh_spinner.py",
      "library": "lis3dh",
      "type": "example",
      "file_name": "lis3dh_spinner.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport busio\nimport neopixel\nfrom micropython import const\nimport adafruit_lis3dh\n\nclass FidgetSpinner:\n\n    def __init__(self, decay=0.5):\n        self._decay = decay\n        self._velocity = 0.0\n        self._elapsed = 0.0\n        self._position = 0.0\n\n    def spin(self, velocity):\n        self._velocity = velocity\n        self._elapsed = 0.0\n\n    def get_position(self, delta):\n        self._elapsed += delta\n        current_velocity = self._velocity * math.pow(self._decay, self._elapsed)\n        self._position += current_velocity * delta\n        self._position = math.fmod(self._position, 10.0)\n        if self._position < 0.0:\n            self._position += 10.0\n        return self._position\n\n# Usage example:\n\n# Define a class that represents the fidget spinner.\nclass FidgetSpinner:\n    def __init__(self, decay=0.5):\n        self._decay = decay",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3dh/examples/lis3dh_spinner.py",
      "library": "lis3dh",
      "type": "example",
      "file_name": "lis3dh_spinner.py",
      "chunk_type": "function",
      "function_name": "FidgetSpinner"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport busio\nimport neopixel\nfrom micropython import const\nimport adafruit_lis3dh\n\n            self._position += 10.0\n# Initialize NeoPixels and accelerometer.\npixels = neopixel.NeoPixel(board.NEOPIXEL, 10, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3dh/examples/lis3dh_spinner.py",
      "library": "lis3dh",
      "type": "example",
      "file_name": "lis3dh_spinner.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport busio\nimport neopixel\nfrom micropython import const\nimport adafruit_lis3dh\n\n# Initialize NeoPixels and accelerometer.\npixels = neopixel.NeoPixel(board.NEOPIXEL, 10, auto_write=False)\ni2c = busio.I2C(board.ACCELEROMETER_SCL, board.ACCELEROMETER_SDA)\nlis3dh = adafruit_lis3dh.LIS3DH_I2C(i2c, address=25)\n# Set accelerometer range.\nlis3dh.range = ACCEL_RANGE",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3dh/examples/lis3dh_spinner.py",
      "library": "lis3dh",
      "type": "example",
      "file_name": "lis3dh_spinner.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport busio\nimport neopixel\nfrom micropython import const\nimport adafruit_lis3dh\n\n# Initialize NeoPixels and accelerometer.\npixels = neopixel.NeoPixel(board.NEOPIXEL, 10, auto_write=False)\ni2c = busio.I2C(board.ACCELEROMETER_SCL, board.ACCELEROMETER_SDA)\nlis3dh = adafruit_lis3dh.LIS3DH_I2C(i2c, address=25)\n# Set accelerometer range.\nlis3dh.range = ACCEL_RANGE\n# Enable single click detection, but use a custom CLICK_CFG register value",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3dh/examples/lis3dh_spinner.py",
      "library": "lis3dh",
      "type": "example",
      "file_name": "lis3dh_spinner.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_lis3mdl import LIS3MDL, PerformanceMode, Rate\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = LIS3MDL(i2c)\ncurrent_rate = Rate.RATE_155_HZ",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3mdl/examples/lis3mdl_data_rate_test.py",
      "library": "lis3mdl",
      "type": "example",
      "file_name": "lis3mdl_data_rate_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\n# Modify this if you have a different sized character LCD\nlcd_columns = 16\nlcd_rows = 2\n# Raspberry Pi Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D26)\nlcd_en = digitalio.DigitalInOut(board.D19)\nlcd_d7 = digitalio.DigitalInOut(board.D27)\nlcd_d6 = digitalio.DigitalInOut(board.D22)\nlcd_d5 = digitalio.DigitalInOut(board.D24)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rpi_mono_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rpi_mono_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_columns = 16\nlcd_rows = 2\n# Raspberry Pi Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D26)\nlcd_en = digitalio.DigitalInOut(board.D19)\nlcd_d7 = digitalio.DigitalInOut(board.D27)\nlcd_d6 = digitalio.DigitalInOut(board.D22)\nlcd_d5 = digitalio.DigitalInOut(board.D24)\nlcd_d4 = digitalio.DigitalInOut(board.D25)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rpi_mono_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rpi_mono_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_rows = 2\n# Raspberry Pi Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D26)\nlcd_en = digitalio.DigitalInOut(board.D19)\nlcd_d7 = digitalio.DigitalInOut(board.D27)\nlcd_d6 = digitalio.DigitalInOut(board.D22)\nlcd_d5 = digitalio.DigitalInOut(board.D24)\nlcd_d4 = digitalio.DigitalInOut(board.D25)\nlcd_backlight = digitalio.DigitalInOut(board.D4)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rpi_mono_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rpi_mono_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\n# Raspberry Pi Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D26)\nlcd_en = digitalio.DigitalInOut(board.D19)\nlcd_d7 = digitalio.DigitalInOut(board.D27)\nlcd_d6 = digitalio.DigitalInOut(board.D22)\nlcd_d5 = digitalio.DigitalInOut(board.D24)\nlcd_d4 = digitalio.DigitalInOut(board.D25)\nlcd_backlight = digitalio.DigitalInOut(board.D4)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rpi_mono_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rpi_mono_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\n# Raspberry Pi Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D26)\nlcd_en = digitalio.DigitalInOut(board.D19)\nlcd_d7 = digitalio.DigitalInOut(board.D27)\nlcd_d6 = digitalio.DigitalInOut(board.D22)\nlcd_d5 = digitalio.DigitalInOut(board.D24)\nlcd_d4 = digitalio.DigitalInOut(board.D25)\nlcd_backlight = digitalio.DigitalInOut(board.D4)\n# Initialise the lcd class",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rpi_mono_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rpi_mono_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_rs = digitalio.DigitalInOut(board.D26)\nlcd_en = digitalio.DigitalInOut(board.D19)\nlcd_d7 = digitalio.DigitalInOut(board.D27)\nlcd_d6 = digitalio.DigitalInOut(board.D22)\nlcd_d5 = digitalio.DigitalInOut(board.D24)\nlcd_d4 = digitalio.DigitalInOut(board.D25)\nlcd_backlight = digitalio.DigitalInOut(board.D4)\n# Initialise the lcd class\nlcd = characterlcd.Character_LCD_Mono(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rpi_mono_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rpi_mono_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_en = digitalio.DigitalInOut(board.D19)\nlcd_d7 = digitalio.DigitalInOut(board.D27)\nlcd_d6 = digitalio.DigitalInOut(board.D22)\nlcd_d5 = digitalio.DigitalInOut(board.D24)\nlcd_d4 = digitalio.DigitalInOut(board.D25)\nlcd_backlight = digitalio.DigitalInOut(board.D4)\n# Initialise the lcd class\nlcd = characterlcd.Character_LCD_Mono(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rpi_mono_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rpi_mono_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_rsa\n\npublic_key, private_key = adafruit_rsa.newkeys(512)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rsa/examples/rsa_simpletest.py",
      "library": "rsa",
      "type": "example",
      "file_name": "rsa_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_rsa\n\n# Encode the string as bytes (Adafruit_RSA only operates on bytes!)\nmessage = message.encode(\"utf-8\")\n# Encrypt the message using the public key\nencrypted_message = adafruit_rsa.encrypt(message, public_key)\n# Decrypt the encrypted message using a private key",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rsa/examples/rsa_simpletest.py",
      "library": "rsa",
      "type": "example",
      "file_name": "rsa_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_rsa\n\nencrypted_message = adafruit_rsa.encrypt(message, public_key)\n# Decrypt the encrypted message using a private key\ndecrypted_message = adafruit_rsa.decrypt(encrypted_message, private_key)\n# Print out the decrypted message",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rsa/examples/rsa_simpletest.py",
      "library": "rsa",
      "type": "example",
      "file_name": "rsa_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# Adafruit_CircuitPython_RSA Encryption/Decryption\nimport adafruit_rsa\n\n# Create a keypair\nprint(\"Generating keypair...\")\n(public_key, private_key) = adafruit_rsa.newkeys(512)\n\n# Message to send\nmessage = \"hello blinka\"\n\n# Encode the string as bytes (Adafruit_RSA only operates on bytes!)\nmessage = message.encode(\"utf-8\")\n\n# Encrypt the message using the public key\nprint(\"Encrypting message...\")\nencrypted_message = adafruit_rsa.encrypt(message, public_key)\n\n# Decrypt the encrypted message using a private key\nprint(\"Decrypting message...\")\ndecrypted_message = adafruit_rsa.decrypt(encrypted_message, private_key)\n\n# Print out the decrypted message\nprint(\"Decrypted Message: \", decrypted_message.decode(\"utf-8\"))\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rsa/examples/rsa_simpletest.py",
      "library": "rsa",
      "type": "example",
      "file_name": "rsa_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_sht4x\n\nimport board\nimport adafruit_sht4x\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsht = adafruit_sht4x.SHT4x(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sht4x/examples/sht4x_simpletest.py",
      "library": "sht4x",
      "type": "example",
      "file_name": "sht4x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_sht4x\n\nimport adafruit_sht4x\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsht = adafruit_sht4x.SHT4x(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sht4x/examples/sht4x_simpletest.py",
      "library": "sht4x",
      "type": "example",
      "file_name": "sht4x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_sht4x\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsht = adafruit_sht4x.SHT4x(i2c)\nsht.mode = adafruit_sht4x.Mode.NOHEAT_HIGHPRECISION\n# Can also set the mode to enable heater\n# sht.mode = adafruit_sht4x.Mode.LOWHEAT_100MS",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sht4x/examples/sht4x_simpletest.py",
      "library": "sht4x",
      "type": "example",
      "file_name": "sht4x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2020 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_sht4x\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsht = adafruit_sht4x.SHT4x(i2c)\nprint(\"Found SHT4x with serial number\", hex(sht.serial_number))\n\nsht.mode = adafruit_sht4x.Mode.NOHEAT_HIGHPRECISION\n# Can also set the mode to enable heater\n# sht.mode = adafruit_sht4x.Mode.LOWHEAT_100MS\nprint(\"Current mode is: \", adafruit_sht4x.Mode.string[sht.mode])\n\nwhile True:\n    temperature, relative_humidity = sht.measurements\n    print(\"Temperature: %0.1f C\" % temperature)\n    print(\"Humidity: %0.1f %%\" % relative_humidity)\n    print(\"\")\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sht4x/examples/sht4x_simpletest.py",
      "library": "sht4x",
      "type": "example",
      "file_name": "sht4x_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_aw9523\n\nimport board\nimport busio\nimport adafruit_aw9523\ni2c = busio.I2C(board.SCL, board.SDA)\naw = adafruit_aw9523.AW9523(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/aw9523/examples/aw9523_constant_current_leds.py",
      "library": "aw9523",
      "type": "example",
      "file_name": "aw9523_constant_current_leds.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_aw9523\n\nimport busio\nimport adafruit_aw9523\ni2c = busio.I2C(board.SCL, board.SDA)\naw = adafruit_aw9523.AW9523(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/aw9523/examples/aw9523_constant_current_leds.py",
      "library": "aw9523",
      "type": "example",
      "file_name": "aw9523_constant_current_leds.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2020 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nimport board\nimport busio\n\nimport adafruit_aw9523\n\ni2c = busio.I2C(board.SCL, board.SDA)\naw = adafruit_aw9523.AW9523(i2c)\nprint(\"Found AW9523\")\n\n# Set all pins to outputs and LED (const current) mode\naw.LED_modes = 0xFFFF\naw.directions = 0xFFFF\n\nn = 0\nwhile True:\n    for pin in range(16):\n        # every LED is 'offset' by 16 counts so they dont all pulse together\n        aw.set_constant_current(pin, (pin * 16 + n) % 256)\n    # n increments to increase the current from 0 to 255, then wraps around\n    n = (n + 1) % 256\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/aw9523/examples/aw9523_constant_current_leds.py",
      "library": "aw9523",
      "type": "example",
      "file_name": "aw9523_constant_current_leds.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport neopixel\nimport socketpool\nimport wifi\nfrom adafruit_httpserver import GET, POST, Request, Response, Route, Server, as_route\n\npool = socketpool.SocketPool(wifi.radio)\nserver = Server(pool, \"/static\", debug=True)\npixel = neopixel.NeoPixel(board.NEOPIXEL, 1)\n# This is the simplest way to register a route. It uses the Server object in current scope.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/httpserver/examples/httpserver_neopixel.py",
      "library": "httpserver",
      "type": "example",
      "file_name": "httpserver_neopixel.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nimport socketpool\nimport wifi\nfrom adafruit_httpserver import GET, POST, Request, Response, Route, Server, as_route\n\n# Changes the color of the built-in NeoPixel using query/GET params.\n@server.route('/change-neopixel-color', GET)\ndef change_neopixel_color_handler_query_params(request: Request):\n    \"\"\"Changes the color of the built-in NeoPixel using query/GET params.\"\"\"\n    r = request.query_params.get('r') or 0\n    g = request.query_params.get('g') or 0\n    b = request.query_params.get('b') or 0\n    pixel.fill((int(r), int(g), int(b)))\n    return Response(request, f'Changed NeoPixel to color ({r}, {g}, {b})')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/httpserver/examples/httpserver_neopixel.py",
      "library": "httpserver",
      "type": "example",
      "file_name": "httpserver_neopixel.py",
      "chunk_type": "function",
      "function_name": "change_neopixel_color_handler_query_params"
    }
  },
  {
    "content": "import board\nimport neopixel\nimport socketpool\nimport wifi\nfrom adafruit_httpserver import GET, POST, Request, Response, Route, Server, as_route\n\n# Changes the color of the built-in NeoPixel using POST form data.\n@as_route('/change-neopixel-color/form-data', POST)\ndef change_neopixel_color_handler_post_form_data(request: Request):\n    \"\"\"Changes the color of the built-in NeoPixel using POST form data.\"\"\"\n    data = request.form_data\n    r, g, b = (data.get('r', 0), data.get('g', 0), data.get('b', 0))\n    pixel.fill((int(r), int(g), int(b)))\n    return Response(request, f'Changed NeoPixel to color ({r}, {g}, {b})')\n\n# Usage example:\nserver.add_routes(\n    [\n        change_neopixel_color_handler_post_form_data,\n        post_json_route,\n        # You can also register a inline created Route object",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/httpserver/examples/httpserver_neopixel.py",
      "library": "httpserver",
      "type": "example",
      "file_name": "httpserver_neopixel.py",
      "chunk_type": "function",
      "function_name": "change_neopixel_color_handler_post_form_data"
    }
  },
  {
    "content": "import board\nimport neopixel\nimport socketpool\nimport wifi\nfrom adafruit_httpserver import GET, POST, Request, Response, Route, Server, as_route\n\n# Changes the color of the built-in NeoPixel using JSON POST body.\ndef change_neopixel_color_handler_post_json(request: Request):\n    \"\"\"Changes the color of the built-in NeoPixel using JSON POST body.\"\"\"\n    data = request.json()\n    r, g, b = (data.get('r', 0), data.get('g', 0), data.get('b', 0))\n    pixel.fill((r, g, b))\n    return Response(request, f'Changed NeoPixel to color ({r}, {g}, {b})')\n\n# Usage example:\n# Using this approach you can also use the same handler for multiple routes.\npost_json_route = Route(\n    \"/change-neopixel-color/json\", POST, change_neopixel_color_handler_post_json\n)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/httpserver/examples/httpserver_neopixel.py",
      "library": "httpserver",
      "type": "example",
      "file_name": "httpserver_neopixel.py",
      "chunk_type": "function",
      "function_name": "change_neopixel_color_handler_post_json"
    }
  },
  {
    "content": "import board\nimport neopixel\nimport socketpool\nimport wifi\nfrom adafruit_httpserver import GET, POST, Request, Response, Route, Server, as_route\n\npost_json_route = Route('/change-neopixel-color/json', POST, change_neopixel_color_handler_post_json)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/httpserver/examples/httpserver_neopixel.py",
      "library": "httpserver",
      "type": "example",
      "file_name": "httpserver_neopixel.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nimport socketpool\nimport wifi\nfrom adafruit_httpserver import GET, POST, Request, Response, Route, Server, as_route\n\n# Changes the color of the built-in NeoPixel using URL params.\ndef change_neopixel_color_handler_url_params(request: Request, r: str='0', g: str='0', b: str='0'):\n    \"\"\"Changes the color of the built-in NeoPixel using URL params.\"\"\"\n    pixel.fill((int(r), int(g), int(b)))\n    return Response(request, f'Changed NeoPixel to color ({r}, {g}, {b})')\n\n# Usage example:\n            path=\"/change-neopixel-color/<r>/<g>/<b>\",\n            methods=GET,\n            handler=change_neopixel_color_handler_url_params,\n        ),\n    ]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/httpserver/examples/httpserver_neopixel.py",
      "library": "httpserver",
      "type": "example",
      "file_name": "httpserver_neopixel.py",
      "chunk_type": "function",
      "function_name": "change_neopixel_color_handler_url_params"
    }
  },
  {
    "content": "import board\nimport displayio\nimport adafruit_imageload\n\nimport displayio\nimport adafruit_imageload\ngroup = displayio.Group()\nboard.DISPLAY.root_group = group\nimage, color_converter = adafruit_imageload.load(\"images/jpg_test.jpg\")\ntile_grid = displayio.TileGrid(image, pixel_shader=color_converter)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_jpg_simpletest.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_jpg_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport adafruit_imageload\n\nimage, color_converter = adafruit_imageload.load('images/jpg_test.jpg')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_jpg_simpletest.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_jpg_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2024  Channing Ramos\n#\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nBasic JPG imageload example\n\"\"\"\n\nimport board\nimport displayio\n\nimport adafruit_imageload\n\ngroup = displayio.Group()\nboard.DISPLAY.root_group = group\n\nimage, color_converter = adafruit_imageload.load(\"images/jpg_test.jpg\")\n\ntile_grid = displayio.TileGrid(image, pixel_shader=color_converter)\ngroup.append(tile_grid)\n\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_jpg_simpletest.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_jpg_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9xfsk\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_transmit.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_transmit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9xfsk\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_transmit.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_transmit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9xfsk\n\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\n# uncommnet the desired import and rfm initialization depending on the radio boards being used",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_transmit.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_transmit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ltr329_ltr303 as adafruit_ltr329\n\nimport board\nimport adafruit_ltr329_ltr303 as adafruit_ltr329\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ltr329_ltr303/examples/ltr329_advancedtest.py",
      "library": "ltr329_ltr303",
      "type": "example",
      "file_name": "ltr329_advancedtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ltr329_ltr303 as adafruit_ltr329\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nltr329 = adafruit_ltr329.LTR329(i2c)\n# Can set the ALS light gain, can be: 1, 2, 4, 8, 48 or 96 times\n# to range from 1~64 kLux to 0.01~600 Lux\nltr329.als_gain = 96",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ltr329_ltr303/examples/ltr329_advancedtest.py",
      "library": "ltr329_ltr303",
      "type": "example",
      "file_name": "ltr329_advancedtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# Get Adafruit IO keys, ensure these are setup in settings.toml\n# (visit io.adafruit.com if you need to create an account, or if you need your Adafruit IO key.)\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\ncs = DigitalInOut(board.D10)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/ethernet/minimqtt_adafruitio_eth.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_eth.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# (visit io.adafruit.com if you need to create an account, or if you need your Adafruit IO key.)\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\ncs = DigitalInOut(board.D10)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/ethernet/minimqtt_adafruitio_eth.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_eth.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef connected(client, userdata, flags, rc):\n    print(f'Connected to Adafruit IO! Listening for topic changes on {onoff_feed}')\n    client.subscribe(onoff_feed)\n\n# Usage example:\n# Define callback methods which are called when events occur\ndef connected(client, userdata, flags, rc):\n    # This function will be called when the client is connected\n    # successfully to the broker.\n    print(f\"Connected to Adafruit IO! Listening for topic changes on {onoff_feed}\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/ethernet/minimqtt_adafruitio_eth.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_eth.py",
      "chunk_type": "function",
      "function_name": "connected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef disconnected(client, userdata, rc):\n    print('Disconnected from Adafruit IO!')\n\n# Usage example:\n\ndef disconnected(client, userdata, rc):\n    # This method is called when the client is disconnected\n    print(\"Disconnected from Adafruit IO!\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/ethernet/minimqtt_adafruitio_eth.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_eth.py",
      "chunk_type": "function",
      "function_name": "disconnected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef message(client, topic, message):\n    print(f'New message on topic {topic}: {message}')\n\n# Usage example:\ndef message(client, topic, message):\n    # This method is called when a topic the client is subscribed to\n    # has a new message.\n    print(f\"New message on topic {topic}: {message}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/ethernet/minimqtt_adafruitio_eth.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_eth.py",
      "chunk_type": "function",
      "function_name": "message"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n    # This method is called when a topic the client is subscribed to\n    # has a new message.\npool = adafruit_connection_manager.get_radio_socketpool(eth)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(eth)\n# Set up a MiniMQTT Client\n# NOTE: We'll need to connect insecurely for ethernet configurations.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/ethernet/minimqtt_adafruitio_eth.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_eth.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n    # has a new message.\npool = adafruit_connection_manager.get_radio_socketpool(eth)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(eth)\n# Set up a MiniMQTT Client\n# NOTE: We'll need to connect insecurely for ethernet configurations.\nmqtt_client = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/ethernet/minimqtt_adafruitio_eth.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_eth.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_lsm6ds.lsm6dsox import LSM6DSOX\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = LSM6DSOX(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm6ds/examples/lsm6ds_lsm6dsox_simpletest.py",
      "library": "lsm6ds",
      "type": "example",
      "file_name": "lsm6ds_lsm6dsox_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2020 Bryan Siepert for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\nimport time\n\nimport board\n\nfrom adafruit_lsm6ds.lsm6dsox import LSM6DSOX\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = LSM6DSOX(i2c)\n\nwhile True:\n    accel_x, accel_y, accel_z = sensor.acceleration\n    print(f\"Acceleration: X:{accel_x:.2f}, Y: {accel_y:.2f}, Z: {accel_z:.2f} m/s^2\")\n    gyro_x, gyro_y, gyro_z = sensor.gyro\n    print(f\"Gyro X:{gyro_x:.2f}, Y: {gyro_y:.2f}, Z: {gyro_z:.2f} radians/s\")\n    print(\"\")\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm6ds/examples/lsm6ds_lsm6dsox_simpletest.py",
      "library": "lsm6ds",
      "type": "example",
      "file_name": "lsm6ds_lsm6dsox_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_hcsr04\n\nimport board\nimport adafruit_hcsr04\nsonar = adafruit_hcsr04.HCSR04(trigger_pin=board.D5, echo_pin=board.D6)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hcsr04/examples/hcsr04_simpletest.py",
      "library": "hcsr04",
      "type": "example",
      "file_name": "hcsr04_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_hcsr04\n\nsonar = adafruit_hcsr04.HCSR04(trigger_pin=board.D5, echo_pin=board.D6)\n\nwhile True:\n    try:\n        print((sonar.distance,))\n    except RuntimeError:\n        print(\"Retrying!\")\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hcsr04/examples/hcsr04_simpletest.py",
      "library": "hcsr04",
      "type": "example",
      "file_name": "hcsr04_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\n# Modify this if you have a different sized character LCD\nlcd_columns = 16\nlcd_rows = 2\n# Metro M0/M4 Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_mono_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_mono_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_columns = 16\nlcd_rows = 2\n# Metro M0/M4 Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_mono_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_mono_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_rows = 2\n# Metro M0/M4 Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nlcd_backlight = digitalio.DigitalInOut(board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_mono_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_mono_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\n# Metro M0/M4 Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nlcd_backlight = digitalio.DigitalInOut(board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_mono_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_mono_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\n# Metro M0/M4 Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nlcd_backlight = digitalio.DigitalInOut(board.D13)\n# Initialise the LCD class",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_mono_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_mono_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nlcd_backlight = digitalio.DigitalInOut(board.D13)\n# Initialise the LCD class\nlcd = characterlcd.Character_LCD_Mono(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_mono_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_mono_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nlcd_backlight = digitalio.DigitalInOut(board.D13)\n# Initialise the LCD class\nlcd = characterlcd.Character_LCD_Mono(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_mono_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_mono_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom PIL import Image\nfrom adafruit_pixel_framebuf import PixelFramebuffer\n\nimport neopixel\npixel_pin = board.D18\npixel_width = 16\npixel_height = 16\npixels = neopixel.NeoPixel(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pixel_framebuf/examples/pixel_framebuf_pillow_image.py",
      "library": "pixel_framebuf",
      "type": "example",
      "file_name": "pixel_framebuf_pillow_image.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom PIL import Image\nfrom adafruit_pixel_framebuf import PixelFramebuffer\n\npixels = neopixel.NeoPixel(pixel_pin, pixel_width * pixel_height, brightness=0.1, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pixel_framebuf/examples/pixel_framebuf_pillow_image.py",
      "library": "pixel_framebuf",
      "type": "example",
      "file_name": "pixel_framebuf_pillow_image.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_tmp117\n\nimport board\nimport adafruit_tmp117\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntmp117 = adafruit_tmp117.TMP117(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tmp117/examples/tmp117_simpletest.py",
      "library": "tmp117",
      "type": "example",
      "file_name": "tmp117_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_tmp117\n\nimport adafruit_tmp117\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntmp117 = adafruit_tmp117.TMP117(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tmp117/examples/tmp117_simpletest.py",
      "library": "tmp117",
      "type": "example",
      "file_name": "tmp117_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 Bryan Siepert, written for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\nimport time\n\nimport board\n\nimport adafruit_tmp117\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntmp117 = adafruit_tmp117.TMP117(i2c)\n\nwhile True:\n    print(\"Temperature: %.2f degrees C\" % tmp117.temperature)\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tmp117/examples/tmp117_simpletest.py",
      "library": "tmp117",
      "type": "example",
      "file_name": "tmp117_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_motor import servo\nfrom adafruit_pca9685 import PCA9685\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = busio.I2C(board.GP1, board.GP0)    # Pi Pico RP2040\n# Create a simple PCA9685 class instance.\npca = PCA9685(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pca9685/examples/pca9685_servo.py",
      "library": "pca9685",
      "type": "example",
      "file_name": "pca9685_servo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_si7021\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsi = adafruit_si7021.SI7021(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si7021/examples/si7021_displayio_simpletest.py",
      "library": "si7021",
      "type": "example",
      "file_name": "si7021_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_si7021\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsi = adafruit_si7021.SI7021(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si7021/examples/si7021_displayio_simpletest.py",
      "library": "si7021",
      "type": "example",
      "file_name": "si7021_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_si7021\n\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si7021/examples/si7021_displayio_simpletest.py",
      "library": "si7021",
      "type": "example",
      "file_name": "si7021_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_si7021\n\n# add the label(s) to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si7021/examples/si7021_displayio_simpletest.py",
      "library": "si7021",
      "type": "example",
      "file_name": "si7021_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_adxl34x\n\nimport board\nimport adafruit_adxl34x\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# For ADXL343\naccelerometer = adafruit_adxl34x.ADXL343(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl34x/examples/adxl34x_simpletest.py",
      "library": "adxl34x",
      "type": "example",
      "file_name": "adxl34x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_adxl34x\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# For ADXL343\naccelerometer = adafruit_adxl34x.ADXL343(i2c)\n# For ADXL345\n# accelerometer = adafruit_adxl34x.ADXL345(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl34x/examples/adxl34x_simpletest.py",
      "library": "adxl34x",
      "type": "example",
      "file_name": "adxl34x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_adxl34x\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\n# For ADXL343\naccelerometer = adafruit_adxl34x.ADXL343(i2c)\n# For ADXL345\n# accelerometer = adafruit_adxl34x.ADXL345(i2c)\n\nwhile True:\n    print(\"{} {} {}\".format(*accelerometer.acceleration))\n    time.sleep(0.2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl34x/examples/adxl34x_simpletest.py",
      "library": "adxl34x",
      "type": "example",
      "file_name": "adxl34x_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_74hc595\n\nimport busio\nimport digitalio\nimport adafruit_74hc595\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\nlatch_pin = digitalio.DigitalInOut(board.D5)\nsr = adafruit_74hc595.ShiftRegister74HC595(spi, latch_pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/74hc595/examples/74hc595_simpletest.py",
      "library": "74hc595",
      "type": "example",
      "file_name": "74hc595_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_74hc595\n\nimport adafruit_74hc595\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\nlatch_pin = digitalio.DigitalInOut(board.D5)\nsr = adafruit_74hc595.ShiftRegister74HC595(spi, latch_pin)\npin1 = sr.get_pin(1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/74hc595/examples/74hc595_simpletest.py",
      "library": "74hc595",
      "type": "example",
      "file_name": "74hc595_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_74hc595\n\nimport adafruit_74hc595\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\nlatch_pin = digitalio.DigitalInOut(board.D5)\nsr = adafruit_74hc595.ShiftRegister74HC595(spi, latch_pin)\npin1 = sr.get_pin(1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/74hc595/examples/74hc595_simpletest.py",
      "library": "74hc595",
      "type": "example",
      "file_name": "74hc595_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport busio\nimport digitalio\n\nimport adafruit_74hc595\n\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\n\nlatch_pin = digitalio.DigitalInOut(board.D5)\nsr = adafruit_74hc595.ShiftRegister74HC595(spi, latch_pin)\n\npin1 = sr.get_pin(1)\n\nwhile True:\n    pin1.value = True\n    time.sleep(1)\n    pin1.value = False\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/74hc595/examples/74hc595_simpletest.py",
      "library": "74hc595",
      "type": "example",
      "file_name": "74hc595_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import gc\nimport random\nimport time\nimport usb_midi\nimport adafruit_midi\nfrom adafruit_midi.channel_pressure import ChannelPressure\nfrom adafruit_midi.control_change import ControlChange\nfrom adafruit_midi.note_off import NoteOff\nfrom adafruit_midi.note_on import NoteOn\nfrom adafruit_midi.pitch_bend import PitchBend\nfrom adafruit_midi.polyphonic_key_pressure import PolyphonicKeyPressure\nfrom adafruit_midi.program_change import ProgramChange\nfrom adafruit_midi.start import Start\nfrom adafruit_midi.stop import Stop\nfrom adafruit_midi.system_exclusive import SystemExclusive\nfrom adafruit_midi.timing_clock import TimingClock\n\nmidi = adafruit_midi.MIDI(midi_in=usb_midi.ports[0], midi_out=usb_midi.ports[1], in_channel=0, out_channel=0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/midi/examples/midi_memorycheck.py",
      "library": "midi",
      "type": "example",
      "file_name": "midi_memorycheck.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport fourwire\nimport ulab.numpy as np\nfrom adafruit_ili9341 import ILI9341\nimport adafruit_ov2640\n\n# Pylint is unable to see that the \"size\" property of OV2640_GrandCentral exists\n# Release any resources currently in use for the displays\nspi = busio.SPI(MOSI=board.LCD_MOSI, clock=board.LCD_CLK)\ndisplay_bus = fourwire.FourWire(\n    spi, command=board.LCD_D_C, chip_select=board.LCD_CS, reset=board.LCD_RST",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_displayio_kaluga1_3_ili9341_ulab.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_displayio_kaluga1_3_ili9341_ulab.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport fourwire\nimport ulab.numpy as np\nfrom adafruit_ili9341 import ILI9341\nimport adafruit_ov2640\n\ndisplay_bus = fourwire.FourWire(spi, command=board.LCD_D_C, chip_select=board.LCD_CS, reset=board.LCD_RST)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_displayio_kaluga1_3_ili9341_ulab.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_displayio_kaluga1_3_ili9341_ulab.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport fourwire\nimport ulab.numpy as np\nfrom adafruit_ili9341 import ILI9341\nimport adafruit_ov2640\n\ndisplay_bus = fourwire.FourWire(\n    spi, command=board.LCD_D_C, chip_select=board.LCD_CS, reset=board.LCD_RST\ndisplay = ILI9341(display_bus, width=320, height=240, rotation=90)\nbus = busio.I2C(scl=board.CAMERA_SIOC, sda=board.CAMERA_SIOD)\ncam = adafruit_ov2640.OV2640(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_displayio_kaluga1_3_ili9341_ulab.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_displayio_kaluga1_3_ili9341_ulab.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport fourwire\nimport ulab.numpy as np\nfrom adafruit_ili9341 import ILI9341\nimport adafruit_ov2640\n\ncam = adafruit_ov2640.OV2640(bus, data_pins=board.CAMERA_DATA, clock=board.CAMERA_PCLK, vsync=board.CAMERA_VSYNC, href=board.CAMERA_HREF, mclk=board.CAMERA_XCLK, mclk_frequency=20000000, size=adafruit_ov2640.OV2640_SIZE_QVGA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_displayio_kaluga1_3_ili9341_ulab.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_displayio_kaluga1_3_ili9341_ulab.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\nimport adafruit_ssd1680\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.13_featherwing.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.13_featherwing.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.13_featherwing.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.13_featherwing.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.13_featherwing.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.13_featherwing.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\ndisplay = adafruit_ssd1680.SSD1680(display_bus, width=250, height=122, highlight_color=16711680, rotation=270)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.13_featherwing.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.13_featherwing.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_lis331 import LIS331HH, Frequency, Rate\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# un-comment the sensor you are using\n# lis = H3LIS331(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis331/examples/lis331_low_pass_filter.py",
      "library": "lis331",
      "type": "example",
      "file_name": "lis331_low_pass_filter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nfrom adafruit_lis331 import LIS331HH, Frequency, Rate\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\n# un-comment the sensor you are using\n# lis = H3LIS331(i2c)\nlis = LIS331HH(i2c)\n\n# `data_rate` must be a `LOWPOWER` rate to use the low-pass filter\nlis.data_rate = Rate.RATE_LOWPOWER_10_HZ\n# next set the cutoff frequency. Anything changing faster than\n# the specified frequency will be filtered out\nlis.lpf_cutoff = Frequency.FREQ_74_HZ\n\n# Once you've seen the filter do its thing, you can comment out the\n# lines above to use the default data rate without the low pass filter\n# and see the difference it makes\n\nwhile True:\n    print(lis.acceleration)  # plotter friendly printing\n    time.sleep(0.002)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis331/examples/lis331_low_pass_filter.py",
      "library": "lis331",
      "type": "example",
      "file_name": "lis331_low_pass_filter.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bno055\n\nclass Mode:\n    CONFIG_MODE = 0\n    ACCONLY_MODE = 1\n    MAGONLY_MODE = 2\n    GYRONLY_MODE = 3\n    ACCMAG_MODE = 4\n    ACCGYRO_MODE = 5\n    MAGGYRO_MODE = 6\n    AMG_MODE = 7\n    IMUPLUS_MODE = 8\n    COMPASS_MODE = 9\n    M4G_MODE = 10\n    NDOF_FMC_OFF_MODE = 11\n    NDOF_MODE = 12\n\n# Usage example:\n\n\nclass Mode:\n    CONFIG_MODE = 0x00\n    ACCONLY_MODE = 0x01",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno055/examples/bno055_calibrator.py",
      "library": "bno055",
      "type": "example",
      "file_name": "bno055_calibrator.py",
      "chunk_type": "function",
      "function_name": "Mode"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bno055\n\n# uart = board.UART()\n# sensor = adafruit_bno055.BNO055_UART(uart)\n# Instantiate I2C interface connection\n# i2c = board.I2C()  # For board.SCL and board.SDA\ni2c = board.STEMMA_I2C()  # For the built-in STEMMA QT connection\nsensor = adafruit_bno055.BNO055_I2C(i2c)\nsensor.mode = Mode.NDOF_MODE  # Set the sensor to NDOF_MODE",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno055/examples/bno055_calibrator.py",
      "library": "bno055",
      "type": "example",
      "file_name": "bno055_calibrator.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bno055\n\n# sensor = adafruit_bno055.BNO055_UART(uart)\n# Instantiate I2C interface connection\n# i2c = board.I2C()  # For board.SCL and board.SDA\ni2c = board.STEMMA_I2C()  # For the built-in STEMMA QT connection\nsensor = adafruit_bno055.BNO055_I2C(i2c)\nsensor.mode = Mode.NDOF_MODE  # Set the sensor to NDOF_MODE",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno055/examples/bno055_calibrator.py",
      "library": "bno055",
      "type": "example",
      "file_name": "bno055_calibrator.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_avrprog\n\nimport board\nimport busio\nimport adafruit_avrprog\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\navrprog = adafruit_avrprog.AVRprog()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/avrprog/examples/avrprog_program_tiny13a.py",
      "library": "avrprog",
      "type": "example",
      "file_name": "avrprog_program_tiny13a.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_avrprog\n\nimport busio\nimport adafruit_avrprog\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\navrprog = adafruit_avrprog.AVRprog()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/avrprog/examples/avrprog_program_tiny13a.py",
      "library": "avrprog",
      "type": "example",
      "file_name": "avrprog_program_tiny13a.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_avrprog\n\n# Helper to print out errors for us and then halt\ndef error(err):\n    \"\"\"Helper to print out errors for us and then halt\"\"\"\n    print('ERROR: ' + err)\n    avrprog.end()\n    while True:\n        pass\n\n# Usage example:\n\ndef error(err):\n    \"\"\"Helper to print out errors for us and then halt\"\"\"\n    print(\"ERROR: \" + err)\n    avrprog.end()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/avrprog/examples/avrprog_program_tiny13a.py",
      "library": "avrprog",
      "type": "example",
      "file_name": "avrprog_program_tiny13a.py",
      "chunk_type": "function",
      "function_name": "error"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Or uncomment and instead use these if using a Feather M0 RFM69 board\n# and the appropriate CircuitPython build:\n# CS = digitalio.DigitalInOut(board.RFM69_CS)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_rpi_simpletest.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_rpi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Or uncomment and instead use these if using a Feather M0 RFM69 board\n# and the appropriate CircuitPython build:\n# CS = digitalio.DigitalInOut(board.RFM69_CS)\n# RESET = digitalio.DigitalInOut(board.RFM69_RST)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_rpi_simpletest.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_rpi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# CS = digitalio.DigitalInOut(board.RFM69_CS)\n# RESET = digitalio.DigitalInOut(board.RFM69_RST)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm69 = adafruit_rfm69.RFM69(spi, CS, RESET, RADIO_FREQ_MHZ)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_rpi_simpletest.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_rpi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm69 = adafruit_rfm69.RFM69(spi, CS, RESET, RADIO_FREQ_MHZ)\n# Optionally set an encryption key (16 byte AES key). MUST match both\n# on the transmitter and receiver (or be set to None to disable/the default).\nrfm69.encryption_key = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_rpi_simpletest.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_rpi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_minitft_simpletest.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_minitft_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_minitft_simpletest.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_minitft_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)\ndisplay = ST7735R(display_bus, width=160, height=80, colstart=24, rotation=270, bgr=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_minitft_simpletest.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_minitft_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)\ndisplay = ST7735R(display_bus, width=160, height=80, colstart=24, rotation=270, bgr=True)\n# Make the display context",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_minitft_simpletest.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_minitft_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ble\nfrom adafruit_ble.advertising.standard import SolicitServicesAdvertisement\nfrom adafruit_ble_apple_notification_center import AppleNotificationCenterService\nfrom adafruit_display_ble_status.advertising import AdvertisingWidget\nfrom adafruit_gizmo import eink_gizmo\nfrom adafruit_display_notification import NotificationFree, apple\n\ndef find_connection():\n    for connection in radio.connections:\n        if AppleNotificationCenterService not in connection:\n            continue\n        if not connection.paired:\n            connection.pair()\n        return (connection, connection[AppleNotificationCenterService])\n    return (None, None)\n\n# Usage example:\nscreen_updated = False\nlatest_notification = None\nactive_connection, notification_service = find_connection()\nwhile True:\n    if not active_connection:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display_notification/examples/display_notification_eink_gizmo.py",
      "library": "display_notification",
      "type": "example",
      "file_name": "display_notification_eink_gizmo.py",
      "chunk_type": "function",
      "function_name": "find_connection"
    }
  },
  {
    "content": "import adafruit_ble\nfrom adafruit_ble.advertising.standard import SolicitServicesAdvertisement\nfrom adafruit_ble_apple_notification_center import AppleNotificationCenterService\nfrom adafruit_display_ble_status.advertising import AdvertisingWidget\nfrom adafruit_gizmo import eink_gizmo\nfrom adafruit_display_notification import NotificationFree, apple\n\n# Start advertising before messing with the display so that we can connect immediately.\nradio = adafruit_ble.BLERadio()\na = SolicitServicesAdvertisement()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display_notification/examples/display_notification_eink_gizmo.py",
      "library": "display_notification",
      "type": "example",
      "file_name": "display_notification_eink_gizmo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tmp006\n\ndef c_to_f(c):\n    return c * 9.0 / 5.0 + 32.0\n\n# Usage example:\nwhile True:\n    obj_temp = sensor.temperature\n    print(f\"Object temperature: {obj_temp:0.3F}*C / {c_to_f(obj_temp):0.3F}*F\")\n    time.sleep(5.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tmp006/examples/tmp006_simpletest.py",
      "library": "tmp006",
      "type": "example",
      "file_name": "tmp006_simpletest.py",
      "chunk_type": "function",
      "function_name": "c_to_f"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tmp006\n\n# Create library object using our Bus I2C port\ni2c = busio.I2C(board.SCL, board.SDA)\nsensor = adafruit_tmp006.TMP006(i2c)\n# Initialize communication with the sensor, using the default 16 samples per conversion.\n# This is the best accuracy but a little slower at reacting to changes.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tmp006/examples/tmp006_simpletest.py",
      "library": "tmp006",
      "type": "example",
      "file_name": "tmp006_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tmp006\n\n# Create library object using our Bus I2C port\ni2c = busio.I2C(board.SCL, board.SDA)\nsensor = adafruit_tmp006.TMP006(i2c)\n# Initialize communication with the sensor, using the default 16 samples per conversion.\n# This is the best accuracy but a little slower at reacting to changes.\n# The first sample will be meaningless",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tmp006/examples/tmp006_simpletest.py",
      "library": "tmp006",
      "type": "example",
      "file_name": "tmp006_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport busio\n\nimport adafruit_tmp006\n\n\n# Define a function to convert celsius to fahrenheit.\ndef c_to_f(c):\n    return c * 9.0 / 5.0 + 32.0\n\n\n# Create library object using our Bus I2C port\ni2c = busio.I2C(board.SCL, board.SDA)\nsensor = adafruit_tmp006.TMP006(i2c)\n\n# Initialize communication with the sensor, using the default 16 samples per conversion.\n# This is the best accuracy but a little slower at reacting to changes.\n# The first sample will be meaningless\nwhile True:\n    obj_temp = sensor.temperature\n    print(f\"Object temperature: {obj_temp:0.3F}*C / {c_to_f(obj_temp):0.3F}*F\")\n    time.sleep(5.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tmp006/examples/tmp006_simpletest.py",
      "library": "tmp006",
      "type": "example",
      "file_name": "tmp006_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_pixel_framebuf import PixelFramebuffer\n\nimport board\nimport neopixel\npixel_pin = board.D6\npixel_width = 8\npixel_height = 4\npixels = neopixel.NeoPixel(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pixel_framebuf/examples/pixel_framebuf_simpletest.py",
      "library": "pixel_framebuf",
      "type": "example",
      "file_name": "pixel_framebuf_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_pixel_framebuf import PixelFramebuffer\n\npixels = neopixel.NeoPixel(pixel_pin, pixel_width * pixel_height, brightness=0.1, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pixel_framebuf/examples/pixel_framebuf_simpletest.py",
      "library": "pixel_framebuf",
      "type": "example",
      "file_name": "pixel_framebuf_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 Melissa LeBlanc-Williams, written for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\"\"\"\nThis example runs on an Adafruit NeoPixel Feather\n\"\"\"\n\nimport board\nimport neopixel\n\nfrom adafruit_pixel_framebuf import PixelFramebuffer\n\npixel_pin = board.D6\npixel_width = 8\npixel_height = 4\n\npixels = neopixel.NeoPixel(\n    pixel_pin,\n    pixel_width * pixel_height,\n    brightness=0.1,\n    auto_write=False,\n)\n\npixel_framebuf = PixelFramebuffer(\n    pixels,\n    pixel_width,\n    pixel_height,\n    alternating=False,\n)\n\npixel_framebuf.fill(0x000088)\npixel_framebuf.pixel(5, 1, 0xFFFF00)\npixel_framebuf.line(0, 0, pixel_width - 1, pixel_height - 1, 0x00FF00)\npixel_framebuf.display()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pixel_framebuf/examples/pixel_framebuf_simpletest.py",
      "library": "pixel_framebuf",
      "type": "example",
      "file_name": "pixel_framebuf_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_st7789 import ST7789\nfrom displayio import Bitmap, ColorConverter, Colorspace, FourWire, Group, TileGrid, release_displays\nimport adafruit_ov2640\n\nimport adafruit_ov2640\n# Set up the display (You must customize this block for your display!)\nspi = busio.SPI(clock=board.GP2, MOSI=board.GP3)\ndisplay_bus = FourWire(spi, command=board.GP0, chip_select=board.GP1, reset=None)\ndisplay = ST7789(display_bus, width=320, height=240, rotation=270)\ndisplay.auto_refresh = False",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_displayio_pico_st7789_2in.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_displayio_pico_st7789_2in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_st7789 import ST7789\nfrom displayio import Bitmap, ColorConverter, Colorspace, FourWire, Group, TileGrid, release_displays\nimport adafruit_ov2640\n\nimport adafruit_ov2640\n# Set up the display (You must customize this block for your display!)\nspi = busio.SPI(clock=board.GP2, MOSI=board.GP3)\ndisplay_bus = FourWire(spi, command=board.GP0, chip_select=board.GP1, reset=None)\ndisplay = ST7789(display_bus, width=320, height=240, rotation=270)\ndisplay.auto_refresh = False\n# Ensure the camera is shut down, so that it releases the SDA/SCL lines,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_displayio_pico_st7789_2in.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_displayio_pico_st7789_2in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_st7789 import ST7789\nfrom displayio import Bitmap, ColorConverter, Colorspace, FourWire, Group, TileGrid, release_displays\nimport adafruit_ov2640\n\ncam = adafruit_ov2640.OV2640(bus, data_pins=[board.GP12, board.GP13, board.GP14, board.GP15, board.GP16, board.GP17, board.GP18, board.GP19], clock=board.GP11, vsync=board.GP7, href=board.GP21, mclk=board.GP20, shutdown=None, reset=board.GP10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_displayio_pico_st7789_2in.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_displayio_pico_st7789_2in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_st7789 import ST7789\nfrom displayio import Bitmap, ColorConverter, Colorspace, FourWire, Group, TileGrid, release_displays\nimport adafruit_ov2640\n\nwidth = display.width\nheight = display.height\ncam.size = adafruit_ov2640.OV2640_SIZE_QQVGA\n# cam.test_pattern = True\nbitmap = Bitmap(cam.width, cam.height, 65536)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_displayio_pico_st7789_2in.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_displayio_pico_st7789_2in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_display_text.label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_ds3231\n\nimport adafruit_ds3231\n# Create the RTC object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector\nds3231 = adafruit_ds3231.DS3231(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds3231/examples/ds3231_displayio_simpletest.py",
      "library": "ds3231",
      "type": "example",
      "file_name": "ds3231_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_display_text.label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_ds3231\n\nimport adafruit_ds3231\n# Create the RTC object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector\nds3231 = adafruit_ds3231.DS3231(i2c)\n# Example written for boards with built-in displays\ndisplay = board.DISPLAY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds3231/examples/ds3231_displayio_simpletest.py",
      "library": "ds3231",
      "type": "example",
      "file_name": "ds3231_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_display_text.label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_ds3231\n\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector\nds3231 = adafruit_ds3231.DS3231(i2c)\n# Example written for boards with built-in displays\ndisplay = board.DISPLAY\n# Create a main_group to hold anything we want to show on the display.\nmain_group = Group()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds3231/examples/ds3231_displayio_simpletest.py",
      "library": "ds3231",
      "type": "example",
      "file_name": "ds3231_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_led_animation.animation.pulse import Pulse\nfrom adafruit_led_animation.color import RED\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\npixel_num = 32\n# Update to matchpin connected to button that connect logic high when pushed",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_freeze_animation.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_freeze_animation.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_led_animation.animation.pulse import Pulse\nfrom adafruit_led_animation.color import RED\n\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\npixel_num = 32\n# Update to matchpin connected to button that connect logic high when pushed\nbutton_pin = board.D3\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)\nbutton = DigitalInOut(button_pin)\nbutton.direction = Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_freeze_animation.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_freeze_animation.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_led_animation.animation.pulse import Pulse\nfrom adafruit_led_animation.color import RED\n\npixel_num = 32\n# Update to matchpin connected to button that connect logic high when pushed\nbutton_pin = board.D3\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)\nbutton = DigitalInOut(button_pin)\nbutton.direction = Direction.INPUT\nbutton.pull = Pull.UP",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_freeze_animation.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_freeze_animation.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport displayio\nimport fourwire\nimport terminalio\nimport vectorio\nfrom adafruit_display_text.label import Label\nfrom adafruit_ili9341 import ILI9341\nfrom simpleio import map_range\nimport adafruit_stmpe610\n\n# Release any resources currently in use for the displays\n# Define the display's SPI bus connection\ndisp_bus = fourwire.FourWire(board.SPI(), command=board.D10, chip_select=board.D9, reset=None)\n# Instantiate the 2.4\" 320x240 TFT FeatherWing (#3315).\ndisplay = ILI9341(disp_bus, width=320, height=240)\n_touch_flip = (False, False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/stmpe610/examples/stmpe610_touch_calibrator.py",
      "library": "stmpe610",
      "type": "example",
      "file_name": "stmpe610_touch_calibrator.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport displayio\nimport fourwire\nimport terminalio\nimport vectorio\nfrom adafruit_display_text.label import Label\nfrom adafruit_ili9341 import ILI9341\nfrom simpleio import map_range\nimport adafruit_stmpe610\n\n    display_group = displayio.Group()\n    display.root_group = display_group\n# Instantiate touchscreen.\nts_cs = digitalio.DigitalInOut(board.D6)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/stmpe610/examples/stmpe610_touch_calibrator.py",
      "library": "stmpe610",
      "type": "example",
      "file_name": "stmpe610_touch_calibrator.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nimport board\nimport digitalio\nimport displayio\nfrom adafruit_ble.advertising.standard import SolicitServicesAdvertisement\nfrom adafruit_ble_apple_notification_center import AppleNotificationCenterService\nfrom adafruit_display_ble_status.advertising import AdvertisingWidget\nfrom adafruit_gizmo import tft_gizmo\nfrom adafruit_display_notification import NotificationFree, apple\n\nAPPS = []\nDELAY_AFTER_PRESS = 15\nDEBOUNCE = 0.1\na = digitalio.DigitalInOut(board.BUTTON_A)\na.switch_to_input(pull=digitalio.Pull.DOWN)\nb = digitalio.DigitalInOut(board.BUTTON_B)\nb.switch_to_input(pull=digitalio.Pull.DOWN)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display_notification/examples/display_notification_simpletest.py",
      "library": "display_notification",
      "type": "example",
      "file_name": "display_notification_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nimport board\nimport digitalio\nimport displayio\nfrom adafruit_ble.advertising.standard import SolicitServicesAdvertisement\nfrom adafruit_ble_apple_notification_center import AppleNotificationCenterService\nfrom adafruit_display_ble_status.advertising import AdvertisingWidget\nfrom adafruit_gizmo import tft_gizmo\nfrom adafruit_display_notification import NotificationFree, apple\n\nDELAY_AFTER_PRESS = 15\nDEBOUNCE = 0.1\na = digitalio.DigitalInOut(board.BUTTON_A)\na.switch_to_input(pull=digitalio.Pull.DOWN)\nb = digitalio.DigitalInOut(board.BUTTON_B)\nb.switch_to_input(pull=digitalio.Pull.DOWN)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display_notification/examples/display_notification_simpletest.py",
      "library": "display_notification",
      "type": "example",
      "file_name": "display_notification_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nimport board\nimport digitalio\nimport displayio\nfrom adafruit_ble.advertising.standard import SolicitServicesAdvertisement\nfrom adafruit_ble_apple_notification_center import AppleNotificationCenterService\nfrom adafruit_display_ble_status.advertising import AdvertisingWidget\nfrom adafruit_gizmo import tft_gizmo\nfrom adafruit_display_notification import NotificationFree, apple\n\ndef find_connection():\n    for connection in radio.connections:\n        if AppleNotificationCenterService not in connection:\n            continue\n        if not connection.paired:\n            connection.pair()\n        return (connection, connection[AppleNotificationCenterService])\n    return (None, None)\n\n# Usage example:\nall_ids = []\nlast_press = time.monotonic()\nactive_connection, notification_service = find_connection()\nwhile True:\n    if not active_connection:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display_notification/examples/display_notification_simpletest.py",
      "library": "display_notification",
      "type": "example",
      "file_name": "display_notification_simpletest.py",
      "chunk_type": "function",
      "function_name": "find_connection"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nimport board\nimport digitalio\nimport displayio\nfrom adafruit_ble.advertising.standard import SolicitServicesAdvertisement\nfrom adafruit_ble_apple_notification_center import AppleNotificationCenterService\nfrom adafruit_display_ble_status.advertising import AdvertisingWidget\nfrom adafruit_gizmo import tft_gizmo\nfrom adafruit_display_notification import NotificationFree, apple\n\n# Start advertising before messing with the display so that we can connect immediately.\nradio = adafruit_ble.BLERadio()\nadvertisement = SolicitServicesAdvertisement()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display_notification/examples/display_notification_simpletest.py",
      "library": "display_notification",
      "type": "example",
      "file_name": "display_notification_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_fancyled.adafruit_fancyled as fancy\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\n\nDATA_SOURCE = \"https://api.thingspeak.com/channels/1417/feeds.json?results=1\"\nDATA_LOCATION = [\"feeds\", 0, \"field2\"]\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_cheerlights.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_cheerlights.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_fancyled.adafruit_fancyled as fancy\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\n\nDATA_SOURCE = \"https://api.thingspeak.com/channels/1417/feeds.json?results=1\"\nDATA_LOCATION = [\"feeds\", 0, \"field2\"]\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_cheerlights.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_cheerlights.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_fancyled.adafruit_fancyled as fancy\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\n\nDATA_LOCATION = [\"feeds\", 0, \"field2\"]\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_cheerlights.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_cheerlights.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_fancyled.adafruit_fancyled as fancy\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\n\n# Secondary (SCK1) SPI used to connect to WiFi board on Arduino Nano Connect RP2040\n    spi = busio.SPI(board.SCK1, board.MOSI1, board.MISO1)\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_cheerlights.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_cheerlights.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_fancyled.adafruit_fancyled as fancy\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\n\n    spi = busio.SPI(board.SCK1, board.MOSI1, board.MISO1)\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_cheerlights.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_cheerlights.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_fancyled.adafruit_fancyled as fancy\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\n\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = WiFiManager(esp, ssid, password, status_pixel=status_pixel)\n# neopixels\npixels = neopixel.NeoPixel(board.A1, 16, brightness=0.3)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_cheerlights.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_cheerlights.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lsm303dlh_mag\n\nimport board\nimport adafruit_lsm303dlh_mag\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lsm303dlh_mag.LSM303DLH_Mag(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303dlh-mag/examples/lsm303dlh_mag_simpletest.py",
      "library": "lsm303dlh-mag",
      "type": "example",
      "file_name": "lsm303dlh_mag_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lsm303dlh_mag\n\nimport adafruit_lsm303dlh_mag\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lsm303dlh_mag.LSM303DLH_Mag(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303dlh-mag/examples/lsm303dlh_mag_simpletest.py",
      "library": "lsm303dlh-mag",
      "type": "example",
      "file_name": "lsm303dlh_mag_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Display magnetometer data once per second\"\"\"\n\nimport time\n\nimport board\n\nimport adafruit_lsm303dlh_mag\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lsm303dlh_mag.LSM303DLH_Mag(i2c)\n\nwhile True:\n    mag_x, mag_y, mag_z = sensor.magnetic\n\n    print(f\"Magnetometer (gauss): ({mag_x:10.3f}, {mag_y:10.3f}, {mag_z:10.3f})\")\n    print(\"\")\n    time.sleep(1.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303dlh-mag/examples/lsm303dlh_mag_simpletest.py",
      "library": "lsm303dlh-mag",
      "type": "example",
      "file_name": "lsm303dlh_mag_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport displayio\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.line import Line\nfrom adafruit_display_shapes.polygon import Polygon\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.roundrect import RoundRect\nfrom adafruit_display_shapes.triangle import Triangle\n\n# Make the display context\nsplash = displayio.Group()\nboard.DISPLAY.root_group = splash\n# Make a background color fill\ncolor_bitmap = displayio.Bitmap(320, 240, 1)\ncolor_palette = displayio.Palette(1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-shapes/examples/display_shapes_simpletest.py",
      "library": "display-shapes",
      "type": "example",
      "file_name": "display_shapes_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_ens160\n\nimport adafruit_ens160\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nens = adafruit_ens160.ENS160(i2c)\n# Set the temperature compensation variable to the ambient temp\n# for best sensor calibration",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ens160/examples/ens160_displayio_simpletest.py",
      "library": "ens160",
      "type": "example",
      "file_name": "ens160_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_ens160\n\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nens = adafruit_ens160.ENS160(i2c)\n# Set the temperature compensation variable to the ambient temp\n# for best sensor calibration\nens.temperature_compensation = 25",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ens160/examples/ens160_displayio_simpletest.py",
      "library": "ens160",
      "type": "example",
      "file_name": "ens160_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_ens160\n\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)\n# place the label in the middle of the screen with anchored positioning\ndisplay_output_label.anchor_point = (0, 0)\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2)\n# add the label to the main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ens160/examples/ens160_displayio_simpletest.py",
      "library": "ens160",
      "type": "example",
      "file_name": "ens160_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_ens160\n\n# add the label to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ens160/examples/ens160_displayio_simpletest.py",
      "library": "ens160",
      "type": "example",
      "file_name": "ens160_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_adt7410\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_temperature.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_temperature.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_adt7410\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_temperature.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_temperature.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_adt7410\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_temperature.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_temperature.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_adt7410\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_temperature.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_temperature.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_adt7410\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_temperature.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_temperature.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_adt7410\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_temperature.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_temperature.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_adt7410\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_temperature.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_temperature.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_adt7410\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_temperature.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_temperature.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_adt7410\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n    # If no 'temperature' feed exists, create one\n    temperature_feed = io.create_new_feed(\"temperature\")\n# Set up ADT7410 sensor\ni2c_bus = busio.I2C(board.SCL, board.SDA)\nadt = adafruit_adt7410.ADT7410(i2c_bus, address=0x48)\nadt.high_resolution = True",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_temperature.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_temperature.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_adt7410\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\nadt = adafruit_adt7410.ADT7410(i2c_bus, address=72)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_temperature.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_temperature.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom adafruit_is31fl3731.led_shim import LedShim as Display\n\nimport board\nimport busio\ni2c = busio.I2C(board.SCL, board.SDA)\n# initial display if you are using Pimoroni LED SHIM\ndisplay = Display(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3731/examples/is31fl3731_ledshim_fade.py",
      "library": "is31fl3731",
      "type": "example",
      "file_name": "is31fl3731_ledshim_fade.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2023 E. A. Graham, Jr.\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport busio\n\nfrom adafruit_is31fl3731.led_shim import LedShim as Display\n\ni2c = busio.I2C(board.SCL, board.SDA)\n\n# initial display if you are using Pimoroni LED SHIM\ndisplay = Display(i2c)\n\ny = 1\nfor x in range(28):\n    display.pixel(x, y, 255)\n\ndisplay.fade(fade_in=104, pause=250)\n\ntry:\n    while True:\n        time.sleep(10)\nexcept KeyboardInterrupt:\n    display.sleep(True)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3731/examples/is31fl3731_ledshim_fade.py",
      "library": "is31fl3731",
      "type": "example",
      "file_name": "is31fl3731_ledshim_fade.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nfrom rainbowio import colorwheel\nimport adafruit_is31fl3741\nfrom adafruit_is31fl3741.adafruit_ledglasses import LED_Glasses\n\nimport adafruit_is31fl3741\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nglasses = LED_Glasses(i2c, allocate=adafruit_is31fl3741.MUST_BUFFER)\nwheeloffset = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3741/examples/is31fl3741_glassesrings.py",
      "library": "is31fl3741",
      "type": "example",
      "file_name": "is31fl3741_glassesrings.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom rainbowio import colorwheel\nimport adafruit_is31fl3741\nfrom adafruit_is31fl3741.adafruit_ledglasses import LED_Glasses\n\nimport adafruit_is31fl3741\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nglasses = LED_Glasses(i2c, allocate=adafruit_is31fl3741.MUST_BUFFER)\nwheeloffset = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3741/examples/is31fl3741_glassesrings.py",
      "library": "is31fl3741",
      "type": "example",
      "file_name": "is31fl3741_glassesrings.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nfrom rainbowio import colorwheel\n\nimport adafruit_is31fl3741\nfrom adafruit_is31fl3741.adafruit_ledglasses import LED_Glasses\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nglasses = LED_Glasses(i2c, allocate=adafruit_is31fl3741.MUST_BUFFER)\n\nwheeloffset = 0\nwhile True:\n    for i in range(24):\n        hue = colorwheel(i * 256 // 24 + wheeloffset)\n        glasses.right_ring[i] = hue\n        glasses.left_ring[23 - i] = hue\n    glasses.show()\n    wheeloffset += 10\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3741/examples/is31fl3741_glassesrings.py",
      "library": "is31fl3741",
      "type": "example",
      "file_name": "is31fl3741_glassesrings.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nimport adafruit_requests\nURL = \"https://httpbin.org/post\"\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_file_upload.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_file_upload.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nimport adafruit_requests\nURL = \"https://httpbin.org/post\"\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_file_upload.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_file_upload.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nURL = \"https://httpbin.org/post\"\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_file_upload.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_file_upload.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2024 Tim Cocks for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport adafruit_connection_manager\nimport wifi\n\nimport adafruit_requests\n\nURL = \"https://httpbin.org/post\"\n\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n\nwith open(\"requests_wifi_file_upload_image.png\", \"rb\") as file_handle:\n    files = {\n        \"file\": (\n            \"requests_wifi_file_upload_image.png\",\n            file_handle,\n            \"image/png\",\n            {\"CustomHeader\": \"BlinkaRocks\"},\n        ),\n        \"othervalue\": (None, \"HelloWorld\"),\n    }\n\n    with requests.post(URL, files=files) as response:\n        print(response.content)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_file_upload.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_file_upload.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nfrom io import BytesIO\nimport board\nimport busio\nimport digitalio\nimport msgpack\nfrom adafruit_rfm import rfm9xfsk\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.D10)\nRESET = digitalio.DigitalInOut(board.D11)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_msgpack_data.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_msgpack_data.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom io import BytesIO\nimport board\nimport busio\nimport digitalio\nimport msgpack\nfrom adafruit_rfm import rfm9xfsk\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.D10)\nRESET = digitalio.DigitalInOut(board.D11)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_msgpack_data.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_msgpack_data.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom io import BytesIO\nimport board\nimport busio\nimport digitalio\nimport msgpack\nfrom adafruit_rfm import rfm9xfsk\n\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.D10)\nRESET = digitalio.DigitalInOut(board.D11)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\n# uncommnet the desired import and rfm initialization depending on the radio boards being used",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_msgpack_data.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_msgpack_data.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_ltr390 import ALS, LTR390, UV\n\nTHRESHOLD_VALUE = 100\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nltr = LTR390(i2c)\nltr.high_threshold = THRESHOLD_VALUE",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ltr390/examples/ltr390_alert_test.py",
      "library": "ltr390",
      "type": "example",
      "file_name": "ltr390_alert_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 by Bryan Siepert, written for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n# pylint:disable=unused-import\nimport time\n\nimport board\n\nfrom adafruit_ltr390 import ALS, LTR390, UV\n\nTHRESHOLD_VALUE = 100\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nltr = LTR390(i2c)\n\nltr.high_threshold = THRESHOLD_VALUE\nltr.enable_alerts(True, UV, 1)\n\nwhile True:\n    if ltr.threshold_passed:\n        print(\"UV:\", ltr.uvs)\n        print(\"threshold\", THRESHOLD_VALUE, \"passed!\")\n        print(\"\")\n    else:\n        print(\"threshold not passed yet\")\n\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ltr390/examples/ltr390_alert_test.py",
      "library": "ltr390",
      "type": "example",
      "file_name": "ltr390_alert_test.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\nCHANGE_DELAY = 1.0  # Seconds to wait before auto-advancing to the next tab\n# built-in display\ndisplay = board.DISPLAY\n# create and show main_group\nmain_group = displayio.Group()\ndisplay.root_group = main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_tab_layout_simpletest.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_tab_layout_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\ntest_page_layout = TabLayout(x=0, y=0, display=board.DISPLAY, tab_text_scale=2, custom_font=font, inactive_tab_spritesheet='bmps/inactive_tab_sprite.bmp', showing_tab_spritesheet='bmps/active_tab_sprite.bmp', showing_tab_text_color=43609, inactive_tab_text_color=15658734, inactive_tab_transparent_indexes=(0, 1), showing_tab_transparent_indexes=(0, 1), tab_count=4)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_tab_layout_simpletest.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_tab_layout_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# (visit io.adafruit.com if you need to create an account, or if you need your Adafruit IO key.)\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\nbroker = getenv(\"broker\", \"io.adafruit.com\")\ncs = DigitalInOut(board.D10)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/ethernet/minimqtt_simpletest_eth.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_eth.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\nbroker = getenv(\"broker\", \"io.adafruit.com\")\ncs = DigitalInOut(board.D10)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)\n### Topic Setup ###",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/ethernet/minimqtt_simpletest_eth.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_eth.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef connect(client, userdata, flags, rc):\n    print('Connected to MQTT Broker!')\n    print(f'Flags: {flags}\\n RC: {rc}')\n\n# Usage example:\nfrom os import getenv\n\nimport adafruit_connection_manager\nimport board\nimport busio",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/ethernet/minimqtt_simpletest_eth.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_eth.py",
      "chunk_type": "function",
      "function_name": "connect"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef disconnect(client, userdata, rc):\n    print('Disconnected from MQTT Broker!')\n\n# Usage example:\n\ndef disconnect(client, userdata, rc):\n    # This method is called when the client disconnects\n    # from the broker.\n    print(\"Disconnected from MQTT Broker!\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/ethernet/minimqtt_simpletest_eth.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_eth.py",
      "chunk_type": "function",
      "function_name": "disconnect"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef subscribe(client, userdata, topic, granted_qos):\n    print(f'Subscribed to {topic} with QOS level {granted_qos}')\n\n# Usage example:\n\ndef subscribe(client, userdata, topic, granted_qos):\n    # This method is called when the client subscribes to a new feed.\n    print(f\"Subscribed to {topic} with QOS level {granted_qos}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/ethernet/minimqtt_simpletest_eth.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_eth.py",
      "chunk_type": "function",
      "function_name": "subscribe"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef unsubscribe(client, userdata, topic, pid):\n    print(f'Unsubscribed from {topic} with PID {pid}')\n\n# Usage example:\n\ndef unsubscribe(client, userdata, topic, pid):\n    # This method is called when the client unsubscribes from a feed.\n    print(f\"Unsubscribed from {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/ethernet/minimqtt_simpletest_eth.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_eth.py",
      "chunk_type": "function",
      "function_name": "unsubscribe"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef publish(client, userdata, topic, pid):\n    print(f'Published to {topic} with PID {pid}')\n\n# Usage example:\n\ndef publish(client, userdata, topic, pid):\n    # This method is called when the client publishes data to a feed.\n    print(f\"Published to {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/ethernet/minimqtt_simpletest_eth.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_eth.py",
      "chunk_type": "function",
      "function_name": "publish"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n    # This method is called when the client publishes data to a feed.\npool = adafruit_connection_manager.get_radio_socketpool(eth)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(eth)\n# Set up a MiniMQTT Client\n# NOTE: We'll need to connect insecurely for ethernet configurations.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/ethernet/minimqtt_simpletest_eth.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_eth.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n    # This method is called when the client publishes data to a feed.\npool = adafruit_connection_manager.get_radio_socketpool(eth)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(eth)\n# Set up a MiniMQTT Client\n# NOTE: We'll need to connect insecurely for ethernet configurations.\nclient = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/ethernet/minimqtt_simpletest_eth.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_eth.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport RPi.GPIO as io\nimport adafruit_rfm9x\n\ndef rfm9x_callback(rfm9x_irq):\n    global packet_received\n    print('IRQ detected ', rfm9x_irq, rfm9x.rx_done)\n    if rfm9x.rx_done:\n        packet = rfm9x.receive(timeout=None)\n        if packet is not None:\n            packet_received = True\n            print(f'Received (raw bytes): {packet}')\n            print([hex(x) for x in packet])\n            print(f'RSSI: {rfm9x.last_rssi}')\n\n# Usage example:\nio.setup(RFM9X_G0, io.IN, pull_up_down=io.PUD_DOWN)  # activate input\nio.add_event_detect(RFM9X_G0, io.RISING)\nio.add_event_callback(RFM9X_G0, rfm9x_callback)\n\npacket_received = False",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_rpi_interrupt.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_rpi_interrupt.py",
      "chunk_type": "function",
      "function_name": "rfm9x_callback"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport RPi.GPIO as io\nimport adafruit_rfm9x\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_rpi_interrupt.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_rpi_interrupt.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport RPi.GPIO as io\nimport adafruit_rfm9x\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_rpi_interrupt.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_rpi_interrupt.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport RPi.GPIO as io\nimport adafruit_rfm9x\n\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm9x = adafruit_rfm9x.RFM9x(spi, CS, RESET, RADIO_FREQ_MHZ)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_rpi_interrupt.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_rpi_interrupt.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport RPi.GPIO as io\nimport adafruit_rfm9x\n\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm9x = adafruit_rfm9x.RFM9x(spi, CS, RESET, RADIO_FREQ_MHZ)\n# Note that the radio is configured in LoRa mode so you can't control sync\n# word, encryption, frequency deviation, or other settings!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_rpi_interrupt.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_rpi_interrupt.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1675\n\nimport adafruit_ssd1675\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1675/examples/ssd1675_2.13_monochrome.py",
      "library": "ssd1675",
      "type": "example",
      "file_name": "ssd1675_2.13_monochrome.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1675\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1675/examples/ssd1675_2.13_monochrome.py",
      "library": "ssd1675",
      "type": "example",
      "file_name": "ssd1675_2.13_monochrome.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1675\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1675/examples/ssd1675_2.13_monochrome.py",
      "library": "ssd1675",
      "type": "example",
      "file_name": "ssd1675_2.13_monochrome.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1675\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1675/examples/ssd1675_2.13_monochrome.py",
      "library": "ssd1675",
      "type": "example",
      "file_name": "ssd1675_2.13_monochrome.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1675\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1675/examples/ssd1675_2.13_monochrome.py",
      "library": "ssd1675",
      "type": "example",
      "file_name": "ssd1675_2.13_monochrome.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1675\n\ndisplay = adafruit_ssd1675.SSD1675(display_bus, width=250, height=122, rotation=270, busy_pin=epd_busy)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1675/examples/ssd1675_2.13_monochrome.py",
      "library": "ssd1675",
      "type": "example",
      "file_name": "ssd1675_2.13_monochrome.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import array\nimport time\nimport board\nimport rp2pio\nimport adafruit_pioasm\n\nblink = adafruit_pioasm.assemble('\\n.program blink\\n    pull block    ; These two instructions take the blink duration\\n    out y, 32     ; and store it in y\\nforever:\\n    mov x, y\\n    set pins, 1   ; Turn LED on\\nlp1:\\n    jmp x-- lp1   ; Delay for (x + 1) cycles, x is a 32 bit number\\n    mov x, y\\n    set pins, 0   ; Turn LED off\\nlp2:\\n    jmp x-- lp2   ; Delay for the same number of cycles again\\n    jmp forever   ; Blink forever!\\n')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_blink.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_blink.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\n\n    esp32_cs = DigitalInOut(board.D13)\n    esp32_ready = DigitalInOut(board.D11)\n    esp32_reset = DigitalInOut(board.D12)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_simpletest.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\n\n    esp32_cs = DigitalInOut(board.D13)\n    esp32_ready = DigitalInOut(board.D11)\n    esp32_reset = DigitalInOut(board.D12)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_simpletest.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\n\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)  # Uncomment for Most Boards",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_simpletest.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\n\n# from adafruit_esp32spi import PWMOut\n# RED_LED = PWMOut.PWMOut(esp, 26)\n# GREEN_LED = PWMOut.PWMOut(esp, 27)\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password, status_pixel=status_pixel)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_simpletest.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\n\n#\n# From the Adafruit CircuitPython Bundle https://github.com/adafruit/Adafruit_CircuitPython_Bundle:\n# * adafruit-circuitpython-minimqtt\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Create an IoT Hub device client and connect\ndevice = IoTHubDevice(pool, ssl_context, device_connection_string)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_simpletest.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\n\n# From the Adafruit CircuitPython Bundle https://github.com/adafruit/Adafruit_CircuitPython_Bundle:\n# * adafruit-circuitpython-minimqtt\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Create an IoT Hub device client and connect\ndevice = IoTHubDevice(pool, ssl_context, device_connection_string)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_simpletest.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import sys\nimport board\nimport digitalio\nfrom PIL import Image\nimport adafruit_ssd1306\n\nimport adafruit_ssd1306\n# Setting some variables for our reset pin etc.\nRESET_PIN = digitalio.DigitalInOut(board.D4)\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_pillow_image_display.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_pillow_image_display.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import sys\nimport board\nimport digitalio\nfrom PIL import Image\nimport adafruit_ssd1306\n\nimport adafruit_ssd1306\n# Setting some variables for our reset pin etc.\nRESET_PIN = digitalio.DigitalInOut(board.D4)\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Create the SSD1306 OLED class.\n# The first two parameters are the pixel width and pixel height.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_pillow_image_display.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_pillow_image_display.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import sys\nimport board\nimport digitalio\nfrom PIL import Image\nimport adafruit_ssd1306\n\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Create the SSD1306 OLED class.\n# The first two parameters are the pixel width and pixel height.\n# Change these to the right size for your display!\noled = adafruit_ssd1306.SSD1306_I2C(128, 64, i2c)\n# Note you can change the I2C address, or add a reset pin:\n# oled = adafruit_ssd1306.SSD1306_I2C(128, 64, i2c, addr=0x3D, reset=RESET_PIN)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_pillow_image_display.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_pillow_image_display.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nfrom analogio import AnalogIn\nimport adafruit_ds3502\n\n####### NOTE ################\n# this example will not work with Blinka/rasberry Pi due to the lack of analog pins.\n# Blinka and Raspberry Pi users should run the \"ds3502_blinka_simpletest.py\" example\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nds3502 = adafruit_ds3502.DS3502(i2c)\nwiper_output = AnalogIn(board.A0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds3502/examples/ds3502_simpletest.py",
      "library": "ds3502",
      "type": "example",
      "file_name": "ds3502_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nfrom analogio import AnalogIn\nimport adafruit_ds3502\n\n# this example will not work with Blinka/rasberry Pi due to the lack of analog pins.\n# Blinka and Raspberry Pi users should run the \"ds3502_blinka_simpletest.py\" example\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nds3502 = adafruit_ds3502.DS3502(i2c)\nwiper_output = AnalogIn(board.A0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds3502/examples/ds3502_simpletest.py",
      "library": "ds3502",
      "type": "example",
      "file_name": "ds3502_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nfrom analogio import AnalogIn\nimport adafruit_ds3502\n\n# Blinka and Raspberry Pi users should run the \"ds3502_blinka_simpletest.py\" example\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nds3502 = adafruit_ds3502.DS3502(i2c)\nwiper_output = AnalogIn(board.A0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds3502/examples/ds3502_simpletest.py",
      "library": "ds3502",
      "type": "example",
      "file_name": "ds3502_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_irremote\nimport board\nimport pulseio\nfrom adafruit_circuitplayground import cp\n\nencoder = adafruit_irremote.GenericTransmit(header=[9500, 4500], one=[550, 550], zero=[550, 1700], trail=0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/circuitplayground/examples/circuitplayground_ir_transmit.py",
      "library": "circuitplayground",
      "type": "example",
      "file_name": "circuitplayground_ir_transmit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_simpletest.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_simpletest.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)\ndisplay = ST7735R(display_bus, width=128, height=128, colstart=2, rowstart=1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_simpletest.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)\ndisplay = ST7735R(display_bus, width=128, height=128, colstart=2, rowstart=1)\n# Make the display context",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_simpletest.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_adt7410\n\nimport board\nimport adafruit_adt7410\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nadt = adafruit_adt7410.ADT7410(i2c, address=0x48)\nadt.high_resolution = True",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adt7410/examples/adt7410_simpletest.py",
      "library": "adt7410",
      "type": "example",
      "file_name": "adt7410_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_adt7410\n\nadt = adafruit_adt7410.ADT7410(i2c, address=72)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adt7410/examples/adt7410_simpletest.py",
      "library": "adt7410",
      "type": "example",
      "file_name": "adt7410_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_adt7410\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nadt = adafruit_adt7410.ADT7410(i2c, address=0x48)\nadt.high_resolution = True\n\nwhile True:\n    print(adt.temperature)\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adt7410/examples/adt7410_simpletest.py",
      "library": "adt7410",
      "type": "example",
      "file_name": "adt7410_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice, IoTError\n\n    esp32_cs = DigitalInOut(board.D13)\n    esp32_ready = DigitalInOut(board.D11)\n    esp32_reset = DigitalInOut(board.D12)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_notconnected.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_notconnected.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice, IoTError\n\n    esp32_cs = DigitalInOut(board.D13)\n    esp32_ready = DigitalInOut(board.D11)\n    esp32_reset = DigitalInOut(board.D12)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_notconnected.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_notconnected.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice, IoTError\n\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)  # Uncomment for Most Boards",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_notconnected.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_notconnected.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice, IoTError\n\n# from adafruit_esp32spi import PWMOut\n# RED_LED = PWMOut.PWMOut(esp, 26)\n# GREEN_LED = PWMOut.PWMOut(esp, 27)\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password, status_pixel=status_pixel)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_notconnected.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_notconnected.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice, IoTError\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Create an IoT Hub device client and connect\ndevice = IoTCentralDevice(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_notconnected.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_notconnected.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice, IoTError\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Create an IoT Hub device client and connect\ndevice = IoTCentralDevice(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_notconnected.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_notconnected.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_button import Button\nfrom adafruit_display_text import label\nfrom adafruit_cursorcontrol.cursorcontrol import Cursor\nfrom adafruit_cursorcontrol.cursorcontrol_cursormanager import CursorManager\n\n# Create the display\ndisplay = board.DISPLAY\n# Create the display context\nsplash = displayio.Group()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/cursorcontrol/examples/cursorcontrol_buttons_text.py",
      "library": "cursorcontrol",
      "type": "example",
      "file_name": "cursorcontrol_buttons_text.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_opt4048 import OPT4048, OPT4048_FLAG_CONVERSION_READY, OPT4048_FLAG_H, OPT4048_FLAG_L, OPT4048_FLAG_OVERLOAD, ConversionTime, FaultCount, IntConfig, Mode, Range\n\nREAD_INTERVAL = 0.1  # seconds\n# Initialize the sensor\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = OPT4048(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/opt4048/examples/opt4048_fulltest.py",
      "library": "opt4048",
      "type": "example",
      "file_name": "opt4048_fulltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.jd79661 import Adafruit_JD79661\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1675b import Adafruit_SSD1675B\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.D4)\ndc = digitalio.DigitalInOut(board.D5)\nsrcs = None\nrst = digitalio.DigitalInOut(board.D6)  # can be None to not use this pin",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_blinka.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_blinka.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.jd79661 import Adafruit_JD79661\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1675b import Adafruit_SSD1675B\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.D4)\ndc = digitalio.DigitalInOut(board.D5)\nsrcs = None\nrst = digitalio.DigitalInOut(board.D6)  # can be None to not use this pin\nbusy = digitalio.DigitalInOut(board.D7)  # can be None to not use this pin",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_blinka.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_blinka.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.jd79661 import Adafruit_JD79661\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1675b import Adafruit_SSD1675B\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.D4)\ndc = digitalio.DigitalInOut(board.D5)\nsrcs = None\nrst = digitalio.DigitalInOut(board.D6)  # can be None to not use this pin\nbusy = digitalio.DigitalInOut(board.D7)  # can be None to not use this pin",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_blinka.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_blinka.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.jd79661 import Adafruit_JD79661\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1675b import Adafruit_SSD1675B\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.D4)\ndc = digitalio.DigitalInOut(board.D5)\nsrcs = None\nrst = digitalio.DigitalInOut(board.D6)  # can be None to not use this pin\nbusy = digitalio.DigitalInOut(board.D7)  # can be None to not use this pin\n# give them all to our driver",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_blinka.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_blinka.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.jd79661 import Adafruit_JD79661\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1675b import Adafruit_SSD1675B\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.D4)\ndc = digitalio.DigitalInOut(board.D5)\nsrcs = None\nrst = digitalio.DigitalInOut(board.D6)  # can be None to not use this pin\nbusy = digitalio.DigitalInOut(board.D7)  # can be None to not use this pin\n# give them all to our driver",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_blinka.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_blinka.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport busio\nfrom adafruit_mlx90395 import MLX90395\n\nimport board\nimport busio\ni2c = busio.I2C(board.SCL, board.SDA)\nsensor = MLX90395(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90395/examples/mlx90395_simpletest.py",
      "library": "mlx90395",
      "type": "example",
      "file_name": "mlx90395_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 by Bryan Siepert, written for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\nfrom time import sleep\n\nimport board\nimport busio\n\nfrom adafruit_mlx90395 import MLX90395\n\ni2c = busio.I2C(board.SCL, board.SDA)\nsensor = MLX90395(i2c)\n\nwhile True:\n    print(\"X:{0:5.2f}, Y:{1:5.2f}, Z:{2:5.2f} uT\".format(*sensor.magnetic))\n    print(\"\")\n\n    sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90395/examples/mlx90395_simpletest.py",
      "library": "mlx90395",
      "type": "example",
      "file_name": "mlx90395_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_sharpmemorydisplay\n\nimport digitalio\nimport adafruit_sharpmemorydisplay\n# Initialize SPI bus and control pins\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\nscs = digitalio.DigitalInOut(board.D6)  # inverted chip select\n# pass in the display size, width and height, as well\n# display = adafruit_sharpmemorydisplay.SharpMemoryDisplay(spi, scs, 96, 96)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sharpmemorydisplay/examples/sharpmemorydisplay_simpletest.py",
      "library": "sharpmemorydisplay",
      "type": "example",
      "file_name": "sharpmemorydisplay_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_sharpmemorydisplay\n\nimport adafruit_sharpmemorydisplay\n# Initialize SPI bus and control pins\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\nscs = digitalio.DigitalInOut(board.D6)  # inverted chip select\n# pass in the display size, width and height, as well\n# display = adafruit_sharpmemorydisplay.SharpMemoryDisplay(spi, scs, 96, 96)\ndisplay = adafruit_sharpmemorydisplay.SharpMemoryDisplay(spi, scs, 144, 168)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sharpmemorydisplay/examples/sharpmemorydisplay_simpletest.py",
      "library": "sharpmemorydisplay",
      "type": "example",
      "file_name": "sharpmemorydisplay_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_sharpmemorydisplay\n\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\nscs = digitalio.DigitalInOut(board.D6)  # inverted chip select\n# pass in the display size, width and height, as well\n# display = adafruit_sharpmemorydisplay.SharpMemoryDisplay(spi, scs, 96, 96)\ndisplay = adafruit_sharpmemorydisplay.SharpMemoryDisplay(spi, scs, 144, 168)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sharpmemorydisplay/examples/sharpmemorydisplay_simpletest.py",
      "library": "sharpmemorydisplay",
      "type": "example",
      "file_name": "sharpmemorydisplay_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import usb_midi\nimport adafruit_midi\nfrom adafruit_midi.channel_pressure import ChannelPressure\nfrom adafruit_midi.control_change import ControlChange\nfrom adafruit_midi.midi_message import MIDIUnknownEvent\nfrom adafruit_midi.note_off import NoteOff\nfrom adafruit_midi.note_on import NoteOn\nfrom adafruit_midi.pitch_bend import PitchBend\nfrom adafruit_midi.polyphonic_key_pressure import PolyphonicKeyPressure\nfrom adafruit_midi.program_change import ProgramChange\nfrom adafruit_midi.start import Start\nfrom adafruit_midi.stop import Stop\nfrom adafruit_midi.system_exclusive import SystemExclusive\nfrom adafruit_midi.timing_clock import TimingClock\n\nmidi = adafruit_midi.MIDI(midi_in=usb_midi.ports[0], midi_out=usb_midi.ports[1], in_channel=(1, 2, 3), out_channel=0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/midi/examples/midi_inoutdemo.py",
      "library": "midi",
      "type": "example",
      "file_name": "midi_inoutdemo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_debug_i2c import DebugI2C\nimport adafruit_guvx_i2c\n\nimport board\nimport adafruit_guvx_i2c\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndebug_i2c = DebugI2C(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/guvx-i2c/examples/guva_c32sm_fulltest.py",
      "library": "guvx-i2c",
      "type": "example",
      "file_name": "guva_c32sm_fulltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_debug_i2c import DebugI2C\nimport adafruit_guvx_i2c\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndebug_i2c = DebugI2C(i2c)\nsensor = adafruit_guvx_i2c.GUVA_C32SM(i2c)\nsensor.power_mode = adafruit_guvx_i2c.GUVXI2C_PMODE_NORMAL\npowermodes = (\"Normal\", \"Low power\", \"Auto shutdown\", \"Shutdown\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/guvx-i2c/examples/guva_c32sm_fulltest.py",
      "library": "guvx-i2c",
      "type": "example",
      "file_name": "guva_c32sm_fulltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_debug_i2c import DebugI2C\nimport adafruit_guvx_i2c\n\ndebug_i2c = DebugI2C(i2c)\nsensor = adafruit_guvx_i2c.GUVA_C32SM(i2c)\nsensor.power_mode = adafruit_guvx_i2c.GUVXI2C_PMODE_NORMAL\npowermodes = (\"Normal\", \"Low power\", \"Auto shutdown\", \"Shutdown\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/guvx-i2c/examples/guva_c32sm_fulltest.py",
      "library": "guvx-i2c",
      "type": "example",
      "file_name": "guva_c32sm_fulltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2022 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\nfrom adafruit_debug_i2c import DebugI2C\n\nimport adafruit_guvx_i2c\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\ndebug_i2c = DebugI2C(i2c)\n\nsensor = adafruit_guvx_i2c.GUVA_C32SM(i2c)\n\nsensor.power_mode = adafruit_guvx_i2c.GUVXI2C_PMODE_NORMAL\npowermodes = (\"Normal\", \"Low power\", \"Auto shutdown\", \"Shutdown\")\nprint(\"Power mode is:\", powermodes[sensor.power_mode])\n\n# One of four measuring periods in milliseconds: 100, 200, 400 or 800ms\nsensor.measure_period = 100\nprint(\"Sensor period is\", sensor.measure_period, \"ms\")\n\n# UVA range, can be: 1, 2, 4, 8, 16, 32, 64, or 128 times\nsensor.range = 1\nprint(\"Sensor range is\", sensor.range, \"x\")\n\nwhile True:\n    print(\"UVA:\", sensor.uva, \"   UV index:\", sensor.uv_index)\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/guvx-i2c/examples/guva_c32sm_fulltest.py",
      "library": "guvx-i2c",
      "type": "example",
      "file_name": "guva_c32sm_fulltest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_led_animation.animation.solid import Solid\nfrom adafruit_led_animation.color import BLUE, RED\nfrom adafruit_led_animation.sequence import AnimationSequence\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\npixel_num = 32\n# Update to matchpin connected to button that connect logic high when pushed",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_cycle_animations.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_cycle_animations.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_led_animation.animation.solid import Solid\nfrom adafruit_led_animation.color import BLUE, RED\nfrom adafruit_led_animation.sequence import AnimationSequence\n\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\npixel_num = 32\n# Update to matchpin connected to button that connect logic high when pushed\nbutton_pin = board.D3\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)\nbutton = DigitalInOut(button_pin)\nbutton.direction = Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_cycle_animations.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_cycle_animations.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_led_animation.animation.solid import Solid\nfrom adafruit_led_animation.color import BLUE, RED\nfrom adafruit_led_animation.sequence import AnimationSequence\n\npixel_num = 32\n# Update to matchpin connected to button that connect logic high when pushed\nbutton_pin = board.D3\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)\nbutton = DigitalInOut(button_pin)\nbutton.direction = Direction.INPUT\nbutton.pull = Pull.UP",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_cycle_animations.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_cycle_animations.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.multicolor_comet import MulticolorComet\n\nimport neopixel\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.D9\n# Update to match the number of NeoPixels you have connected\npixel_num = 96\nbrightness = 0.02",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_multicolor_comet.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_multicolor_comet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.multicolor_comet import MulticolorComet\n\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=brightness, auto_write=True, pixel_order=neopixel.RGB)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_multicolor_comet.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_multicolor_comet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_ds248x import Adafruit_DS248x\n\nimport board\n# Initialize I2C bus and DS248x\ni2c = board.STEMMA_I2C()\nds248x = Adafruit_DS248x(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds248x/examples/ds2482s-800_8-channel_test.py",
      "library": "ds248x",
      "type": "example",
      "file_name": "ds2482s-800_8-channel_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2024 Liz Clark for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\n\"\"\"Adafruit DS2482S-800 8-Channel DS18B20 Example\"\"\"\n\nimport time\n\nimport board\n\nfrom adafruit_ds248x import Adafruit_DS248x\n\n# Initialize I2C bus and DS248x\ni2c = board.STEMMA_I2C()\nds248x = Adafruit_DS248x(i2c)\n\nwhile True:\n    for i in range(8):\n        ds248x.channel = i\n        print(f\"Reading channel {ds248x.channel}\")\n        temperature = ds248x.ds18b20_temperature()\n        print(f\"Temperature: {temperature:.2f} \u00b0C\")\n        print()\n        time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds248x/examples/ds2482s-800_8-channel_test.py",
      "library": "ds248x",
      "type": "example",
      "file_name": "ds2482s-800_8-channel_test.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_seesaw.digitalio import DigitalIO\nfrom adafruit_seesaw.seesaw import Seesaw\n\nimport digitalio\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nss = Seesaw(i2c)\nbutton_pin = 2",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_digitalio_test.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_digitalio_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_seesaw.digitalio import DigitalIO\nfrom adafruit_seesaw.seesaw import Seesaw\n\nbutton_pin = 2\nled_pin = 5\nbutton = DigitalIO(ss, button_pin)\nbutton.direction = digitalio.Direction.INPUT\nbutton.pull = digitalio.Pull.UP\nled = DigitalIO(ss, led_pin)\nled.direction = digitalio.Direction.OUTPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_digitalio_test.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_digitalio_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_seesaw.digitalio import DigitalIO\nfrom adafruit_seesaw.seesaw import Seesaw\n\nbutton_pin = 2\nled_pin = 5\nbutton = DigitalIO(ss, button_pin)\nbutton.direction = digitalio.Direction.INPUT\nbutton.pull = digitalio.Pull.UP\nled = DigitalIO(ss, led_pin)\nled.direction = digitalio.Direction.OUTPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_digitalio_test.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_digitalio_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_seesaw.digitalio import DigitalIO\nfrom adafruit_seesaw.seesaw import Seesaw\n\nbutton = DigitalIO(ss, button_pin)\nbutton.direction = digitalio.Direction.INPUT\nbutton.pull = digitalio.Pull.UP\nled = DigitalIO(ss, led_pin)\nled.direction = digitalio.Direction.OUTPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_digitalio_test.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_digitalio_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import sys\nimport time\nimport adafruit_json_stream as json_stream\n\nclass FakeResponse:\n\n    def __init__(self, file):\n        self.file = file\n\n    def iter_content(self, chunk_size):\n        while True:\n            yield self.file.read(chunk_size)\n\n# Usage example:\n\n\nclass FakeResponse:\n    def __init__(self, file):\n        self.file = file",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/json_stream/examples/json_stream_local_file_advanced.py",
      "library": "json_stream",
      "type": "example",
      "file_name": "json_stream_local_file_advanced.py",
      "chunk_type": "function",
      "function_name": "FakeResponse"
    }
  },
  {
    "content": "import sys\nimport time\nimport adafruit_json_stream as json_stream\n\n# If we don't know the order in which the keys are,\ngo through all of them and pick the ones we want\ndef find_keys(haystack, keys):\n    \"\"\"If we don't know the order in which the keys are,\n    go through all of them and pick the ones we want\"\"\"\n    out = {}\n    for key in haystack:\n        if key in keys:\n            value = haystack[key]\n            if hasattr(value, 'as_object'):\n                value = value.as_object()\n            out[key] = value\n    return out\n\n# Usage example:\n# iterate on the content of a list\nfor i, day in enumerate(obj[\"daily\"][\"data\"]):\n    day_items = find_keys(day, (\"time\", \"summary\", \"temperatureHigh\"))\n    date = time_to_date(day_items[\"time\"])\n    print(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/json_stream/examples/json_stream_local_file_advanced.py",
      "library": "json_stream",
      "type": "example",
      "file_name": "json_stream_local_file_advanced.py",
      "chunk_type": "function",
      "function_name": "find_keys"
    }
  },
  {
    "content": "import sys\nimport time\nimport adafruit_json_stream as json_stream\n\ndef time_to_date(stamp):\n    tt = time.localtime(stamp)\n    month = months[tt.tm_mon]\n    return f'{tt.tm_mday:2d}th of {month}'\n\n# Usage example:\ncurrently = obj[\"currently\"]\nprint(\"Currently:\")\nprint(\" \", time_to_date(currently[\"time\"]))\nprint(\" \", currently[\"icon\"])\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/json_stream/examples/json_stream_local_file_advanced.py",
      "library": "json_stream",
      "type": "example",
      "file_name": "json_stream_local_file_advanced.py",
      "chunk_type": "function",
      "function_name": "time_to_date"
    }
  },
  {
    "content": "import sys\nimport time\nimport adafruit_json_stream as json_stream\n\ndef ftoc(temp):\n    return (temp - 32) * 5 / 9\n\n# Usage example:\n        f'On {date}: {day_items[\"summary\"]},',\n        f'Max: {int(day_items[\"temperatureHigh\"])}F',\n        f'({int(ftoc(day_items[\"temperatureHigh\"]))}C)',\n    )\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/json_stream/examples/json_stream_local_file_advanced.py",
      "library": "json_stream",
      "type": "example",
      "file_name": "json_stream_local_file_advanced.py",
      "chunk_type": "function",
      "function_name": "ftoc"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom adafruit_ht16k33 import matrix\n\n# Import the HT16K33 LED matrix module.\n# Create the I2C interface.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create the matrix class.\n# This creates a 16x8 matrix with multiple displays:\nmatrix = matrix.Matrix16x8(i2c, address=(0x70, 0x71))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ht16k33/examples/ht16k33_matrix_multi_display.py",
      "library": "ht16k33",
      "type": "example",
      "file_name": "ht16k33_matrix_multi_display.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_requests\nimport wifi\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_simpletest.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_requests\nimport wifi\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_simpletest.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_requests\nimport wifi\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_simpletest.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_tlv493d\n\nimport board\nimport adafruit_tlv493d\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntlv = adafruit_tlv493d.TLV493D(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlv493d/examples/tlv493d_simpletest.py",
      "library": "tlv493d",
      "type": "example",
      "file_name": "tlv493d_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_tlv493d\n\nimport adafruit_tlv493d\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntlv = adafruit_tlv493d.TLV493D(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlv493d/examples/tlv493d_simpletest.py",
      "library": "tlv493d",
      "type": "example",
      "file_name": "tlv493d_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_tlv493d\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntlv = adafruit_tlv493d.TLV493D(i2c)\n\nwhile True:\n    print(\"X: {}, Y: {}, Z: {} uT\".format(*tlv.magnetic))\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlv493d/examples/tlv493d_simpletest.py",
      "library": "tlv493d",
      "type": "example",
      "file_name": "tlv493d_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_seesaw.digitalio import DigitalIO\nfrom adafruit_seesaw.pwmout import PWMOut\nfrom adafruit_seesaw.seesaw import Seesaw\n\n# The delay on the PWM cycles. Increase to slow down the LED pulsing, decrease to speed it up.\ndelay = 0.01\n# For most boards.\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# For the QT Py RP2040, QT Py ESP32-S2, other boards that have SCL1/SDA1 as the STEMMA QT port.\n# import busio",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_arcade_qt_simpletest.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_arcade_qt_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_320x240_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_320x240_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_320x240_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_320x240_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)\ndisplay = ST7789(display_bus, width=320, height=240, rotation=90)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_320x240_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_320x240_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)\ndisplay = ST7789(display_bus, width=320, height=240, rotation=90)\n# Make the display context",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_320x240_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_320x240_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_pixel_framebuf import PixelFramebuffer\n\nimport board\nimport neopixel\npixel_pin = board.D6\npixel_width = 16\npixel_height = 16\npixels = neopixel.NeoPixel(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pixel_framebuf/examples/pixel_framebuf_16x16_animation.py",
      "library": "pixel_framebuf",
      "type": "example",
      "file_name": "pixel_framebuf_16x16_animation.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_pixel_framebuf import PixelFramebuffer\n\npixels = neopixel.NeoPixel(pixel_pin, pixel_width * pixel_height, brightness=0.1, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pixel_framebuf/examples/pixel_framebuf_16x16_animation.py",
      "library": "pixel_framebuf",
      "type": "example",
      "file_name": "pixel_framebuf_16x16_animation.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.ssd1675b import Adafruit_SSD1675B\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\n\n# create two buttons\nswitch1 = DigitalInOut(board.D6)\nswitch2 = DigitalInOut(board.D5)\nswitch1.direction = Direction.INPUT\nswitch2.direction = Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_bonnet.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.ssd1675b import Adafruit_SSD1675B\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\n\n# create two buttons\nswitch1 = DigitalInOut(board.D6)\nswitch2 = DigitalInOut(board.D5)\nswitch1.direction = Direction.INPUT\nswitch2.direction = Direction.INPUT\n# create the spi device and pins we will need",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_bonnet.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.ssd1675b import Adafruit_SSD1675B\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\n\nswitch2 = DigitalInOut(board.D5)\nswitch1.direction = Direction.INPUT\nswitch2.direction = Direction.INPUT\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = DigitalInOut(board.D8)\ndc = DigitalInOut(board.D22)\nrst = DigitalInOut(board.D27)\nbusy = DigitalInOut(board.D17)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_bonnet.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.ssd1675b import Adafruit_SSD1675B\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\n\nswitch1.direction = Direction.INPUT\nswitch2.direction = Direction.INPUT\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = DigitalInOut(board.D8)\ndc = DigitalInOut(board.D22)\nrst = DigitalInOut(board.D27)\nbusy = DigitalInOut(board.D17)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_bonnet.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.ssd1675b import Adafruit_SSD1675B\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\n\nswitch2.direction = Direction.INPUT\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = DigitalInOut(board.D8)\ndc = DigitalInOut(board.D22)\nrst = DigitalInOut(board.D27)\nbusy = DigitalInOut(board.D17)\n# give them all to our driver",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_bonnet.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.ssd1675b import Adafruit_SSD1675B\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = DigitalInOut(board.D8)\ndc = DigitalInOut(board.D22)\nrst = DigitalInOut(board.D27)\nbusy = DigitalInOut(board.D17)\n# give them all to our driver\n# display = Adafruit_SSD1675B(   # Oldest 2.13\" Bonnet",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_bonnet.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.ssd1675b import Adafruit_SSD1675B\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = DigitalInOut(board.D8)\ndc = DigitalInOut(board.D22)\nrst = DigitalInOut(board.D27)\nbusy = DigitalInOut(board.D17)\n# give them all to our driver\n# display = Adafruit_SSD1675B(   # Oldest 2.13\" Bonnet\n# display = Adafruit_SSD1680(    # Old 2.13\" Bonnet",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_bonnet.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_ble.services.standard.device_info import DeviceInfoService\nfrom adafruit_ble_heart_rate import HeartRateService\n\n# PyLint can't find BLERadio for some reason so special case it here.\nble = adafruit_ble.BLERadio()\nhr_connection = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_heart_rate/examples/ble_heart_rate_simpletest.py",
      "library": "ble_heart_rate",
      "type": "example",
      "file_name": "ble_heart_rate_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mma8451\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = adafruit_mma8451.MMA8451(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mma8451/examples/mma8451_displayio_simpletest.py",
      "library": "mma8451",
      "type": "example",
      "file_name": "mma8451_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mma8451\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = adafruit_mma8451.MMA8451(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mma8451/examples/mma8451_displayio_simpletest.py",
      "library": "mma8451",
      "type": "example",
      "file_name": "mma8451_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mma8451\n\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mma8451/examples/mma8451_displayio_simpletest.py",
      "library": "mma8451",
      "type": "example",
      "file_name": "mma8451_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mma8451\n\n# add the label(s) to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mma8451/examples/mma8451_displayio_simpletest.py",
      "library": "mma8451",
      "type": "example",
      "file_name": "mma8451_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\nimport adafruit_requests\ncs = DigitalInOut(board.D10)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialize ethernet interface with DHCP\nradio = WIZNET5K(spi_bus, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wiznet5k/requests_wiznet5k_simpletest.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wiznet5k_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\nimport adafruit_requests\ncs = DigitalInOut(board.D10)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialize ethernet interface with DHCP\nradio = WIZNET5K(spi_bus, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wiznet5k/requests_wiznet5k_simpletest.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wiznet5k_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\n# Initialize ethernet interface with DHCP\nradio = WIZNET5K(spi_bus, cs)\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nTEXT_URL = \"http://wifitest.adafruit.com/testwifi/index.html\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wiznet5k/requests_wiznet5k_simpletest.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wiznet5k_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\n# Initialize ethernet interface with DHCP\nradio = WIZNET5K(spi_bus, cs)\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nTEXT_URL = \"http://wifitest.adafruit.com/testwifi/index.html\"\nJSON_GET_URL = \"http://httpbin.org/get\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wiznet5k/requests_wiznet5k_simpletest.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wiznet5k_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\nradio = WIZNET5K(spi_bus, cs)\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nTEXT_URL = \"http://wifitest.adafruit.com/testwifi/index.html\"\nJSON_GET_URL = \"http://httpbin.org/get\"\nJSON_POST_URL = \"http://httpbin.org/post\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wiznet5k/requests_wiznet5k_simpletest.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wiznet5k_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport rtc\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_espatcontrol import adafruit_espatcontrol, adafruit_espatcontrol_wifimanager\n\nesp = adafruit_espatcontrol.ESP_ATcontrol(uart, 115200, reset_pin=resetpin, rts_pin=rtspin, debug=debugflag)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_localtime.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_localtime.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport rtc\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_espatcontrol import adafruit_espatcontrol, adafruit_espatcontrol_wifimanager\n\nesp = adafruit_espatcontrol.ESP_ATcontrol(\n    uart, 115200, reset_pin=resetpin, rts_pin=rtspin, debug=debugflag\nwifi = adafruit_espatcontrol_wifimanager.ESPAT_WiFiManager(esp, secrets, status_light)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_localtime.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_localtime.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1306\n\nimport adafruit_ssd1306\n# Define the Reset Pin\noled_reset = digitalio.DigitalInOut(board.D4)\n# Change these\n# to the right size for your display!\nWIDTH = 128",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_pillow_demo.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1306\n\nWIDTH = 128\nHEIGHT = 32  # Change to 64 if needed\nBORDER = 5\n# Use for I2C.\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\noled = adafruit_ssd1306.SSD1306_I2C(WIDTH, HEIGHT, i2c, addr=0x3C, reset=oled_reset)\n# Use for SPI",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_pillow_demo.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1306\n\noled = adafruit_ssd1306.SSD1306_I2C(WIDTH, HEIGHT, i2c, addr=60, reset=oled_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_pillow_demo.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_ina260 import INA260, Mode\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nina260 = INA260(i2c)\n# trigger a sample",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ina260/examples/ina260_modes.py",
      "library": "ina260",
      "type": "example",
      "file_name": "ina260_modes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\ntft_cs = board.GP17\ntft_dc = board.GP16\nspi_mosi = board.GP19\nspi_clk = board.GP18\nspi = busio.SPI(spi_clk, spi_mosi)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_320x240_simpletest_Pimoroni_Pico_Display_2_0.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_320x240_simpletest_Pimoroni_Pico_Display_2_0.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\ntft_cs = board.GP17\ntft_dc = board.GP16\nspi_mosi = board.GP19\nspi_clk = board.GP18\nspi = busio.SPI(spi_clk, spi_mosi)\nbacklight = board.GP20",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_320x240_simpletest_Pimoroni_Pico_Display_2_0.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_320x240_simpletest_Pimoroni_Pico_Display_2_0.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\ntft_cs = board.GP17\ntft_dc = board.GP16\nspi_mosi = board.GP19\nspi_clk = board.GP18\nspi = busio.SPI(spi_clk, spi_mosi)\nbacklight = board.GP20",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_320x240_simpletest_Pimoroni_Pico_Display_2_0.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_320x240_simpletest_Pimoroni_Pico_Display_2_0.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\ntft_cs = board.GP17\ntft_dc = board.GP16\nspi_mosi = board.GP19\nspi_clk = board.GP18\nspi = busio.SPI(spi_clk, spi_mosi)\nbacklight = board.GP20\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_320x240_simpletest_Pimoroni_Pico_Display_2_0.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_320x240_simpletest_Pimoroni_Pico_Display_2_0.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\ntft_cs = board.GP17\ntft_dc = board.GP16\nspi_mosi = board.GP19\nspi_clk = board.GP18\nspi = busio.SPI(spi_clk, spi_mosi)\nbacklight = board.GP20\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_320x240_simpletest_Pimoroni_Pico_Display_2_0.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_320x240_simpletest_Pimoroni_Pico_Display_2_0.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\ntft_cs = board.GP17\ntft_dc = board.GP16\nspi_mosi = board.GP19\nspi_clk = board.GP18\nspi = busio.SPI(spi_clk, spi_mosi)\nbacklight = board.GP20\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = ST7789(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_320x240_simpletest_Pimoroni_Pico_Display_2_0.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_320x240_simpletest_Pimoroni_Pico_Display_2_0.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_adg72x\n\nimport board\nimport adafruit_adg72x\ni2c = board.I2C()\nswitch = adafruit_adg72x.ADG72x(i2c)\ncount = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adg72x/examples/adg72x_simpletest.py",
      "library": "adg72x",
      "type": "example",
      "file_name": "adg72x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_adg72x\n\nimport board\nimport adafruit_adg72x\ni2c = board.I2C()\nswitch = adafruit_adg72x.ADG72x(i2c)\ncount = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adg72x/examples/adg72x_simpletest.py",
      "library": "adg72x",
      "type": "example",
      "file_name": "adg72x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2024 Liz Clark for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_adg72x\n\ni2c = board.I2C()\nswitch = adafruit_adg72x.ADG72x(i2c)\n\ncount = 0\n\nwhile True:\n    print(f\"Selecting channel {count}\")\n    switch.channel = count\n    count = (count + 1) % 8\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adg72x/examples/adg72x_simpletest.py",
      "library": "adg72x",
      "type": "example",
      "file_name": "adg72x_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import fcntl\nimport socket\nimport struct\nimport board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1306\n\ndef get_ip_address(ifname):\n    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    return socket.inet_ntoa(fcntl.ioctl(s.fileno(), 35093, struct.pack('256s', str.encode(ifname[:15])))[20:24])\n\n# Usage example:\n# This sets TEXT equal to whatever your IP address is, or isn't\ntry:\n    TEXT = get_ip_address(\"wlan0\")  # WiFi address of WiFi adapter. NOT ETHERNET\nexcept OSError:\n    try:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_pillow_ip.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_pillow_ip.py",
      "chunk_type": "function",
      "function_name": "get_ip_address"
    }
  },
  {
    "content": "import fcntl\nimport socket\nimport struct\nimport board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1306\n\n# Setting some variables for our reset pin etc.\nRESET_PIN = digitalio.DigitalInOut(board.D4)\nTEXT = \"\"\n# Very important... This lets py-gaugette 'know' what pins to use in order to reset the display\ni2c = board.I2C()  # uses board.SCL and board.SDA",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_pillow_ip.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_pillow_ip.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import fcntl\nimport socket\nimport struct\nimport board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1306\n\n# Setting some variables for our reset pin etc.\nRESET_PIN = digitalio.DigitalInOut(board.D4)\nTEXT = \"\"\n# Very important... This lets py-gaugette 'know' what pins to use in order to reset the display\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Create the SSD1306 OLED class.\n# The first two parameters are the pixel width and pixel height.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_pillow_ip.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_pillow_ip.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import fcntl\nimport socket\nimport struct\nimport board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1306\n\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Create the SSD1306 OLED class.\n# The first two parameters are the pixel width and pixel height.\n# Change these to the right size for your display!\noled = adafruit_ssd1306.SSD1306_I2C(128, 64, i2c)\n# Note you can change the I2C address, or add a reset pin:\n# oled = adafruit_ssd1306.SSD1306_I2C(128, 64, i2c, addr=0x3D, reset=RESET_PIN)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_pillow_ip.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_pillow_ip.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom adafruit_is31fl3731.charlie_wing import CharlieWing as Display\n\n# from adafruit_is31fl3731.matrix_11x7 import Matrix11x7 as Display\n# uncomment this line if you use a Pico, here with SCL=GP21 and SDA=GP20.\n# i2c = busio.I2C(board.GP21, board.GP20)\ni2c = busio.I2C(board.SCL, board.SDA)\n# fmt: off\nsweep = [ 1, 2, 3, 4, 6, 8, 10, 15, 20, 30, 40, 60,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3731/examples/is31fl3731_wave_example.py",
      "library": "is31fl3731",
      "type": "example",
      "file_name": "is31fl3731_wave_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_displayio_ssd1306\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom adafruit_lc709203f import LC709203F\nfrom digitalio import DigitalInOut\nfrom i2cdisplaybus import I2CDisplayBus\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/battery_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "battery_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_displayio_ssd1306\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom adafruit_lc709203f import LC709203F\nfrom digitalio import DigitalInOut\nfrom i2cdisplaybus import I2CDisplayBus\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/battery_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "battery_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_displayio_ssd1306\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom adafruit_lc709203f import LC709203F\nfrom digitalio import DigitalInOut\nfrom i2cdisplaybus import I2CDisplayBus\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D13)\n# esp32_ready = DigitalInOut(board.D11)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/battery_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "battery_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_displayio_ssd1306\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom adafruit_lc709203f import LC709203F\nfrom digitalio import DigitalInOut\nfrom i2cdisplaybus import I2CDisplayBus\n\n# Secondary (SCK1) SPI used to connect to WiFi board on Arduino Nano Connect RP2040\n    spi = busio.SPI(board.SCK1, board.MOSI1, board.MISO1)\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/battery_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "battery_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_displayio_ssd1306\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom adafruit_lc709203f import LC709203F\nfrom digitalio import DigitalInOut\nfrom i2cdisplaybus import I2CDisplayBus\n\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/battery_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "battery_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_displayio_ssd1306\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom adafruit_lc709203f import LC709203F\nfrom digitalio import DigitalInOut\nfrom i2cdisplaybus import I2CDisplayBus\n\n# RED_LED = PWMOut.PWMOut(esp, 26)\n# GREEN_LED = PWMOut.PWMOut(esp, 27)\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password, status_pixel=status_pixel)\n# Define callback functions which will be called when certain events happen.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/battery_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "battery_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_displayio_ssd1306\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom adafruit_lc709203f import LC709203F\nfrom digitalio import DigitalInOut\nfrom i2cdisplaybus import I2CDisplayBus\n\ndef connected(client):\n    client.subscribe('battery')\n\n# Usage example:\nesp32_reset = DigitalInOut(board.ESP_RESET)\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D13)\n# esp32_ready = DigitalInOut(board.D11)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/battery_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "battery_daughter.py",
      "chunk_type": "function",
      "function_name": "connected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_displayio_ssd1306\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom adafruit_lc709203f import LC709203F\nfrom digitalio import DigitalInOut\nfrom i2cdisplaybus import I2CDisplayBus\n\ndef subscribe(client, userdata, topic, granted_qos):\n    print(f'Subscribed to {topic} with QOS level {granted_qos}')\n\n# Usage example:\n# Define callback functions which will be called when certain events happen.\ndef connected(client):\n    client.subscribe(\"battery\")\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/battery_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "battery_daughter.py",
      "chunk_type": "function",
      "function_name": "subscribe"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_displayio_ssd1306\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom adafruit_lc709203f import LC709203F\nfrom digitalio import DigitalInOut\nfrom i2cdisplaybus import I2CDisplayBus\n\ndef message(client, feed_id, payload):\n    print(f'Feed {feed_id} received new value: {payload}')\n\n# Usage example:\nio.on_connect = connected\nio.on_subscribe = subscribe\nio.on_message = message\n\n# Connect to Adafruit IO",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/battery_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "battery_daughter.py",
      "chunk_type": "function",
      "function_name": "message"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_displayio_ssd1306\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom adafruit_lc709203f import LC709203F\nfrom digitalio import DigitalInOut\nfrom i2cdisplaybus import I2CDisplayBus\n\n# Connect to WiFi\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/battery_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "battery_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_displayio_ssd1306\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom adafruit_lc709203f import LC709203F\nfrom digitalio import DigitalInOut\nfrom i2cdisplaybus import I2CDisplayBus\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(\n    broker=\"io.adafruit.com\",",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/battery_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "battery_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_displayio_ssd1306\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom adafruit_lc709203f import LC709203F\nfrom digitalio import DigitalInOut\nfrom i2cdisplaybus import I2CDisplayBus\n\ndisplay_bus = I2CDisplayBus(board.I2C(), device_address=60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/battery_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "battery_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_displayio_ssd1306\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom adafruit_lc709203f import LC709203F\nfrom digitalio import DigitalInOut\nfrom i2cdisplaybus import I2CDisplayBus\n\nWIDTH = 128\nHEIGHT = 32\nBORDER = 2\ndisplay = adafruit_displayio_ssd1306.SSD1306(display_bus, width=WIDTH, height=HEIGHT)\nsplash = displayio.Group()\ndisplay.root_group = splash",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/battery_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "battery_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_displayio_ssd1306\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom adafruit_lc709203f import LC709203F\nfrom digitalio import DigitalInOut\nfrom i2cdisplaybus import I2CDisplayBus\n\ndigital_label = label.Label(terminalio.FONT, text=\"Battery Percent: \", color=0xFFFFFF, x=4, y=4)\nalarm_label = label.Label(terminalio.FONT, text=\"Voltage: \", color=0xFFFFFF, x=4, y=14)\nsensor = LC709203F(board.I2C())\nstart = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/battery_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "battery_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_sgp40\n\nimport adafruit_sgp40\n# If you have a temperature sensor, like the bme280, import that here as well\n# import adafruit_bme280\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsgp = adafruit_sgp40.SGP40(i2c)\n# And if you have a temp/humidity sensor, define the sensor here as well\n# bme280 = adafruit_bme280.Adafruit_BME280_I2C(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sgp40/examples/sgp40_simpletest.py",
      "library": "sgp40",
      "type": "example",
      "file_name": "sgp40_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_sgp40\n\n# If you have a temperature sensor, like the bme280, import that here as well\n# import adafruit_bme280\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsgp = adafruit_sgp40.SGP40(i2c)\n# And if you have a temp/humidity sensor, define the sensor here as well\n# bme280 = adafruit_bme280.Adafruit_BME280_I2C(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sgp40/examples/sgp40_simpletest.py",
      "library": "sgp40",
      "type": "example",
      "file_name": "sgp40_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 by Bryan Siepert for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\nimport time\n\nimport board\n\nimport adafruit_sgp40\n\n# If you have a temperature sensor, like the bme280, import that here as well\n# import adafruit_bme280\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsgp = adafruit_sgp40.SGP40(i2c)\n# And if you have a temp/humidity sensor, define the sensor here as well\n# bme280 = adafruit_bme280.Adafruit_BME280_I2C(i2c)\n\nwhile True:\n    print(\"Raw Gas: \", sgp.raw)\n    # Lets quickly grab the humidity and temperature\n    # temperature = bme280.temperature\n    # humidity = bme280.relative_humidity\n    # compensated_raw_gas = sgp.measure_raw(temperature = temperature, relative_humidity = humidity)\n    print(\"\")\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sgp40/examples/sgp40_simpletest.py",
      "library": "sgp40",
      "type": "example",
      "file_name": "sgp40_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_avrprog\n\nimport board\nimport busio\nimport adafruit_avrprog\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\navrprog = adafruit_avrprog.AVRprog()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/avrprog/examples/avrprog_program_mega2560.py",
      "library": "avrprog",
      "type": "example",
      "file_name": "avrprog_program_mega2560.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_avrprog\n\nimport busio\nimport adafruit_avrprog\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\navrprog = adafruit_avrprog.AVRprog()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/avrprog/examples/avrprog_program_mega2560.py",
      "library": "avrprog",
      "type": "example",
      "file_name": "avrprog_program_mega2560.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_avrprog\n\n# Helper to print out errors for us and then halt\ndef error(err):\n    \"\"\"Helper to print out errors for us and then halt\"\"\"\n    print('ERROR: ' + err)\n    avrprog.end()\n    while True:\n        pass\n\n# Usage example:\n\ndef error(err):\n    \"\"\"Helper to print out errors for us and then halt\"\"\"\n    print(\"ERROR: \" + err)\n    avrprog.end()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/avrprog/examples/avrprog_program_mega2560.py",
      "library": "avrprog",
      "type": "example",
      "file_name": "avrprog_program_mega2560.py",
      "chunk_type": "function",
      "function_name": "error"
    }
  },
  {
    "content": "import os\nfrom os import getenv\nimport adafruit_esp32spi.adafruit_esp32spi_wifimanager as wifimanager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_wsgi.esp32spi_wsgiserver as server\n\n    import ujson as json_module\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/wsgi/examples/wsgi_static_files_server.py",
      "library": "wsgi",
      "type": "example",
      "file_name": "wsgi_static_files_server.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nfrom os import getenv\nimport adafruit_esp32spi.adafruit_esp32spi_wifimanager as wifimanager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_wsgi.esp32spi_wsgiserver as server\n\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/wsgi/examples/wsgi_static_files_server.py",
      "library": "wsgi",
      "type": "example",
      "file_name": "wsgi_static_files_server.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nfrom os import getenv\nimport adafruit_esp32spi.adafruit_esp32spi_wifimanager as wifimanager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_wsgi.esp32spi_wsgiserver as server\n\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/wsgi/examples/wsgi_static_files_server.py",
      "library": "wsgi",
      "type": "example",
      "file_name": "wsgi_static_files_server.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nfrom os import getenv\nimport adafruit_esp32spi.adafruit_esp32spi_wifimanager as wifimanager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_wsgi.esp32spi_wsgiserver as server\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/wsgi/examples/wsgi_static_files_server.py",
      "library": "wsgi",
      "type": "example",
      "file_name": "wsgi_static_files_server.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nfrom os import getenv\nimport adafruit_esp32spi.adafruit_esp32spi_wifimanager as wifimanager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_wsgi.esp32spi_wsgiserver as server\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/wsgi/examples/wsgi_static_files_server.py",
      "library": "wsgi",
      "type": "example",
      "file_name": "wsgi_static_files_server.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nfrom os import getenv\nimport adafruit_esp32spi.adafruit_esp32spi_wifimanager as wifimanager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_wsgi.esp32spi_wsgiserver as server\n\n# Use below for Most Boards\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)  # Uncomment for Most Boards\n# Uncomment below for ItsyBitsy M4\n# import adafruit_dotstar as dotstar\n# status_pixel = dotstar.DotStar(board.APA102_SCK, board.APA102_MOSI, 1, brightness=1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/wsgi/examples/wsgi_static_files_server.py",
      "library": "wsgi",
      "type": "example",
      "file_name": "wsgi_static_files_server.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nfrom os import getenv\nimport adafruit_esp32spi.adafruit_esp32spi_wifimanager as wifimanager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_wsgi.esp32spi_wsgiserver as server\n\n# An example of a simple WSGI Application that supports\nbasic route handling and static asset file serving for common file types\nclass SimpleWSGIApplication:\n    \"\"\"\n    An example of a simple WSGI Application that supports\n    basic route handling and static asset file serving for common file types\n    \"\"\"\n    INDEX = '/index.html'\n    CHUNK_SIZE = 8912\n\n    def __init__(self, static_dir=None, debug=False):\n        self._debug = debug\n        self._listeners = {}\n        self._start_response = None\n        self._static = static_dir\n        if self._static:\n            self._static_files = ['/' + file for file in os.listdir(self._static)]\n\n    def __call__(self, environ, start_response):\n        \"\"\"\n        Called whenever the server gets a request.\n        The environ dict has details about the request per wsgi specification.\n        Call start_response with the response status string and headers as a list of tuples.\n        Return a single item list with the item being your response data string.\n        \"\"\"\n        if self._debug:\n            self._log_environ(environ)\n        self._start_response = start_response\n        status = ''\n        headers = []\n        resp_data = []\n        key = self._get_listener_key(environ['REQUEST_METHOD'].lower(), environ['PATH_INFO'])\n        if key in self._listeners:\n            status, headers, resp_data = self._listeners[key](environ)\n        if environ['REQUEST_METHOD'].lower() == 'get' and self._static:\n            path = environ['PATH_INFO']\n            if path in self._static_files:\n                status, headers, resp_data = self.serve_file(path, directory=self._static)\n            elif path == '/' and self.INDEX in self._static_files:\n                status, headers, resp_data = self.serve_file(self.INDEX, directory=self._static)\n        self._start_response(status, headers)\n        return resp_data\n\n    def on(self, method, path, request_handler):\n        \"\"\"\n        Register a Request Handler for a particular HTTP method and path.\n        request_handler will be called whenever a matching HTTP request is received.\n\n        request_handler should accept the following args:\n            (Dict environ)\n        request_handler should return a tuple in the shape of:\n            (status, header_list, data_iterable)\n\n        :param str method: the method of the HTTP request\n        :param str path: the path of the HTTP request\n        :param func request_handler: the function to call\n        \"\"\"\n        self._listeners[self._get_listener_key(method, path)] = request_handler\n\n    def serve_file(self, file_path, directory=None):\n        status = '200 OK'\n        headers = [('Content-Type', self._get_content_type(file_path))]\n        full_path = file_path if not directory else directory + file_path\n\n        def resp_iter():\n            with open(full_path, 'rb') as file:\n                while True:\n                    chunk = file.read(self.CHUNK_SIZE)\n                    if chunk:\n                        yield chunk\n                    else:\n                        break\n        return (status, headers, resp_iter())\n\n    def _log_environ(self, environ):\n        print('environ map:')\n        for name, value in environ.items():\n            print(name, value)\n\n    def _get_listener_key(self, method, path):\n        return f'{method.lower()}|{path}'\n\n    def _get_content_type(self, file):\n        ext = file.split('.')[-1]\n        if ext in {'html', 'htm'}:\n            return 'text/html'\n        if ext == 'js':\n            return 'application/javascript'\n        if ext == 'css':\n            return 'text/css'\n        if ext in {'jpg', 'jpeg'}:\n            return 'image/jpeg'\n        if ext == 'png':\n            return 'image/png'\n        return 'text/plain'\n\n# Usage example:\n\n\nclass SimpleWSGIApplication:\n    \"\"\"\n    An example of a simple WSGI Application that supports",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/wsgi/examples/wsgi_static_files_server.py",
      "library": "wsgi",
      "type": "example",
      "file_name": "wsgi_static_files_server.py",
      "chunk_type": "function",
      "function_name": "SimpleWSGIApplication"
    }
  },
  {
    "content": "import os\nfrom os import getenv\nimport adafruit_esp32spi.adafruit_esp32spi_wifimanager as wifimanager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_wsgi.esp32spi_wsgiserver as server\n\ndef led_on(environ):\n    print('led on!')\n    status_pixel.fill((0, 0, 100))\n    return web_app.serve_file('static/index.html')\n\n# Usage example:\n\nweb_app = SimpleWSGIApplication(static_dir=static)\nweb_app.on(\"GET\", \"/led_on\", led_on)\nweb_app.on(\"GET\", \"/led_off\", led_off)\nweb_app.on(\"POST\", \"/ajax/ledcolor\", led_color)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/wsgi/examples/wsgi_static_files_server.py",
      "library": "wsgi",
      "type": "example",
      "file_name": "wsgi_static_files_server.py",
      "chunk_type": "function",
      "function_name": "led_on"
    }
  },
  {
    "content": "import os\nfrom os import getenv\nimport adafruit_esp32spi.adafruit_esp32spi_wifimanager as wifimanager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_wsgi.esp32spi_wsgiserver as server\n\ndef led_off(environ):\n    print('led off!')\n    status_pixel.fill(0)\n    return web_app.serve_file('static/index.html')\n\n# Usage example:\nweb_app = SimpleWSGIApplication(static_dir=static)\nweb_app.on(\"GET\", \"/led_on\", led_on)\nweb_app.on(\"GET\", \"/led_off\", led_off)\nweb_app.on(\"POST\", \"/ajax/ledcolor\", led_color)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/wsgi/examples/wsgi_static_files_server.py",
      "library": "wsgi",
      "type": "example",
      "file_name": "wsgi_static_files_server.py",
      "chunk_type": "function",
      "function_name": "led_off"
    }
  },
  {
    "content": "import os\nfrom os import getenv\nimport adafruit_esp32spi.adafruit_esp32spi_wifimanager as wifimanager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_wsgi.esp32spi_wsgiserver as server\n\ndef led_color(environ):\n    json = json_module.loads(environ['wsgi.input'].getvalue())\n    print(json)\n    rgb_tuple = (json.get('r'), json.get('g'), json.get('b'))\n    status_pixel.fill(rgb_tuple)\n    return ('200 OK', [], [])\n\n# Usage example:\nweb_app.on(\"GET\", \"/led_on\", led_on)\nweb_app.on(\"GET\", \"/led_off\", led_off)\nweb_app.on(\"POST\", \"/ajax/ledcolor\", led_color)\n\n# Here we setup our server, passing in our web_app as the application",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/wsgi/examples/wsgi_static_files_server.py",
      "library": "wsgi",
      "type": "example",
      "file_name": "wsgi_static_files_server.py",
      "chunk_type": "function",
      "function_name": "led_color"
    }
  },
  {
    "content": "import gc\nimport time\nimport adafruit_imageload\nimport board\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_digit import FlipDigit\n\nMEDIUM_LEVEL = 0.9\n# == END configuration variables ==\n# access built-in display\ndisplay = board.DISPLAY\n# group to hold our flip digit\nmain_group = Group()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipdigit_smaller_pyportal.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipdigit_smaller_pyportal.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import gc\nimport time\nimport adafruit_imageload\nimport board\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_digit import FlipDigit\n\nstatic_spritesheet, static_palette = adafruit_imageload.load('static_sheet_small.bmp')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipdigit_smaller_pyportal.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipdigit_smaller_pyportal.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import gc\nimport time\nimport adafruit_imageload\nimport board\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_digit import FlipDigit\n\ntop_animation_spritesheet, top_animation_palette = adafruit_imageload.load('top_animation_sheet_small_5frames.bmp')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipdigit_smaller_pyportal.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipdigit_smaller_pyportal.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import gc\nimport time\nimport adafruit_imageload\nimport board\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_digit import FlipDigit\n\nbottom_animation_spritesheet, bottom_animation_palette = adafruit_imageload.load('bottom_animation_sheet_small_5frames.bmp')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipdigit_smaller_pyportal.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipdigit_smaller_pyportal.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_ble.services.standard.device_info import DeviceInfoService\nfrom adafruit_ble_cycling_speed_and_cadence import CyclingSpeedAndCadenceService\n\n# Initialize the BLE radio\nble = adafruit_ble.BLERadio()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_cycling_speed_and_cadence/examples/ble_cycling_speed_and_cadence_simpletest.py",
      "library": "ble_cycling_speed_and_cadence",
      "type": "example",
      "file_name": "ble_cycling_speed_and_cadence_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_pcf8574\n\nimport adafruit_pcf8574\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8574.PCF8574(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8574/examples/pcf8574_read8inputs.py",
      "library": "pcf8574",
      "type": "example",
      "file_name": "pcf8574_read8inputs.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_pcf8574\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8574.PCF8574(i2c)\n# turn on all 8 weak pullups",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8574/examples/pcf8574_read8inputs.py",
      "library": "pcf8574",
      "type": "example",
      "file_name": "pcf8574_read8inputs.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2017 Scott Shawcroft, written for Adafruit Industries\n# SPDX-FileCopyrightText: Copyright (c) 2022 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\n\nimport adafruit_pcf8574\n\nprint(\"PCF8574 8 input button test\")\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8574.PCF8574(i2c)\n\n\n# turn on all 8 weak pullups\npcf.write_gpio(0xFF)\n\nwhile True:\n    vals = pcf.read_gpio()\n    for b in range(8):\n        if not vals & (1 << b):\n            print(\"button #%d pressed\" % b)\n    time.sleep(0.01)  # debounce delay\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8574/examples/pcf8574_read8inputs.py",
      "library": "pcf8574",
      "type": "example",
      "file_name": "pcf8574_read8inputs.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_si1145\n\nimport adafruit_si1145\n# setup I2C bus using board default\n# change as needed for specific boards\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# setup sensor\nsi1145 = adafruit_si1145.SI1145(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si1145/examples/si1145_test_gains.py",
      "library": "si1145",
      "type": "example",
      "file_name": "si1145_test_gains.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_si1145\n\n# change as needed for specific boards\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# setup sensor\nsi1145 = adafruit_si1145.SI1145(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si1145/examples/si1145_test_gains.py",
      "library": "si1145",
      "type": "example",
      "file_name": "si1145_test_gains.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_si1145\n\ngain_list = (adafruit_si1145.GAIN_ADC_CLOCK_DIV_1, adafruit_si1145.GAIN_ADC_CLOCK_DIV_2, adafruit_si1145.GAIN_ADC_CLOCK_DIV_4, adafruit_si1145.GAIN_ADC_CLOCK_DIV_8, adafruit_si1145.GAIN_ADC_CLOCK_DIV_16, adafruit_si1145.GAIN_ADC_CLOCK_DIV_32, adafruit_si1145.GAIN_ADC_CLOCK_DIV_64, adafruit_si1145.GAIN_ADC_CLOCK_DIV_128)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si1145/examples/si1145_test_gains.py",
      "library": "si1145",
      "type": "example",
      "file_name": "si1145_test_gains.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tfmini\n\nimport busio  # comment this out if using pyserial\nimport adafruit_tfmini\n# Use hardware uart\nuart = busio.UART(board.TX, board.RX)\n# Or, you can use pyserial on any computer\n# import serial\n# uart = serial.Serial(\"/dev/ttyS2\", timeout=1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tfmini/examples/tfmini_simpletest.py",
      "library": "tfmini",
      "type": "example",
      "file_name": "tfmini_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tfmini\n\n# Or, you can use pyserial on any computer\n# import serial\n# uart = serial.Serial(\"/dev/ttyS2\", timeout=1)\n# Simplest use, connect with the uart bus object\ntfmini = adafruit_tfmini.TFmini(uart)\n# You can put in 'short' or 'long' distance mode\ntfmini.mode = adafruit_tfmini.MODE_SHORT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tfmini/examples/tfmini_simpletest.py",
      "library": "tfmini",
      "type": "example",
      "file_name": "tfmini_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tfmini\n\n# Simplest use, connect with the uart bus object\ntfmini = adafruit_tfmini.TFmini(uart)\n# You can put in 'short' or 'long' distance mode\ntfmini.mode = adafruit_tfmini.MODE_SHORT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tfmini/examples/tfmini_simpletest.py",
      "library": "tfmini",
      "type": "example",
      "file_name": "tfmini_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board  # comment this out if using pyserial\nimport busio  # comment this out if using pyserial\n\nimport adafruit_tfmini\n\n# Use hardware uart\nuart = busio.UART(board.TX, board.RX)\n\n# Or, you can use pyserial on any computer\n# import serial\n# uart = serial.Serial(\"/dev/ttyS2\", timeout=1)\n\n# Simplest use, connect with the uart bus object\ntfmini = adafruit_tfmini.TFmini(uart)\n\n# You can put in 'short' or 'long' distance mode\ntfmini.mode = adafruit_tfmini.MODE_SHORT\nprint(\"Now in mode\", tfmini.mode)\n\nwhile True:\n    print(\n        \"Distance: %d cm (strength %d, mode %x)\" % (tfmini.distance, tfmini.strength, tfmini.mode)\n    )\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tfmini/examples/tfmini_simpletest.py",
      "library": "tfmini",
      "type": "example",
      "file_name": "tfmini_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport synthio\nimport adafruit_fruitjam\n\npobj = adafruit_fruitjam.peripherals.Peripherals(audio_output='headphone')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/fruitjam/examples/fruitjam_synthio_speaker.py",
      "library": "fruitjam",
      "type": "example",
      "file_name": "fruitjam_synthio_speaker.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2025 Tim Cocks for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\nimport time\n\nimport synthio\n\nimport adafruit_fruitjam\n\npobj = adafruit_fruitjam.peripherals.Peripherals(audio_output=\"headphone\")\n\nsynth = synthio.Synthesizer(sample_rate=44100)\npobj.audio.play(synth)\nVOLUMES = [5, 7, 10, 11, 12]\nC_major_scale = [60, 62, 64, 65, 67, 69, 71, 72, 71, 69, 67, 65, 64, 62, 60]\nwhile True:\n    print(\"\\n=== Synthio Test ===\")\n    for vol in VOLUMES:\n        pobj.volume = vol\n        print(f\"Volume: {vol}\")\n        for note in C_major_scale:\n            synth.press(note)\n            time.sleep(0.1)\n            synth.release(note)\n            time.sleep(0.05)\n\n    time.sleep(1.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/fruitjam/examples/fruitjam_synthio_speaker.py",
      "library": "fruitjam",
      "type": "example",
      "file_name": "fruitjam_synthio_speaker.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport terminalio\nfrom adafruit_display_text import label\n\ntext_area.x = 10\ntext_area.y = 10\nboard.DISPLAY.root_group = text_area",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-text/examples/display_text_background_color.py",
      "library": "display-text",
      "type": "example",
      "file_name": "display_text_background_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nThis example shows the use color and background_color\n\"\"\"\n\nimport time\n\nimport board\nimport terminalio\n\nfrom adafruit_display_text import label\n\ntext = \" Color Background Hello world\"\ntext_area = label.Label(terminalio.FONT, text=text, color=0x0000FF, background_color=0xFFAA00)\ntext_area.x = 10\ntext_area.y = 10\n\nprint(f\"background color is {text_area.background_color:06x}\")\n\nboard.DISPLAY.root_group = text_area\n\ntime.sleep(2)\ntext_area.background_color = 0xFF0000\nprint(f\"background color is {text_area.background_color:06x}\")\ntime.sleep(2)\ntext_area.background_color = None\nprint(f\"background color is {text_area.background_color}\")\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-text/examples/display_text_background_color.py",
      "library": "display-text",
      "type": "example",
      "file_name": "display_text_background_color.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nfrom adafruit_is31fl3731.charlie_wing import CharlieWing as Display\n\n# from adafruit_is31fl3731.matrix_11x7 import Matrix11x7 as Display\n# uncomment this line if you use a Pico, here with SCL=GP21 and SDA=GP20.\n# i2c = busio.I2C(board.GP21, board.GP20)\ni2c = busio.I2C(board.SCL, board.SDA)\ndisplay = Display(i2c)\n# draw a box on the display",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3731/examples/is31fl3731_simpletest.py",
      "library": "is31fl3731",
      "type": "example",
      "file_name": "is31fl3731_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_hts221\n\nimport board\nimport adafruit_hts221\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nhts = adafruit_hts221.HTS221(i2c)\ndata_rate = adafruit_hts221.Rate.label[hts.data_rate]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hts221/examples/hts221_simpletest.py",
      "library": "hts221",
      "type": "example",
      "file_name": "hts221_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_hts221\n\nimport adafruit_hts221\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nhts = adafruit_hts221.HTS221(i2c)\ndata_rate = adafruit_hts221.Rate.label[hts.data_rate]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hts221/examples/hts221_simpletest.py",
      "library": "hts221",
      "type": "example",
      "file_name": "hts221_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_hts221\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nhts = adafruit_hts221.HTS221(i2c)\ndata_rate = adafruit_hts221.Rate.label[hts.data_rate]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hts221/examples/hts221_simpletest.py",
      "library": "hts221",
      "type": "example",
      "file_name": "hts221_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_hts221\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nhts = adafruit_hts221.HTS221(i2c)\n\ndata_rate = adafruit_hts221.Rate.label[hts.data_rate]\nprint(f\"Using data rate of: {data_rate:.1f} Hz\")\nprint(\"\")\n\nwhile True:\n    print(f\"Relative Humidity: {hts.relative_humidity:.2f} % rH\")\n    print(f\"Temperature: {hts.temperature:.2f} C\")\n    print(\"\")\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hts221/examples/hts221_simpletest.py",
      "library": "hts221",
      "type": "example",
      "file_name": "hts221_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nfrom time import sleep\nimport board\nfrom adafruit_opt4048 import OPT4048, ConversionTime, Mode, Range\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = OPT4048(i2c)\nsensor.range = Range.AUTO",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/opt4048/examples/opt4048_simpletest.py",
      "library": "opt4048",
      "type": "example",
      "file_name": "opt4048_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2025 Tim C for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\"\"\"\nA basic demo for using the OPT4048 tristimulus XYZ color sensor\n\nThis example reads the sensor values from all four channels (X, Y, Z, W),\ndemonstrates setting and getting threshold values, and displays the results.\n\"\"\"\n\nimport time\nfrom time import sleep\n\nimport board\n\nfrom adafruit_opt4048 import OPT4048, ConversionTime, Mode, Range\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = OPT4048(i2c)\n\nsensor.range = Range.AUTO\nsensor.conversion_time = ConversionTime.TIME_100MS\nsensor.mode = Mode.CONTINUOUS\nwhile True:\n    try:\n        x, y, lux = sensor.cie\n        print(f\"CIE x:{x}, y:{y}, lux: {lux}\", end=\" \")\n        print(f\"K: {sensor.calculate_color_temperature(x,y)}\")\n        time.sleep(1)\n    except RuntimeError:\n        # CRC check failed while reading data\n        pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/opt4048/examples/opt4048_simpletest.py",
      "library": "opt4048",
      "type": "example",
      "file_name": "opt4048_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.sparkle import Sparkle\nfrom adafruit_led_animation.color import AQUA, JADE, PINK\nfrom adafruit_led_animation.sequence import AnimationSequence\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.A1\n# Update to match the number of NeoPixels you have connected\npixel_num = 64\n# fmt: off\nheart_mask = [     1,  2,          5,  6,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_sparkle_mask.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_sparkle_mask.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.sparkle import Sparkle\nfrom adafruit_led_animation.color import AQUA, JADE, PINK\nfrom adafruit_led_animation.sequence import AnimationSequence\n\n# fmt: on\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.9, auto_write=False)\nanimations = AnimationSequence(\n    Sparkle(pixels, speed=0.05, color=JADE, num_sparkles=1, mask=unheart_mask),\n    Sparkle(pixels, speed=0.05, color=AQUA, num_sparkles=1),",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_sparkle_mask.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_sparkle_mask.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\nbroker = getenv(\"broker\", \"io.adafruit.com\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_simpletest_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\nbroker = getenv(\"broker\", \"io.adafruit.com\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_simpletest_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\nbroker = getenv(\"broker\", \"io.adafruit.com\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_simpletest_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_simpletest_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_simpletest_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef connect(mqtt_client, userdata, flags, rc):\n    print('Connected to MQTT Broker!')\n    print(f'Flags: {flags}\\n RC: {rc}')\n\n# Usage example:\nfrom os import getenv\n\nimport adafruit_connection_manager\nimport board\nimport busio",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_simpletest_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_esp32spi.py",
      "chunk_type": "function",
      "function_name": "connect"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef disconnect(mqtt_client, userdata, rc):\n    print('Disconnected from MQTT Broker!')\n\n# Usage example:\n\ndef disconnect(mqtt_client, userdata, rc):\n    # This method is called when the mqtt_client disconnects\n    # from the broker.\n    print(\"Disconnected from MQTT Broker!\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_simpletest_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_esp32spi.py",
      "chunk_type": "function",
      "function_name": "disconnect"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef subscribe(mqtt_client, userdata, topic, granted_qos):\n    print(f'Subscribed to {topic} with QOS level {granted_qos}')\n\n# Usage example:\n\ndef subscribe(mqtt_client, userdata, topic, granted_qos):\n    # This method is called when the mqtt_client subscribes to a new feed.\n    print(f\"Subscribed to {topic} with QOS level {granted_qos}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_simpletest_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_esp32spi.py",
      "chunk_type": "function",
      "function_name": "subscribe"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef unsubscribe(mqtt_client, userdata, topic, pid):\n    print(f'Unsubscribed from {topic} with PID {pid}')\n\n# Usage example:\n\ndef unsubscribe(mqtt_client, userdata, topic, pid):\n    # This method is called when the mqtt_client unsubscribes from a feed.\n    print(f\"Unsubscribed from {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_simpletest_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_esp32spi.py",
      "chunk_type": "function",
      "function_name": "unsubscribe"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef publish(mqtt_client, userdata, topic, pid):\n    print(f'Published to {topic} with PID {pid}')\n\n# Usage example:\n\ndef publish(mqtt_client, userdata, topic, pid):\n    # This method is called when the mqtt_client publishes data to a feed.\n    print(f\"Published to {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_simpletest_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_esp32spi.py",
      "chunk_type": "function",
      "function_name": "publish"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef message(client, topic, message):\n    print(f'New message on topic {topic}: {message}')\n\n# Usage example:\n\ndef message(client, topic, message):\n    print(f\"New message on topic {topic}: {message}\")\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_simpletest_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_esp32spi.py",
      "chunk_type": "function",
      "function_name": "message"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Set up a MiniMQTT Client\nmqtt_client = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_simpletest_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Set up a MiniMQTT Client\nmqtt_client = MQTT.MQTT(\n    broker=broker,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_simpletest_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mlx90632\n\nimport board\nimport adafruit_mlx90632\n# Create I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# Create MLX90632 instance\nmlx = adafruit_mlx90632.MLX90632(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90632/examples/mlx90632_simpletest.py",
      "library": "mlx90632",
      "type": "example",
      "file_name": "mlx90632_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mlx90632\n\n# Create I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# Create MLX90632 instance\nmlx = adafruit_mlx90632.MLX90632(i2c)\n# Print sensor information",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90632/examples/mlx90632_simpletest.py",
      "library": "mlx90632",
      "type": "example",
      "file_name": "mlx90632_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mlx90632\n\n# Set measurement mode to continuous\nmlx.mode = adafruit_mlx90632.MODE_CONTINUOUS\n# Set refresh rate to 2Hz\nmlx.refresh_rate = adafruit_mlx90632.REFRESH_2HZ",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90632/examples/mlx90632_simpletest.py",
      "library": "mlx90632",
      "type": "example",
      "file_name": "mlx90632_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mlx90632\n\n# Set measurement mode to continuous\nmlx.mode = adafruit_mlx90632.MODE_CONTINUOUS\n# Set refresh rate to 2Hz\nmlx.refresh_rate = adafruit_mlx90632.REFRESH_2HZ",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90632/examples/mlx90632_simpletest.py",
      "library": "mlx90632",
      "type": "example",
      "file_name": "mlx90632_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_seesaw.seesaw import Seesaw\n\nimport board\ni2c_bus = board.I2C()  # uses board.SCL and board.SDA\n# i2c_bus = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nss = Seesaw(i2c_bus)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_simpletest.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# Simple seesaw test using an LED attached to Pin 15.\n#\n# See the seesaw Learn Guide for wiring details:\n# https://learn.adafruit.com/adafruit-seesaw-atsamd09-breakout?view=all#circuitpython-wiring-and-test\nimport time\n\nimport board\n\nfrom adafruit_seesaw.seesaw import Seesaw\n\ni2c_bus = board.I2C()  # uses board.SCL and board.SDA\n# i2c_bus = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\nss = Seesaw(i2c_bus)\n\nss.pin_mode(15, ss.OUTPUT)\n\nwhile True:\n    ss.digital_write(15, True)  # turn the LED on (True is the voltage level)\n    time.sleep(1)  # wait for a second\n    ss.digital_write(15, False)  # turn the LED off by making the voltage LOW\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_simpletest.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2019 Dave Astels for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Example of taking a screenshot.\"\"\"\n\n# pylint:disable=invalid-name\nimport adafruit_sdcard\nimport board\nimport busio\nimport digitalio\nimport storage\n\nfrom adafruit_bitmapsaver import save_pixels\n\nTAKE_SCREENSHOT = False  # Set to True to take a screenshot\n\nif TAKE_SCREENSHOT:\n    # Initialize SD Card & Mount Virtual File System\n    spi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n    cs = digitalio.DigitalInOut(board.SD_CS)\n    sdcard = adafruit_sdcard.SDCard(spi, cs)\n    vfs = storage.VfsFat(sdcard)\n    storage.mount(vfs, \"/sd\")  # /sd is root dir of SD Card\n\n    print(\"Taking Screenshot... \")\n    save_pixels(\"/sd/screenshot.bmp\")\n    print(\"Screenshot Saved\")\n    storage.umount(vfs)\n    print(\"SD Card Unmounted\")  # Do not remove SD card until unmounted\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/bitmapsaver/examples/bitmapsaver_screenshot_simpletest.py",
      "library": "bitmapsaver",
      "type": "example",
      "file_name": "bitmapsaver_screenshot_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nfrom adafruit_pcf8523.pcf8523 import PCF8523\n\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nrtc = PCF8523(i2c)\n# Lookup table for names of days (nicer printing).\ndays = (",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8523/examples/pcf8523_displayio_simpletest.py",
      "library": "pcf8523",
      "type": "example",
      "file_name": "pcf8523_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nfrom adafruit_pcf8523.pcf8523 import PCF8523\n\ndate_output_label = Label(FONT, text=\"\", scale=2)\ntime_output_label = Label(FONT, text=\"\", scale=2)\n# place the label in the middle of the screen with anchored positioning\ndate_output_label.anchor_point = (0, 0)\ndate_output_label.anchored_position = (4, board.DISPLAY.height // 2)\ntime_output_label.anchor_point = (0, 0)\ntime_output_label.anchored_position = (4, 20 + board.DISPLAY.height // 2)\n# add the label to the main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8523/examples/pcf8523_displayio_simpletest.py",
      "library": "pcf8523",
      "type": "example",
      "file_name": "pcf8523_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nfrom adafruit_pcf8523.pcf8523 import PCF8523\n\n# place the label in the middle of the screen with anchored positioning\ndate_output_label.anchor_point = (0, 0)\ndate_output_label.anchored_position = (4, board.DISPLAY.height // 2)\ntime_output_label.anchor_point = (0, 0)\ntime_output_label.anchored_position = (4, 20 + board.DISPLAY.height // 2)\n# add the label to the main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8523/examples/pcf8523_displayio_simpletest.py",
      "library": "pcf8523",
      "type": "example",
      "file_name": "pcf8523_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nfrom adafruit_pcf8523.pcf8523 import PCF8523\n\n# add the label to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8523/examples/pcf8523_displayio_simpletest.py",
      "library": "pcf8523",
      "type": "example",
      "file_name": "pcf8523_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Set debug to True for full JSON response.\n# WARNING: makes credentials visible\nDEBUG = False\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# -- Base64 Conversion --",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_openskynetwork_private.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_openskynetwork_private.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# WARNING: makes credentials visible\nDEBUG = False\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# -- Base64 Conversion --\nOSN_CREDENTIALS = str(osnusername) + \":\" + str(osnpassword)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_openskynetwork_private.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_openskynetwork_private.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nDEBUG = False\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# -- Base64 Conversion --\nOSN_CREDENTIALS = str(osnusername) + \":\" + str(osnpassword)\n# base64 encode and strip appended \\n from bytearray",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_openskynetwork_private.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_openskynetwork_private.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Converts seconds to minutes/hours/days\ndef time_calc(input_time):\n    \"\"\"Converts seconds to minutes/hours/days\"\"\"\n    if input_time < 60:\n        return f'{input_time:.0f} seconds'\n    if input_time < 3600:\n        return f'{input_time / 60:.0f} minutes'\n    if input_time < 86400:\n        return f'{input_time / 60 / 60:.0f} hours'\n    return f'{input_time / 60 / 60 / 24:.1f} days'\n\n# Usage example:\n\n        print(\"\\nFinished!\")\n        print(f\"Board Uptime: {time_calc(time.monotonic())}\")\n        print(f\"Next Update: {time_calc(SLEEP_TIME)}\")\n        print(\"===============================\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_openskynetwork_private.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_openskynetwork_private.py",
      "chunk_type": "function",
      "function_name": "time_calc"
    }
  },
  {
    "content": "import binascii\nimport os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\ndef _format_datetime(datetime):\n    return f'{datetime.tm_mon:02}/{datetime.tm_mday:02}/{datetime.tm_year} {datetime.tm_hour:02}:{datetime.tm_min:02}:{datetime.tm_sec:02}'\n\n# Usage example:\n            # print(f\" |  | Last Contact Unix Time: {last_contact}\")\n            lc_struct_time = time.localtime(last_contact)\n            lc_readable_time = f\"{_format_datetime(lc_struct_time)}\"\n            print(f\" |  | Last Contact: {lc_readable_time}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_openskynetwork_private.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_openskynetwork_private.py",
      "chunk_type": "function",
      "function_name": "_format_datetime"
    }
  },
  {
    "content": "import board\nimport rainbowio\nimport supervisor\nfrom adafruit_led_animation.animation.rainbow import Rainbow\nfrom adafruit_led_animation.animation.rainbowchase import RainbowChase\nfrom adafruit_led_animation.animation.rainbowcomet import RainbowComet\nfrom adafruit_led_animation.animation.rainbowsparkle import RainbowSparkle\nfrom adafruit_led_animation.sequence import AnimationSequence\nfrom adafruit_tm1814 import TM1814PixelBackground\n\n# The pin where the LED strip data line is connected\nTM1814 = board.A0\n# The number of TM1814 controllers. Note that sometimes one \"pixel\" controls\n# more than one LED package.\n#\n# One common configuration is 3 LED packages & 1 controller per 50mm, giving",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tm1814/examples/tm1814_led_animation.py",
      "library": "tm1814",
      "type": "example",
      "file_name": "tm1814_led_animation.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_pcf8575\n\nimport adafruit_pcf8575\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8575.PCF8575(i2c)\n# get a 'digitalio' like pin from the pcf",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8575/examples/pcf8575_buttonled.py",
      "library": "pcf8575",
      "type": "example",
      "file_name": "pcf8575_buttonled.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_pcf8575\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8575.PCF8575(i2c)\n# get a 'digitalio' like pin from the pcf\nled = pcf.get_pin(8)\nbutton = pcf.get_pin(0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8575/examples/pcf8575_buttonled.py",
      "library": "pcf8575",
      "type": "example",
      "file_name": "pcf8575_buttonled.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2022 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\nimport digitalio\n\nimport adafruit_pcf8575\n\nprint(\"PCF8575 digitalio LED + button test\")\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8575.PCF8575(i2c)\n\n# get a 'digitalio' like pin from the pcf\nled = pcf.get_pin(8)\nbutton = pcf.get_pin(0)\n\n# Setup pin7 as an output that's at a high logic level default\nled.switch_to_output(value=True)\n# Setup pin0 as an output that's got a pullup\nbutton.switch_to_input(pull=digitalio.Pull.UP)\n\n\nwhile True:\n    led.value = button.value\n    time.sleep(0.01)  # debounce\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8575/examples/pcf8575_buttonled.py",
      "library": "pcf8575",
      "type": "example",
      "file_name": "pcf8575_buttonled.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_mcp230xx.mcp23s08 import MCP23S08\n\n# from adafruit_mcp230xx.mcp23s17 import MCP23S17\n# Initialize the SPI bus with a chip select pin:\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\ncs = digitalio.DigitalInOut(board.A1)\n# Create an instance of either the MCP23S08 or MCP23S17 class depending on\n# which chip you're using:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp230xx/examples/mcp23Sxx_simpletest.py",
      "library": "mcp230xx",
      "type": "example",
      "file_name": "mcp23Sxx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_mcp230xx.mcp23s08 import MCP23S08\n\n# from adafruit_mcp230xx.mcp23s17 import MCP23S17\n# Initialize the SPI bus with a chip select pin:\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\ncs = digitalio.DigitalInOut(board.A1)\n# Create an instance of either the MCP23S08 or MCP23S17 class depending on\n# which chip you're using:\nmcp = MCP23S08(spi, cs)  # MCP23S08",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp230xx/examples/mcp23Sxx_simpletest.py",
      "library": "mcp230xx",
      "type": "example",
      "file_name": "mcp23Sxx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_mcp230xx.mcp23s08 import MCP23S08\n\n# Setup pin0 as an output that's at a high logic level.\npin0.switch_to_output(value=True)\n# Setup pin1 as an input with a pull-up resistor enabled.  Notice you can also\n# use properties to change this state.\npin1.direction = digitalio.Direction.INPUT\npin1.pull = digitalio.Pull.UP\n# Now loop blinking the pin 0 output and reading the state of pin 1 input.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp230xx/examples/mcp23Sxx_simpletest.py",
      "library": "mcp230xx",
      "type": "example",
      "file_name": "mcp23Sxx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_mcp230xx.mcp23s08 import MCP23S08\n\npin0.switch_to_output(value=True)\n# Setup pin1 as an input with a pull-up resistor enabled.  Notice you can also\n# use properties to change this state.\npin1.direction = digitalio.Direction.INPUT\npin1.pull = digitalio.Pull.UP\n# Now loop blinking the pin 0 output and reading the state of pin 1 input.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp230xx/examples/mcp23Sxx_simpletest.py",
      "library": "mcp230xx",
      "type": "example",
      "file_name": "mcp23Sxx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport dotclockframebuffer\nfrom framebufferio import FramebufferDisplay\nimport adafruit_focaltouch\n\nimport adafruit_focaltouch\n# Initialize the Display\ntft_pins = dict(board.TFT_PINS)\ntft_timings = {",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/focaltouch/examples/focaltouch_paint_rgb666.py",
      "library": "focaltouch",
      "type": "example",
      "file_name": "focaltouch_paint_rgb666.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport dotclockframebuffer\nfrom framebufferio import FramebufferDisplay\nimport adafruit_focaltouch\n\ni2c = busio.I2C(board.SCL, board.SDA, frequency=100000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/focaltouch/examples/focaltouch_paint_rgb666.py",
      "library": "focaltouch",
      "type": "example",
      "file_name": "focaltouch_paint_rgb666.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport dotclockframebuffer\nfrom framebufferio import FramebufferDisplay\nimport adafruit_focaltouch\n\ninit_sequence_tl040hds20 = b\"\"\ni2c = busio.I2C(board.SCL, board.SDA, frequency=100_000)\ntft_io_expander = dict(board.TFT_IO_EXPANDER)\n# tft_io_expander['i2c_address'] = 0x38 # uncomment for rev B",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/focaltouch/examples/focaltouch_paint_rgb666.py",
      "library": "focaltouch",
      "type": "example",
      "file_name": "focaltouch_paint_rgb666.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport dotclockframebuffer\nfrom framebufferio import FramebufferDisplay\nimport adafruit_focaltouch\n\nft = adafruit_focaltouch.Adafruit_FocalTouch(i2c, address=72)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/focaltouch/examples/focaltouch_paint_rgb666.py",
      "library": "focaltouch",
      "type": "example",
      "file_name": "focaltouch_paint_rgb666.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom math import atan2, degrees\nimport board\nimport adafruit_lsm303_accel\n\nimport board\nimport adafruit_lsm303_accel\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lsm303_accel.LSM303_Accel(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303-accel/examples/lsm303_accel_inclinometer.py",
      "library": "lsm303-accel",
      "type": "example",
      "file_name": "lsm303_accel_inclinometer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom math import atan2, degrees\nimport board\nimport adafruit_lsm303_accel\n\nimport adafruit_lsm303_accel\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lsm303_accel.LSM303_Accel(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303-accel/examples/lsm303_accel_inclinometer.py",
      "library": "lsm303-accel",
      "type": "example",
      "file_name": "lsm303_accel_inclinometer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom math import atan2, degrees\nimport board\nimport adafruit_lsm303_accel\n\ndef vector_2_degrees(x, y):\n    angle = degrees(atan2(y, x))\n    if angle < 0:\n        angle += 360\n    return angle\n\n# Usage example:\ndef get_inclination(_sensor):\n    x, y, z = _sensor.acceleration\n    return vector_2_degrees(x, z), vector_2_degrees(y, z)\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303-accel/examples/lsm303_accel_inclinometer.py",
      "library": "lsm303-accel",
      "type": "example",
      "file_name": "lsm303_accel_inclinometer.py",
      "chunk_type": "function",
      "function_name": "vector_2_degrees"
    }
  },
  {
    "content": "import time\nfrom math import atan2, degrees\nimport board\nimport adafruit_lsm303_accel\n\ndef get_inclination(_sensor):\n    x, y, z = _sensor.acceleration\n    return (vector_2_degrees(x, z), vector_2_degrees(y, z))\n\n# Usage example:\n\nwhile True:\n    angle_xz, angle_yz = get_inclination(sensor)\n    print(f\"XZ angle = {angle_xz:6.2f}deg   YZ angle = {angle_yz:6.2f}deg\")\n    time.sleep(0.2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303-accel/examples/lsm303_accel_inclinometer.py",
      "library": "lsm303-accel",
      "type": "example",
      "file_name": "lsm303_accel_inclinometer.py",
      "chunk_type": "function",
      "function_name": "get_inclination"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Display inclination data five times per second\"\"\"\n\nimport time\nfrom math import atan2, degrees\n\nimport board\n\nimport adafruit_lsm303_accel\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lsm303_accel.LSM303_Accel(i2c)\n\n\ndef vector_2_degrees(x, y):\n    angle = degrees(atan2(y, x))\n    if angle < 0:\n        angle += 360\n    return angle\n\n\ndef get_inclination(_sensor):\n    x, y, z = _sensor.acceleration\n    return vector_2_degrees(x, z), vector_2_degrees(y, z)\n\n\nwhile True:\n    angle_xz, angle_yz = get_inclination(sensor)\n    print(f\"XZ angle = {angle_xz:6.2f}deg   YZ angle = {angle_yz:6.2f}deg\")\n    time.sleep(0.2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303-accel/examples/lsm303_accel_inclinometer.py",
      "library": "lsm303-accel",
      "type": "example",
      "file_name": "lsm303_accel_inclinometer.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\nTEXT_COLOR = 0xFFFF00\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x135_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x135_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = ST7789(display_bus, rotation=270, width=240, height=135, rowstart=40, colstart=53)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x135_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x135_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = ST7789(display_bus, rotation=270, width=240, height=135, rowstart=40, colstart=53)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x135_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x135_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_si7021\nimport board\nimport busio\nfrom adafruit_itertools import count\nfrom adafruit_itertools.adafruit_itertools_extras import repeatfunc\n\nimport busio\ni2c = busio.I2C(board.SCL, board.SDA)\nsensor = adafruit_si7021.SI7021(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/itertools/examples/itertools_simpletest.py",
      "library": "itertools",
      "type": "example",
      "file_name": "itertools_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_si7021\nimport board\nimport busio\nfrom adafruit_itertools import count\nfrom adafruit_itertools.adafruit_itertools_extras import repeatfunc\n\ni2c = busio.I2C(board.SCL, board.SDA)\nsensor = adafruit_si7021.SI7021(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/itertools/examples/itertools_simpletest.py",
      "library": "itertools",
      "type": "example",
      "file_name": "itertools_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_si7021\nimport board\nimport busio\nfrom adafruit_itertools import count\nfrom adafruit_itertools.adafruit_itertools_extras import repeatfunc\n\ndef read_temperature():\n    return sensor.temperature\n\n# Usage example:\n\n\ndatapoints = zip(count(1), repeatfunc(now), map(int, repeatfunc(read_temperature)))\n\nwhile True:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/itertools/examples/itertools_simpletest.py",
      "library": "itertools",
      "type": "example",
      "file_name": "itertools_simpletest.py",
      "chunk_type": "function",
      "function_name": "read_temperature"
    }
  },
  {
    "content": "import time\nimport adafruit_si7021\nimport board\nimport busio\nfrom adafruit_itertools import count\nfrom adafruit_itertools.adafruit_itertools_extras import repeatfunc\n\ndef now():\n    return time.monotonic()\n\n# Usage example:\n\n\ndatapoints = zip(count(1), repeatfunc(now), map(int, repeatfunc(read_temperature)))\n\nwhile True:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/itertools/examples/itertools_simpletest.py",
      "library": "itertools",
      "type": "example",
      "file_name": "itertools_simpletest.py",
      "chunk_type": "function",
      "function_name": "now"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_si1145\n\nimport adafruit_si1145\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsi1145 = adafruit_si1145.SI1145(i2c)\n# Create a Label to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si1145/examples/si1145_displayio_simpletest.py",
      "library": "si1145",
      "type": "example",
      "file_name": "si1145_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_si1145\n\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsi1145 = adafruit_si1145.SI1145(i2c)\n# Create a Label to show the readings. If you have a very small\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si1145/examples/si1145_displayio_simpletest.py",
      "library": "si1145",
      "type": "example",
      "file_name": "si1145_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_si1145\n\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)\n# place the label in the middle of the screen with anchored positioning\ndisplay_output_label.anchor_point = (0, 0)\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2)\n# add the label to the main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si1145/examples/si1145_displayio_simpletest.py",
      "library": "si1145",
      "type": "example",
      "file_name": "si1145_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_si1145\n\n# add the label to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si1145/examples/si1145_displayio_simpletest.py",
      "library": "si1145",
      "type": "example",
      "file_name": "si1145_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nfrom adafruit_ble.advertising.standard import Advertisement\nfrom adafruit_ble.services.standard.device_info import DeviceInfoService\n\nimport adafruit_ble\nradio = adafruit_ble.BLERadio()\na = Advertisement()\na.connectable = True",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_device_info_service.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_device_info_service.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_onewire.bus import OneWireBus\nfrom adafruit_ds18x20 import DS18X20\n\n# Initialize one-wire bus on board pin D1.\now_bus = OneWireBus(board.D1)\n# Scan for sensors and grab the first one found.\nds18 = DS18X20(ow_bus, ow_bus.scan()[0])\nds18.resolution = 12",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds18x20/examples/ds18x20_asynctest.py",
      "library": "ds18x20",
      "type": "example",
      "file_name": "ds18x20_asynctest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2022 Alec Delaney for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport socket\nimport ssl\nfrom os import getenv\n\nimport adafruit_requests as requests\n\nfrom adafruit_pastebin.gist import Gist\n\n# Get PasteBin keys, ensure these are setup in your environment\nauth_key = getenv(\"auth_key\")\n\nsession = requests.Session(socket, ssl_context=ssl.create_default_context())\n\npastebin = Gist(session, auth_key)\npaste_url = pastebin.paste(\n    \"This is a test paste!\",\n    filename=\"test.txt\",\n)\nprint(paste_url)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pastebin/examples/pastebin_gist_cpython.py",
      "library": "pastebin",
      "type": "example",
      "file_name": "pastebin_gist_cpython.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mmc56x3\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = adafruit_mmc56x3.MMC5603(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mmc56x3/examples/mmc56x3_displayio_simpletest.py",
      "library": "mmc56x3",
      "type": "example",
      "file_name": "mmc56x3_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mmc56x3\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = adafruit_mmc56x3.MMC5603(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mmc56x3/examples/mmc56x3_displayio_simpletest.py",
      "library": "mmc56x3",
      "type": "example",
      "file_name": "mmc56x3_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mmc56x3\n\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mmc56x3/examples/mmc56x3_displayio_simpletest.py",
      "library": "mmc56x3",
      "type": "example",
      "file_name": "mmc56x3_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mmc56x3\n\n# add the label(s) to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mmc56x3/examples/mmc56x3_displayio_simpletest.py",
      "library": "mmc56x3",
      "type": "example",
      "file_name": "mmc56x3_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nimport adafruit_midi\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_midi.control_change import ControlChange\nfrom adafruit_midi.midi_message import MIDIUnknownEvent\nfrom adafruit_midi.note_off import NoteOff\nfrom adafruit_midi.note_on import NoteOn\nfrom adafruit_midi.pitch_bend import PitchBend\nimport adafruit_ble_midi\n\nimport adafruit_ble_midi\n# Use default HID descriptor\nmidi_service = adafruit_ble_midi.MIDIService()\nadvertisement = ProvideServicesAdvertisement(midi_service)\nble = adafruit_ble.BLERadio()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_midi/examples/ble_midi_simplein.py",
      "library": "ble_midi",
      "type": "example",
      "file_name": "ble_midi_simplein.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nimport adafruit_midi\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_midi.control_change import ControlChange\nfrom adafruit_midi.midi_message import MIDIUnknownEvent\nfrom adafruit_midi.note_off import NoteOff\nfrom adafruit_midi.note_on import NoteOn\nfrom adafruit_midi.pitch_bend import PitchBend\nimport adafruit_ble_midi\n\n# Use default HID descriptor\nmidi_service = adafruit_ble_midi.MIDIService()\nadvertisement = ProvideServicesAdvertisement(midi_service)\nble = adafruit_ble.BLERadio()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_midi/examples/ble_midi_simplein.py",
      "library": "ble_midi",
      "type": "example",
      "file_name": "ble_midi_simplein.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nimport adafruit_midi\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_midi.control_change import ControlChange\nfrom adafruit_midi.midi_message import MIDIUnknownEvent\nfrom adafruit_midi.note_off import NoteOff\nfrom adafruit_midi.note_on import NoteOn\nfrom adafruit_midi.pitch_bend import PitchBend\nimport adafruit_ble_midi\n\nble = adafruit_ble.BLERadio()\nmidi = adafruit_midi.MIDI(midi_out=midi_service, midi_in=midi_service, out_channel=0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_midi/examples/ble_midi_simplein.py",
      "library": "ble_midi",
      "type": "example",
      "file_name": "ble_midi_simplein.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom micropython import const\nfrom adafruit_seesaw.seesaw import Seesaw\n\ni2c_bus = board.I2C()  # uses board.SCL and board.SDA\n# i2c_bus = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nss = Seesaw(i2c_bus, 0x5E)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_minitft_featherwing.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_minitft_featherwing.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Get WiFi details, ensure these are setup in settings.toml\nssid = os.getenv(\"CIRCUITPY_WIFI_SSID\")\npassword = os.getenv(\"CIRCUITPY_WIFI_PASSWORD\")\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nrssi = wifi.radio.ap_info.rssi",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_status_codes.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_status_codes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nssid = os.getenv(\"CIRCUITPY_WIFI_SSID\")\npassword = os.getenv(\"CIRCUITPY_WIFI_PASSWORD\")\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nrssi = wifi.radio.ap_info.rssi",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_status_codes.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_status_codes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\npassword = os.getenv(\"CIRCUITPY_WIFI_PASSWORD\")\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nrssi = wifi.radio.ap_info.rssi",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_status_codes.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_status_codes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Returns HTTP status code and description\ndef print_http_status(expected_code, actual_code, description):\n    \"\"\"Returns HTTP status code and description\"\"\"\n    if '100' <= actual_code <= '103':\n        print(f' | \u2705 Status Test Expected: {expected_code} Actual: {actual_code} - {description}')\n    elif '200' == actual_code:\n        print(f' | \ud83c\udd97 Status Test Expected: {expected_code} Actual: {actual_code} - {description}')\n    elif '201' <= actual_code <= '299':\n        print(f' | \u2705 Status Test Expected: {expected_code} Actual: {actual_code} - {description}')\n    elif '300' <= actual_code <= '600':\n        print(f' | \u274c Status Test Expected: {expected_code} Actual: {actual_code} - {description}')\n    else:\n        print(f' | Unknown Response Status Expected: {expected_code} ' + f'Actual: {actual_code} - {description}')\n\n# Usage example:\n        response_status_code = str(response.status_code)\n        SORT_STATUS_DESC = http_status_codes.get(response_status_code, \"Unknown Status Code\")\n        print_http_status(current_code, response_status_code, SORT_STATUS_DESC)\n\n    # Rate limit ourselves a little to avoid strain on server",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_status_codes.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_status_codes.py",
      "chunk_type": "function",
      "function_name": "print_http_status"
    }
  },
  {
    "content": "import struct\nimport time\nimport adafruit_apds9960.apds9960\nimport adafruit_bmp280\nimport adafruit_lis3mdl\nimport adafruit_lsm6ds\nimport adafruit_sht31d\nimport board\nimport adafruit_rockblock\n\nimport board\nimport adafruit_rockblock\n# RockBlock setup\nuart = board.UART()\nuart.baudrate = 19200\nrb = adafruit_rockblock.RockBlock(uart)\ni2c = board.I2C()  # uses board.SCL and board.SDA",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rockblock/examples/rockblock_feather_sense_sensors.py",
      "library": "rockblock",
      "type": "example",
      "file_name": "rockblock_feather_sense_sensors.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport time\nimport adafruit_apds9960.apds9960\nimport adafruit_bmp280\nimport adafruit_lis3mdl\nimport adafruit_lsm6ds\nimport adafruit_sht31d\nimport board\nimport adafruit_rockblock\n\nimport adafruit_rockblock\n# RockBlock setup\nuart = board.UART()\nuart.baudrate = 19200\nrb = adafruit_rockblock.RockBlock(uart)\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rockblock/examples/rockblock_feather_sense_sensors.py",
      "library": "rockblock",
      "type": "example",
      "file_name": "rockblock_feather_sense_sensors.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport time\nimport adafruit_apds9960.apds9960\nimport adafruit_bmp280\nimport adafruit_lis3mdl\nimport adafruit_lsm6ds\nimport adafruit_sht31d\nimport board\nimport adafruit_rockblock\n\n# RockBlock setup\nuart = board.UART()\nuart.baudrate = 19200\nrb = adafruit_rockblock.RockBlock(uart)\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# all the sensors\naccelo = adafruit_lsm6ds.LSM6DS33(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rockblock/examples/rockblock_feather_sense_sensors.py",
      "library": "rockblock",
      "type": "example",
      "file_name": "rockblock_feather_sense_sensors.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport time\nimport adafruit_apds9960.apds9960\nimport adafruit_bmp280\nimport adafruit_lis3mdl\nimport adafruit_lsm6ds\nimport adafruit_sht31d\nimport board\nimport adafruit_rockblock\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# all the sensors\naccelo = adafruit_lsm6ds.LSM6DS33(i2c)\nmagno = adafruit_lis3mdl.LIS3MDL(i2c)\nprox = adafruit_apds9960.apds9960.APDS9960(i2c)\nsht = adafruit_sht31d.SHT31D(i2c)\nbmp = adafruit_bmp280.Adafruit_BMP280_I2C(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rockblock/examples/rockblock_feather_sense_sensors.py",
      "library": "rockblock",
      "type": "example",
      "file_name": "rockblock_feather_sense_sensors.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport time\nimport adafruit_apds9960.apds9960\nimport adafruit_bmp280\nimport adafruit_lis3mdl\nimport adafruit_lsm6ds\nimport adafruit_sht31d\nimport board\nimport adafruit_rockblock\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# all the sensors\naccelo = adafruit_lsm6ds.LSM6DS33(i2c)\nmagno = adafruit_lis3mdl.LIS3MDL(i2c)\nprox = adafruit_apds9960.apds9960.APDS9960(i2c)\nsht = adafruit_sht31d.SHT31D(i2c)\nbmp = adafruit_bmp280.Adafruit_BMP280_I2C(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rockblock/examples/rockblock_feather_sense_sensors.py",
      "library": "rockblock",
      "type": "example",
      "file_name": "rockblock_feather_sense_sensors.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport time\nimport adafruit_apds9960.apds9960\nimport adafruit_bmp280\nimport adafruit_lis3mdl\nimport adafruit_lsm6ds\nimport adafruit_sht31d\nimport board\nimport adafruit_rockblock\n\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# all the sensors\naccelo = adafruit_lsm6ds.LSM6DS33(i2c)\nmagno = adafruit_lis3mdl.LIS3MDL(i2c)\nprox = adafruit_apds9960.apds9960.APDS9960(i2c)\nsht = adafruit_sht31d.SHT31D(i2c)\nbmp = adafruit_bmp280.Adafruit_BMP280_I2C(i2c)\n# build data",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rockblock/examples/rockblock_feather_sense_sensors.py",
      "library": "rockblock",
      "type": "example",
      "file_name": "rockblock_feather_sense_sensors.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport time\nimport adafruit_apds9960.apds9960\nimport adafruit_bmp280\nimport adafruit_lis3mdl\nimport adafruit_lsm6ds\nimport adafruit_sht31d\nimport board\nimport adafruit_rockblock\n\n# all the sensors\naccelo = adafruit_lsm6ds.LSM6DS33(i2c)\nmagno = adafruit_lis3mdl.LIS3MDL(i2c)\nprox = adafruit_apds9960.apds9960.APDS9960(i2c)\nsht = adafruit_sht31d.SHT31D(i2c)\nbmp = adafruit_bmp280.Adafruit_BMP280_I2C(i2c)\n# build data\n# can decode on other end with struct.unpack(\"<6fB5f\", data)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rockblock/examples/rockblock_feather_sense_sensors.py",
      "library": "rockblock",
      "type": "example",
      "file_name": "rockblock_feather_sense_sensors.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport time\nimport adafruit_apds9960.apds9960\nimport adafruit_bmp280\nimport adafruit_lis3mdl\nimport adafruit_lsm6ds\nimport adafruit_sht31d\nimport board\nimport adafruit_rockblock\n\n# all the sensors\naccelo = adafruit_lsm6ds.LSM6DS33(i2c)\nmagno = adafruit_lis3mdl.LIS3MDL(i2c)\nprox = adafruit_apds9960.apds9960.APDS9960(i2c)\nsht = adafruit_sht31d.SHT31D(i2c)\nbmp = adafruit_bmp280.Adafruit_BMP280_I2C(i2c)\n# build data\n# can decode on other end with struct.unpack(\"<6fB5f\", data)\ndata = struct.pack(\"3f\", *accelo.acceleration)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rockblock/examples/rockblock_feather_sense_sensors.py",
      "library": "rockblock",
      "type": "example",
      "file_name": "rockblock_feather_sense_sensors.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_stmpe610 import Adafruit_STMPE610_SPI\n\nimport busio\nimport digitalio\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\ncs = digitalio.DigitalInOut(board.D6)\nst = Adafruit_STMPE610_SPI(spi, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/stmpe610/examples/stmpe610_simpletest.py",
      "library": "stmpe610",
      "type": "example",
      "file_name": "stmpe610_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_stmpe610 import Adafruit_STMPE610_SPI\n\nimport digitalio\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\ncs = digitalio.DigitalInOut(board.D6)\nst = Adafruit_STMPE610_SPI(spi, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/stmpe610/examples/stmpe610_simpletest.py",
      "library": "stmpe610",
      "type": "example",
      "file_name": "stmpe610_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport busio\nimport digitalio\n\nfrom adafruit_stmpe610 import Adafruit_STMPE610_SPI\n\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\ncs = digitalio.DigitalInOut(board.D6)\nst = Adafruit_STMPE610_SPI(spi, cs)\n\nprint(\"Go Ahead - Touch the Screen - Make My Day!\")\nwhile True:\n    if not st.buffer_empty:\n        print(st.read_data())\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/stmpe610/examples/stmpe610_simpletest.py",
      "library": "stmpe610",
      "type": "example",
      "file_name": "stmpe610_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport usb_hid\nfrom adafruit_hid.mouse import Mouse\n\nmouse = Mouse(usb_hid.devices)\n# define buttons. these can be any physical switches/buttons, but the values\n# here work out-of-the-box with a CircuitPlayground Express' A and B buttons.\nup = digitalio.DigitalInOut(board.D4)\nup.direction = digitalio.Direction.INPUT\nup.pull = digitalio.Pull.DOWN\ndown = digitalio.DigitalInOut(board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_simpletest.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport usb_hid\nfrom adafruit_hid.mouse import Mouse\n\nmouse = Mouse(usb_hid.devices)\n# define buttons. these can be any physical switches/buttons, but the values\n# here work out-of-the-box with a CircuitPlayground Express' A and B buttons.\nup = digitalio.DigitalInOut(board.D4)\nup.direction = digitalio.Direction.INPUT\nup.pull = digitalio.Pull.DOWN\ndown = digitalio.DigitalInOut(board.D5)\ndown.direction = digitalio.Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_simpletest.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport usb_hid\nfrom adafruit_hid.mouse import Mouse\n\n# define buttons. these can be any physical switches/buttons, but the values\n# here work out-of-the-box with a CircuitPlayground Express' A and B buttons.\nup = digitalio.DigitalInOut(board.D4)\nup.direction = digitalio.Direction.INPUT\nup.pull = digitalio.Pull.DOWN\ndown = digitalio.DigitalInOut(board.D5)\ndown.direction = digitalio.Direction.INPUT\ndown.pull = digitalio.Pull.DOWN",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_simpletest.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport usb_hid\nfrom adafruit_hid.mouse import Mouse\n\n# here work out-of-the-box with a CircuitPlayground Express' A and B buttons.\nup = digitalio.DigitalInOut(board.D4)\nup.direction = digitalio.Direction.INPUT\nup.pull = digitalio.Pull.DOWN\ndown = digitalio.DigitalInOut(board.D5)\ndown.direction = digitalio.Direction.INPUT\ndown.pull = digitalio.Pull.DOWN",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_simpletest.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport usb_hid\nfrom adafruit_hid.mouse import Mouse\n\nup = digitalio.DigitalInOut(board.D4)\nup.direction = digitalio.Direction.INPUT\nup.pull = digitalio.Pull.DOWN\ndown = digitalio.DigitalInOut(board.D5)\ndown.direction = digitalio.Direction.INPUT\ndown.pull = digitalio.Pull.DOWN",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_simpletest.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport usb_hid\nfrom adafruit_hid.mouse import Mouse\n\nup.direction = digitalio.Direction.INPUT\nup.pull = digitalio.Pull.DOWN\ndown = digitalio.DigitalInOut(board.D5)\ndown.direction = digitalio.Direction.INPUT\ndown.pull = digitalio.Pull.DOWN",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_simpletest.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport digitalio\nimport usb_hid\n\nfrom adafruit_hid.mouse import Mouse\n\nmouse = Mouse(usb_hid.devices)\n\n# define buttons. these can be any physical switches/buttons, but the values\n# here work out-of-the-box with a CircuitPlayground Express' A and B buttons.\nup = digitalio.DigitalInOut(board.D4)\nup.direction = digitalio.Direction.INPUT\nup.pull = digitalio.Pull.DOWN\n\ndown = digitalio.DigitalInOut(board.D5)\ndown.direction = digitalio.Direction.INPUT\ndown.pull = digitalio.Pull.DOWN\n\nwhile True:\n    # scroll up one unit (varies with host/OS)\n    if up.value:\n        mouse.move(wheel=1)\n\n    # scroll down one unit (varies with host/OS)\n    elif down.value:\n        mouse.move(wheel=-1)\n\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_simpletest.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lps28\n\nimport board\nimport adafruit_lps28\ni2c = board.I2C()\nsensor = adafruit_lps28.LPS28(i2c)\nsensor.data_rate = 200\nsensor.averaging = 32",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps28/examples/lps28_fifo.py",
      "library": "lps28",
      "type": "example",
      "file_name": "lps28_fifo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lps28\n\nimport board\nimport adafruit_lps28\ni2c = board.I2C()\nsensor = adafruit_lps28.LPS28(i2c)\nsensor.data_rate = 200\nsensor.averaging = 32",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps28/examples/lps28_fifo.py",
      "library": "lps28",
      "type": "example",
      "file_name": "lps28_fifo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2025 Liz Clark for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_lps28\n\ni2c = board.I2C()\nsensor = adafruit_lps28.LPS28(i2c)\n\nsensor.data_rate = 200\nsensor.averaging = 32\n\n# FIFO interrupts\nsensor.fifo_watermark_int = True  # FIFO watermark interrupt\n# sensor.fifo_full_int = False # FIFO full interrupt\n# sensor.fifo_overrun_int = False # FIFO overrun interrupt\n\n# FIFO Modes\n# \"BYPASS\", \"FIFO\", \"CONTINUOUS\",\n# \"CONTINUOUS_TO_FIFO\", \"BYPASS_TO_CONTINUOUS\",\n# \"CONTINUOUS_TO_BYPASS\"\nsensor.fifo_mode = \"CONTINUOUS\"\nsensor.fifo_watermark = 10\n\nwhile True:\n    if sensor.fifo_ready:  # Check watermark flag\n        samples = sensor.fifo_unread_samples\n        print(f\"FIFO unread samples: {samples}\")\n        for _ in range(samples):\n            pressure = sensor.fifo_pressure\n            print(f\"FIFO Pressure (hPa): {pressure:.2f}\")\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps28/examples/lps28_fifo.py",
      "library": "lps28",
      "type": "example",
      "file_name": "lps28_fifo.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport adafruit_tsl2591\nimport board\nimport adafruit_tca9548a\n\nimport board\nimport adafruit_tca9548a\n# Create I2C bus as normal\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Create the PCA9546A object and give it the I2C bus\nmux = adafruit_tca9548a.PCA9546A(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca9584a/examples/pca9546a_multisensor.py",
      "library": "tca9584a",
      "type": "example",
      "file_name": "pca9546a_multisensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_tsl2591\nimport board\nimport adafruit_tca9548a\n\n# Create I2C bus as normal\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Create the PCA9546A object and give it the I2C bus\nmux = adafruit_tca9548a.PCA9546A(i2c)\n# For each sensor, create it using the PCA9546A channel instead of the I2C object\ntsl1 = adafruit_tsl2591.TSL2591(mux[0])\ntsl2 = adafruit_tsl2591.TSL2591(mux[1])",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca9584a/examples/pca9546a_multisensor.py",
      "library": "tca9584a",
      "type": "example",
      "file_name": "pca9546a_multisensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_tsl2591\nimport board\nimport adafruit_tca9548a\n\n# Create the PCA9546A object and give it the I2C bus\nmux = adafruit_tca9548a.PCA9546A(i2c)\n# For each sensor, create it using the PCA9546A channel instead of the I2C object\ntsl1 = adafruit_tsl2591.TSL2591(mux[0])\ntsl2 = adafruit_tsl2591.TSL2591(mux[1])\n# After initial setup, can just use sensors as normal.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca9584a/examples/pca9546a_multisensor.py",
      "library": "tca9584a",
      "type": "example",
      "file_name": "pca9546a_multisensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_tsl2591\nimport board\nimport adafruit_tca9548a\n\n# Create the PCA9546A object and give it the I2C bus\nmux = adafruit_tca9548a.PCA9546A(i2c)\n# For each sensor, create it using the PCA9546A channel instead of the I2C object\ntsl1 = adafruit_tsl2591.TSL2591(mux[0])\ntsl2 = adafruit_tsl2591.TSL2591(mux[1])\n# After initial setup, can just use sensors as normal.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca9584a/examples/pca9546a_multisensor.py",
      "library": "tca9584a",
      "type": "example",
      "file_name": "pca9546a_multisensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# This example shows using two TSL2491 light sensors attached to PCA9546A channels 0 and 1.\n# Use with other I2C sensors would be similar.\nimport time\n\nimport adafruit_tsl2591\nimport board\n\nimport adafruit_tca9548a\n\n# Create I2C bus as normal\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\n# Create the PCA9546A object and give it the I2C bus\nmux = adafruit_tca9548a.PCA9546A(i2c)\n\n# For each sensor, create it using the PCA9546A channel instead of the I2C object\ntsl1 = adafruit_tsl2591.TSL2591(mux[0])\ntsl2 = adafruit_tsl2591.TSL2591(mux[1])\n\n# After initial setup, can just use sensors as normal.\nwhile True:\n    print(tsl1.lux, tsl2.lux)\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca9584a/examples/pca9546a_multisensor.py",
      "library": "tca9584a",
      "type": "example",
      "file_name": "pca9546a_multisensor.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.D5)\nRESET = digitalio.DigitalInOut(board.D6)\n# Or uncomment and instead use these if using a Feather M0 RFM69 board\n# and the appropriate CircuitPython build:\n# CS = digitalio.DigitalInOut(board.RFM69_CS)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_simpletest.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.D5)\nRESET = digitalio.DigitalInOut(board.D6)\n# Or uncomment and instead use these if using a Feather M0 RFM69 board\n# and the appropriate CircuitPython build:\n# CS = digitalio.DigitalInOut(board.RFM69_CS)\n# RESET = digitalio.DigitalInOut(board.RFM69_RST)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_simpletest.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# and the appropriate CircuitPython build:\n# CS = digitalio.DigitalInOut(board.RFM69_CS)\n# RESET = digitalio.DigitalInOut(board.RFM69_RST)\n# Define the onboard LED\nLED = digitalio.DigitalInOut(board.D13)\nLED.direction = digitalio.Direction.OUTPUT\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_simpletest.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# CS = digitalio.DigitalInOut(board.RFM69_CS)\n# RESET = digitalio.DigitalInOut(board.RFM69_RST)\n# Define the onboard LED\nLED = digitalio.DigitalInOut(board.D13)\nLED.direction = digitalio.Direction.OUTPUT\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_simpletest.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# Define the onboard LED\nLED = digitalio.DigitalInOut(board.D13)\nLED.direction = digitalio.Direction.OUTPUT\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm69 = adafruit_rfm69.RFM69(spi, CS, RESET, RADIO_FREQ_MHZ)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_simpletest.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm69 = adafruit_rfm69.RFM69(spi, CS, RESET, RADIO_FREQ_MHZ)\n# Optionally set an encryption key (16 byte AES key). MUST match both\n# on the transmitter and receiver (or be set to None to disable/the default).\nrfm69.encryption_key = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_simpletest.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport pwmio\nimport adafruit_mpr121\n\n# Import MPR121 module.\nimport adafruit_mpr121\n# Configure PWM buzzer and other state:\nBUZZER_PIN = board.D9\nTONE_ON_DUTY = 2**15  # Duty cycle of tone when turned on, a square wave.\nTONE_OFF_DUTY = 0  # Duty cycle of tone when turned off, 0 or no signal.\nNOTE_FREQS = [\n    261,  # Input 0 = 261 hz = middle C",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpr121/examples/mpr121_piano.py",
      "library": "mpr121",
      "type": "example",
      "file_name": "mpr121_piano.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport pwmio\nimport adafruit_mpr121\n\n# Create I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create MPR121 class.\nmpr121 = adafruit_mpr121.MPR121(i2c)\n# Note you can optionally change the address of the device:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpr121/examples/mpr121_piano.py",
      "library": "mpr121",
      "type": "example",
      "file_name": "mpr121_piano.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport pwmio\nimport adafruit_mpr121\n\n# Create I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create MPR121 class.\nmpr121 = adafruit_mpr121.MPR121(i2c)\n# Note you can optionally change the address of the device:\n# mpr121 = adafruit_mpr121.MPR121(i2c, address=0x91)\n# Setup buzzer PWM output.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpr121/examples/mpr121_piano.py",
      "library": "mpr121",
      "type": "example",
      "file_name": "mpr121_piano.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport pwmio\nimport adafruit_mpr121\n\nmpr121 = adafruit_mpr121.MPR121(i2c)\n# Note you can optionally change the address of the device:\n# mpr121 = adafruit_mpr121.MPR121(i2c, address=0x91)\n# Setup buzzer PWM output.\nbuzzer = pwmio.PWMOut(BUZZER_PIN, duty_cycle=TONE_OFF_DUTY, frequency=440, variable_frequency=True)\nlast_note = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpr121/examples/mpr121_piano.py",
      "library": "mpr121",
      "type": "example",
      "file_name": "mpr121_piano.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ccs811\n\nimport board\nimport adafruit_ccs811\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nccs811 = adafruit_ccs811.CCS811(i2c)\n# Wait for the sensor to be ready",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ccs811/examples/ccs811_simpletest.py",
      "library": "ccs811",
      "type": "example",
      "file_name": "ccs811_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ccs811\n\nimport adafruit_ccs811\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nccs811 = adafruit_ccs811.CCS811(i2c)\n# Wait for the sensor to be ready",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ccs811/examples/ccs811_simpletest.py",
      "library": "ccs811",
      "type": "example",
      "file_name": "ccs811_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_ccs811\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nccs811 = adafruit_ccs811.CCS811(i2c)\n\n# Wait for the sensor to be ready\nwhile not ccs811.data_ready:\n    pass\n\nwhile True:\n    print(f\"CO2: {ccs811.eco2} PPM, TVOC: {ccs811.tvoc} PPB\")\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ccs811/examples/ccs811_simpletest.py",
      "library": "ccs811",
      "type": "example",
      "file_name": "ccs811_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nfrom adafruit_slideshow import PlayBackOrder, SlideShow\n\n# use built in display (PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\nslideshow = SlideShow(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/slideshow/examples/slideshow_simpletest.py",
      "library": "slideshow",
      "type": "example",
      "file_name": "slideshow_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_slideshow import PlayBackOrder, SlideShow\n\nslideshow = SlideShow(board.DISPLAY, None, folder='/images/', loop=False, order=PlayBackOrder.ALPHABETICAL, dwell=10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/slideshow/examples/slideshow_simpletest.py",
      "library": "slideshow",
      "type": "example",
      "file_name": "slideshow_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Basic demonstration script will create a slideshow\nobject that plays through once alphabetically.\"\"\"\n\nimport board\n\nfrom adafruit_slideshow import PlayBackOrder, SlideShow\n\n# use built in display (PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\n\n\nslideshow = SlideShow(\n    board.DISPLAY,\n    None,\n    folder=\"/images/\",\n    loop=False,\n    order=PlayBackOrder.ALPHABETICAL,\n    dwell=10,\n)\n\nwhile slideshow.update():\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/slideshow/examples/slideshow_simpletest.py",
      "library": "slideshow",
      "type": "example",
      "file_name": "slideshow_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport simpleio\n\nimport digitalio\nimport simpleio\n# set up clock, data, and latch pins\nclk = digitalio.DigitalInOut(board.D12)\ndata = digitalio.DigitalInOut(board.D11)\nlatch = digitalio.DigitalInOut(board.D10)\nclk.direction = digitalio.Direction.OUTPUT\nlatch.direction = digitalio.Direction.OUTPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/simpleio/examples/simpleio_shift_in_out_demo.py",
      "library": "simpleio",
      "type": "example",
      "file_name": "simpleio_shift_in_out_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport simpleio\n\nimport simpleio\n# set up clock, data, and latch pins\nclk = digitalio.DigitalInOut(board.D12)\ndata = digitalio.DigitalInOut(board.D11)\nlatch = digitalio.DigitalInOut(board.D10)\nclk.direction = digitalio.Direction.OUTPUT\nlatch.direction = digitalio.Direction.OUTPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/simpleio/examples/simpleio_shift_in_out_demo.py",
      "library": "simpleio",
      "type": "example",
      "file_name": "simpleio_shift_in_out_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport simpleio\n\nimport simpleio\n# set up clock, data, and latch pins\nclk = digitalio.DigitalInOut(board.D12)\ndata = digitalio.DigitalInOut(board.D11)\nlatch = digitalio.DigitalInOut(board.D10)\nclk.direction = digitalio.Direction.OUTPUT\nlatch.direction = digitalio.Direction.OUTPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/simpleio/examples/simpleio_shift_in_out_demo.py",
      "library": "simpleio",
      "type": "example",
      "file_name": "simpleio_shift_in_out_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport simpleio\n\n# set up clock, data, and latch pins\nclk = digitalio.DigitalInOut(board.D12)\ndata = digitalio.DigitalInOut(board.D11)\nlatch = digitalio.DigitalInOut(board.D10)\nclk.direction = digitalio.Direction.OUTPUT\nlatch.direction = digitalio.Direction.OUTPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/simpleio/examples/simpleio_shift_in_out_demo.py",
      "library": "simpleio",
      "type": "example",
      "file_name": "simpleio_shift_in_out_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport simpleio\n\n# set up clock, data, and latch pins\nclk = digitalio.DigitalInOut(board.D12)\ndata = digitalio.DigitalInOut(board.D11)\nlatch = digitalio.DigitalInOut(board.D10)\nclk.direction = digitalio.Direction.OUTPUT\nlatch.direction = digitalio.Direction.OUTPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/simpleio/examples/simpleio_shift_in_out_demo.py",
      "library": "simpleio",
      "type": "example",
      "file_name": "simpleio_shift_in_out_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_apds9960 import colorutility\nfrom adafruit_apds9960.apds9960 import APDS9960\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\napds = APDS9960(i2c)\napds.enable_color = True",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/apds9960/examples/apds9960_color_simpletest.py",
      "library": "apds9960",
      "type": "example",
      "file_name": "apds9960_color_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nfrom adafruit_apds9960 import colorutility\nfrom adafruit_apds9960.apds9960 import APDS9960\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\napds = APDS9960(i2c)\napds.enable_color = True\n\n\nwhile True:\n    # wait for color data to be ready\n    while not apds.color_data_ready:\n        time.sleep(0.005)\n\n    # get the data and print the different channels\n    r, g, b, c = apds.color_data\n    print(\"red: \", r)\n    print(\"green: \", g)\n    print(\"blue: \", b)\n    print(\"clear: \", c)\n\n    print(f\"color temp {colorutility.calculate_color_temperature(r, g, b)}\")\n    print(f\"light lux {colorutility.calculate_lux(r, g, b)}\")\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/apds9960/examples/apds9960_color_simpletest.py",
      "library": "apds9960",
      "type": "example",
      "file_name": "apds9960_color_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import ssl\nfrom os import getenv\nimport adafruit_requests\nimport socketpool\nimport wifi\nimport adafruit_lifx\n\nlifx_token = getenv(\"lifx_token\")\n# Set up ESP32-S2 and adafruit_requests session\nwifi.radio.connect(ssid=ssid, password=password)\npool = socketpool.SocketPool(wifi.radio)\nhttp_session = adafruit_requests.Session(pool, ssl.create_default_context())\n# Set this to your LIFX light separator label\n# https://api.developer.lifx.com/docs/selectors\nlifx_light = \"label:Lamp\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/lifx/examples/lifx_simpletest_esp32s2.py",
      "library": "lifx",
      "type": "example",
      "file_name": "lifx_simpletest_esp32s2.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import ssl\nfrom os import getenv\nimport adafruit_requests\nimport socketpool\nimport wifi\nimport adafruit_lifx\n\n# Set this to your LIFX light separator label\n# https://api.developer.lifx.com/docs/selectors\nlifx_light = \"label:Lamp\"\n# Initialize the LIFX API Client\nlifx = adafruit_lifx.LIFX(http_session, lifx_token)\n# List all lights\nlights = lifx.list_lights()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/lifx/examples/lifx_simpletest_esp32s2.py",
      "library": "lifx",
      "type": "example",
      "file_name": "lifx_simpletest_esp32s2.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport displayio\nfrom adafruit_progressbar.progressbar import HorizontalProgressBar\n\n# use built in display (PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/progressbar/examples/progressbar_magtag_simpletest.py",
      "library": "progressbar",
      "type": "example",
      "file_name": "progressbar_magtag_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport displayio\nfrom adafruit_progressbar.progressbar import HorizontalProgressBar\n\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\n# B/up button will be used to increase the progress\nup_btn = digitalio.DigitalInOut(board.BUTTON_B)\nup_btn.direction = digitalio.Direction.INPUT\nup_btn.pull = digitalio.Pull.UP\n# C/down button will be used to increase the progress",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/progressbar/examples/progressbar_magtag_simpletest.py",
      "library": "progressbar",
      "type": "example",
      "file_name": "progressbar_magtag_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport displayio\nfrom adafruit_progressbar.progressbar import HorizontalProgressBar\n\ndisplay = board.DISPLAY\n# B/up button will be used to increase the progress\nup_btn = digitalio.DigitalInOut(board.BUTTON_B)\nup_btn.direction = digitalio.Direction.INPUT\nup_btn.pull = digitalio.Pull.UP\n# C/down button will be used to increase the progress\ndown_btn = digitalio.DigitalInOut(board.BUTTON_C)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/progressbar/examples/progressbar_magtag_simpletest.py",
      "library": "progressbar",
      "type": "example",
      "file_name": "progressbar_magtag_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport displayio\nfrom adafruit_progressbar.progressbar import HorizontalProgressBar\n\n# B/up button will be used to increase the progress\nup_btn = digitalio.DigitalInOut(board.BUTTON_B)\nup_btn.direction = digitalio.Direction.INPUT\nup_btn.pull = digitalio.Pull.UP\n# C/down button will be used to increase the progress\ndown_btn = digitalio.DigitalInOut(board.BUTTON_C)\ndown_btn.direction = digitalio.Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/progressbar/examples/progressbar_magtag_simpletest.py",
      "library": "progressbar",
      "type": "example",
      "file_name": "progressbar_magtag_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport displayio\nfrom adafruit_progressbar.progressbar import HorizontalProgressBar\n\nup_btn = digitalio.DigitalInOut(board.BUTTON_B)\nup_btn.direction = digitalio.Direction.INPUT\nup_btn.pull = digitalio.Pull.UP\n# C/down button will be used to increase the progress\ndown_btn = digitalio.DigitalInOut(board.BUTTON_C)\ndown_btn.direction = digitalio.Direction.INPUT\ndown_btn.pull = digitalio.Pull.UP\n# Make the display context",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/progressbar/examples/progressbar_magtag_simpletest.py",
      "library": "progressbar",
      "type": "example",
      "file_name": "progressbar_magtag_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport displayio\nfrom adafruit_progressbar.progressbar import HorizontalProgressBar\n\nup_btn.direction = digitalio.Direction.INPUT\nup_btn.pull = digitalio.Pull.UP\n# C/down button will be used to increase the progress\ndown_btn = digitalio.DigitalInOut(board.BUTTON_C)\ndown_btn.direction = digitalio.Direction.INPUT\ndown_btn.pull = digitalio.Pull.UP\n# Make the display context\nsplash = displayio.Group()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/progressbar/examples/progressbar_magtag_simpletest.py",
      "library": "progressbar",
      "type": "example",
      "file_name": "progressbar_magtag_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport displayio\nfrom adafruit_progressbar.progressbar import HorizontalProgressBar\n\nup_btn.pull = digitalio.Pull.UP\n# C/down button will be used to increase the progress\ndown_btn = digitalio.DigitalInOut(board.BUTTON_C)\ndown_btn.direction = digitalio.Direction.INPUT\ndown_btn.pull = digitalio.Pull.UP\n# Make the display context\nsplash = displayio.Group()\ndisplay.root_group = splash",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/progressbar/examples/progressbar_magtag_simpletest.py",
      "library": "progressbar",
      "type": "example",
      "file_name": "progressbar_magtag_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label, wrap_text_to_pixels\n\n# use built in display (PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\n# Make the display context\nmain_group = displayio.Group()\ndisplay.root_group = main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-text/examples/display_text_wrap_pixels_test.py",
      "library": "display-text",
      "type": "example",
      "file_name": "display_text_wrap_pixels_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_transmit.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_transmit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_transmit.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_transmit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm9x = adafruit_rfm9x.RFM9x(spi, CS, RESET, RADIO_FREQ_MHZ)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_transmit.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_transmit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm9x = adafruit_rfm9x.RFM9x(spi, CS, RESET, RADIO_FREQ_MHZ)\n# Note that the radio is configured in LoRa mode so you can't control sync\n# word, encryption, frequency deviation, or other settings!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_transmit.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_transmit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# Used to ensure the display is free in CircuitPython\n# Define the pins needed for display use\n# This pinout is for a Feather M4 and may be different for other boards\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_2.9_color.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_2.9_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# Define the pins needed for display use\n# This pinout is for a Feather M4 and may be different for other boards\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_2.9_color.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_2.9_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# Define the pins needed for display use\n# This pinout is for a Feather M4 and may be different for other boards\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\n# Create the displayio connection to the display pins",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_2.9_color.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_2.9_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# Define the pins needed for display use\n# This pinout is for a Feather M4 and may be different for other boards\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\n# Create the displayio connection to the display pins\ndisplay_bus = fourwire.FourWire(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_2.9_color.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_2.9_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# This pinout is for a Feather M4 and may be different for other boards\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\n# Create the displayio connection to the display pins\ndisplay_bus = fourwire.FourWire(\n    spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_2.9_color.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_2.9_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\ndisplay = adafruit_il0373.IL0373(display_bus, width=296, height=128, rotation=270, busy_pin=epd_busy, highlight_color=16711680)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_2.9_color.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_2.9_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import array\nimport asyncio\nimport random\nimport board\nimport rp2pio\nfrom ulab import numpy as np\nimport adafruit_pioasm\n\ndef make_digit_wt(v):\n    val = ALL_COM\n    seg = DIGITS[v]\n    for i in range(8):\n        if seg & 1 << i:\n            val |= SEG_WT[i]\n    return val",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_7seg_fader.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_7seg_fader.py",
      "chunk_type": "function",
      "function_name": "make_digit_wt"
    }
  },
  {
    "content": "import array\nimport asyncio\nimport random\nimport board\nimport rp2pio\nfrom ulab import numpy as np\nimport adafruit_pioasm\n\nclass LedFader:\n\n    def __init__(self, first_pin, pin_count, cathode_weights, anode_weights, levels=64):\n        self._cathode_weights = cathode_weights\n        self._anode_weights = anode_weights\n        self._stream = array.array('L', [0, 0, 1]) * (1 + len(cathode_weights) * len(anode_weights))\n        self._levels = levels\n        self._max_count = levels * len(self)\n        self._total = len(self)\n        program = adafruit_pioasm.Program(_pio_source.format(n=pin_count))\n        self._sm = rp2pio.StateMachine(program.assembled, frequency=125000000, first_out_pin=first_pin, out_pin_count=14, auto_pull=True, pull_threshold=14, **program.pio_kwargs)\n        print(f'Note: approximate refresh rate {self._sm.frequency / self._max_count:.0f}Hz')\n        self._sm.background_write(loop=self._stream)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.deinit()\n\n    def deinit(self):\n        self._sm.deinit()\n\n    def __setitem__(self, i, v):\n        if not 0 <= v < self._levels:\n            raise ValueError()\n        c = i % len(self._cathode_weights)\n        r = i // len(self._cathode_weights)\n        if not v:\n            self._total = self._total - self._stream[3 * i + 2] + 1\n            self._stream[3 * i] = 0\n            self._stream[3 * i + 1] = 0\n            self._stream[3 * i + 2] = 1\n        else:\n            self._total = self._total - self._stream[3 * i + 2] + v\n            self._stream[3 * i] = self._cathode_weights[c] | self._anode_weights[r]\n            self._stream[3 * i + 1] = self._cathode_weights[c]\n            self._stream[3 * i + 2] = v\n        self._stream[3 * len(self) + 2] = self._max_count - self._total\n\n    def __len__(self):\n        return len(self._stream) // 3 - 1\n\n# Usage example:\n\n\nclass LedFader:\n    def __init__(self, first_pin, pin_count, cathode_weights, anode_weights, levels=64):\n        self._cathode_weights = cathode_weights",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_7seg_fader.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_7seg_fader.py",
      "chunk_type": "function",
      "function_name": "LedFader"
    }
  },
  {
    "content": "import array\nimport asyncio\nimport random\nimport board\nimport rp2pio\nfrom ulab import numpy as np\nimport adafruit_pioasm\n\nclass CyclicSignal:\n\n    def __init__(self, data, phase=0):\n        self._data = data\n        self._phase = 0\n        self.phase = phase\n        self._scale = len(self._data) - 1\n\n    @property\n    def phase(self):\n        return self._phase\n\n    @phase.setter\n    def phase(self, value):\n        self._phase = value % 1\n\n    @property\n    def value(self):\n        idxf = self._phase * len(self._data)\n        idx = int(idxf)\n        frac = idxf % 1\n        idx1 = (idx + 1) % len(self._data)\n        val = self._data[idx]\n        val1 = self._data[idx1]\n        return val + (val1 - val) * frac\n\n    def advance(self, delta):\n        self._phase = (self._phase + delta) % 1\n\n# Usage example:\n\n\nclass CyclicSignal:\n    def __init__(self, data, phase=0):\n        self._data = data",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_7seg_fader.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_7seg_fader.py",
      "chunk_type": "function",
      "function_name": "CyclicSignal"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Get WiFi details, ensure these are setup in settings.toml\nssid = os.getenv(\"CIRCUITPY_WIFI_SSID\")\npassword = os.getenv(\"CIRCUITPY_WIFI_PASSWORD\")\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nrssi = wifi.radio.ap_info.rssi",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/requests_wifi_advanced.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nssid = os.getenv(\"CIRCUITPY_WIFI_SSID\")\npassword = os.getenv(\"CIRCUITPY_WIFI_PASSWORD\")\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nrssi = wifi.radio.ap_info.rssi\n# URL for GET request",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/requests_wifi_advanced.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\npassword = os.getenv(\"CIRCUITPY_WIFI_PASSWORD\")\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nrssi = wifi.radio.ap_info.rssi\n# URL for GET request\nJSON_GET_URL = \"https://httpbin.org/get\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/requests_wifi_advanced.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_displayio_ssd1306\nimport board\nimport displayio\nimport i2cdisplaybus\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_tca8418 import TCA8418\n\noled_reset = board.D1\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntca = TCA8418(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca8418/examples/tca8418_3x4_OLED.py",
      "library": "tca8418",
      "type": "example",
      "file_name": "tca8418_3x4_OLED.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_displayio_ssd1306\nimport board\nimport displayio\nimport i2cdisplaybus\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_tca8418 import TCA8418\n\noled_reset = board.D1\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntca = TCA8418(i2c)\ndisplay_bus = i2cdisplaybus.I2CDisplayBus(i2c, device_address=0x3D, reset=oled_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca8418/examples/tca8418_3x4_OLED.py",
      "library": "tca8418",
      "type": "example",
      "file_name": "tca8418_3x4_OLED.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_displayio_ssd1306\nimport board\nimport displayio\nimport i2cdisplaybus\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_tca8418 import TCA8418\n\nWIDTH = 128\nHEIGHT = 64\nBORDER = 5\n#  display setup\ndisplay = adafruit_displayio_ssd1306.SSD1306(display_bus, width=WIDTH, height=HEIGHT)\nsplash = displayio.Group()\ndisplay.root_group = splash",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca8418/examples/tca8418_3x4_OLED.py",
      "library": "tca8418",
      "type": "example",
      "file_name": "tca8418_3x4_OLED.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nfrom adafruit_htu21d import HTU21D\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nhtu = HTU21D(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/htu21d/examples/htu21d_displayio_simpletest.py",
      "library": "htu21d",
      "type": "example",
      "file_name": "htu21d_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nfrom adafruit_htu21d import HTU21D\n\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/htu21d/examples/htu21d_displayio_simpletest.py",
      "library": "htu21d",
      "type": "example",
      "file_name": "htu21d_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nfrom adafruit_htu21d import HTU21D\n\n# add the label(s) to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/htu21d/examples/htu21d_displayio_simpletest.py",
      "library": "htu21d",
      "type": "example",
      "file_name": "htu21d_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# WARNING: Steam's full response will overload most microcontrollers\n# SET TO TRUE IF YOU FEEL BRAVE =)\nDEBUG = False\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Deconstruct URL (pylint hates long lines)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_steam.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_steam.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# SET TO TRUE IF YOU FEEL BRAVE =)\nDEBUG = False\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Deconstruct URL (pylint hates long lines)\n# http://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_steam.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_steam.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nDEBUG = False\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Deconstruct URL (pylint hates long lines)\n# http://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/\n# ?key=XXXXXXXXXXXXXXXXXXXXX&include_played_free_games=1&steamid=XXXXXXXXXXXXXXXX&format=json",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_steam.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_steam.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Converts seconds to minutes/hours/days\ndef time_calc(input_time):\n    \"\"\"Converts seconds to minutes/hours/days\"\"\"\n    if input_time < 60:\n        return f'{input_time:.0f} seconds'\n    if input_time < 3600:\n        return f'{input_time / 60:.0f} minutes'\n    if input_time < 86400:\n        return f'{input_time / 60 / 60:.0f} hours'\n    return f'{input_time / 60 / 60 / 24:.1f} days'\n\n# Usage example:\n\n        print(\"\\nFinished!\")\n        print(f\"Board Uptime: {time_calc(time.monotonic())}\")\n        print(f\"Next Update: {time_calc(SLEEP_TIME)}\")\n        print(\"===============================\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_steam.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_steam.py",
      "chunk_type": "function",
      "function_name": "time_calc"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# F-String formatted struct time conversion\ndef _format_datetime(datetime):\n    \"\"\"F-String formatted struct time conversion\"\"\"\n    return f'{datetime.tm_mon:02}/' + f'{datetime.tm_mday:02}/' + f'{datetime.tm_year:02} ' + f'{datetime.tm_hour:02}:' + f'{datetime.tm_min:02}:' + f'{datetime.tm_sec:02}'",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_steam.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_steam.py",
      "chunk_type": "function",
      "function_name": "_format_datetime"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# API Polling Rate\n# 900 = 15 mins, 1800 = 30 mins, 3600 = 1 hour\nSLEEP_TIME = 900\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_adafruit_discord_active_online.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_adafruit_discord_active_online.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# 900 = 15 mins, 1800 = 30 mins, 3600 = 1 hour\nSLEEP_TIME = 900\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_adafruit_discord_active_online.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_adafruit_discord_active_online.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nSLEEP_TIME = 900\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_adafruit_discord_active_online.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_adafruit_discord_active_online.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Converts seconds to minutes/hours/days\ndef time_calc(input_time):\n    \"\"\"Converts seconds to minutes/hours/days\"\"\"\n    if input_time < 60:\n        return f'{input_time:.0f} seconds'\n    if input_time < 3600:\n        return f'{input_time / 60:.0f} minutes'\n    if input_time < 86400:\n        return f'{input_time / 60 / 60:.0f} hours'\n    return f'{input_time / 60 / 60 / 24:.1f} days'\n\n# Usage example:\n        print(\"\\nFinished!\")\n        print(f\"Board Uptime: {time.monotonic()}\")\n        print(f\"Next Update: {time_calc(SLEEP_TIME)}\")\n        print(\"===============================\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_adafruit_discord_active_online.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_adafruit_discord_active_online.py",
      "chunk_type": "function",
      "function_name": "time_calc"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_base.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_base.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_base.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_base.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\n# uncommnet the desired import and rfm initialization depending on the radio boards being used",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_base.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_base.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_touchscreen\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_button.sprite_button import SpriteButton\n\nts = adafruit_touchscreen.Touchscreen(board.TOUCH_XL, board.TOUCH_XR, board.TOUCH_YD, board.TOUCH_YU, calibration=((5200, 59000), (5800, 57000)), size=(board.DISPLAY.width, board.DISPLAY.height))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-button/examples/display_button_spritebutton_debounced.py",
      "library": "display-button",
      "type": "example",
      "file_name": "display_button_spritebutton_debounced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_touchscreen\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_button.sprite_button import SpriteButton\n\n    size=(board.DISPLAY.width, board.DISPLAY.height),\n# Make the display context\nmain_group = displayio.Group()\nboard.DISPLAY.root_group = main_group\nBUTTON_WIDTH = 10 * 16\nBUTTON_HEIGHT = 3 * 16\nBUTTON_MARGIN = 20",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-button/examples/display_button_spritebutton_debounced.py",
      "library": "display-button",
      "type": "example",
      "file_name": "display_button_spritebutton_debounced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport analogio\nimport board\nimport microcontroller\nimport adafruit_ble_broadcastnet\n\nimport adafruit_ble_broadcastnet\nbattery = analogio.AnalogIn(board.VOLTAGE_MONITOR)\ndivider_ratio = 2",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_battery_level.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_battery_level.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport analogio\nimport board\nimport microcontroller\n\nimport adafruit_ble_broadcastnet\n\nprint(\"This is BroadcastNet sensor:\", adafruit_ble_broadcastnet.device_address)\n\nbattery = analogio.AnalogIn(board.VOLTAGE_MONITOR)\ndivider_ratio = 2\n\nwhile True:\n    measurement = adafruit_ble_broadcastnet.AdafruitSensorMeasurement()\n    battery_voltage = battery.value / 2**16 * divider_ratio * battery.reference_voltage\n    measurement.battery_voltage = int(battery_voltage * 1000)\n    measurement.temperature = microcontroller.cpu.temperature\n    print(measurement)\n    adafruit_ble_broadcastnet.broadcast(measurement)\n\n    time.sleep(30)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_battery_level.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_battery_level.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport adafruit_ws2801\n\nimport board\nimport adafruit_ws2801\n### Example for a Feather M4 driving 25 12mm leds\nodata = board.D5\noclock = board.D6\nnumleds = 25\nbright = 1.0\nleds = adafruit_ws2801.WS2801(oclock, odata, numleds, brightness=bright, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ws2801/examples/ws2801_simpletest.py",
      "library": "ws2801",
      "type": "example",
      "file_name": "ws2801_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport adafruit_ws2801\n\nimport adafruit_ws2801\n### Example for a Feather M4 driving 25 12mm leds\nodata = board.D5\noclock = board.D6\nnumleds = 25\nbright = 1.0\nleds = adafruit_ws2801.WS2801(oclock, odata, numleds, brightness=bright, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ws2801/examples/ws2801_simpletest.py",
      "library": "ws2801",
      "type": "example",
      "file_name": "ws2801_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport adafruit_ws2801\n\n### Example for a Feather M4 driving 25 12mm leds\nodata = board.D5\noclock = board.D6\nnumleds = 25\nbright = 1.0\nleds = adafruit_ws2801.WS2801(oclock, odata, numleds, brightness=bright, auto_write=False)\n######################### HELPERS ##############################",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ws2801/examples/ws2801_simpletest.py",
      "library": "ws2801",
      "type": "example",
      "file_name": "ws2801_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport adafruit_ws2801\n\ndef random_color():\n    return random.randrange(0, 7) * 32\n\n# Usage example:\n    # fill each led with a random color\n    for idx in range(n_leds):\n        leds[idx] = (random_color(), random_color(), random_color())\n\n    # show all leds in led string",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ws2801/examples/ws2801_simpletest.py",
      "library": "ws2801",
      "type": "example",
      "file_name": "ws2801_simpletest.py",
      "chunk_type": "function",
      "function_name": "random_color"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n### Based on example from\n### https://github.com/adafruit/Adafruit_CircuitPython_DotStar/tree/master/examples\n\nimport random\nimport time\n\nimport board\n\nimport adafruit_ws2801\n\n### Example for a Feather M4 driving 25 12mm leds\nodata = board.D5\noclock = board.D6\nnumleds = 25\nbright = 1.0\nleds = adafruit_ws2801.WS2801(oclock, odata, numleds, brightness=bright, auto_write=False)\n\n######################### HELPERS ##############################\n\n\n# a random color 0 -> 224\ndef random_color():\n    return random.randrange(0, 7) * 32\n\n\n######################### MAIN LOOP ##############################\nn_leds = len(leds)\nwhile True:\n    # fill each led with a random color\n    for idx in range(n_leds):\n        leds[idx] = (random_color(), random_color(), random_color())\n\n    # show all leds in led string\n    leds.show()\n\n    time.sleep(0.25)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ws2801/examples/ws2801_simpletest.py",
      "library": "ws2801",
      "type": "example",
      "file_name": "ws2801_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text.text_box import TextBox\n\nimport displayio\nimport terminalio\ndisplay = board.DISPLAY\nmain_group = displayio.Group()\nleft_text = (\"Left left left left \" * 2).rstrip()\nleft_text_area = TextBox(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-text/examples/display_text_text_box_simpletest.py",
      "library": "display-text",
      "type": "example",
      "file_name": "display_text_text_box_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text.text_box import TextBox\n\nright_text_area.anchor_point = (1.0, 1.0)\nright_text_area.anchored_position = (display.width, display.height)\nboard.DISPLAY.root_group = main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-text/examples/display_text_text_box_simpletest.py",
      "library": "display-text",
      "type": "example",
      "file_name": "display_text_text_box_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import Color, turtle\n\nimport board\nturtle = turtle(board.DISPLAY)\nmycolors = [Color.WHITE, Color.RED, Color.BLUE, Color.GREEN, Color.ORANGE, Color.PURPLE]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_circle.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_circle.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\n\nfrom adafruit_turtle import Color, turtle\n\nturtle = turtle(board.DISPLAY)\n\nmycolors = [Color.WHITE, Color.RED, Color.BLUE, Color.GREEN, Color.ORANGE, Color.PURPLE]\nturtle.penup()\nturtle.forward(130)\nturtle.right(180)\nturtle.pendown()\n\nfor i in range(6):\n    turtle.pencolor(mycolors[i])\n    turtle.circle(25)\n    turtle.penup()\n    turtle.forward(50)\n    turtle.pendown()\n\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_circle.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_circle.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport adafruit_ina228\nimport board\nimport adafruit_ina23x\n\nimport board\nimport adafruit_ina23x\n# Create I2C bus\ni2c = board.I2C()\n# Create INA237/238 instance\nina23x = adafruit_ina23x.INA23X(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ina23x/examples/ina23x_simpletest.py",
      "library": "ina23x",
      "type": "example",
      "file_name": "ina23x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ina228\nimport board\nimport adafruit_ina23x\n\n# Create I2C bus\ni2c = board.I2C()\n# Create INA237/238 instance\nina23x = adafruit_ina23x.INA23X(i2c)\n# Configure the sensor (optional - these are just examples)\n# ina23x.set_calibration(0.015, 10.0)  # Default values\n# ina23x.mode = adafruit_ina228.Mode.CONTINUOUS  # Already default",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ina23x/examples/ina23x_simpletest.py",
      "library": "ina23x",
      "type": "example",
      "file_name": "ina23x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom time import sleep\nimport board\nfrom adafruit_opt4048 import OPT4048, ConversionTime, Mode, Range\n\ntimestamp = 0\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = OPT4048(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/opt4048/examples/opt4048_oneshot.py",
      "library": "opt4048",
      "type": "example",
      "file_name": "opt4048_oneshot.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_tlc5947\n\nimport digitalio\nimport adafruit_tlc5947\n# Define pins connected to the TLC5947\nSCK = board.SCK\nMOSI = board.MOSI\nLATCH = digitalio.DigitalInOut(board.D5)\n# Initialize SPI bus.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc5947/examples/tlc5947_simpletest.py",
      "library": "tlc5947",
      "type": "example",
      "file_name": "tlc5947_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_tlc5947\n\nimport adafruit_tlc5947\n# Define pins connected to the TLC5947\nSCK = board.SCK\nMOSI = board.MOSI\nLATCH = digitalio.DigitalInOut(board.D5)\n# Initialize SPI bus.\nspi = busio.SPI(clock=SCK, MOSI=MOSI)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc5947/examples/tlc5947_simpletest.py",
      "library": "tlc5947",
      "type": "example",
      "file_name": "tlc5947_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_tlc5947\n\nimport adafruit_tlc5947\n# Define pins connected to the TLC5947\nSCK = board.SCK\nMOSI = board.MOSI\nLATCH = digitalio.DigitalInOut(board.D5)\n# Initialize SPI bus.\nspi = busio.SPI(clock=SCK, MOSI=MOSI)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc5947/examples/tlc5947_simpletest.py",
      "library": "tlc5947",
      "type": "example",
      "file_name": "tlc5947_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_tlc5947\n\nSCK = board.SCK\nMOSI = board.MOSI\nLATCH = digitalio.DigitalInOut(board.D5)\n# Initialize SPI bus.\nspi = busio.SPI(clock=SCK, MOSI=MOSI)\n# Initialize TLC5947\ntlc5947 = adafruit_tlc5947.TLC5947(spi, LATCH)\n# You can optionally disable auto_write which allows you to control when",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc5947/examples/tlc5947_simpletest.py",
      "library": "tlc5947",
      "type": "example",
      "file_name": "tlc5947_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_tlc5947\n\n# Initialize SPI bus.\nspi = busio.SPI(clock=SCK, MOSI=MOSI)\n# Initialize TLC5947\ntlc5947 = adafruit_tlc5947.TLC5947(spi, LATCH)\n# You can optionally disable auto_write which allows you to control when\n# channel state is written to the chip.  Normally auto_write is true and\n# will automatically write out changes as soon as they happen to a channel, but\n# if you need more control or atomic updates of multiple channels then disable",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc5947/examples/tlc5947_simpletest.py",
      "library": "tlc5947",
      "type": "example",
      "file_name": "tlc5947_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_bd3491fs\n\nimport board\nimport busio\nimport adafruit_bd3491fs\ni2c = busio.I2C(board.SCL, board.SDA)\nbd3491fs = adafruit_bd3491fs.BD3491FS(i2c)\nbd3491fs.active_input = adafruit_bd3491fs.Input.A\nbd3491fs.input_gain = adafruit_bd3491fs.Level.LEVEL_20DB",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bd3491fs/examples/bd3491fs_simpletest.py",
      "library": "bd3491fs",
      "type": "example",
      "file_name": "bd3491fs_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_bd3491fs\n\nimport busio\nimport adafruit_bd3491fs\ni2c = busio.I2C(board.SCL, board.SDA)\nbd3491fs = adafruit_bd3491fs.BD3491FS(i2c)\nbd3491fs.active_input = adafruit_bd3491fs.Input.A\nbd3491fs.input_gain = adafruit_bd3491fs.Level.LEVEL_20DB\nbd3491fs.channel_1_attenuation = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bd3491fs/examples/bd3491fs_simpletest.py",
      "library": "bd3491fs",
      "type": "example",
      "file_name": "bd3491fs_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_bd3491fs\n\nimport adafruit_bd3491fs\ni2c = busio.I2C(board.SCL, board.SDA)\nbd3491fs = adafruit_bd3491fs.BD3491FS(i2c)\nbd3491fs.active_input = adafruit_bd3491fs.Input.A\nbd3491fs.input_gain = adafruit_bd3491fs.Level.LEVEL_20DB\nbd3491fs.channel_1_attenuation = 0\nbd3491fs.channel_2_attenuation = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bd3491fs/examples/bd3491fs_simpletest.py",
      "library": "bd3491fs",
      "type": "example",
      "file_name": "bd3491fs_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_bd3491fs\n\ni2c = busio.I2C(board.SCL, board.SDA)\nbd3491fs = adafruit_bd3491fs.BD3491FS(i2c)\nbd3491fs.active_input = adafruit_bd3491fs.Input.A\nbd3491fs.input_gain = adafruit_bd3491fs.Level.LEVEL_20DB\nbd3491fs.channel_1_attenuation = 0\nbd3491fs.channel_2_attenuation = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bd3491fs/examples/bd3491fs_simpletest.py",
      "library": "bd3491fs",
      "type": "example",
      "file_name": "bd3491fs_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport busio\n\nimport adafruit_bd3491fs\n\ni2c = busio.I2C(board.SCL, board.SDA)\nbd3491fs = adafruit_bd3491fs.BD3491FS(i2c)\n\nbd3491fs.active_input = adafruit_bd3491fs.Input.A\nbd3491fs.input_gain = adafruit_bd3491fs.Level.LEVEL_20DB\nbd3491fs.channel_1_attenuation = 0\nbd3491fs.channel_2_attenuation = 0\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bd3491fs/examples/bd3491fs_simpletest.py",
      "library": "bd3491fs",
      "type": "example",
      "file_name": "bd3491fs_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport adafruit_24lc32\n\nimport board\nimport adafruit_24lc32\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\neeprom = adafruit_24lc32.EEPROM_I2C(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/24lc32/examples/24lc32_simpletest.py",
      "library": "24lc32",
      "type": "example",
      "file_name": "24lc32_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_24lc32\n\nimport adafruit_24lc32\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\neeprom = adafruit_24lc32.EEPROM_I2C(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/24lc32/examples/24lc32_simpletest.py",
      "library": "24lc32",
      "type": "example",
      "file_name": "24lc32_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2021 Tim Cocks for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport board\n\nimport adafruit_24lc32\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\neeprom = adafruit_24lc32.EEPROM_I2C(i2c)\n\nprint(f\"length: {len(eeprom)}\")\n\n# eeprom[0] = 4\n# print(eeprom[0])\n\n# eeprom[0:4] = [9, 3, 8, 1]\n# print(eeprom[0:4])\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/24lc32/examples/24lc32_simpletest.py",
      "library": "24lc32",
      "type": "example",
      "file_name": "24lc32_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import bitmaptools\nimport board\nimport busio\nimport displayio\nimport adafruit_tt21100\n\nimport displayio\nimport adafruit_tt21100\n# Create library object using our Bus I2C & SPI port\ni2c = busio.I2C(board.SCL, board.SDA)\ntt = adafruit_tt21100.TT21100(i2c)\n# Setup a full screen bitmap that we'll modify based on touches\ndisplay = board.DISPLAY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tt21100/examples/tt21100_paint.py",
      "library": "tt21100",
      "type": "example",
      "file_name": "tt21100_paint.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import bitmaptools\nimport board\nimport busio\nimport displayio\nimport adafruit_tt21100\n\nimport adafruit_tt21100\n# Create library object using our Bus I2C & SPI port\ni2c = busio.I2C(board.SCL, board.SDA)\ntt = adafruit_tt21100.TT21100(i2c)\n# Setup a full screen bitmap that we'll modify based on touches\ndisplay = board.DISPLAY\npixels = displayio.Bitmap(display.width, display.height, 4)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tt21100/examples/tt21100_paint.py",
      "library": "tt21100",
      "type": "example",
      "file_name": "tt21100_paint.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import bitmaptools\nimport board\nimport busio\nimport displayio\nimport adafruit_tt21100\n\n# Create library object using our Bus I2C & SPI port\ni2c = busio.I2C(board.SCL, board.SDA)\ntt = adafruit_tt21100.TT21100(i2c)\n# Setup a full screen bitmap that we'll modify based on touches\ndisplay = board.DISPLAY\npixels = displayio.Bitmap(display.width, display.height, 4)\npalette = displayio.Palette(4)\npalette[1] = 0xFF0000\npalette[2] = 0x0000FF",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tt21100/examples/tt21100_paint.py",
      "library": "tt21100",
      "type": "example",
      "file_name": "tt21100_paint.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nfrom adafruit_ili9341 import ILI9341\nimport adafruit_ov2640\n\nimport adafruit_ov2640\nV_MODE = 1.98\nV_RECORD = 2.41\na = analogio.AnalogIn(board.IO6)\n# Release any resources currently in use for the displays",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_sd_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_sd_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nfrom adafruit_ili9341 import ILI9341\nimport adafruit_ov2640\n\na = analogio.AnalogIn(board.IO6)\n# Release any resources currently in use for the displays\nspi = busio.SPI(MOSI=board.LCD_MOSI, clock=board.LCD_CLK)\ndisplay_bus = fourwire.FourWire(\n    spi, command=board.LCD_D_C, chip_select=board.LCD_CS, reset=board.LCD_RST",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_sd_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_sd_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nfrom adafruit_ili9341 import ILI9341\nimport adafruit_ov2640\n\ndisplay_bus = fourwire.FourWire(spi, command=board.LCD_D_C, chip_select=board.LCD_CS, reset=board.LCD_RST)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_sd_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_sd_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nfrom adafruit_ili9341 import ILI9341\nimport adafruit_ov2640\n\ndisplay_bus = fourwire.FourWire(\n    spi, command=board.LCD_D_C, chip_select=board.LCD_CS, reset=board.LCD_RST\ndisplay = ILI9341(display_bus, width=320, height=240, rotation=90)\nbus = busio.I2C(scl=board.CAMERA_SIOC, sda=board.CAMERA_SIOD)\ncam = adafruit_ov2640.OV2640(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_sd_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_sd_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nfrom adafruit_ili9341 import ILI9341\nimport adafruit_ov2640\n\ncam = adafruit_ov2640.OV2640(bus, data_pins=board.CAMERA_DATA, clock=board.CAMERA_PCLK, vsync=board.CAMERA_VSYNC, href=board.CAMERA_HREF, mclk=board.CAMERA_XCLK, mclk_frequency=20000000, size=adafruit_ov2640.OV2640_SIZE_QVGA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_sd_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_sd_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nfrom adafruit_ili9341 import ILI9341\nimport adafruit_ov2640\n\ndisplay.root_group = g\ndisplay.auto_refresh = False\nsd_spi = busio.SPI(clock=board.IO18, MOSI=board.IO14, MISO=board.IO17)\nsd_cs = board.IO12\nsdcard = sdcardio.SDCard(sd_spi, sd_cs)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_sd_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_sd_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nfrom adafruit_ili9341 import ILI9341\nimport adafruit_ov2640\n\ndisplay.root_group = g\ndisplay.auto_refresh = False\nsd_spi = busio.SPI(clock=board.IO18, MOSI=board.IO14, MISO=board.IO17)\nsd_cs = board.IO12\nsdcard = sdcardio.SDCard(sd_spi, sd_cs)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_sd_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_sd_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nfrom adafruit_ili9341 import ILI9341\nimport adafruit_ov2640\n\ndef exists(filename):\n    try:\n        os.stat(filename)\n        return True\n    except OSError:\n        return False\n\n# Usage example:\n        filename = f\"/sd/img{_image_counter:04d}.jpg\"\n        _image_counter += 1\n        if exists(filename):\n            continue\n        print(\"#\", filename)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_sd_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_sd_kaluga1_3.py",
      "chunk_type": "function",
      "function_name": "exists"
    }
  },
  {
    "content": "import os\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nfrom adafruit_ili9341 import ILI9341\nimport adafruit_ov2640\n\ndef open_next_image():\n    global _image_counter\n    while True:\n        filename = f'/sd/img{_image_counter:04d}.jpg'\n        _image_counter += 1\n        if exists(filename):\n            continue\n        print('#', filename)\n        return open(filename, 'wb')\n\n# Usage example:\n\n        print(f\"Captured {len(jpeg)} bytes of jpeg data\")\n        with open_next_image() as f:\n            f.write(jpeg)\n    finally:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_sd_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_sd_kaluga1_3.py",
      "chunk_type": "function",
      "function_name": "open_next_image"
    }
  },
  {
    "content": "import os\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nfrom adafruit_ili9341 import ILI9341\nimport adafruit_ov2640\n\ndef capture_image():\n    old_size = cam.size\n    old_colorspace = cam.colorspace\n    try:\n        cam.size = adafruit_ov2640.OV2640_SIZE_UXGA\n        cam.colorspace = adafruit_ov2640.OV2640_COLOR_JPEG\n        b = bytearray(cam.capture_buffer_size)\n        jpeg = cam.capture(b)\n        print(f'Captured {len(jpeg)} bytes of jpeg data')\n        with open_next_image() as f:\n            f.write(jpeg)\n    finally:\n        cam.size = old_size\n        cam.colorspace = old_colorspace\n\n# Usage example:\n    record_pressed = abs(a_voltage - V_RECORD) < 0.05\n    if record_pressed:\n        capture_image()\n    cam.capture(bitmap)\n    bitmap.dirty()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_sd_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_sd_kaluga1_3.py",
      "chunk_type": "function",
      "function_name": "capture_image"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport digitalio\nimport numpy\nfrom PIL import Image, ImageOps\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\n# Change to match your display\nBUTTON_NEXT = board.D17\nBUTTON_PREVIOUS = board.D22\n# Configuration for CS and DC pins (these are PiTFT defaults):\ncs_pin = digitalio.DigitalInOut(board.CE0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_animated_gif.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_animated_gif.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport digitalio\nimport numpy\nfrom PIL import Image, ImageOps\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\n# Change to match your display\nBUTTON_NEXT = board.D17\nBUTTON_PREVIOUS = board.D22\n# Configuration for CS and DC pins (these are PiTFT defaults):\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_animated_gif.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_animated_gif.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport digitalio\nimport numpy\nfrom PIL import Image, ImageOps\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\n# Change to match your display\nBUTTON_NEXT = board.D17\nBUTTON_PREVIOUS = board.D22\n# Configuration for CS and DC pins (these are PiTFT defaults):\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)\n# Set this to None on the Mini PiTFT\nreset_pin = digitalio.DigitalInOut(board.D24)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_animated_gif.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_animated_gif.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport digitalio\nimport numpy\nfrom PIL import Image, ImageOps\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\nBUTTON_NEXT = board.D17\nBUTTON_PREVIOUS = board.D22\n# Configuration for CS and DC pins (these are PiTFT defaults):\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)\n# Set this to None on the Mini PiTFT\nreset_pin = digitalio.DigitalInOut(board.D24)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_animated_gif.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_animated_gif.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport digitalio\nimport numpy\nfrom PIL import Image, ImageOps\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\n# Configuration for CS and DC pins (these are PiTFT defaults):\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)\n# Set this to None on the Mini PiTFT\nreset_pin = digitalio.DigitalInOut(board.D24)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_animated_gif.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_animated_gif.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport digitalio\nimport numpy\nfrom PIL import Image, ImageOps\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\ndef init_button(pin):\n    button = digitalio.DigitalInOut(pin)\n    button.switch_to_input()\n    button.pull = digitalio.Pull.UP\n    return button\n\n# Usage example:\n            self._height = display.height\n        self.display = display\n        self.advance_button = init_button(BUTTON_NEXT)\n        self.back_button = init_button(BUTTON_PREVIOUS)\n        if folder is not None:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_animated_gif.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_animated_gif.py",
      "chunk_type": "function",
      "function_name": "init_button"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport digitalio\nimport numpy\nfrom PIL import Image, ImageOps\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\nclass Frame:\n\n    def __init__(self, duration=0):\n        self.duration = duration\n        self.image = None\n\n# Usage example:\n\n\nclass Frame:\n    def __init__(self, duration=0):\n        self.duration = duration",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_animated_gif.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_animated_gif.py",
      "chunk_type": "function",
      "function_name": "Frame"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport digitalio\nimport numpy\nfrom PIL import Image, ImageOps\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\nclass AnimatedGif:\n\n    def __init__(self, display, width=None, height=None, folder=None):\n        self._frame_count = 0\n        self._loop = 0\n        self._index = 0\n        self._duration = 0\n        self._gif_files = []\n        self._frames = []\n        if width is not None:\n            self._width = width\n        else:\n            self._width = display.width\n        if height is not None:\n            self._height = height\n        else:\n            self._height = display.height\n        self.display = display\n        self.advance_button = init_button(BUTTON_NEXT)\n        self.back_button = init_button(BUTTON_PREVIOUS)\n        if folder is not None:\n            self.load_files(folder)\n            self.run()\n\n    def advance(self):\n        self._index = (self._index + 1) % len(self._gif_files)\n\n    def back(self):\n        self._index = (self._index - 1 + len(self._gif_files)) % len(self._gif_files)\n\n    def load_files(self, folder):\n        gif_files = [f for f in os.listdir(folder) if f.endswith('.gif')]\n        for gif_file in gif_files:\n            gif_file = os.path.join(folder, gif_file)\n            image = Image.open(gif_file)\n            if image.is_animated:\n                self._gif_files.append(gif_file)\n        print('Found', self._gif_files)\n        if not self._gif_files:\n            print('No Gif files found in current folder')\n            exit()\n\n    def preload(self):\n        image = Image.open(self._gif_files[self._index])\n        print(f'Loading {self._gif_files[self._index]}...')\n        if 'duration' in image.info:\n            self._duration = image.info['duration']\n        else:\n            self._duration = 0\n        if 'loop' in image.info:\n            self._loop = image.info['loop']\n        else:\n            self._loop = 1\n        self._frame_count = image.n_frames\n        self._frames.clear()\n        for frame in range(self._frame_count):\n            image.seek(frame)\n            frame_object = Frame(duration=self._duration)\n            if 'duration' in image.info:\n                frame_object.duration = image.info['duration']\n            frame_object.image = ImageOps.pad(image.convert('RGB'), (self._width, self._height), method=Image.NEAREST, color=(0, 0, 0), centering=(0.5, 0.5))\n            self._frames.append(frame_object)\n\n    def play(self):\n        self.preload()\n        _prev_advance_btn_val = self.advance_button.value\n        _prev_back_btn_val = self.back_button.value\n        if not self._gif_files:\n            print('There are no Gif Images loaded to Play')\n            return False\n        while True:\n            for frame_object in self._frames:\n                start_time = time.monotonic()\n                self.display.image(frame_object.image)\n                _cur_advance_btn_val = self.advance_button.value\n                _cur_back_btn_val = self.back_button.value\n                if not _cur_advance_btn_val and _prev_advance_btn_val:\n                    self.advance()\n                    return False\n                if not _cur_back_btn_val and _prev_back_btn_val:\n                    self.back()\n                    return False\n                _prev_back_btn_val = _cur_back_btn_val\n                _prev_advance_btn_val = _cur_advance_btn_val\n                while time.monotonic() < start_time + frame_object.duration / 1000:\n                    pass\n            if self._loop == 1:\n                return True\n            if self._loop > 0:\n                self._loop -= 1\n\n    def run(self):\n        while True:\n            auto_advance = self.play()\n            if auto_advance:\n                self.advance()\n\n# Usage example:\n\n\nclass AnimatedGif:\n    def __init__(self, display, width=None, height=None, folder=None):\n        self._frame_count = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_animated_gif.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_animated_gif.py",
      "chunk_type": "function",
      "function_name": "AnimatedGif"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport digitalio\nimport numpy\nfrom PIL import Image, ImageOps\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\n# Config for display baudrate (default max is 64mhz):\nBAUDRATE = 64000000\n# Setup SPI bus using hardware SPI:\nspi = board.SPI()\n# Create the display:\n# disp = st7789.ST7789(spi, rotation=90,                            # 2.0\" ST7789\n# disp = st7789.ST7789(spi, height=240, y_offset=80, rotation=180,  # 1.3\", 1.54\" ST7789",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_animated_gif.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_animated_gif.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ltr390\n\nimport board\nimport adafruit_ltr390\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nltr = adafruit_ltr390.LTR390(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ltr390/examples/ltr390_simpletest.py",
      "library": "ltr390",
      "type": "example",
      "file_name": "ltr390_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ltr390\n\nimport adafruit_ltr390\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nltr = adafruit_ltr390.LTR390(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ltr390/examples/ltr390_simpletest.py",
      "library": "ltr390",
      "type": "example",
      "file_name": "ltr390_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 by Bryan Siepert, written for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\nimport time\n\nimport board\n\nimport adafruit_ltr390\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nltr = adafruit_ltr390.LTR390(i2c)\n\nwhile True:\n    print(\"UV:\", ltr.uvs, \"\\t\\tAmbient Light:\", ltr.light)\n    print(\"UVI:\", ltr.uvi, \"\\t\\tLux:\", ltr.lux)\n    time.sleep(1.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ltr390/examples/ltr390_simpletest.py",
      "library": "ltr390",
      "type": "example",
      "file_name": "ltr390_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_matrixkeypad\n\nimport digitalio\nimport adafruit_matrixkeypad\n# Membrane 3x4 matrix keypad - https://www.adafruit.com/product/419\ncols = [digitalio.DigitalInOut(x) for x in (board.D9, board.D6, board.D5)]\nrows = [digitalio.DigitalInOut(x) for x in (board.D13, board.D12, board.D11, board.D10)]\n# 3x4 matrix keypad - Rows and columns are mixed up for https://www.adafruit.com/product/3845\n# Use the same wiring as in the guide with the following setup lines:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/matrixkeypad/examples/matrixkeypad_simpletest.py",
      "library": "matrixkeypad",
      "type": "example",
      "file_name": "matrixkeypad_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_matrixkeypad\n\nimport adafruit_matrixkeypad\n# Membrane 3x4 matrix keypad - https://www.adafruit.com/product/419\ncols = [digitalio.DigitalInOut(x) for x in (board.D9, board.D6, board.D5)]\nrows = [digitalio.DigitalInOut(x) for x in (board.D13, board.D12, board.D11, board.D10)]\n# 3x4 matrix keypad - Rows and columns are mixed up for https://www.adafruit.com/product/3845\n# Use the same wiring as in the guide with the following setup lines:\n# cols = [digitalio.DigitalInOut(x) for x in (board.D11, board.D13, board.D9)]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/matrixkeypad/examples/matrixkeypad_simpletest.py",
      "library": "matrixkeypad",
      "type": "example",
      "file_name": "matrixkeypad_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_matrixkeypad\n\n# cols = [digitalio.DigitalInOut(x) for x in (board.D11, board.D13, board.D9)]\n# rows = [digitalio.DigitalInOut(x) for x in (board.D12, board.D5, board.D6, board.D10)]\nkeys = ((1, 2, 3), (4, 5, 6), (7, 8, 9), (\"*\", 0, \"#\"))\nkeypad = adafruit_matrixkeypad.Matrix_Keypad(rows, cols, keys)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/matrixkeypad/examples/matrixkeypad_simpletest.py",
      "library": "matrixkeypad",
      "type": "example",
      "file_name": "matrixkeypad_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport digitalio\n\nimport adafruit_matrixkeypad\n\n# Membrane 3x4 matrix keypad - https://www.adafruit.com/product/419\ncols = [digitalio.DigitalInOut(x) for x in (board.D9, board.D6, board.D5)]\nrows = [digitalio.DigitalInOut(x) for x in (board.D13, board.D12, board.D11, board.D10)]\n\n# 3x4 matrix keypad - Rows and columns are mixed up for https://www.adafruit.com/product/3845\n# Use the same wiring as in the guide with the following setup lines:\n# cols = [digitalio.DigitalInOut(x) for x in (board.D11, board.D13, board.D9)]\n# rows = [digitalio.DigitalInOut(x) for x in (board.D12, board.D5, board.D6, board.D10)]\n\nkeys = ((1, 2, 3), (4, 5, 6), (7, 8, 9), (\"*\", 0, \"#\"))\n\nkeypad = adafruit_matrixkeypad.Matrix_Keypad(rows, cols, keys)\n\nwhile True:\n    keys = keypad.pressed_keys\n    if keys:\n        print(\"Pressed: \", keys)\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/matrixkeypad/examples/matrixkeypad_simpletest.py",
      "library": "matrixkeypad",
      "type": "example",
      "file_name": "matrixkeypad_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_il0398\n\nimport adafruit_il0398\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0398/examples/il0398_simpletest.py",
      "library": "il0398",
      "type": "example",
      "file_name": "il0398_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_il0398\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0398/examples/il0398_simpletest.py",
      "library": "il0398",
      "type": "example",
      "file_name": "il0398_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_il0398\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0398/examples/il0398_simpletest.py",
      "library": "il0398",
      "type": "example",
      "file_name": "il0398_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_il0398\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0398/examples/il0398_simpletest.py",
      "library": "il0398",
      "type": "example",
      "file_name": "il0398_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_il0398\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0398/examples/il0398_simpletest.py",
      "library": "il0398",
      "type": "example",
      "file_name": "il0398_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_il0398\n\ndisplay = adafruit_il0398.IL0398(display_bus, width=400, height=300, seconds_per_frame=20, busy_pin=epd_busy)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0398/examples/il0398_simpletest.py",
      "library": "il0398",
      "type": "example",
      "file_name": "il0398_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2022 Alec Delaney for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport ssl\nfrom os import getenv\n\nimport adafruit_requests as requests\nimport socketpool\nimport wifi\n\nfrom adafruit_pastebin.pastebin import ExpirationSetting, PasteBin, PrivacySetting\n\n# Get WiFi details and PasteBin keys, ensure these are setup in settings.toml\nssid = getenv(\"CIRCUITPY_WIFI_SSID\")\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\nauth_key = getenv(\"auth_key\")\n\nwifi.radio.connect(ssid, password)\npool = socketpool.SocketPool(wifi.radio)\nsession = requests.Session(pool, ssl.create_default_context())\n\npastebin = PasteBin(session, auth_key)\npaste_url = pastebin.paste(\n    \"This is a test paste!\",\n    name=\"My Test Paste\",\n    expiration=ExpirationSetting.ONE_DAY,\n    privacy=PrivacySetting.UNLISTED,\n)\nprint(paste_url)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pastebin/examples/pastebin_simpletest.py",
      "library": "pastebin",
      "type": "example",
      "file_name": "pastebin_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_displayio_ssd1305\n\nimport adafruit_displayio_ssd1305\n# Reset is usedfor both SPI and I2C\noled_reset = board.D9\n# Use for SPI\nspi = board.SPI()\noled_cs = board.D5",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_ssd1305/examples/displayio_ssd1305_simpletest.py",
      "library": "displayio_ssd1305",
      "type": "example",
      "file_name": "displayio_ssd1305_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_displayio_ssd1305\n\n# Reset is usedfor both SPI and I2C\noled_reset = board.D9\n# Use for SPI\nspi = board.SPI()\noled_cs = board.D5\noled_dc = board.D6\ndisplay_bus = FourWire(\n    spi, command=oled_dc, chip_select=oled_cs, baudrate=1000000, reset=oled_reset",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_ssd1305/examples/displayio_ssd1305_simpletest.py",
      "library": "displayio_ssd1305",
      "type": "example",
      "file_name": "displayio_ssd1305_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_displayio_ssd1305\n\n# Reset is usedfor both SPI and I2C\noled_reset = board.D9\n# Use for SPI\nspi = board.SPI()\noled_cs = board.D5\noled_dc = board.D6\ndisplay_bus = FourWire(\n    spi, command=oled_dc, chip_select=oled_cs, baudrate=1000000, reset=oled_reset",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_ssd1305/examples/displayio_ssd1305_simpletest.py",
      "library": "displayio_ssd1305",
      "type": "example",
      "file_name": "displayio_ssd1305_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_displayio_ssd1305\n\noled_reset = board.D9\n# Use for SPI\nspi = board.SPI()\noled_cs = board.D5\noled_dc = board.D6\ndisplay_bus = FourWire(\n    spi, command=oled_dc, chip_select=oled_cs, baudrate=1000000, reset=oled_reset",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_ssd1305/examples/displayio_ssd1305_simpletest.py",
      "library": "displayio_ssd1305",
      "type": "example",
      "file_name": "displayio_ssd1305_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_displayio_ssd1305\n\nWIDTH = 128\nHEIGHT = 64  # Change to 32 if needed\nBORDER = 8\nFONTSCALE = 1\ndisplay = adafruit_displayio_ssd1305.SSD1305(display_bus, width=WIDTH, height=HEIGHT)\n# Make the display context\nsplash = displayio.Group()\ndisplay.root_group = splash",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_ssd1305/examples/displayio_ssd1305_simpletest.py",
      "library": "displayio_ssd1305",
      "type": "example",
      "file_name": "displayio_ssd1305_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_jwt\n\nencoded_jwt = adafruit_jwt.JWT.generate(claims, private_key, algo='RS256')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/jwt/examples/jwt_simpletest.py",
      "library": "jwt",
      "type": "example",
      "file_name": "jwt_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_jwt\n\nencoded_jwt = adafruit_jwt.JWT.generate(claims, private_key, algo=\"RS256\")\n# Validate a provided JWT\ndecoded_jwt = adafruit_jwt.JWT.validate(encoded_jwt)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/jwt/examples/jwt_simpletest.py",
      "library": "jwt",
      "type": "example",
      "file_name": "jwt_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nfrom os import getenv\n\nimport adafruit_jwt\n\n# Get private RSA key from a settings.toml file\nprivate_key = getenv(\"private_key\")\n\n# Run jwt_simpletest_secrets.py to generate the private key\nif not private_key:\n    raise KeyError(\"Run jwt_simpletest_secrets.py to generate the private key!\")\n\n# Sample JWT Claims\nclaims = {\"iss\": \"joe\", \"exp\": 1300819380, \"name\": \"John Doe\", \"admin\": True}\n\n# Generate a JWT\nprint(\"Generating JWT...\")\nencoded_jwt = adafruit_jwt.JWT.generate(claims, private_key, algo=\"RS256\")\nprint(\"Encoded JWT: \", encoded_jwt)\n\n# Validate a provided JWT\nprint(\"Decoding JWT...\")\ndecoded_jwt = adafruit_jwt.JWT.validate(encoded_jwt)\nprint(f\"JOSE Header: {decoded_jwt[0]}\\nJWT Claims: {decoded_jwt[1]}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/jwt/examples/jwt_simpletest.py",
      "library": "jwt",
      "type": "example",
      "file_name": "jwt_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_as5600\n\nimport board\nimport adafruit_as5600\n# Initialize I2C and AS5600\ni2c = board.I2C()  # uses board.SCL and board.SDA\nas5600 = adafruit_as5600.AS5600(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/as5600/examples/as5600_fulltest.py",
      "library": "as5600",
      "type": "example",
      "file_name": "as5600_fulltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_as5600\n\nimport adafruit_as5600\n# Initialize I2C and AS5600\ni2c = board.I2C()  # uses board.SCL and board.SDA\nas5600 = adafruit_as5600.AS5600(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/as5600/examples/as5600_fulltest.py",
      "library": "as5600",
      "type": "example",
      "file_name": "as5600_fulltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_scd4x\n\nimport adafruit_scd4x\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector\nscd4x = adafruit_scd4x.SCD4X(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/scd4x/examples/scd4x_displayio_simpletest.py",
      "library": "scd4x",
      "type": "example",
      "file_name": "scd4x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_scd4x\n\nimport adafruit_scd4x\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector\nscd4x = adafruit_scd4x.SCD4X(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/scd4x/examples/scd4x_displayio_simpletest.py",
      "library": "scd4x",
      "type": "example",
      "file_name": "scd4x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_scd4x\n\n# Put sensor into working mode, one measurement every 5s\n# Example written for boards with built-in displays\ndisplay = board.DISPLAY\n# Create a main_group to hold anything we want to show on the display.\nmain_group = Group()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/scd4x/examples/scd4x_displayio_simpletest.py",
      "library": "scd4x",
      "type": "example",
      "file_name": "scd4x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_fancyled.adafruit_fancyled as fancy\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_espatcontrol import adafruit_espatcontrol, adafruit_espatcontrol_wifimanager\n\nesp = adafruit_espatcontrol.ESP_ATcontrol(uart, 115200, reset_pin=resetpin, rts_pin=rtspin, debug=debugflag)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_cheerlights.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_cheerlights.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_fancyled.adafruit_fancyled as fancy\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_espatcontrol import adafruit_espatcontrol, adafruit_espatcontrol_wifimanager\n\nesp = adafruit_espatcontrol.ESP_ATcontrol(\n    uart, 115200, reset_pin=resetpin, rts_pin=rtspin, debug=debugflag\nwifi = adafruit_espatcontrol_wifimanager.ESPAT_WiFiManager(esp, secrets, status_light)\nDATA_SOURCE = \"https://api.thingspeak.com/channels/1417/feeds.json?results=1\"\nDATA_LOCATION = [\"feeds\", 0, \"field2\"]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_cheerlights.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_cheerlights.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_fancyled.adafruit_fancyled as fancy\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_espatcontrol import adafruit_espatcontrol, adafruit_espatcontrol_wifimanager\n\nDATA_SOURCE = \"https://api.thingspeak.com/channels/1417/feeds.json?results=1\"\nDATA_LOCATION = [\"feeds\", 0, \"field2\"]\n# Setup and Clear neopixels\npixels = neopixel.NeoPixel(pixel_pin, num_pixels, brightness=0.3)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_cheerlights.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_cheerlights.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_dht\n\nimport board\nimport adafruit_dht\n# Initial the dht device, with data pin connected to:\ndhtDevice = adafruit_dht.DHT22(board.D18)\n# you can pass DHT22 use_pulseio=False if you wouldn't like to use pulseio.\n# This may be necessary on a Linux single board computer like the Raspberry Pi,\n# but it will not work in CircuitPython.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dht/examples/dht_simpletest.py",
      "library": "dht",
      "type": "example",
      "file_name": "dht_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_tsl2591\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = adafruit_tsl2591.TSL2591(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tsl2591/examples/tsl2591_displayio_simpletest.py",
      "library": "tsl2591",
      "type": "example",
      "file_name": "tsl2591_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_tsl2591\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = adafruit_tsl2591.TSL2591(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.\nlight_output_label = Label(FONT, text=\"\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tsl2591/examples/tsl2591_displayio_simpletest.py",
      "library": "tsl2591",
      "type": "example",
      "file_name": "tsl2591_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_tsl2591\n\nlight_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tsl2591/examples/tsl2591_displayio_simpletest.py",
      "library": "tsl2591",
      "type": "example",
      "file_name": "tsl2591_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_tsl2591\n\ninfra_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 30)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tsl2591/examples/tsl2591_displayio_simpletest.py",
      "library": "tsl2591",
      "type": "example",
      "file_name": "tsl2591_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_tsl2591\n\n# add the label(s) to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tsl2591/examples/tsl2591_displayio_simpletest.py",
      "library": "tsl2591",
      "type": "example",
      "file_name": "tsl2591_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom PIL import Image\nfrom adafruit_ht16k33 import matrix\n\n# Import the HT16K33 LED matrix module.\n# Create the I2C interface.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create the matrix class.\n# This creates a 16x8 matrix:\nmtrx = matrix.Matrix16x8(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ht16k33/examples/ht16k33_matrix_pillow_image.py",
      "library": "ht16k33",
      "type": "example",
      "file_name": "ht16k33_matrix_pillow_image.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.EPD_SCK, MOSI=board.EPD_MOSI, MISO=None)\nepd_cs = digitalio.DigitalInOut(board.EPD_CS)\nepd_dc = digitalio.DigitalInOut(board.EPD_DC)\nepd_reset = digitalio.DigitalInOut(board.EPD_RESET)\nepd_busy = digitalio.DigitalInOut(board.EPD_BUSY)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/feather_epd_blinka_pillow.py",
      "library": "epd",
      "type": "example",
      "file_name": "feather_epd_blinka_pillow.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.EPD_SCK, MOSI=board.EPD_MOSI, MISO=None)\nepd_cs = digitalio.DigitalInOut(board.EPD_CS)\nepd_dc = digitalio.DigitalInOut(board.EPD_DC)\nepd_reset = digitalio.DigitalInOut(board.EPD_RESET)\nepd_busy = digitalio.DigitalInOut(board.EPD_BUSY)\nsrcs = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/feather_epd_blinka_pillow.py",
      "library": "epd",
      "type": "example",
      "file_name": "feather_epd_blinka_pillow.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.EPD_SCK, MOSI=board.EPD_MOSI, MISO=None)\nepd_cs = digitalio.DigitalInOut(board.EPD_CS)\nepd_dc = digitalio.DigitalInOut(board.EPD_DC)\nepd_reset = digitalio.DigitalInOut(board.EPD_RESET)\nepd_busy = digitalio.DigitalInOut(board.EPD_BUSY)\nsrcs = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/feather_epd_blinka_pillow.py",
      "library": "epd",
      "type": "example",
      "file_name": "feather_epd_blinka_pillow.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.EPD_SCK, MOSI=board.EPD_MOSI, MISO=None)\nepd_cs = digitalio.DigitalInOut(board.EPD_CS)\nepd_dc = digitalio.DigitalInOut(board.EPD_DC)\nepd_reset = digitalio.DigitalInOut(board.EPD_RESET)\nepd_busy = digitalio.DigitalInOut(board.EPD_BUSY)\nsrcs = None\ndisplay = Adafruit_SSD1680(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/feather_epd_blinka_pillow.py",
      "library": "epd",
      "type": "example",
      "file_name": "feather_epd_blinka_pillow.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.EPD_SCK, MOSI=board.EPD_MOSI, MISO=None)\nepd_cs = digitalio.DigitalInOut(board.EPD_CS)\nepd_dc = digitalio.DigitalInOut(board.EPD_DC)\nepd_reset = digitalio.DigitalInOut(board.EPD_RESET)\nepd_busy = digitalio.DigitalInOut(board.EPD_BUSY)\nsrcs = None\ndisplay = Adafruit_SSD1680(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/feather_epd_blinka_pillow.py",
      "library": "epd",
      "type": "example",
      "file_name": "feather_epd_blinka_pillow.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nimport busio\nfrom board import SCL, SDA\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1306\n\nimport adafruit_ssd1306\n# Create the I2C interface.\ni2c = busio.I2C(SCL, SDA)\n# Create the SSD1306 OLED class.\n# The first two parameters are the pixel width and pixel height.\n# Change these to the right size for your display!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_pillow_animate.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_pillow_animate.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nimport busio\nfrom board import SCL, SDA\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1306\n\ni2c = busio.I2C(SCL, SDA)\n# Create the SSD1306 OLED class.\n# The first two parameters are the pixel width and pixel height.\n# Change these to the right size for your display!\ndisp = adafruit_ssd1306.SSD1306_I2C(128, 32, i2c)\n# Note you can change the I2C address, or add a reset pin:\n# disp = adafruit_ssd1306.SSD1306_I2C(128, 32, i2c, addr=0x3c, reset=reset_pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_pillow_animate.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_pillow_animate.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_pcf8574\n\nimport adafruit_pcf8574\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8574.PCF8574(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8574/examples/pcf8574_blink8outputs.py",
      "library": "pcf8574",
      "type": "example",
      "file_name": "pcf8574_blink8outputs.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_pcf8574\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8574.PCF8574(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8574/examples/pcf8574_blink8outputs.py",
      "library": "pcf8574",
      "type": "example",
      "file_name": "pcf8574_blink8outputs.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2017 Scott Shawcroft, written for Adafruit Industries\n# SPDX-FileCopyrightText: Copyright (c) 2022 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\n\nimport adafruit_pcf8574\n\nprint(\"PCF8574 8 output LED blink test\")\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8574.PCF8574(i2c)\n\n\nwhile True:\n    pcf.write_gpio(0x55)  # set every other pun high\n    time.sleep(0.2)\n    pcf.write_gpio(0xAA)  # toggle high/low pins\n    time.sleep(0.2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8574/examples/pcf8574_blink8outputs.py",
      "library": "pcf8574",
      "type": "example",
      "file_name": "pcf8574_blink8outputs.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_miniesptool\n\n# uart = busio.UART(TX, RX, baudrate=115200, timeout=1)\n# resetpin = DigitalInOut(board.D5)\n# gpio0pin = DigitalInOut(board.D6)\n# With a Particle Argon, we need to also turn off flow control\nuart = busio.UART(board.ESP_RX, board.ESP_TX, baudrate=115200, timeout=1)\nresetpin = DigitalInOut(board.ESP_WIFI_EN)\ngpio0pin = DigitalInOut(board.ESP_BOOT_MODE)\nesp_cts = DigitalInOut(board.ESP_CTS)\nesp_cts.direction = Direction.OUTPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniesptool/examples/miniesptool_esp32argon.py",
      "library": "miniesptool",
      "type": "example",
      "file_name": "miniesptool_esp32argon.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_miniesptool\n\n# resetpin = DigitalInOut(board.D5)\n# gpio0pin = DigitalInOut(board.D6)\n# With a Particle Argon, we need to also turn off flow control\nuart = busio.UART(board.ESP_RX, board.ESP_TX, baudrate=115200, timeout=1)\nresetpin = DigitalInOut(board.ESP_WIFI_EN)\ngpio0pin = DigitalInOut(board.ESP_BOOT_MODE)\nesp_cts = DigitalInOut(board.ESP_CTS)\nesp_cts.direction = Direction.OUTPUT\nesp_cts.value = False",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniesptool/examples/miniesptool_esp32argon.py",
      "library": "miniesptool",
      "type": "example",
      "file_name": "miniesptool_esp32argon.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_miniesptool\n\n# gpio0pin = DigitalInOut(board.D6)\n# With a Particle Argon, we need to also turn off flow control\nuart = busio.UART(board.ESP_RX, board.ESP_TX, baudrate=115200, timeout=1)\nresetpin = DigitalInOut(board.ESP_WIFI_EN)\ngpio0pin = DigitalInOut(board.ESP_BOOT_MODE)\nesp_cts = DigitalInOut(board.ESP_CTS)\nesp_cts.direction = Direction.OUTPUT\nesp_cts.value = False",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniesptool/examples/miniesptool_esp32argon.py",
      "library": "miniesptool",
      "type": "example",
      "file_name": "miniesptool_esp32argon.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_miniesptool\n\n# With a Particle Argon, we need to also turn off flow control\nuart = busio.UART(board.ESP_RX, board.ESP_TX, baudrate=115200, timeout=1)\nresetpin = DigitalInOut(board.ESP_WIFI_EN)\ngpio0pin = DigitalInOut(board.ESP_BOOT_MODE)\nesp_cts = DigitalInOut(board.ESP_CTS)\nesp_cts.direction = Direction.OUTPUT\nesp_cts.value = False\nesptool = adafruit_miniesptool.miniesptool(uart, gpio0pin, resetpin, flashsize=4 * 1024 * 1024)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniesptool/examples/miniesptool_esp32argon.py",
      "library": "miniesptool",
      "type": "example",
      "file_name": "miniesptool_esp32argon.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_miniesptool\n\ngpio0pin = DigitalInOut(board.ESP_BOOT_MODE)\nesp_cts = DigitalInOut(board.ESP_CTS)\nesp_cts.direction = Direction.OUTPUT\nesp_cts.value = False\nesptool = adafruit_miniesptool.miniesptool(uart, gpio0pin, resetpin, flashsize=4 * 1024 * 1024)\nesptool.debug = False",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniesptool/examples/miniesptool_esp32argon.py",
      "library": "miniesptool",
      "type": "example",
      "file_name": "miniesptool_esp32argon.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom time import sleep\nimport board\nfrom adafruit_opt4048 import OPT4048, ConversionTime, Mode, Range\n\nREAD_INTERVAL = 0.1  # seconds\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = OPT4048(i2c)\nsensor.range = Range.AUTO",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/opt4048/examples/opt4048_webserial.py",
      "library": "opt4048",
      "type": "example",
      "file_name": "opt4048_webserial.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_touchscreen\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_button import Button\n\n# use built in display (MagTag, PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\n# --| Button Config |-------------------------------------------------\nBUTTON_X = 110\nBUTTON_Y = 95",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-button/examples/display_button_color_properties.py",
      "library": "display-button",
      "type": "example",
      "file_name": "display_button_color_properties.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_touchscreen\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_button import Button\n\nts = adafruit_touchscreen.Touchscreen(board.TOUCH_XL, board.TOUCH_XR, board.TOUCH_YD, board.TOUCH_YU, calibration=((5200, 59000), (5800, 57000)), size=(display.width, display.height))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-button/examples/display_button_color_properties.py",
      "library": "display-button",
      "type": "example",
      "file_name": "display_button_color_properties.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_vcnl4020\n\nimport board\nimport adafruit_vcnl4020\ni2c = board.I2C()\n# Initialize VCNL4020\nsensor = adafruit_vcnl4020.Adafruit_VCNL4020(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4020/examples/vcnl4020_simpletest.py",
      "library": "vcnl4020",
      "type": "example",
      "file_name": "vcnl4020_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_vcnl4020\n\nimport adafruit_vcnl4020\ni2c = board.I2C()\n# Initialize VCNL4020\nsensor = adafruit_vcnl4020.Adafruit_VCNL4020(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4020/examples/vcnl4020_simpletest.py",
      "library": "vcnl4020",
      "type": "example",
      "file_name": "vcnl4020_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2023 Liz Clark for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# Simple demo to read ambient light/lux\n# and proximity data from VCNL4020 over I2C\n\nimport time\n\nimport board\n\nimport adafruit_vcnl4020\n\ni2c = board.I2C()\n\n# Initialize VCNL4020\nsensor = adafruit_vcnl4020.Adafruit_VCNL4020(i2c)\n\nwhile True:\n    print(f\"Proximity is: {sensor.proximity}\")\n    print(f\"Ambient is: {sensor.lux}\")\n    # uncomment print statement below to log to Mu plotter\n    # print((sensor.proximity, sensor.lux,))\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4020/examples/vcnl4020_simpletest.py",
      "library": "vcnl4020",
      "type": "example",
      "file_name": "vcnl4020_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport adafruit_lsm303_accel\n\nimport board\nimport adafruit_lsm303_accel\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lsm303_accel.LSM303_Accel(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303-accel/examples/lsm303_accel_fast.py",
      "library": "lsm303-accel",
      "type": "example",
      "file_name": "lsm303_accel_fast.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_lsm303_accel\n\nimport adafruit_lsm303_accel\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lsm303_accel.LSM303_Accel(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303-accel/examples/lsm303_accel_fast.py",
      "library": "lsm303-accel",
      "type": "example",
      "file_name": "lsm303_accel_fast.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Read data from the accelerometer and print it out, ASAP!\"\"\"\n\nimport board\n\nimport adafruit_lsm303_accel\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lsm303_accel.LSM303_Accel(i2c)\n\nwhile True:\n    accel_x, accel_y, accel_z = sensor.acceleration\n    print(f\"{accel_x:10.3f} {accel_y:10.3f} {accel_z:10.3f}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303-accel/examples/lsm303_accel_fast.py",
      "library": "lsm303-accel",
      "type": "example",
      "file_name": "lsm303_accel_fast.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport digitalio\nfrom adafruit_rgb_display import hx8357\nfrom adafruit_rgb_display.rgb import color565\n\n# Configuration for CS and DC pins (these are TFT FeatherWing defaults):\ncs_pin = digitalio.DigitalInOut(board.D9)\ndc_pin = digitalio.DigitalInOut(board.D10)\n# Config for display baudrate (default max is 24mhz):\nBAUDRATE = 24000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_hx8357test.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_hx8357test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport digitalio\nfrom adafruit_rgb_display import hx8357\nfrom adafruit_rgb_display.rgb import color565\n\n# Configuration for CS and DC pins (these are TFT FeatherWing defaults):\ncs_pin = digitalio.DigitalInOut(board.D9)\ndc_pin = digitalio.DigitalInOut(board.D10)\n# Config for display baudrate (default max is 24mhz):\nBAUDRATE = 24000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_hx8357test.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_hx8357test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport digitalio\nfrom adafruit_rgb_display import hx8357\nfrom adafruit_rgb_display.rgb import color565\n\n# Config for display baudrate (default max is 24mhz):\nBAUDRATE = 24000000\n# Setup SPI bus using hardware SPI:\nspi = board.SPI()\n# Create the HX8357 display:\ndisplay = hx8357.HX8357(spi, cs=cs_pin, dc=dc_pin, baudrate=BAUDRATE)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_hx8357test.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_hx8357test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_msa3xx import MSA311\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmsa = MSA311(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/msa301/examples/msa311_simpletest.py",
      "library": "msa301",
      "type": "example",
      "file_name": "msa311_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nfrom adafruit_msa3xx import MSA311\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmsa = MSA311(i2c)\n\nwhile True:\n    print(\"{} {} {}\".format(*msa.acceleration))\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/msa301/examples/msa311_simpletest.py",
      "library": "msa301",
      "type": "example",
      "file_name": "msa311_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nfrom adafruit_led_animation.animation.blink import Blink\nfrom adafruit_led_animation.animation.chase import Chase\nfrom adafruit_led_animation.animation.colorcycle import ColorCycle\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_led_animation.animation.customcolorchase import CustomColorChase\nfrom adafruit_led_animation.animation.pulse import Pulse\nfrom adafruit_led_animation.animation.rainbow import Rainbow\nfrom adafruit_led_animation.animation.rainbowchase import RainbowChase\nfrom adafruit_led_animation.animation.rainbowcomet import RainbowComet\nfrom adafruit_led_animation.animation.rainbowsparkle import RainbowSparkle\nfrom adafruit_led_animation.animation.solid import Solid\nfrom adafruit_led_animation.animation.sparkle import Sparkle\nfrom adafruit_led_animation.animation.sparklepulse import SparklePulse\nfrom adafruit_led_animation.color import AMBER, JADE, MAGENTA, ORANGE, PURPLE, WHITE\nfrom adafruit_led_animation.sequence import AnimationSequence\nfrom adafruit_is31fl3741 import PREFER_BUFFER\nfrom adafruit_is31fl3741.adafruit_rgbmatrixqt import Adafruit_RGBMatrixQT\nfrom adafruit_is31fl3741.is31fl3741_pixelbuf import IS31FL3741_PixelBuf\n\n# i2c = board.I2C()\ni2c = board.STEMMA_I2C()\n########################################################################\n# Instantiate the nice IS31FL3741\n########################################################################",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3741/examples/is31fl3741_rgbmatrix_all_animations.py",
      "library": "is31fl3741",
      "type": "example",
      "file_name": "is31fl3741_rgbmatrix_all_animations.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_fxas21002c\n\nimport board\nimport adafruit_fxas21002c\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_fxas21002c.FXAS21002C(i2c)\n# Optionally create the sensor with a different gyroscope range (the\n# default is 250 DPS, but you can use 500, 1000, or 2000 DPS values):",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fxas21002c/examples/fxas21002c_simpletest.py",
      "library": "fxas21002c",
      "type": "example",
      "file_name": "fxas21002c_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_fxas21002c\n\nimport adafruit_fxas21002c\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_fxas21002c.FXAS21002C(i2c)\n# Optionally create the sensor with a different gyroscope range (the\n# default is 250 DPS, but you can use 500, 1000, or 2000 DPS values):\n# sensor = adafruit_fxas21002c.FXAS21002C(i2c, gyro_range=adafruit_fxas21002c.GYRO_RANGE_500DPS)\n# sensor = adafruit_fxas21002c.FXAS21002C(i2c, gyro_range=adafruit_fxas21002c.GYRO_RANGE_1000DPS)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fxas21002c/examples/fxas21002c_simpletest.py",
      "library": "fxas21002c",
      "type": "example",
      "file_name": "fxas21002c_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ili9341\nimport board\nimport displayio\nimport fourwire\nimport adafruit_imageload\n\nimport displayio\nimport fourwire\nimport adafruit_imageload\nspi = board.SPI()\ntft_cs = board.D9\ntft_dc = board.D10",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_netpbm.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_netpbm.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ili9341\nimport board\nimport displayio\nimport fourwire\nimport adafruit_imageload\n\nimport fourwire\nimport adafruit_imageload\nspi = board.SPI()\ntft_cs = board.D9\ntft_dc = board.D10",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_netpbm.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_netpbm.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ili9341\nimport board\nimport displayio\nimport fourwire\nimport adafruit_imageload\n\nimport adafruit_imageload\nspi = board.SPI()\ntft_cs = board.D9\ntft_dc = board.D10",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_netpbm.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_netpbm.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ili9341\nimport board\nimport displayio\nimport fourwire\nimport adafruit_imageload\n\ntft_dc = board.D10\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = adafruit_ili9341.ILI9341(display_bus, width=320, height=240)\n# Make the display context\nsplash = displayio.Group()\ndisplay.root_group = splash",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_netpbm.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_netpbm.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ili9341\nimport board\nimport displayio\nimport fourwire\nimport adafruit_imageload\n\n# image = \"images/netpbm_p3_rgb_ascii.ppm\"\n# image = \"images/netpbm_p4_mono_binary.pbm\"\n# image = \"images/netpbm_p5_binary.pgm\"\nimage = \"images/netpbm_p6_binary.ppm\"\nbitmap, palette = adafruit_imageload.load(image, bitmap=displayio.Bitmap, palette=displayio.Palette)\nbg_sprite = displayio.TileGrid(bitmap, pixel_shader=palette, x=0, y=0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_netpbm.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_netpbm.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ticks\nimport board\nimport rainbowio\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_led_animation.group import AnimationGroup\nfrom adafruit_led_animation.helper import PixelMap\nfrom adafruit_neopxl8 import NeoPxl8\n\n# Customize for your strands here\nnum_strands = 8\nstrand_length = 30\nfirst_led_pin = board.NEOPIXEL0\nnum_pixels = num_strands * strand_length\n# Make the object to control the pixels",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopxl8/examples/neopxl8_animations.py",
      "library": "neopxl8",
      "type": "example",
      "file_name": "neopxl8_animations.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ticks\nimport board\nimport rainbowio\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_led_animation.group import AnimationGroup\nfrom adafruit_led_animation.helper import PixelMap\nfrom adafruit_neopxl8 import NeoPxl8\n\ndef strand(n):\n    return PixelMap(pixels, range(n * strand_length, (n + 1) * strand_length), individual_pixels=True)\n\n# Usage example:\nfrom adafruit_neopxl8 import NeoPxl8\n\n# Customize for your strands here\nnum_strands = 8\nstrand_length = 30",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopxl8/examples/neopxl8_animations.py",
      "library": "neopxl8",
      "type": "example",
      "file_name": "neopxl8_animations.py",
      "chunk_type": "function",
      "function_name": "strand"
    }
  },
  {
    "content": "import adafruit_ticks\nimport board\nimport rainbowio\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_led_animation.group import AnimationGroup\nfrom adafruit_led_animation.helper import PixelMap\nfrom adafruit_neopxl8 import NeoPxl8\n\n# Group them so we can run them all at once\nanimations = AnimationGroup(*animations)\n# Run the animations and report on the speed in frame per secodn\nt0 = adafruit_ticks.ticks_ms()\nframe_count = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopxl8/examples/neopxl8_animations.py",
      "library": "neopxl8",
      "type": "example",
      "file_name": "neopxl8_animations.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lis331\n\nimport board\nimport adafruit_lis331\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# un-comment the sensor you are using\n# lis = H3LIS331(i2c)\nlis = adafruit_lis331.LIS331HH(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis331/examples/lis331_high_pass_filter.py",
      "library": "lis331",
      "type": "example",
      "file_name": "lis331_high_pass_filter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lis331\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# un-comment the sensor you are using\n# lis = H3LIS331(i2c)\nlis = adafruit_lis331.LIS331HH(i2c)\n# use a nice fast data rate to for maximum resolution\nlis.data_rate = adafruit_lis331.Rate.RATE_1000_HZ",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis331/examples/lis331_high_pass_filter.py",
      "library": "lis331",
      "type": "example",
      "file_name": "lis331_high_pass_filter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lis331\n\n# un-comment the sensor you are using\n# lis = H3LIS331(i2c)\nlis = adafruit_lis331.LIS331HH(i2c)\n# use a nice fast data rate to for maximum resolution\nlis.data_rate = adafruit_lis331.Rate.RATE_1000_HZ\n# enable the high pass filter without a reference or offset\nlis.enable_hpf(True, cutoff=adafruit_lis331.RateDivisor.ODR_DIV_100, use_reference=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis331/examples/lis331_high_pass_filter.py",
      "library": "lis331",
      "type": "example",
      "file_name": "lis331_high_pass_filter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.D10)\ndc = digitalio.DigitalInOut(board.D9)\nsrcs = digitalio.DigitalInOut(board.D7)  # can be None to use internal memory\nrst = digitalio.DigitalInOut(board.D11)  # can be None to not use this pin",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_bitmap.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_bitmap.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.D10)\ndc = digitalio.DigitalInOut(board.D9)\nsrcs = digitalio.DigitalInOut(board.D7)  # can be None to use internal memory\nrst = digitalio.DigitalInOut(board.D11)  # can be None to not use this pin\nbusy = digitalio.DigitalInOut(board.D12)  # can be None to not use this pin",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_bitmap.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_bitmap.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.D10)\ndc = digitalio.DigitalInOut(board.D9)\nsrcs = digitalio.DigitalInOut(board.D7)  # can be None to use internal memory\nrst = digitalio.DigitalInOut(board.D11)  # can be None to not use this pin\nbusy = digitalio.DigitalInOut(board.D12)  # can be None to not use this pin",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_bitmap.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_bitmap.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.D10)\ndc = digitalio.DigitalInOut(board.D9)\nsrcs = digitalio.DigitalInOut(board.D7)  # can be None to use internal memory\nrst = digitalio.DigitalInOut(board.D11)  # can be None to not use this pin\nbusy = digitalio.DigitalInOut(board.D12)  # can be None to not use this pin\n# give them all to our driver",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_bitmap.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_bitmap.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.D10)\ndc = digitalio.DigitalInOut(board.D9)\nsrcs = digitalio.DigitalInOut(board.D7)  # can be None to use internal memory\nrst = digitalio.DigitalInOut(board.D11)  # can be None to not use this pin\nbusy = digitalio.DigitalInOut(board.D12)  # can be None to not use this pin\n# give them all to our driver",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_bitmap.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_bitmap.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.D10)\ndc = digitalio.DigitalInOut(board.D9)\nsrcs = digitalio.DigitalInOut(board.D7)  # can be None to use internal memory\nrst = digitalio.DigitalInOut(board.D11)  # can be None to not use this pin\nbusy = digitalio.DigitalInOut(board.D12)  # can be None to not use this pin\n# give them all to our driver",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_bitmap.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_bitmap.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\ndef read_le(s):\n    result = 0\n    shift = 0\n    for byte in bytearray(s):\n        result += byte << shift\n        shift += 8\n    return result\n\n# Usage example:\n            raise BMPError(\"Not BitMap file\")\n\n        bmpFileSize = read_le(f.read(4))\n        f.read(4)  # Read & ignore creator bytes\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_bitmap.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_bitmap.py",
      "chunk_type": "function",
      "function_name": "read_le"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\nclass BMPError(Exception):\n    pass\n\n# Usage example:\n\n\nclass BMPError(Exception):\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_bitmap.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_bitmap.py",
      "chunk_type": "function",
      "function_name": "BMPError"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\ndef display_bitmap(epd, filename):\n    try:\n        f = open(filename, 'rb')\n    except OSError:\n        print(\"Couldn't open file\")\n        return\n    print('File opened')\n    try:\n        if f.read(2) != b'BM':\n            raise BMPError('Not BitMap file')\n        bmpFileSize = read_le(f.read(4))\n        f.read(4)\n        bmpImageoffset = read_le(f.read(4))\n        headerSize = read_le(f.read(4))\n        bmpWidth = read_le(f.read(4))\n        bmpHeight = read_le(f.read(4))\n        flip = True\n        print('Size: %d\\nImage offset: %d\\nHeader size: %d' % (bmpFileSize, bmpImageoffset, headerSize))\n        print('Width: %d\\nHeight: %d' % (bmpWidth, bmpHeight))\n        if read_le(f.read(2)) != 1:\n            raise BMPError('Not singleplane')\n        bmpDepth = read_le(f.read(2))\n        print('Bit depth: %d' % bmpDepth)\n        if bmpDepth != 24:\n            raise BMPError('Not 24-bit')\n        if read_le(f.read(2)) != 0:\n            raise BMPError('Compressed file')\n        print('Image OK! Drawing...')\n        rowSize = bmpWidth * 3 + 3 & ~3\n        for row in range(bmpHeight):\n            if flip:\n                pos = bmpImageoffset + (bmpHeight - 1 - row) * rowSize\n            else:\n                pos = bmpImageoffset + row * rowSize\n            f.seek(pos)\n            rowdata = f.read(3 * bmpWidth)\n            for col in range(bmpWidth):\n                b, g, r = rowdata[3 * col:3 * col + 3]\n                if r < 128 and g < 128 and (b < 128):\n                    epd.pixel(col, row, Adafruit_EPD.BLACK)\n                elif r >= 128 and g >= 128 and (b >= 128):\n                    pass\n                elif r >= 128:\n                    epd.pixel(col, row, Adafruit_EPD.RED)\n    except OSError:\n        print(\"Couldn't read file\")\n    except BMPError as e:\n        print('Failed to parse BMP: ' + e.args[0])\n    finally:\n        f.close()\n    print('Finished drawing')\n\n# Usage example:\n# clear the buffer\ndisplay.fill(Adafruit_EPD.WHITE)\ndisplay_bitmap(display, FILENAME)\ndisplay.display()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_bitmap.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_bitmap.py",
      "chunk_type": "function",
      "function_name": "display_bitmap"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_displayio_layout.layouts.grid_layout import GridLayout\n\n# use built in display (PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\n# Make the display context\nmain_group = displayio.Group()\ndisplay.root_group = main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_gridlayout_dividers.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_gridlayout_dividers.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node2.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node2.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node2.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node2.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm9x = adafruit_rfm9x.RFM9x(spi, CS, RESET, RADIO_FREQ_MHZ)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node2.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node2.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm9x = adafruit_rfm9x.RFM9x(spi, CS, RESET, RADIO_FREQ_MHZ)\n# set node addresses\nrfm9x.node = 2\nrfm9x.destination = 1",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node2.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node2.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport digitalio\nimport numpy\nfrom PIL import Image, ImageOps\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\n# Button pins for EYESPI Pi Beret\nBUTTON_NEXT = board.D5\nBUTTON_PREVIOUS = board.D6\n# CS and DC pins for EYEPSPI Pi Beret:\ncs_pin = digitalio.DigitalInOut(board.CE0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_eyespi_beret_animated_gif.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_eyespi_beret_animated_gif.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport digitalio\nimport numpy\nfrom PIL import Image, ImageOps\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\n# Button pins for EYESPI Pi Beret\nBUTTON_NEXT = board.D5\nBUTTON_PREVIOUS = board.D6\n# CS and DC pins for EYEPSPI Pi Beret:\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_eyespi_beret_animated_gif.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_eyespi_beret_animated_gif.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport digitalio\nimport numpy\nfrom PIL import Image, ImageOps\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\n# Button pins for EYESPI Pi Beret\nBUTTON_NEXT = board.D5\nBUTTON_PREVIOUS = board.D6\n# CS and DC pins for EYEPSPI Pi Beret:\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)\n# Reset pin for EYESPI Pi Beret\nreset_pin = digitalio.DigitalInOut(board.D27)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_eyespi_beret_animated_gif.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_eyespi_beret_animated_gif.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport digitalio\nimport numpy\nfrom PIL import Image, ImageOps\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\nBUTTON_NEXT = board.D5\nBUTTON_PREVIOUS = board.D6\n# CS and DC pins for EYEPSPI Pi Beret:\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)\n# Reset pin for EYESPI Pi Beret\nreset_pin = digitalio.DigitalInOut(board.D27)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_eyespi_beret_animated_gif.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_eyespi_beret_animated_gif.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport digitalio\nimport numpy\nfrom PIL import Image, ImageOps\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\n# CS and DC pins for EYEPSPI Pi Beret:\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)\n# Reset pin for EYESPI Pi Beret\nreset_pin = digitalio.DigitalInOut(board.D27)\n# Backlight pin for Pi Beret\nbacklight = digitalio.DigitalInOut(board.D18)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_eyespi_beret_animated_gif.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_eyespi_beret_animated_gif.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport digitalio\nimport numpy\nfrom PIL import Image, ImageOps\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\n# Reset pin for EYESPI Pi Beret\nreset_pin = digitalio.DigitalInOut(board.D27)\n# Backlight pin for Pi Beret\nbacklight = digitalio.DigitalInOut(board.D18)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_eyespi_beret_animated_gif.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_eyespi_beret_animated_gif.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport digitalio\nimport numpy\nfrom PIL import Image, ImageOps\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\n# Config for display baudrate (default max is 64mhz):\nBAUDRATE = 64000000\n# Setup SPI bus using hardware SPI:\nspi = board.SPI()\n# fmt: off\n# Create the display.\ndisp = ili9341.ILI9341(spi, rotation=90,                            # 2.2\", 2.4\", 2.8\", 3.2\" ILI9341",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_eyespi_beret_animated_gif.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_eyespi_beret_animated_gif.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport digitalio\nimport numpy\nfrom PIL import Image, ImageOps\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\ndef init_button(pin):\n    button = digitalio.DigitalInOut(pin)\n    button.switch_to_input()\n    button.pull = digitalio.Pull.UP\n    return button\n\n# Usage example:\n            self._height = display.height\n        self.display = display\n        self.advance_button = init_button(BUTTON_NEXT)\n        self.back_button = init_button(BUTTON_PREVIOUS)\n        if folder is not None:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_eyespi_beret_animated_gif.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_eyespi_beret_animated_gif.py",
      "chunk_type": "function",
      "function_name": "init_button"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport digitalio\nimport numpy\nfrom PIL import Image, ImageOps\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\nclass Frame:\n\n    def __init__(self, duration=0):\n        self.duration = duration\n        self.image = None\n\n# Usage example:\n\n\nclass Frame:\n    def __init__(self, duration=0):\n        self.duration = duration",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_eyespi_beret_animated_gif.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_eyespi_beret_animated_gif.py",
      "chunk_type": "function",
      "function_name": "Frame"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport digitalio\nimport numpy\nfrom PIL import Image, ImageOps\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\nclass AnimatedGif:\n\n    def __init__(self, display, width=None, height=None, folder=None):\n        self._frame_count = 0\n        self._loop = 0\n        self._index = 0\n        self._duration = 0\n        self._gif_files = []\n        self._frames = []\n        if width is not None:\n            self._width = width\n        else:\n            self._width = display.width\n        if height is not None:\n            self._height = height\n        else:\n            self._height = display.height\n        self.display = display\n        self.advance_button = init_button(BUTTON_NEXT)\n        self.back_button = init_button(BUTTON_PREVIOUS)\n        if folder is not None:\n            self.load_files(folder)\n            self.run()\n\n    def advance(self):\n        self._index = (self._index + 1) % len(self._gif_files)\n\n    def back(self):\n        self._index = (self._index - 1 + len(self._gif_files)) % len(self._gif_files)\n\n    def load_files(self, folder):\n        gif_files = [f for f in os.listdir(folder) if f.endswith('.gif')]\n        for gif_file in gif_files:\n            gif_file = os.path.join(folder, gif_file)\n            image = Image.open(gif_file)\n            if image.is_animated:\n                self._gif_files.append(gif_file)\n        print('Found', self._gif_files)\n        if not self._gif_files:\n            print('No Gif files found in current folder')\n            exit()\n\n    def preload(self):\n        image = Image.open(self._gif_files[self._index])\n        print(f'Loading {self._gif_files[self._index]}...')\n        if 'duration' in image.info:\n            self._duration = image.info['duration']\n        else:\n            self._duration = 0\n        if 'loop' in image.info:\n            self._loop = image.info['loop']\n        else:\n            self._loop = 1\n        self._frame_count = image.n_frames\n        self._frames.clear()\n        for frame in range(self._frame_count):\n            image.seek(frame)\n            frame_object = Frame(duration=self._duration)\n            if 'duration' in image.info:\n                frame_object.duration = image.info['duration']\n            frame_object.image = ImageOps.pad(image.convert('RGB'), (self._width, self._height), method=Image.NEAREST, color=(0, 0, 0), centering=(0.5, 0.5))\n            self._frames.append(frame_object)\n\n    def play(self):\n        self.preload()\n        _prev_advance_btn_val = self.advance_button.value\n        _prev_back_btn_val = self.back_button.value\n        if not self._gif_files:\n            print('There are no Gif Images loaded to Play')\n            return False\n        while True:\n            for frame_object in self._frames:\n                start_time = time.monotonic()\n                self.display.image(frame_object.image)\n                _cur_advance_btn_val = self.advance_button.value\n                _cur_back_btn_val = self.back_button.value\n                if not _cur_advance_btn_val and _prev_advance_btn_val:\n                    self.advance()\n                    return False\n                if not _cur_back_btn_val and _prev_back_btn_val:\n                    self.back()\n                    return False\n                _prev_back_btn_val = _cur_back_btn_val\n                _prev_advance_btn_val = _cur_advance_btn_val\n                while time.monotonic() < start_time + frame_object.duration / 1000:\n                    pass\n            if self._loop == 1:\n                return True\n            if self._loop > 0:\n                self._loop -= 1\n\n    def run(self):\n        while True:\n            auto_advance = self.play()\n            if auto_advance:\n                self.advance()\n\n# Usage example:\n\n\nclass AnimatedGif:\n    def __init__(self, display, width=None, height=None, folder=None):\n        self._frame_count = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_eyespi_beret_animated_gif.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_eyespi_beret_animated_gif.py",
      "chunk_type": "function",
      "function_name": "AnimatedGif"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport countio\nimport adafruit_ads1x15.ads1015 as ADS\nfrom adafruit_ads1x15.ads1x15 import Comp_Latch, Comp_Mode, Comp_Polarity, Mode\nfrom adafruit_ads1x15.analog_in import AnalogIn\n\n# import adafruit_ads1x15.ads1115 as ADS\n# Create the I2C bus\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create the ADS object\nads = ADS.ADS1015(i2c)\n# ads = ADS.ADS1115(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ads1x15/examples/ads1x15_comparator_example.py",
      "library": "ads1x15",
      "type": "example",
      "file_name": "ads1x15_comparator_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport countio\nimport adafruit_ads1x15.ads1015 as ADS\nfrom adafruit_ads1x15.ads1x15 import Comp_Latch, Comp_Mode, Comp_Polarity, Mode\nfrom adafruit_ads1x15.analog_in import AnalogIn\n\n#   Max counts for ADS1015 = 2047\n#                  ADS1115 = 32767\nchan = AnalogIn(ads, ADS.P0)\n# Create Interrupt-driven input to track comparator changes\nint_pin = countio.Counter(board.GP9, edge=countio.Edge.RISE)\n# Set ADC to continuously read new data\nads.mode = Mode.CONTINUOUS\n# Set comparator to assert after 1 ADC conversion",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ads1x15/examples/ads1x15_comparator_example.py",
      "library": "ads1x15",
      "type": "example",
      "file_name": "ads1x15_comparator_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nimport adafruit_esp32spi.adafruit_esp32spi_socketpool as socketpool\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n    spi = board.SPI()\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\n# PyPortal or similar; edit pins as needed\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_tcp_client.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_tcp_client.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nimport adafruit_esp32spi.adafruit_esp32spi_socketpool as socketpool\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n    spi = board.SPI()\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\n# PyPortal or similar; edit pins as needed\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\n# connect to wifi AP",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_tcp_client.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_tcp_client.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nimport adafruit_esp32spi.adafruit_esp32spi_socketpool as socketpool\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\n# PyPortal or similar; edit pins as needed\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\n# connect to wifi AP",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_tcp_client.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_tcp_client.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nimport adafruit_esp32spi.adafruit_esp32spi_socketpool as socketpool\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\n# PyPortal or similar; edit pins as needed\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\n# connect to wifi AP",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_tcp_client.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_tcp_client.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mmc56x3\n\nimport board\nimport adafruit_mmc56x3\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_mmc56x3.MMC5603(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mmc56x3/examples/mmc56x3_simpletest.py",
      "library": "mmc56x3",
      "type": "example",
      "file_name": "mmc56x3_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mmc56x3\n\nimport adafruit_mmc56x3\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_mmc56x3.MMC5603(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mmc56x3/examples/mmc56x3_simpletest.py",
      "library": "mmc56x3",
      "type": "example",
      "file_name": "mmc56x3_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Display magnetometer data once per second\"\"\"\n\nimport time\n\nimport board\n\nimport adafruit_mmc56x3\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_mmc56x3.MMC5603(i2c)\n\nwhile True:\n    mag_x, mag_y, mag_z = sensor.magnetic\n    temp = sensor.temperature\n\n    print(f\"X:{mag_x:10.2f}, Y:{mag_y:10.2f}, Z:{mag_z:10.2f} uT\\tTemp:{temp:6.1f}*C\")\n    print(\"\")\n    time.sleep(1.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mmc56x3/examples/mmc56x3_simpletest.py",
      "library": "mmc56x3",
      "type": "example",
      "file_name": "mmc56x3_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_hx711.analog_in import AnalogIn\nfrom adafruit_hx711.hx711 import HX711\n\nimport digitalio\ndata = digitalio.DigitalInOut(board.D5)\ndata.direction = digitalio.Direction.INPUT\nclock = digitalio.DigitalInOut(board.D6)\nclock.direction = digitalio.Direction.OUTPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hx711/examples/hx711_simpletest.py",
      "library": "hx711",
      "type": "example",
      "file_name": "hx711_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_hx711.analog_in import AnalogIn\nfrom adafruit_hx711.hx711 import HX711\n\ndata = digitalio.DigitalInOut(board.D5)\ndata.direction = digitalio.Direction.INPUT\nclock = digitalio.DigitalInOut(board.D6)\nclock.direction = digitalio.Direction.OUTPUT\nhx711 = HX711(data, clock)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hx711/examples/hx711_simpletest.py",
      "library": "hx711",
      "type": "example",
      "file_name": "hx711_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_hx711.analog_in import AnalogIn\nfrom adafruit_hx711.hx711 import HX711\n\ndata = digitalio.DigitalInOut(board.D5)\ndata.direction = digitalio.Direction.INPUT\nclock = digitalio.DigitalInOut(board.D6)\nclock.direction = digitalio.Direction.OUTPUT\nhx711 = HX711(data, clock)\nchannel_a = AnalogIn(hx711, HX711.CHAN_A_GAIN_128)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hx711/examples/hx711_simpletest.py",
      "library": "hx711",
      "type": "example",
      "file_name": "hx711_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_hx711.analog_in import AnalogIn\nfrom adafruit_hx711.hx711 import HX711\n\ndata = digitalio.DigitalInOut(board.D5)\ndata.direction = digitalio.Direction.INPUT\nclock = digitalio.DigitalInOut(board.D6)\nclock.direction = digitalio.Direction.OUTPUT\nhx711 = HX711(data, clock)\nchannel_a = AnalogIn(hx711, HX711.CHAN_A_GAIN_128)\n# channel_b = AnalogIn(hx711, HX711.CHAN_B_GAIN_32)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hx711/examples/hx711_simpletest.py",
      "library": "hx711",
      "type": "example",
      "file_name": "hx711_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2024 Liz Clark for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport digitalio\n\nfrom adafruit_hx711.analog_in import AnalogIn\nfrom adafruit_hx711.hx711 import HX711\n\ndata = digitalio.DigitalInOut(board.D5)\ndata.direction = digitalio.Direction.INPUT\nclock = digitalio.DigitalInOut(board.D6)\nclock.direction = digitalio.Direction.OUTPUT\n\nhx711 = HX711(data, clock)\nchannel_a = AnalogIn(hx711, HX711.CHAN_A_GAIN_128)\n# channel_b = AnalogIn(hx711, HX711.CHAN_B_GAIN_32)\n\nwhile True:\n    print(f\"Reading: {channel_a.value}\")\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hx711/examples/hx711_simpletest.py",
      "library": "hx711",
      "type": "example",
      "file_name": "hx711_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_espatcontrol.adafruit_espatcontrol_socket as pool\nfrom adafruit_espatcontrol import adafruit_espatcontrol\n\nesp = adafruit_espatcontrol.ESP_ATcontrol(uart, 115200, reset_pin=resetpin, rts_pin=rtspin, debug=debugflag)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_AIO_no_wifimanager-enterprise.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_AIO_no_wifimanager-enterprise.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_espatcontrol.adafruit_espatcontrol_socket as pool\nfrom adafruit_espatcontrol import adafruit_espatcontrol\n\nesp = adafruit_espatcontrol.ESP_ATcontrol(\n    uart, 115200, reset_pin=resetpin, rts_pin=rtspin, debug=debugflag\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\ncounter = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_AIO_no_wifimanager-enterprise.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_AIO_no_wifimanager-enterprise.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_espatcontrol.adafruit_espatcontrol_socket as pool\nfrom adafruit_espatcontrol import adafruit_espatcontrol\n\nesp = adafruit_espatcontrol.ESP_ATcontrol(\n    uart, 115200, reset_pin=resetpin, rts_pin=rtspin, debug=debugflag\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\ncounter = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_AIO_no_wifimanager-enterprise.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_AIO_no_wifimanager-enterprise.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_ssd1325\n\nimport adafruit_ssd1325\n# Use for SPI\nspi = board.SPI()\noled_cs = board.D5\noled_dc = board.D6\ndisplay_bus = FourWire(spi, command=oled_dc, chip_select=oled_cs, baudrate=1000000, reset=board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1325/examples/ssd1325_simpletest.py",
      "library": "ssd1325",
      "type": "example",
      "file_name": "ssd1325_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_ssd1325\n\n# Use for SPI\nspi = board.SPI()\noled_cs = board.D5\noled_dc = board.D6\ndisplay_bus = FourWire(spi, command=oled_dc, chip_select=oled_cs, baudrate=1000000, reset=board.D9)\n# Use for I2C",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1325/examples/ssd1325_simpletest.py",
      "library": "ssd1325",
      "type": "example",
      "file_name": "ssd1325_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_ssd1325\n\n# Use for SPI\nspi = board.SPI()\noled_cs = board.D5\noled_dc = board.D6\ndisplay_bus = FourWire(spi, command=oled_dc, chip_select=oled_cs, baudrate=1000000, reset=board.D9)\n# Use for I2C\n# i2c = board.I2C()  # uses board.SCL and board.SDA",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1325/examples/ssd1325_simpletest.py",
      "library": "ssd1325",
      "type": "example",
      "file_name": "ssd1325_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_ssd1325\n\n# Use for SPI\nspi = board.SPI()\noled_cs = board.D5\noled_dc = board.D6\ndisplay_bus = FourWire(spi, command=oled_dc, chip_select=oled_cs, baudrate=1000000, reset=board.D9)\n# Use for I2C\n# i2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1325/examples/ssd1325_simpletest.py",
      "library": "ssd1325",
      "type": "example",
      "file_name": "ssd1325_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_ssd1325\n\nWIDTH = 128\nHEIGHT = 64\nBORDER = 8\nFONTSCALE = 1\ndisplay = adafruit_ssd1325.SSD1325(display_bus, width=WIDTH, height=HEIGHT)\n# Make the display context\nsplash = displayio.Group()\ndisplay.root_group = splash",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1325/examples/ssd1325_simpletest.py",
      "library": "ssd1325",
      "type": "example",
      "file_name": "ssd1325_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport neopixel\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.adafruit import AdafruitColor\n\nble = BLERadio()\nslide_switch = digitalio.DigitalInOut(board.SLIDE_SWITCH)\nslide_switch.pull = digitalio.Pull.UP\nbutton_a = digitalio.DigitalInOut(board.BUTTON_A)\nbutton_a.pull = digitalio.Pull.DOWN\nbutton_b = digitalio.DigitalInOut(board.BUTTON_B)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_color_proximity.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_color_proximity.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport neopixel\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.adafruit import AdafruitColor\n\nble = BLERadio()\nslide_switch = digitalio.DigitalInOut(board.SLIDE_SWITCH)\nslide_switch.pull = digitalio.Pull.UP\nbutton_a = digitalio.DigitalInOut(board.BUTTON_A)\nbutton_a.pull = digitalio.Pull.DOWN\nbutton_b = digitalio.DigitalInOut(board.BUTTON_B)\nbutton_b.pull = digitalio.Pull.DOWN",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_color_proximity.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_color_proximity.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport neopixel\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.adafruit import AdafruitColor\n\nble = BLERadio()\nslide_switch = digitalio.DigitalInOut(board.SLIDE_SWITCH)\nslide_switch.pull = digitalio.Pull.UP\nbutton_a = digitalio.DigitalInOut(board.BUTTON_A)\nbutton_a.pull = digitalio.Pull.DOWN\nbutton_b = digitalio.DigitalInOut(board.BUTTON_B)\nbutton_b.pull = digitalio.Pull.DOWN",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_color_proximity.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_color_proximity.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport neopixel\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.adafruit import AdafruitColor\n\nble = BLERadio()\nslide_switch = digitalio.DigitalInOut(board.SLIDE_SWITCH)\nslide_switch.pull = digitalio.Pull.UP\nbutton_a = digitalio.DigitalInOut(board.BUTTON_A)\nbutton_a.pull = digitalio.Pull.DOWN\nbutton_b = digitalio.DigitalInOut(board.BUTTON_B)\nbutton_b.pull = digitalio.Pull.DOWN\nled = digitalio.DigitalInOut(board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_color_proximity.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_color_proximity.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport neopixel\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.adafruit import AdafruitColor\n\nslide_switch = digitalio.DigitalInOut(board.SLIDE_SWITCH)\nslide_switch.pull = digitalio.Pull.UP\nbutton_a = digitalio.DigitalInOut(board.BUTTON_A)\nbutton_a.pull = digitalio.Pull.DOWN\nbutton_b = digitalio.DigitalInOut(board.BUTTON_B)\nbutton_b.pull = digitalio.Pull.DOWN\nled = digitalio.DigitalInOut(board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_color_proximity.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_color_proximity.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport neopixel\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.adafruit import AdafruitColor\n\nslide_switch = digitalio.DigitalInOut(board.SLIDE_SWITCH)\nslide_switch.pull = digitalio.Pull.UP\nbutton_a = digitalio.DigitalInOut(board.BUTTON_A)\nbutton_a.pull = digitalio.Pull.DOWN\nbutton_b = digitalio.DigitalInOut(board.BUTTON_B)\nbutton_b.pull = digitalio.Pull.DOWN\nled = digitalio.DigitalInOut(board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_color_proximity.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_color_proximity.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport neopixel\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.adafruit import AdafruitColor\n\nbutton_a = digitalio.DigitalInOut(board.BUTTON_A)\nbutton_a.pull = digitalio.Pull.DOWN\nbutton_b = digitalio.DigitalInOut(board.BUTTON_B)\nbutton_b.pull = digitalio.Pull.DOWN\nled = digitalio.DigitalInOut(board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_color_proximity.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_color_proximity.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport neopixel\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.adafruit import AdafruitColor\n\nbutton_b.pull = digitalio.Pull.DOWN\nled = digitalio.DigitalInOut(board.D13)\nneopixels = neopixel.NeoPixel(board.NEOPIXEL, 10, auto_write=False)\ni = 0\nadvertisement = AdafruitColor()\nadvertisement.color = color_options[i]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_color_proximity.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_color_proximity.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_neotrellis.multitrellis import MultiTrellis\nfrom adafruit_neotrellis.neotrellis import NeoTrellis\n\n# Create the I2C object for the NeoTrellis\ni2c_bus = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Create the NeoTrellis object",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neotrellis/examples/neotrellis_multitrellis_simpletest.py",
      "library": "neotrellis",
      "type": "example",
      "file_name": "neotrellis_multitrellis_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_neotrellis.multitrellis import MultiTrellis\nfrom adafruit_neotrellis.neotrellis import NeoTrellis\n\ndef blink(xcoord, ycoord, edge):\n    if edge == NeoTrellis.EDGE_RISING:\n        trellis.color(xcoord, ycoord, BLUE)\n    elif edge == NeoTrellis.EDGE_FALLING:\n        trellis.color(xcoord, ycoord, OFF)\n\n# Usage example:\n        # Activate falling edge events on all keys\n        trellis.activate_key(x, y, NeoTrellis.EDGE_FALLING)\n        trellis.set_callback(x, y, blink)\n        trellis.color(x, y, PURPLE)\n        time.sleep(0.05)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neotrellis/examples/neotrellis_multitrellis_simpletest.py",
      "library": "neotrellis",
      "type": "example",
      "file_name": "neotrellis_multitrellis_simpletest.py",
      "chunk_type": "function",
      "function_name": "blink"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9xfsk\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_simpletest.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9xfsk\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_simpletest.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9xfsk\n\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\n# uncommnet the desired import and rfm initialization depending on the radio boards being used",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_simpletest.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import Color, turtle\n\nimport board\nturtle = turtle(board.DISPLAY)\nstarsize = min(board.DISPLAY.width, board.DISPLAY.height) * 0.9  # 90% of screensize",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_simpletest.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import Color, turtle\n\nimport board\nturtle = turtle(board.DISPLAY)\nstarsize = min(board.DISPLAY.width, board.DISPLAY.height) * 0.9  # 90% of screensize",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_simpletest.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\n\nfrom adafruit_turtle import Color, turtle\n\nturtle = turtle(board.DISPLAY)\nstarsize = min(board.DISPLAY.width, board.DISPLAY.height) * 0.9  # 90% of screensize\n\nprint(\"Turtle time! Lets draw a star\")\n\nturtle.pencolor(Color.BLUE)\nturtle.setheading(90)\n\nturtle.penup()\nturtle.goto(-starsize / 2, 0)\nturtle.pendown()\n\nstart = turtle.pos()\nwhile True:\n    turtle.forward(starsize)\n    turtle.left(170)\n    if abs(turtle.pos() - start) < 1:\n        break\n\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_simpletest.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nfrom digitalio import Direction, Pull\nfrom adafruit_mcp230xx.mcp23017 import MCP23017\n\n# Initialize the I2C bus:\ni2c = busio.I2C(board.SCL, board.SDA)\n# Initialize the MCP23017 chip on the bonnet\nmcp = MCP23017(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp230xx/examples/mcp230xx_leds_and_buttons.py",
      "library": "mcp230xx",
      "type": "example",
      "file_name": "mcp230xx_leds_and_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\n# set GPIO pins as necessary - this example is for Raspberry Pi\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node2_ack.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node2_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\n# set GPIO pins as necessary - this example is for Raspberry Pi\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node2_ack.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node2_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# set GPIO pins as necessary - this example is for Raspberry Pi\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm9x = adafruit_rfm9x.RFM9x(spi, CS, RESET, RADIO_FREQ_MHZ)\n# set delay before transmitting ACK (seconds)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node2_ack.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node2_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm9x = adafruit_rfm9x.RFM9x(spi, CS, RESET, RADIO_FREQ_MHZ)\n# set delay before transmitting ACK (seconds)\nrfm9x.ack_delay = 0.1\n# set node addresses",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node2_ack.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node2_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import busio\nfrom board import SCL, SDA\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1306\n\nimport adafruit_ssd1306\n# Create the I2C interface.\ni2c = busio.I2C(SCL, SDA)\n# Create the SSD1306 OLED class.\n# The first two parameters are the pixel width and pixel height.  Change these\n# to the right size for your display!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_pillow_shapes.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_pillow_shapes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import busio\nfrom board import SCL, SDA\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1306\n\ni2c = busio.I2C(SCL, SDA)\n# Create the SSD1306 OLED class.\n# The first two parameters are the pixel width and pixel height.  Change these\n# to the right size for your display!\ndisp = adafruit_ssd1306.SSD1306_I2C(128, 32, i2c)\n# Note you can change the I2C address, or add a reset pin:\n# disp = adafruit_ssd1306.SSD1306_I2C(128, 32, i2c, addr=0x3c, reset=reset_pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_pillow_shapes.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_pillow_shapes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport analogio\nimport board\nimport microcontroller\nimport neopixel\nimport adafruit_ble_broadcastnet\n\nimport adafruit_ble_broadcastnet\nbattery = analogio.AnalogIn(board.VOLTAGE_MONITOR)\ndivider_ratio = 2\npixel = neopixel.NeoPixel(board.NEOPIXEL, 1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_battery_level_neopixel.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_battery_level_neopixel.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport analogio\nimport board\nimport microcontroller\nimport neopixel\nimport adafruit_ble_broadcastnet\n\nbattery = analogio.AnalogIn(board.VOLTAGE_MONITOR)\ndivider_ratio = 2\npixel = neopixel.NeoPixel(board.NEOPIXEL, 1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_battery_level_neopixel.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_battery_level_neopixel.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport sdcardio\nimport storage\nfrom adafruit_st7789 import ST7789\nfrom displayio import Bitmap, ColorConverter, Colorspace, FourWire, Group, TileGrid, release_displays\nimport adafruit_ov2640\n\nimport adafruit_ov2640\n# Set up the display (You must customize this block for your display!)\nspi = busio.SPI(clock=board.GP2, MOSI=board.GP3, MISO=board.GP4)\n# setup the SD Card\nsd_cs = board.GP5\nsdcard = sdcardio.SDCard(spi, sd_cs)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_sd_pico_st7789_2in.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_sd_pico_st7789_2in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport sdcardio\nimport storage\nfrom adafruit_st7789 import ST7789\nfrom displayio import Bitmap, ColorConverter, Colorspace, FourWire, Group, TileGrid, release_displays\nimport adafruit_ov2640\n\n# Set up the display (You must customize this block for your display!)\nspi = busio.SPI(clock=board.GP2, MOSI=board.GP3, MISO=board.GP4)\n# setup the SD Card\nsd_cs = board.GP5\nsdcard = sdcardio.SDCard(spi, sd_cs)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_sd_pico_st7789_2in.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_sd_pico_st7789_2in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport sdcardio\nimport storage\nfrom adafruit_st7789 import ST7789\nfrom displayio import Bitmap, ColorConverter, Colorspace, FourWire, Group, TileGrid, release_displays\nimport adafruit_ov2640\n\nsd_cs = board.GP5\nsdcard = sdcardio.SDCard(spi, sd_cs)\nvfs = storage.VfsFat(sdcard)\n# setup the button\nbutton = digitalio.DigitalInOut(board.GP22)\nbutton.pull = digitalio.Pull.UP\ndisplay_bus = FourWire(spi, command=board.GP0, chip_select=board.GP1, reset=None)\ndisplay = ST7789(display_bus, width=320, height=240, rotation=270)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_sd_pico_st7789_2in.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_sd_pico_st7789_2in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport sdcardio\nimport storage\nfrom adafruit_st7789 import ST7789\nfrom displayio import Bitmap, ColorConverter, Colorspace, FourWire, Group, TileGrid, release_displays\nimport adafruit_ov2640\n\nsdcard = sdcardio.SDCard(spi, sd_cs)\nvfs = storage.VfsFat(sdcard)\n# setup the button\nbutton = digitalio.DigitalInOut(board.GP22)\nbutton.pull = digitalio.Pull.UP\ndisplay_bus = FourWire(spi, command=board.GP0, chip_select=board.GP1, reset=None)\ndisplay = ST7789(display_bus, width=320, height=240, rotation=270)\ndisplay.auto_refresh = False",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_sd_pico_st7789_2in.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_sd_pico_st7789_2in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport sdcardio\nimport storage\nfrom adafruit_st7789 import ST7789\nfrom displayio import Bitmap, ColorConverter, Colorspace, FourWire, Group, TileGrid, release_displays\nimport adafruit_ov2640\n\n# setup the button\nbutton = digitalio.DigitalInOut(board.GP22)\nbutton.pull = digitalio.Pull.UP\ndisplay_bus = FourWire(spi, command=board.GP0, chip_select=board.GP1, reset=None)\ndisplay = ST7789(display_bus, width=320, height=240, rotation=270)\ndisplay.auto_refresh = False\n# Ensure the camera is shut down, so that it releases the SDA/SCL lines,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_sd_pico_st7789_2in.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_sd_pico_st7789_2in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport sdcardio\nimport storage\nfrom adafruit_st7789 import ST7789\nfrom displayio import Bitmap, ColorConverter, Colorspace, FourWire, Group, TileGrid, release_displays\nimport adafruit_ov2640\n\ncam = adafruit_ov2640.OV2640(bus, data_pins=[board.GP12, board.GP13, board.GP14, board.GP15, board.GP16, board.GP17, board.GP18, board.GP19], clock=board.GP11, vsync=board.GP7, href=board.GP21, mclk=board.GP20, shutdown=None, reset=board.GP10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_sd_pico_st7789_2in.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_sd_pico_st7789_2in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport sdcardio\nimport storage\nfrom adafruit_st7789 import ST7789\nfrom displayio import Bitmap, ColorConverter, Colorspace, FourWire, Group, TileGrid, release_displays\nimport adafruit_ov2640\n\nwidth = display.width\nheight = display.height\ncam.size = adafruit_ov2640.OV2640_SIZE_QQVGA\n# cam.test_pattern = True\nbitmap = Bitmap(cam.width, cam.height, 65536)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_sd_pico_st7789_2in.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_sd_pico_st7789_2in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport sdcardio\nimport storage\nfrom adafruit_st7789 import ST7789\nfrom displayio import Bitmap, ColorConverter, Colorspace, FourWire, Group, TileGrid, release_displays\nimport adafruit_ov2640\n\ndef exists(filename):\n    try:\n        os.stat(filename)\n        return True\n    except OSError:\n        return False\n\n# Usage example:\n        filename = f\"/sd/img{_image_counter:04d}.jpg\"\n        _image_counter += 1\n        if exists(filename):\n            continue\n        print(\"#\", filename)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_sd_pico_st7789_2in.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_sd_pico_st7789_2in.py",
      "chunk_type": "function",
      "function_name": "exists"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport sdcardio\nimport storage\nfrom adafruit_st7789 import ST7789\nfrom displayio import Bitmap, ColorConverter, Colorspace, FourWire, Group, TileGrid, release_displays\nimport adafruit_ov2640\n\ndef open_next_image():\n    global _image_counter\n    while True:\n        filename = f'/sd/img{_image_counter:04d}.jpg'\n        _image_counter += 1\n        if exists(filename):\n            continue\n        print('#', filename)\n        return open(filename, 'wb')\n\n# Usage example:\n\n        print(f\"Captured {len(jpeg)} bytes of jpeg data\")\n        with open_next_image() as f:\n            f.write(jpeg)\n    finally:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_sd_pico_st7789_2in.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_sd_pico_st7789_2in.py",
      "chunk_type": "function",
      "function_name": "open_next_image"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport sdcardio\nimport storage\nfrom adafruit_st7789 import ST7789\nfrom displayio import Bitmap, ColorConverter, Colorspace, FourWire, Group, TileGrid, release_displays\nimport adafruit_ov2640\n\ndef capture_image():\n    old_size = cam.size\n    old_colorspace = cam.colorspace\n    try:\n        cam.size = adafruit_ov2640.OV2640_SIZE_QVGA\n        cam.colorspace = adafruit_ov2640.OV2640_COLOR_JPEG\n        b = bytearray(cam.capture_buffer_size)\n        jpeg = cam.capture(b)\n        print(f'Captured {len(jpeg)} bytes of jpeg data')\n        with open_next_image() as f:\n            f.write(jpeg)\n    finally:\n        cam.size = old_size\n        cam.colorspace = old_colorspace\n\n# Usage example:\n    while True:\n        if not button.value:  # button pressed\n            capture_image()\n        cam.capture(bitmap)\n        bitmap.dirty()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_sd_pico_st7789_2in.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_sd_pico_st7789_2in.py",
      "chunk_type": "function",
      "function_name": "capture_image"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport sdcardio\nimport storage\nfrom adafruit_st7789 import ST7789\nfrom displayio import Bitmap, ColorConverter, Colorspace, FourWire, Group, TileGrid, release_displays\nimport adafruit_ov2640\n\ndef main():\n    display.auto_refresh = False\n    while True:\n        if not button.value:\n            capture_image()\n        cam.capture(bitmap)\n        bitmap.dirty()\n        display.refresh(minimum_frames_per_second=0)\n\n# Usage example:\n\n\nmain()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_jpeg_sd_pico_st7789_2in.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_jpeg_sd_pico_st7789_2in.py",
      "chunk_type": "function",
      "function_name": "main"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_dps310 import advanced\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndps310 = advanced.DPS310_Advanced(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dps310/examples/dps310_low_power_weather_station.py",
      "library": "dps310",
      "type": "example",
      "file_name": "dps310_low_power_weather_station.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_fakerequests import Fake_Requests\n\nresponse = Fake_Requests(\"fakerequests_i2c_database.txt\")\ndefinitions = response.text.split(\"\\n\")\n# We create the i2c object and set a flag to let us know if the sensor is found\nfound = False\ni2c = board.I2C()\n# We look for all the sensor address and added to a list",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/fakerequests/examples/fakerequests_advancedtest.py",
      "library": "fakerequests",
      "type": "example",
      "file_name": "fakerequests_advancedtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_matrixkeypad\n\nimport adafruit_matrixkeypad\n# Membrane 3x4 matrix keypad on Raspberry Pi -\n# https://www.adafruit.com/product/419\ncols = [digitalio.DigitalInOut(x) for x in (board.D26, board.D20, board.D21)]\nrows = [digitalio.DigitalInOut(x) for x in (board.D5, board.D6, board.D13, board.D19)]\n# 3x4 matrix keypad on Raspberry Pi -\n# rows and columns are mixed up for https://www.adafruit.com/product/3845",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/matrixkeypad/examples/matrixkeypad_rpi_simpletest.py",
      "library": "matrixkeypad",
      "type": "example",
      "file_name": "matrixkeypad_rpi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_matrixkeypad\n\nimport adafruit_matrixkeypad\n# Membrane 3x4 matrix keypad on Raspberry Pi -\n# https://www.adafruit.com/product/419\ncols = [digitalio.DigitalInOut(x) for x in (board.D26, board.D20, board.D21)]\nrows = [digitalio.DigitalInOut(x) for x in (board.D5, board.D6, board.D13, board.D19)]\n# 3x4 matrix keypad on Raspberry Pi -\n# rows and columns are mixed up for https://www.adafruit.com/product/3845\n# cols = [digitalio.DigitalInOut(x) for x in (board.D13, board.D5, board.D26)]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/matrixkeypad/examples/matrixkeypad_rpi_simpletest.py",
      "library": "matrixkeypad",
      "type": "example",
      "file_name": "matrixkeypad_rpi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_matrixkeypad\n\n# cols = [digitalio.DigitalInOut(x) for x in (board.D13, board.D5, board.D26)]\n# rows = [digitalio.DigitalInOut(x) for x in (board.D6, board.D21, board.D20, board.D19)]\nkeys = ((1, 2, 3), (4, 5, 6), (7, 8, 9), (\"*\", 0, \"#\"))\nkeypad = adafruit_matrixkeypad.Matrix_Keypad(rows, cols, keys)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/matrixkeypad/examples/matrixkeypad_rpi_simpletest.py",
      "library": "matrixkeypad",
      "type": "example",
      "file_name": "matrixkeypad_rpi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport digitalio\n\nimport adafruit_matrixkeypad\n\n# Membrane 3x4 matrix keypad on Raspberry Pi -\n# https://www.adafruit.com/product/419\ncols = [digitalio.DigitalInOut(x) for x in (board.D26, board.D20, board.D21)]\nrows = [digitalio.DigitalInOut(x) for x in (board.D5, board.D6, board.D13, board.D19)]\n\n# 3x4 matrix keypad on Raspberry Pi -\n# rows and columns are mixed up for https://www.adafruit.com/product/3845\n# cols = [digitalio.DigitalInOut(x) for x in (board.D13, board.D5, board.D26)]\n# rows = [digitalio.DigitalInOut(x) for x in (board.D6, board.D21, board.D20, board.D19)]\n\nkeys = ((1, 2, 3), (4, 5, 6), (7, 8, 9), (\"*\", 0, \"#\"))\n\nkeypad = adafruit_matrixkeypad.Matrix_Keypad(rows, cols, keys)\n\nwhile True:\n    keys = keypad.pressed_keys\n    if keys:\n        print(\"Pressed: \", keys)\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/matrixkeypad/examples/matrixkeypad_rpi_simpletest.py",
      "library": "matrixkeypad",
      "type": "example",
      "file_name": "matrixkeypad_rpi_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nimport ulab.numpy as np\nimport adafruit_ov2640\n\n# Nominal voltages of several of the buttons on the audio daughterboard\nV_MODE = 1.98\nV_RECORD = 2.41\na = analogio.AnalogIn(board.IO6)\n# Release any resources currently in use for the displays",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_bmp_sd_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_bmp_sd_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nimport ulab.numpy as np\nimport adafruit_ov2640\n\na = analogio.AnalogIn(board.IO6)\n# Release any resources currently in use for the displays\nspi = busio.SPI(MOSI=board.LCD_MOSI, clock=board.LCD_CLK)\ndisplay_bus = fourwire.FourWire(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_bmp_sd_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_bmp_sd_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nimport ulab.numpy as np\nimport adafruit_ov2640\n\ndisplay_bus = fourwire.FourWire(spi, command=board.LCD_D_C, chip_select=board.LCD_CS, reset=board.LCD_RST, baudrate=80000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_bmp_sd_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_bmp_sd_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nimport ulab.numpy as np\nimport adafruit_ov2640\n\ndisplay = busdisplay.BusDisplay(\n    display_bus, _INIT_SEQUENCE, width=320, height=240, auto_refresh=False\nbus = busio.I2C(scl=board.CAMERA_SIOC, sda=board.CAMERA_SIOD)\ncam = adafruit_ov2640.OV2640(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_bmp_sd_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_bmp_sd_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nimport ulab.numpy as np\nimport adafruit_ov2640\n\ncam = adafruit_ov2640.OV2640(bus, data_pins=board.CAMERA_DATA, clock=board.CAMERA_PCLK, vsync=board.CAMERA_VSYNC, href=board.CAMERA_HREF, mclk=board.CAMERA_XCLK, mclk_frequency=20000000, size=adafruit_ov2640.OV2640_SIZE_QVGA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_bmp_sd_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_bmp_sd_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nimport ulab.numpy as np\nimport adafruit_ov2640\n\ndisplay.root_group = g\nsd_spi = busio.SPI(clock=board.IO18, MOSI=board.IO14, MISO=board.IO17)\nsd_cs = board.IO12\nsdcard = sdcardio.SDCard(sd_spi, sd_cs)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_bmp_sd_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_bmp_sd_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nimport ulab.numpy as np\nimport adafruit_ov2640\n\ndisplay.root_group = g\nsd_spi = busio.SPI(clock=board.IO18, MOSI=board.IO14, MISO=board.IO17)\nsd_cs = board.IO12\nsdcard = sdcardio.SDCard(sd_spi, sd_cs)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_bmp_sd_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_bmp_sd_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nimport ulab.numpy as np\nimport adafruit_ov2640\n\ndef exists(filename):\n    try:\n        os.stat(filename)\n        return True\n    except OSError:\n        return False\n\n# Usage example:\n        filename = f\"/sd/img{_image_counter:04d}.{extension}\"\n        _image_counter += 1\n        if exists(filename):\n            continue\n        print(\"#\", filename)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_bmp_sd_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_bmp_sd_kaluga1_3.py",
      "chunk_type": "function",
      "function_name": "exists"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nimport ulab.numpy as np\nimport adafruit_ov2640\n\ndef open_next_image(extension='jpg'):\n    global _image_counter\n    while True:\n        filename = f'/sd/img{_image_counter:04d}.{extension}'\n        _image_counter += 1\n        if exists(filename):\n            continue\n        print('#', filename)\n        return open(filename, 'wb')\n\n# Usage example:\n\ndef capture_image_bmp(the_bitmap):\n    with open_next_image(\"bmp\") as f:\n        swapped = np.frombuffer(the_bitmap, dtype=np.uint16)\n        swapped.byteswap(inplace=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_bmp_sd_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_bmp_sd_kaluga1_3.py",
      "chunk_type": "function",
      "function_name": "open_next_image"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nimport ulab.numpy as np\nimport adafruit_ov2640\n\ndef write_header(output_file, width, height, masks):\n\n    def put_word(value):\n        output_file.write(struct.pack('<H', value))\n\n    def put_dword(value):\n        output_file.write(struct.pack('<I', value))\n\n    def put_long(value):\n        output_file.write(struct.pack('<i', value))\n\n    def put_padding(length):\n        output_file.write(b'\\x00' * length)\n    filesize = 14 + 108 + height * width * 2\n    output_file.write(b'BM')\n    put_dword(filesize)\n    put_word(0)\n    put_word(0)\n    put_dword(14 + 108)\n    put_dword(108)\n    put_long(width)\n    put_long(-height)\n    put_word(1)\n    put_word(16)\n    put_dword(_BI_BITFIELDS)\n    put_dword(2 * width * height)\n    put_long(11811)\n    put_long(11811)\n    put_dword(0)\n    put_dword(0)\n    put_dword(masks[0])\n    put_dword(masks[1])\n    put_dword(masks[2])\n    put_dword(0)\n    put_dword(0)\n    put_padding(3 * 3 * 4)\n    put_dword(144179)\n    put_dword(144179)\n    put_dword(144179)\n\n# Usage example:\n        swapped = np.frombuffer(the_bitmap, dtype=np.uint16)\n        swapped.byteswap(inplace=True)\n        write_header(f, the_bitmap.width, the_bitmap.height, _bitmask_rgb565)\n        f.write(swapped)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_bmp_sd_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_bmp_sd_kaluga1_3.py",
      "chunk_type": "function",
      "function_name": "write_header"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nimport ulab.numpy as np\nimport adafruit_ov2640\n\ndef capture_image_bmp(the_bitmap):\n    with open_next_image('bmp') as f:\n        swapped = np.frombuffer(the_bitmap, dtype=np.uint16)\n        swapped.byteswap(inplace=True)\n        write_header(f, the_bitmap.width, the_bitmap.height, _bitmask_rgb565)\n        f.write(swapped)\n\n# Usage example:\n    display.refresh(minimum_frames_per_second=0)\n    if record_pressed and not old_record_pressed:\n        capture_image_bmp(bitmap)\n    old_record_pressed = record_pressed\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_bmp_sd_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_bmp_sd_kaluga1_3.py",
      "chunk_type": "function",
      "function_name": "capture_image_bmp"
    }
  },
  {
    "content": "import board\nimport terminalio\nfrom adafruit_display_text.scrolling_label import ScrollingLabel\n\ntext = \"Hello world CircuitPython scrolling label\"\nmy_scrolling_label = ScrollingLabel(terminalio.FONT, text=text, max_characters=20, animate_time=0.3)\nmy_scrolling_label.x = 10\nmy_scrolling_label.y = 10\nboard.DISPLAY.root_group = my_scrolling_label",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-text/examples/display_text_scrolling_label.py",
      "library": "display-text",
      "type": "example",
      "file_name": "display_text_scrolling_label.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2022 Tim Cocks for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport terminalio\n\nfrom adafruit_display_text.scrolling_label import ScrollingLabel\n\ntext = \"Hello world CircuitPython scrolling label\"\nmy_scrolling_label = ScrollingLabel(terminalio.FONT, text=text, max_characters=20, animate_time=0.3)\nmy_scrolling_label.x = 10\nmy_scrolling_label.y = 10\nboard.DISPLAY.root_group = my_scrolling_label\nwhile True:\n    my_scrolling_label.update()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-text/examples/display_text_scrolling_label.py",
      "library": "display-text",
      "type": "example",
      "file_name": "display_text_scrolling_label.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mcp9808\n\nimport board\nimport adafruit_mcp9808\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# To initialise using the default address:\nmcp = adafruit_mcp9808.MCP9808(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp9808/examples/mcp9808_simpletest.py",
      "library": "mcp9808",
      "type": "example",
      "file_name": "mcp9808_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mcp9808\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# To initialise using the default address:\nmcp = adafruit_mcp9808.MCP9808(i2c)\n# To initialise using a specified address:\n# Necessary when, for example, connecting A0 to VDD to make address=0x19\n# mcp = adafruit_mcp9808.MCP9808(i2c_bus, address=0x19)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp9808/examples/mcp9808_simpletest.py",
      "library": "mcp9808",
      "type": "example",
      "file_name": "mcp9808_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_mcp9808\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\n# To initialise using the default address:\nmcp = adafruit_mcp9808.MCP9808(i2c)\n\n# To initialise using a specified address:\n# Necessary when, for example, connecting A0 to VDD to make address=0x19\n# mcp = adafruit_mcp9808.MCP9808(i2c_bus, address=0x19)\n\nwhile True:\n    tempC = mcp.temperature\n    tempF = tempC * 9 / 5 + 32\n    print(f\"Temperature: {tempC} C {tempF} F \")\n    time.sleep(2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp9808/examples/mcp9808_simpletest.py",
      "library": "mcp9808",
      "type": "example",
      "file_name": "mcp9808_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2022 Alec Delaney for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport socket\nimport ssl\nfrom os import getenv\n\nimport adafruit_requests as requests\n\nfrom adafruit_pastebin.pastebin import ExpirationSetting, PasteBin, PrivacySetting\n\n# Get PasteBin keys, ensure these are setup in your environment\nauth_key = getenv(\"auth_key\")\n\nsession = requests.Session(socket, ssl_context=ssl.create_default_context())\n\npastebin = PasteBin(session, auth_key)\npaste_url = pastebin.paste(\n    \"This is a test paste!\",\n    name=\"My Test Paste\",\n    expiration=ExpirationSetting.ONE_DAY,\n    privacy=PrivacySetting.UNLISTED,\n)\nprint(paste_url)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pastebin/examples/pastebin_simpletest_cpython.py",
      "library": "pastebin",
      "type": "example",
      "file_name": "pastebin_simpletest_cpython.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_ssd1351 import SSD1351\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = fourwire.FourWire(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1351/examples/ssd1351_128x96_simpletest.py",
      "library": "ssd1351",
      "type": "example",
      "file_name": "ssd1351_128x96_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_ssd1351 import SSD1351\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = fourwire.FourWire(\n    spi, command=tft_dc, chip_select=tft_cs, reset=board.D9, baudrate=16000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1351/examples/ssd1351_128x96_simpletest.py",
      "library": "ssd1351",
      "type": "example",
      "file_name": "ssd1351_128x96_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_ssd1351 import SSD1351\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = fourwire.FourWire(\n    spi, command=tft_dc, chip_select=tft_cs, reset=board.D9, baudrate=16000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1351/examples/ssd1351_128x96_simpletest.py",
      "library": "ssd1351",
      "type": "example",
      "file_name": "ssd1351_128x96_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_ssd1351 import SSD1351\n\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9, baudrate=16000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1351/examples/ssd1351_128x96_simpletest.py",
      "library": "ssd1351",
      "type": "example",
      "file_name": "ssd1351_128x96_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_touchscreen\nimport board\nfrom adafruit_pybadger import pybadger\n\nts = adafruit_touchscreen.Touchscreen(board.TOUCH_XL, board.TOUCH_XR, board.TOUCH_YD, board.TOUCH_YU, calibration=((5200, 59000), (5800, 57000)), size=(320, 240))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pybadger/examples/pybadger_pyportal_touchscreen.py",
      "library": "pybadger",
      "type": "example",
      "file_name": "pybadger_pyportal_touchscreen.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport rotaryio\nimport usb_hid\nfrom adafruit_debouncer import Debouncer\nimport adafruit_radial_controller\n\nimport usb_hid\nimport adafruit_radial_controller\nswitch = digitalio.DigitalInOut(board.SWITCH)\nswitch.pull = digitalio.Pull.DOWN\ndebounced_switch = Debouncer(switch)\nencoder = rotaryio.IncrementalEncoder(board.ROTA, board.ROTB)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/radial_controller/examples/radial_controller_rotary_trinkey/code.py",
      "library": "radial_controller",
      "type": "example",
      "file_name": "code.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport rotaryio\nimport usb_hid\nfrom adafruit_debouncer import Debouncer\nimport adafruit_radial_controller\n\nimport adafruit_radial_controller\nswitch = digitalio.DigitalInOut(board.SWITCH)\nswitch.pull = digitalio.Pull.DOWN\ndebounced_switch = Debouncer(switch)\nencoder = rotaryio.IncrementalEncoder(board.ROTA, board.ROTB)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/radial_controller/examples/radial_controller_rotary_trinkey/code.py",
      "library": "radial_controller",
      "type": "example",
      "file_name": "code.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport rotaryio\nimport usb_hid\nfrom adafruit_debouncer import Debouncer\nimport adafruit_radial_controller\n\nswitch = digitalio.DigitalInOut(board.SWITCH)\nswitch.pull = digitalio.Pull.DOWN\ndebounced_switch = Debouncer(switch)\nencoder = rotaryio.IncrementalEncoder(board.ROTA, board.ROTB)\nradial_controller = adafruit_radial_controller.RadialController(usb_hid.devices)\nlast_position = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/radial_controller/examples/radial_controller_rotary_trinkey/code.py",
      "library": "radial_controller",
      "type": "example",
      "file_name": "code.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport rotaryio\nimport usb_hid\nfrom adafruit_debouncer import Debouncer\nimport adafruit_radial_controller\n\nswitch.pull = digitalio.Pull.DOWN\ndebounced_switch = Debouncer(switch)\nencoder = rotaryio.IncrementalEncoder(board.ROTA, board.ROTB)\nradial_controller = adafruit_radial_controller.RadialController(usb_hid.devices)\nlast_position = 0\nDEGREE_TENTHS_MULTIPLIER = 100",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/radial_controller/examples/radial_controller_rotary_trinkey/code.py",
      "library": "radial_controller",
      "type": "example",
      "file_name": "code.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2021 Dan Halbert for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport board\nimport digitalio\nimport rotaryio\nimport usb_hid\nfrom adafruit_debouncer import Debouncer\n\nimport adafruit_radial_controller\n\nswitch = digitalio.DigitalInOut(board.SWITCH)\nswitch.pull = digitalio.Pull.DOWN\ndebounced_switch = Debouncer(switch)\n\nencoder = rotaryio.IncrementalEncoder(board.ROTA, board.ROTB)\n\nradial_controller = adafruit_radial_controller.RadialController(usb_hid.devices)\n\nlast_position = 0\nDEGREE_TENTHS_MULTIPLIER = 100\n\nwhile True:\n    debounced_switch.update()\n    if debounced_switch.rose:\n        radial_controller.press()\n    if debounced_switch.fell:\n        radial_controller.release()\n\n    position = encoder.position\n    delta = position - last_position\n    if delta != 0:\n        radial_controller.rotate(delta * DEGREE_TENTHS_MULTIPLIER)\n        last_position = position\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/radial_controller/examples/radial_controller_rotary_trinkey/code.py",
      "library": "radial_controller",
      "type": "example",
      "file_name": "code.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8151d\n\n# Used to ensure the display is free in CircuitPython\n# Define the pins needed for display use\n# This pinout is for a Feather M4 and may be different for other boards\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8151d/examples/uc8151d_2.9_color.py",
      "library": "uc8151d",
      "type": "example",
      "file_name": "uc8151d_2.9_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8151d\n\n# Define the pins needed for display use\n# This pinout is for a Feather M4 and may be different for other boards\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8151d/examples/uc8151d_2.9_color.py",
      "library": "uc8151d",
      "type": "example",
      "file_name": "uc8151d_2.9_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8151d\n\n# Define the pins needed for display use\n# This pinout is for a Feather M4 and may be different for other boards\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\n# Create the displayio connection to the display pins",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8151d/examples/uc8151d_2.9_color.py",
      "library": "uc8151d",
      "type": "example",
      "file_name": "uc8151d_2.9_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8151d\n\n# Define the pins needed for display use\n# This pinout is for a Feather M4 and may be different for other boards\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\n# Create the displayio connection to the display pins\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8151d/examples/uc8151d_2.9_color.py",
      "library": "uc8151d",
      "type": "example",
      "file_name": "uc8151d_2.9_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8151d\n\n# This pinout is for a Feather M4 and may be different for other boards\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\n# Create the displayio connection to the display pins\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8151d/examples/uc8151d_2.9_color.py",
      "library": "uc8151d",
      "type": "example",
      "file_name": "uc8151d_2.9_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8151d\n\ndisplay = adafruit_uc8151d.UC8151D(display_bus, width=296, height=128, rotation=270, busy_pin=epd_busy, highlight_color=16711680)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8151d/examples/uc8151d_2.9_color.py",
      "library": "uc8151d",
      "type": "example",
      "file_name": "uc8151d_2.9_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_simpletest.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_simpletest.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_simpletest.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\n# Verify nina-fw version >= 1.4.0\nassert int(bytes(esp.firmware_version).decode(\"utf-8\")[2]) >= 4, \"Please update nina-fw to >=1.4.0.\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_simpletest.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\n# Verify nina-fw version >= 1.4.0\nassert int(bytes(esp.firmware_version).decode(\"utf-8\")[2]) >= 4, \"Please update nina-fw to >=1.4.0.\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_simpletest.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\n# Verify nina-fw version >= 1.4.0\nassert int(bytes(esp.firmware_version).decode(\"utf-8\")[2]) >= 4, \"Please update nina-fw to >=1.4.0.\"\n# Use below for Most Boards\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)  # Uncomment for Most Boards\n# Uncomment below for ItsyBitsy M4\n# status_pixel = dotstar.DotStar(board.APA102_SCK, board.APA102_MOSI, 1, brightness=0.2)\n# Uncomment below for an externally defined RGB LED\n# import adafruit_rgbled",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_simpletest.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\n# from adafruit_esp32spi import PWMOut\n# RED_LED = PWMOut.PWMOut(esp, 26)\n# GREEN_LED = PWMOut.PWMOut(esp, 27)\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password, status_pixel=status_pixel)\n### Code ###\ntopic = \"circuitpython/aws\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_simpletest.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\ndef connect(client, userdata, flags, rc):\n    print('Connected to MQTT Broker!')\n    print(f'Flags: {flags}\\n RC: {rc}')\n    print(f'Subscribing to topic {topic}')\n    aws_iot.subscribe(topic)\n\n# Usage example:\nfrom os import getenv\n\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_simpletest.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_simpletest.py",
      "chunk_type": "function",
      "function_name": "connect"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\ndef disconnect(client, userdata, rc):\n    print('Disconnected from MQTT Broker!')\n\n# Usage example:\n\ndef disconnect(client, userdata, rc):\n    # This method is called when the client disconnects\n    # from the broker.\n    print(\"Disconnected from MQTT Broker!\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_simpletest.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_simpletest.py",
      "chunk_type": "function",
      "function_name": "disconnect"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\ndef subscribe(client, userdata, topic, granted_qos):\n    print(f'Subscribed to {topic} with QOS level {granted_qos}')\n    message = {'message': 'Hello from AWS IoT CircuitPython'}\n    aws_iot.publish(topic, json.dumps(message))\n\n# Usage example:\n    # Subscribe to topic circuitpython/aws\n    print(f\"Subscribing to topic {topic}\")\n    aws_iot.subscribe(topic)\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_simpletest.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_simpletest.py",
      "chunk_type": "function",
      "function_name": "subscribe"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\ndef unsubscribe(client, userdata, topic, pid):\n    print(f'Unsubscribed from {topic} with PID {pid}')\n\n# Usage example:\n\ndef unsubscribe(client, userdata, topic, pid):\n    # This method is called when the client unsubscribes from a topic.\n    print(f\"Unsubscribed from {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_simpletest.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_simpletest.py",
      "chunk_type": "function",
      "function_name": "unsubscribe"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\ndef publish(client, userdata, topic, pid):\n    print(f'Published to {topic} with PID {pid}')\n\n# Usage example:\n    message = {\"message\": \"Hello from AWS IoT CircuitPython\"}\n    # Publish message to topic\n    aws_iot.publish(topic, json.dumps(message))\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_simpletest.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_simpletest.py",
      "chunk_type": "function",
      "function_name": "publish"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\ndef message(client, topic, msg):\n    print(f'Message from {topic}: {msg}')\n\n# Usage example:\n    print(f\"Subscribed to {topic} with QOS level {granted_qos}\")\n\n    # Create a json-formatted message\n    message = {\"message\": \"Hello from AWS IoT CircuitPython\"}\n    # Publish message to topic",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_simpletest.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_simpletest.py",
      "chunk_type": "function",
      "function_name": "message"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\n# Connect to WiFi\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Set up a new MiniMQTT Client\nclient = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_simpletest.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Set up a new MiniMQTT Client\nclient = MQTT.MQTT(\n    broker=broker,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_simpletest.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2017 Scott Shawcroft, written for Adafruit Industries\n# SPDX-FileCopyrightText: Copyright (c) 2023 Jeff Epler for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport adafruit_wave\n\nwith adafruit_wave.open(\"sample.wav\") as w:\n    print(w.getsampwidth())\n    print(w.getnchannels())\n    print(list(memoryview(w.readframes(100)).cast(\"h\")))\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/wave/examples/wave_simpletest.py",
      "library": "wave",
      "type": "example",
      "file_name": "wave_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport usb_hid\nfrom adafruit_hid.mouse import Mouse\nimport adafruit_nunchuk\n\nimport adafruit_nunchuk\nm = Mouse(usb_hid.devices)\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nnc = adafruit_nunchuk.Nunchuk(i2c)\ncenterX = 120",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/nunchuk/examples/nunchuk_accel_mouse.py",
      "library": "nunchuk",
      "type": "example",
      "file_name": "nunchuk_accel_mouse.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport usb_hid\nfrom adafruit_hid.mouse import Mouse\nimport adafruit_nunchuk\n\nimport adafruit_nunchuk\nm = Mouse(usb_hid.devices)\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nnc = adafruit_nunchuk.Nunchuk(i2c)\ncenterX = 120\ncenterY = 110",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/nunchuk/examples/nunchuk_accel_mouse.py",
      "library": "nunchuk",
      "type": "example",
      "file_name": "nunchuk_accel_mouse.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_pcf8574\n\nimport adafruit_pcf8574\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8574.PCF8574(i2c)\n# get a 'digitalio' like pin from the pcf",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8574/examples/pcf8574_simpletest.py",
      "library": "pcf8574",
      "type": "example",
      "file_name": "pcf8574_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_pcf8574\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8574.PCF8574(i2c)\n# get a 'digitalio' like pin from the pcf\nled = pcf.get_pin(7)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8574/examples/pcf8574_simpletest.py",
      "library": "pcf8574",
      "type": "example",
      "file_name": "pcf8574_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2017 Scott Shawcroft, written for Adafruit Industries\n# SPDX-FileCopyrightText: Copyright (c) 2022 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\n\nimport adafruit_pcf8574\n\nprint(\"PCF8574 digitalio LED blink test\")\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8574.PCF8574(i2c)\n\n# get a 'digitalio' like pin from the pcf\nled = pcf.get_pin(7)\n\n# Setup pin7 as an output that's at a high logic level default\nled.switch_to_output(value=True)\n\nwhile True:\n    led.value = True\n    time.sleep(0.2)\n    led.value = False\n    time.sleep(0.2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8574/examples/pcf8574_simpletest.py",
      "library": "pcf8574",
      "type": "example",
      "file_name": "pcf8574_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import random\nimport time\nfrom colorsys import hsv_to_rgb\nimport board\nfrom digitalio import DigitalInOut, Direction\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import st7789\n\n# Create the display\ncs_pin = DigitalInOut(board.CE0)\ndc_pin = DigitalInOut(board.D25)\nreset_pin = DigitalInOut(board.D24)\nBAUDRATE = 24000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_bonnet_buttons.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_bonnet_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom colorsys import hsv_to_rgb\nimport board\nfrom digitalio import DigitalInOut, Direction\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import st7789\n\n# Create the display\ncs_pin = DigitalInOut(board.CE0)\ndc_pin = DigitalInOut(board.D25)\nreset_pin = DigitalInOut(board.D24)\nBAUDRATE = 24000000\nspi = board.SPI()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_bonnet_buttons.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_bonnet_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom colorsys import hsv_to_rgb\nimport board\nfrom digitalio import DigitalInOut, Direction\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import st7789\n\n# Create the display\ncs_pin = DigitalInOut(board.CE0)\ndc_pin = DigitalInOut(board.D25)\nreset_pin = DigitalInOut(board.D24)\nBAUDRATE = 24000000\nspi = board.SPI()\ndisp = st7789.ST7789(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_bonnet_buttons.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_bonnet_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom colorsys import hsv_to_rgb\nimport board\nfrom digitalio import DigitalInOut, Direction\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import st7789\n\ncs_pin = DigitalInOut(board.CE0)\ndc_pin = DigitalInOut(board.D25)\nreset_pin = DigitalInOut(board.D24)\nBAUDRATE = 24000000\nspi = board.SPI()\ndisp = st7789.ST7789(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_bonnet_buttons.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_bonnet_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom colorsys import hsv_to_rgb\nimport board\nfrom digitalio import DigitalInOut, Direction\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import st7789\n\n    rst=reset_pin,\n    baudrate=BAUDRATE,\n# Input pins:\nbutton_A = DigitalInOut(board.D5)\nbutton_A.direction = Direction.INPUT\nbutton_B = DigitalInOut(board.D6)\nbutton_B.direction = Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_bonnet_buttons.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_bonnet_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom colorsys import hsv_to_rgb\nimport board\nfrom digitalio import DigitalInOut, Direction\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import st7789\n\n# Input pins:\nbutton_A = DigitalInOut(board.D5)\nbutton_A.direction = Direction.INPUT\nbutton_B = DigitalInOut(board.D6)\nbutton_B.direction = Direction.INPUT\nbutton_L = DigitalInOut(board.D27)\nbutton_L.direction = Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_bonnet_buttons.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_bonnet_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom colorsys import hsv_to_rgb\nimport board\nfrom digitalio import DigitalInOut, Direction\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import st7789\n\nbutton_A.direction = Direction.INPUT\nbutton_B = DigitalInOut(board.D6)\nbutton_B.direction = Direction.INPUT\nbutton_L = DigitalInOut(board.D27)\nbutton_L.direction = Direction.INPUT\nbutton_R = DigitalInOut(board.D23)\nbutton_R.direction = Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_bonnet_buttons.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_bonnet_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom colorsys import hsv_to_rgb\nimport board\nfrom digitalio import DigitalInOut, Direction\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import st7789\n\nbutton_B.direction = Direction.INPUT\nbutton_L = DigitalInOut(board.D27)\nbutton_L.direction = Direction.INPUT\nbutton_R = DigitalInOut(board.D23)\nbutton_R.direction = Direction.INPUT\nbutton_U = DigitalInOut(board.D17)\nbutton_U.direction = Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_bonnet_buttons.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_bonnet_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom colorsys import hsv_to_rgb\nimport board\nfrom digitalio import DigitalInOut, Direction\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import st7789\n\nbutton_L.direction = Direction.INPUT\nbutton_R = DigitalInOut(board.D23)\nbutton_R.direction = Direction.INPUT\nbutton_U = DigitalInOut(board.D17)\nbutton_U.direction = Direction.INPUT\nbutton_D = DigitalInOut(board.D22)\nbutton_D.direction = Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_bonnet_buttons.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_bonnet_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom colorsys import hsv_to_rgb\nimport board\nfrom digitalio import DigitalInOut, Direction\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import st7789\n\nbutton_R.direction = Direction.INPUT\nbutton_U = DigitalInOut(board.D17)\nbutton_U.direction = Direction.INPUT\nbutton_D = DigitalInOut(board.D22)\nbutton_D.direction = Direction.INPUT\nbutton_C = DigitalInOut(board.D4)\nbutton_C.direction = Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_bonnet_buttons.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_bonnet_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom colorsys import hsv_to_rgb\nimport board\nfrom digitalio import DigitalInOut, Direction\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import st7789\n\nbutton_U.direction = Direction.INPUT\nbutton_D = DigitalInOut(board.D22)\nbutton_D.direction = Direction.INPUT\nbutton_C = DigitalInOut(board.D4)\nbutton_C.direction = Direction.INPUT\n# Turn on the Backlight\nbacklight = DigitalInOut(board.D26)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_bonnet_buttons.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_bonnet_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom colorsys import hsv_to_rgb\nimport board\nfrom digitalio import DigitalInOut, Direction\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import st7789\n\nbutton_C = DigitalInOut(board.D4)\nbutton_C.direction = Direction.INPUT\n# Turn on the Backlight\nbacklight = DigitalInOut(board.D26)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_bonnet_buttons.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_bonnet_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\nimport adafruit_il0373\nepd_cs = board.D9\nepd_dc = board.D10\ndisplay_bus = fourwire.FourWire(board.SPI(), command=epd_dc, chip_select=epd_cs, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_simpletest.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\nimport adafruit_il0373\nepd_cs = board.D9\nepd_dc = board.D10\ndisplay_bus = fourwire.FourWire(board.SPI(), command=epd_dc, chip_select=epd_cs, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_simpletest.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\nepd_cs = board.D9\nepd_dc = board.D10\ndisplay_bus = fourwire.FourWire(board.SPI(), command=epd_dc, chip_select=epd_cs, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_simpletest.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\ndisplay = adafruit_il0373.IL0373(display_bus, width=212, height=104, rotation=90, highlight_color=16711680)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_simpletest.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Simple test script for 2.13\" 212x104 tri-color featherwing.\n\nSupported products:\n  * Adafruit 2.13\" Tri-Color FeatherWing\n    * https://www.adafruit.com/product/4128\n\"\"\"\n\nimport time\n\nimport board\nimport displayio\nimport fourwire\n\nimport adafruit_il0373\n\ndisplayio.release_displays()\n\nepd_cs = board.D9\nepd_dc = board.D10\n\ndisplay_bus = fourwire.FourWire(board.SPI(), command=epd_dc, chip_select=epd_cs, baudrate=1000000)\ntime.sleep(1)\n\ndisplay = adafruit_il0373.IL0373(\n    display_bus, width=212, height=104, rotation=90, highlight_color=0xFF0000\n)\n\ng = displayio.Group()\n\npic = displayio.OnDiskBitmap(\"/display-ruler.bmp\")\nt = displayio.TileGrid(pic, pixel_shader=pic.pixel_shader)\ng.append(t)\n\ndisplay.root_group = g\n\ndisplay.refresh()\n\nprint(\"refreshed\")\ntime.sleep(120)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_simpletest.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_pcf8591.pcf8591 as PCF\nfrom adafruit_pcf8591.analog_in import AnalogIn\n\n# Connect a voltage source to the first ADC channel, in addition to the\n# normal power and I2C connections. The voltage level should be between 0V/GND and VCC\n#\n########################################\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = PCF.PCF8591(i2c)\npcf_in_0 = AnalogIn(pcf, PCF.A0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8591/examples/pcf8591_analog_in.py",
      "library": "pcf8591",
      "type": "example",
      "file_name": "pcf8591_analog_in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_lora_sf_node.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_lora_sf_node.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_lora_sf_node.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_lora_sf_node.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\n# uncommnet the desired import and rfm initialization depending on the radio boards being used",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_lora_sf_node.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_lora_sf_node.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom fourwire import FourWire\nimport adafruit_ssd1675\n\n# This pinout works on a Feather RP2040 EPD and may need to be altered for other\n# boards. The older SSD1675 version with HINK on the ribbon cable 2.13\" dual color\n# is connected directly via the ribbon cable.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1675/examples/ssd1675_four_corners.py",
      "library": "ssd1675",
      "type": "example",
      "file_name": "ssd1675_four_corners.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom fourwire import FourWire\nimport adafruit_ssd1675\n\n# This pinout works on a Feather RP2040 EPD and may need to be altered for other\n# boards. The older SSD1675 version with HINK on the ribbon cable 2.13\" dual color\n# is connected directly via the ribbon cable.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1675/examples/ssd1675_four_corners.py",
      "library": "ssd1675",
      "type": "example",
      "file_name": "ssd1675_four_corners.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom fourwire import FourWire\nimport adafruit_ssd1675\n\n# This pinout works on a Feather RP2040 EPD and may need to be altered for other\n# boards. The older SSD1675 version with HINK on the ribbon cable 2.13\" dual color\n# is connected directly via the ribbon cable.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1675/examples/ssd1675_four_corners.py",
      "library": "ssd1675",
      "type": "example",
      "file_name": "ssd1675_four_corners.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom fourwire import FourWire\nimport adafruit_ssd1675\n\n# boards. The older SSD1675 version with HINK on the ribbon cable 2.13\" dual color\n# is connected directly via the ribbon cable.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)\ndisplay = adafruit_ssd1675.SSD1675(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1675/examples/ssd1675_four_corners.py",
      "library": "ssd1675",
      "type": "example",
      "file_name": "ssd1675_four_corners.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom fourwire import FourWire\nimport adafruit_ssd1675\n\n# is connected directly via the ribbon cable.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)\ndisplay = adafruit_ssd1675.SSD1675(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1675/examples/ssd1675_four_corners.py",
      "library": "ssd1675",
      "type": "example",
      "file_name": "ssd1675_four_corners.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom fourwire import FourWire\nimport adafruit_ssd1675\n\ndisplay = adafruit_ssd1675.SSD1675(display_bus, width=250, height=122, busy_pin=epd_busy, rotation=270, seconds_per_frame=10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1675/examples/ssd1675_four_corners.py",
      "library": "ssd1675",
      "type": "example",
      "file_name": "ssd1675_four_corners.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_gps\n\n# Create a serial connection for the GPS connection using default speed and\n# a slightly higher timeout (GPS modules typically update once a second).\n# These are the defaults you should use for the GPS FeatherWing.\n# For other boards set RX = GPS module TX, and TX = GPS module RX pins.\nuart = busio.UART(board.TX, board.RX, baudrate=9600, timeout=10)\n# for a computer, use the pyserial library for uart access\n# import serial\n# uart = serial.Serial(\"/dev/ttyUSB0\", baudrate=9600, timeout=10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/gps/examples/gps_echotest.py",
      "library": "gps",
      "type": "example",
      "file_name": "gps_echotest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_gps\n\n# If using I2C, we'll create an I2C interface to talk to using default pins\n# i2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Create a GPS module instance.\ngps = adafruit_gps.GPS(uart)  # Use UART/pyserial\n# gps = adafruit_gps.GPS_GtopI2C(i2c)  # Use I2C interface\n# Initialize the GPS module by changing what data it sends and at what rate.\n# These are NMEA extensions for PMTK_314_SET_NMEA_OUTPUT and",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/gps/examples/gps_echotest.py",
      "library": "gps",
      "type": "example",
      "file_name": "gps_echotest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from io import BytesIO\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests as requests\nimport board\nimport displayio\nimport wifi\nimport adafruit_imageload\n\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nhttps = requests.Session(pool, ssl_context)\nurl = \"https://raw.githubusercontent.com/adafruit/Adafruit_CircuitPython_ImageLoad/main/examples/images/4bit.bmp\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_from_web.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_from_web.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from io import BytesIO\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests as requests\nimport board\nimport displayio\nimport wifi\nimport adafruit_imageload\n\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nhttps = requests.Session(pool, ssl_context)\nurl = \"https://raw.githubusercontent.com/adafruit/Adafruit_CircuitPython_ImageLoad/main/examples/images/4bit.bmp\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_from_web.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_from_web.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from io import BytesIO\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests as requests\nimport board\nimport displayio\nimport wifi\nimport adafruit_imageload\n\nresponse = https.get(url)\nbytes_img = BytesIO(response.content)\nimage, palette = adafruit_imageload.load(bytes_img)\ntile_grid = displayio.TileGrid(image, pixel_shader=palette)\ngroup = displayio.Group(scale=1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_from_web.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_from_web.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from io import BytesIO\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests as requests\nimport board\nimport displayio\nimport wifi\nimport adafruit_imageload\n\nimage, palette = adafruit_imageload.load(bytes_img)\ntile_grid = displayio.TileGrid(image, pixel_shader=palette)\ngroup = displayio.Group(scale=1)\nboard.DISPLAY.root_group = group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_from_web.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_from_web.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import sys\nimport time\nimport board\nimport busio\nimport adafruit_ov2640\n\nimport board\nimport busio\nimport adafruit_ov2640\nbus = busio.I2C(scl=board.CAMERA_SIOC, sda=board.CAMERA_SIOD)\ncam = adafruit_ov2640.OV2640(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_simpletest.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import sys\nimport time\nimport board\nimport busio\nimport adafruit_ov2640\n\ncam = adafruit_ov2640.OV2640(bus, data_pins=board.CAMERA_DATA, clock=board.CAMERA_PCLK, vsync=board.CAMERA_VSYNC, href=board.CAMERA_HREF, mclk=board.CAMERA_XCLK, mclk_frequency=20000000, size=adafruit_ov2640.OV2640_SIZE_QQVGA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_simpletest.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import sys\nimport time\nimport board\nimport busio\nimport adafruit_ov2640\n\n    href=board.CAMERA_HREF,\n    mclk=board.CAMERA_XCLK,\n    mclk_frequency=20_000_000,\n    size=adafruit_ov2640.OV2640_SIZE_QQVGA,\ncam.colorspace = adafruit_ov2640.OV2640_COLOR_YUV\ncam.flip_y = True\n# cam.test_pattern = True\nbuf = bytearray(2 * cam.width * cam.height)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_simpletest.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nfrom adafruit_ms8607 import MS8607\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = MS8607(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ms8607/examples/ms8607_simpletest.py",
      "library": "ms8607",
      "type": "example",
      "file_name": "ms8607_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 Bryan Siepert, written for Adafruit Industries\n# SPDX-License-Identifier: MIT\nfrom time import sleep\n\nimport board\n\nfrom adafruit_ms8607 import MS8607\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = MS8607(i2c)\n\nwhile True:\n    print(\"Pressure: %.2f hPa\" % sensor.pressure)\n    print(\"Temperature: %.2f C\" % sensor.temperature)\n    print(\"Humidity: %.2f %% rH\" % sensor.relative_humidity)\n    print(\"\\n------------------------------------------------\\n\")\n    sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ms8607/examples/ms8607_simpletest.py",
      "library": "ms8607",
      "type": "example",
      "file_name": "ms8607_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import socket\nimport ssl\nfrom os import getenv\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef connect(mqtt_client, userdata, flags, rc):\n    print('Connected to MQTT Broker!')\n    print(f'Flags: {flags}\\n RC: {rc}')\n\n# Usage example:\n\n# MQTT Topic\n# Use this topic if you'd like to connect to a standard MQTT broker\nmqtt_topic = \"test/topic\"\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cpython/minimqtt_simpletest_cpython.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_cpython.py",
      "chunk_type": "function",
      "function_name": "connect"
    }
  },
  {
    "content": "import socket\nimport ssl\nfrom os import getenv\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef disconnect(mqtt_client, userdata, rc):\n    print('Disconnected from MQTT Broker!')\n\n# Usage example:\n\ndef disconnect(mqtt_client, userdata, rc):\n    # This method is called when the mqtt_client disconnects\n    # from the broker.\n    print(\"Disconnected from MQTT Broker!\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cpython/minimqtt_simpletest_cpython.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_cpython.py",
      "chunk_type": "function",
      "function_name": "disconnect"
    }
  },
  {
    "content": "import socket\nimport ssl\nfrom os import getenv\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef subscribe(mqtt_client, userdata, topic, granted_qos):\n    print(f'Subscribed to {topic} with QOS level {granted_qos}')\n\n# Usage example:\n\ndef subscribe(mqtt_client, userdata, topic, granted_qos):\n    # This method is called when the mqtt_client subscribes to a new feed.\n    print(f\"Subscribed to {topic} with QOS level {granted_qos}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cpython/minimqtt_simpletest_cpython.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_cpython.py",
      "chunk_type": "function",
      "function_name": "subscribe"
    }
  },
  {
    "content": "import socket\nimport ssl\nfrom os import getenv\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef unsubscribe(mqtt_client, userdata, topic, pid):\n    print(f'Unsubscribed from {topic} with PID {pid}')\n\n# Usage example:\n\ndef unsubscribe(mqtt_client, userdata, topic, pid):\n    # This method is called when the mqtt_client unsubscribes from a feed.\n    print(f\"Unsubscribed from {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cpython/minimqtt_simpletest_cpython.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_cpython.py",
      "chunk_type": "function",
      "function_name": "unsubscribe"
    }
  },
  {
    "content": "import socket\nimport ssl\nfrom os import getenv\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef publish(mqtt_client, userdata, topic, pid):\n    print(f'Published to {topic} with PID {pid}')\n\n# Usage example:\n\ndef publish(mqtt_client, userdata, topic, pid):\n    # This method is called when the mqtt_client publishes data to a feed.\n    print(f\"Published to {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cpython/minimqtt_simpletest_cpython.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_cpython.py",
      "chunk_type": "function",
      "function_name": "publish"
    }
  },
  {
    "content": "import socket\nimport ssl\nfrom os import getenv\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef message(client, topic, message):\n    print(f'New message on topic {topic}: {message}')\n\n# Usage example:\ndef message(client, topic, message):\n    # Method callled when a client's subscribed feed has a new value.\n    print(f\"New message on topic {topic}: {message}\")\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cpython/minimqtt_simpletest_cpython.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_cpython.py",
      "chunk_type": "function",
      "function_name": "message"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_bluefruit_connect.color_packet import ColorPacket\nfrom adafruit_bluefruit_connect.packet import Packet\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_ble.services.nordic import UARTService\n\nNUM_PIXELS = 10\nnp = neopixel.NeoPixel(board.NEOPIXEL, NUM_PIXELS, brightness=0.1)\nnext_pixel = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_demo_periph.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_demo_periph.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_bluefruit_connect.color_packet import ColorPacket\nfrom adafruit_bluefruit_connect.packet import Packet\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_ble.services.nordic import UARTService\n\n# Wrap i to modulus NUM_PIXELS.\ndef mod(i):\n    \"\"\"Wrap i to modulus NUM_PIXELS.\"\"\"\n    return i % NUM_PIXELS\n\n# Usage example:\n\ndef mod(i):\n    \"\"\"Wrap i to modulus NUM_PIXELS.\"\"\"\n    return i % NUM_PIXELS\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_demo_periph.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_demo_periph.py",
      "chunk_type": "function",
      "function_name": "mod"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n### Cellular ###\n# Create a serial connection for the FONA connection\nuart = busio.UART(board.TX, board.RX)\nrst = digitalio.DigitalInOut(board.D4)\n# Initialize FONA\nfona = FONA(uart, rst)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cellular/minimqtt_adafruitio_cellular.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_cellular.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n### Cellular ###\n# Create a serial connection for the FONA connection\nuart = busio.UART(board.TX, board.RX)\nrst = digitalio.DigitalInOut(board.D4)\n# Initialize FONA\nfona = FONA(uart, rst)\n### Feeds ###",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cellular/minimqtt_adafruitio_cellular.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_cellular.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef connected(client, userdata, flags, rc):\n    print(f'Connected to Adafruit IO! Listening for topic changes on {onoff_feed}')\n    client.subscribe(onoff_feed)\n\n# Usage example:\n# Define callback methods which are called when events occur\ndef connected(client, userdata, flags, rc):\n    # This function will be called when the client is connected\n    # successfully to the broker.\n    print(f\"Connected to Adafruit IO! Listening for topic changes on {onoff_feed}\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cellular/minimqtt_adafruitio_cellular.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_cellular.py",
      "chunk_type": "function",
      "function_name": "connected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef disconnected(client, userdata, rc):\n    print('Disconnected from Adafruit IO!')\n\n# Usage example:\n\ndef disconnected(client, userdata, rc):\n    # This method is called when the client is disconnected\n    print(\"Disconnected from Adafruit IO!\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cellular/minimqtt_adafruitio_cellular.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_cellular.py",
      "chunk_type": "function",
      "function_name": "disconnected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef message(client, topic, message):\n    print(f'New message on topic {topic}: {message}')\n\n# Usage example:\ndef message(client, topic, message):\n    # This method is called when a topic the client is subscribed to\n    # has a new message.\n    print(f\"New message on topic {topic}: {message}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cellular/minimqtt_adafruitio_cellular.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_cellular.py",
      "chunk_type": "function",
      "function_name": "message"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, fona)\n# Set up a MiniMQTT Client\n# NOTE: We'll need to connect insecurely for ethernet configurations.\nmqtt_client = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cellular/minimqtt_adafruitio_cellular.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_cellular.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_ina3221 import INA3221\n\nimport board\ni2c = board.I2C()\nina = INA3221(i2c, enable=[0, 1, 2])",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ina3221/examples/ina3221_simpletest.py",
      "library": "ina3221",
      "type": "example",
      "file_name": "ina3221_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2024 Liz Clark for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\nimport time\n\nimport board\n\nfrom adafruit_ina3221 import INA3221\n\ni2c = board.I2C()\nina = INA3221(i2c, enable=[0, 1, 2])\n\nwhile True:\n    for i in range(3):\n        bus_voltage = ina[i].bus_voltage\n        shunt_voltage = ina[i].shunt_voltage\n        current = ina[i].current\n\n        print(f\"Channel {i + 1}:\")\n        print(f\"  Bus Voltage: {bus_voltage:.6f} V\")\n        print(f\"  Shunt Voltage: {shunt_voltage:.6f} mV\")\n        print(f\"  Current: {current:.6f} mA\")\n        print(\"-\" * 30)\n\n    time.sleep(2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ina3221/examples/ina3221_simpletest.py",
      "library": "ina3221",
      "type": "example",
      "file_name": "ina3221_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_vl53l0x\n\nimport busio\nimport adafruit_vl53l0x\n# Initialize I2C bus and sensor.\ni2c = busio.I2C(board.SCL, board.SDA)\nvl53 = adafruit_vl53l0x.VL53L0X(i2c)\n# Optionally adjust the measurement timing budget to change speed and accuracy.\n# See the example here for more details:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l0x/examples/vl53l0x_simpletest.py",
      "library": "vl53l0x",
      "type": "example",
      "file_name": "vl53l0x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_vl53l0x\n\nimport adafruit_vl53l0x\n# Initialize I2C bus and sensor.\ni2c = busio.I2C(board.SCL, board.SDA)\nvl53 = adafruit_vl53l0x.VL53L0X(i2c)\n# Optionally adjust the measurement timing budget to change speed and accuracy.\n# See the example here for more details:\n#   https://github.com/pololu/vl53l0x-arduino/blob/master/examples/Single/Single.ino",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l0x/examples/vl53l0x_simpletest.py",
      "library": "vl53l0x",
      "type": "example",
      "file_name": "vl53l0x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# Simple demo of the VL53L0X distance sensor.\n# Will print the sensed range/distance every second.\nimport time\n\nimport board\nimport busio\n\nimport adafruit_vl53l0x\n\n# Initialize I2C bus and sensor.\ni2c = busio.I2C(board.SCL, board.SDA)\nvl53 = adafruit_vl53l0x.VL53L0X(i2c)\n\n# Optionally adjust the measurement timing budget to change speed and accuracy.\n# See the example here for more details:\n#   https://github.com/pololu/vl53l0x-arduino/blob/master/examples/Single/Single.ino\n# For example a higher speed but less accurate timing budget of 20ms:\n# vl53.measurement_timing_budget = 20000\n# Or a slower but more accurate timing budget of 200ms:\n# vl53.measurement_timing_budget = 200000\n# The default timing budget is 33ms, a good compromise of speed and accuracy.\n\n# Main loop will read the range and print it every second.\nwhile True:\n    print(f\"Range: {vl53.range}mm\")\n    time.sleep(1.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l0x/examples/vl53l0x_simpletest.py",
      "library": "vl53l0x",
      "type": "example",
      "file_name": "vl53l0x_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport framebufferio\nimport is31fl3741\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_text import label\nfrom adafruit_led_animation.animation.chase import Chase\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_is31fl3741.is31fl3741_PixelBuf import IS31FL3741_PixelBuf\nfrom adafruit_is31fl3741.led_glasses_map import glassesmatrix_ledmap_no_ring, left_ring_map_no_inner, right_ring_map_no_inner\n\n# Release any existing displays\n# Create our own I2C bus with a 1Mhz frequency for faster updates\ni2c = busio.I2C(board.SCL, board.SDA, frequency=1000000)\n# Initalize the IS31FL3741\nis31 = is31fl3741.IS31FL3741(i2c=i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3741/examples/is31fl3741_native.py",
      "library": "is31fl3741",
      "type": "example",
      "file_name": "is31fl3741_native.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom rainbowio import colorwheel\nfrom adafruit_neokey.neokey1x4 import NeoKey1x4\n\n# Create a NeoKey object\nneokey1 = NeoKey1x4(board.I2C())\nneokey2 = NeoKey1x4(board.I2C(), addr=0x31)\nkeys = [",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/neokey/examples/neokey_1x4_multikey.py",
      "library": "neokey",
      "type": "example",
      "file_name": "neokey_1x4_multikey.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom rainbowio import colorwheel\nfrom adafruit_neokey.neokey1x4 import NeoKey1x4\n\nneokey2 = NeoKey1x4(board.I2C(), addr=49)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/neokey/examples/neokey_1x4_multikey.py",
      "library": "neokey",
      "type": "example",
      "file_name": "neokey_1x4_multikey.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_mcp4728\n\nimport board\nimport adafruit_mcp4728\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmcp4728 = adafruit_mcp4728.MCP4728(i2c)\nmcp4728.channel_a.value = 65535  # Voltage = VDD",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp4728/examples/mcp4728_generalcalltest.py",
      "library": "mcp4728",
      "type": "example",
      "file_name": "mcp4728_generalcalltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_mcp4728\n\nimport adafruit_mcp4728\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmcp4728 = adafruit_mcp4728.MCP4728(i2c)\nmcp4728.channel_a.value = 65535  # Voltage = VDD\nmcp4728.channel_b.value = int(65535 / 2)  # VDD/2\nmcp4728.channel_c.value = int(65535 / 4)  # VDD/4",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp4728/examples/mcp4728_generalcalltest.py",
      "library": "mcp4728",
      "type": "example",
      "file_name": "mcp4728_generalcalltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 codenio (Aananth K)\n# SPDX-License-Identifier: MIT\n\nimport board\n\nimport adafruit_mcp4728\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmcp4728 = adafruit_mcp4728.MCP4728(i2c)\n\nmcp4728.channel_a.value = 65535  # Voltage = VDD\nmcp4728.channel_b.value = int(65535 / 2)  # VDD/2\nmcp4728.channel_c.value = int(65535 / 4)  # VDD/4\nmcp4728.channel_d.value = 0  # 0V\n\nmcp4728.save_settings()  # save current voltages into EEPROM\n\nprint(\"Settings Saved into EEPROM\")\n\ninput(\"Press Enter to modify the channel outputs...\")\n\nmcp4728.channel_a.value = 0  # Modify output\nmcp4728.channel_b.value = 0  # Modify output\nmcp4728.channel_c.value = 0  # Modify output\nmcp4728.channel_d.value = 65535  # Modify output\n\nprint(\"Channel Outputs Modified\")\n\ninput(\"Press Enter to invoke General Call Reset ...\")\n\nmcp4728.reset()  # reset MCP4728\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp4728/examples/mcp4728_generalcalltest.py",
      "library": "mcp4728",
      "type": "example",
      "file_name": "mcp4728_generalcalltest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\nfrom adafruit_azureiot.iot_mqtt import IoTResponse\n\n    esp32_cs = DigitalInOut(board.D13)\n    esp32_ready = DigitalInOut(board.D11)\n    esp32_reset = DigitalInOut(board.D12)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_directmethods.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_directmethods.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\nfrom adafruit_azureiot.iot_mqtt import IoTResponse\n\n    esp32_cs = DigitalInOut(board.D13)\n    esp32_ready = DigitalInOut(board.D11)\n    esp32_reset = DigitalInOut(board.D12)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_directmethods.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_directmethods.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\nfrom adafruit_azureiot.iot_mqtt import IoTResponse\n\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)  # Uncomment for Most Boards",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_directmethods.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_directmethods.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\nfrom adafruit_azureiot.iot_mqtt import IoTResponse\n\n# from adafruit_esp32spi import PWMOut\n# RED_LED = PWMOut.PWMOut(esp, 26)\n# GREEN_LED = PWMOut.PWMOut(esp, 27)\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password, status_pixel=status_pixel)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_directmethods.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_directmethods.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\nfrom adafruit_azureiot.iot_mqtt import IoTResponse\n\n# From the Adafruit CircuitPython Bundle https://github.com/adafruit/Adafruit_CircuitPython_Bundle:\n# * adafruit-circuitpython-minimqtt\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Create an IoT Hub device client and connect\ndevice = IoTHubDevice(pool, ssl_context, device_connection_string)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_directmethods.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_directmethods.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\nfrom adafruit_azureiot.iot_mqtt import IoTResponse\n\n# * adafruit-circuitpython-minimqtt\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Create an IoT Hub device client and connect\ndevice = IoTHubDevice(pool, ssl_context, device_connection_string)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_directmethods.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_directmethods.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\nfrom adafruit_azureiot.iot_mqtt import IoTResponse\n\ndef direct_method_invoked(method_name: str, payload) -> IoTResponse:\n    print('Received direct method', method_name, 'with data', str(payload))\n    return IoTResponse(200, 'OK')\n\n# Usage example:\n\n# Subscribe to the direct method invoked event\ndevice.on_direct_method_invoked = direct_method_invoked\n\nprint(\"Connecting to Azure IoT Hub...\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_directmethods.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_directmethods.py",
      "chunk_type": "function",
      "function_name": "direct_method_invoked"
    }
  },
  {
    "content": "import board\nimport busio\nfrom adafruit_is31fl3731.charlie_wing import CharlieWing as Display\n\n# from adafruit_is31fl3731.matrix_11x7 import Matrix11x7 as Display\n# uncomment this line if you use a Pico, here with SCL=GP21 and SDA=GP20.\n# i2c = busio.I2C(board.GP21, board.GP20)\ni2c = busio.I2C(board.SCL, board.SDA)\n# array pattern in bits; top row-> bottom row, 8 bits in each row\nan_arrow = bytearray((0x08, 0x0C, 0xFE, 0xFF, 0xFE, 0x0C, 0x08, 0x00, 0x00))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3731/examples/is31fl3731_blink_example.py",
      "library": "is31fl3731",
      "type": "example",
      "file_name": "is31fl3731_blink_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_trellism4\n\nimport time\nimport adafruit_trellism4\ntrellis = adafruit_trellism4.TrellisM4Express()\ncurrent_press = set()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/trellism4/examples/trellism4_press_and_release.py",
      "library": "trellism4",
      "type": "example",
      "file_name": "trellism4_press_and_release.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport adafruit_trellism4\n\ntrellis = adafruit_trellism4.TrellisM4Express()\n\ncurrent_press = set()\nwhile True:\n    pressed = set(trellis.pressed_keys)\n    for press in pressed - current_press:\n        print(\"Pressed:\", press)\n    for release in current_press - pressed:\n        print(\"Released:\", release)\n    time.sleep(0.08)\n    current_press = pressed\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/trellism4/examples/trellism4_press_and_release.py",
      "library": "trellism4",
      "type": "example",
      "file_name": "trellism4_press_and_release.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import logging\nimport subprocess\nimport time\nimport board\nimport busio\nimport uinput\nimport adafruit_mpr121\n\n# Configure virtual keyboard.\ndevice = uinput.Device(KEY_MAPPING.values())\n# Create I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create MPR121 object.\nmpr121 = adafruit_mpr121.MPR121(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpr121/examples/mpr121_pi_keyboard.py",
      "library": "mpr121",
      "type": "example",
      "file_name": "mpr121_pi_keyboard.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import logging\nimport subprocess\nimport time\nimport board\nimport busio\nimport uinput\nimport adafruit_mpr121\n\n# Create I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create MPR121 object.\nmpr121 = adafruit_mpr121.MPR121(i2c)\n# Event loop to wait for pin changes and respond to them.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpr121/examples/mpr121_pi_keyboard.py",
      "library": "mpr121",
      "type": "example",
      "file_name": "mpr121_pi_keyboard.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_tca8418 import TCA8418\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntca = TCA8418(i2c)\n# setup 2 gpio: LED on R0 and button in R1",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca8418/examples/tca8418_gpiobutton.py",
      "library": "tca8418",
      "type": "example",
      "file_name": "tca8418_gpiobutton.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2022 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\n\nfrom adafruit_tca8418 import TCA8418\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntca = TCA8418(i2c)\n\n# setup 2 gpio: LED on R0 and button in R1\nOUTPIN = TCA8418.R0\nINPIN = TCA8418.R1\ntca.gpio_mode[OUTPIN] = True\ntca.gpio_mode[INPIN] = True\n\n# one is output, other is input with pullup\ntca.gpio_direction[OUTPIN] = True\ntca.gpio_direction[INPIN] = False\ntca.pullup[INPIN] = True\n\n# have LED mirror button\nwhile True:\n    tca.output_value[OUTPIN] = tca.input_value[INPIN]\n    time.sleep(0.01)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca8418/examples/tca8418_gpiobutton.py",
      "library": "tca8418",
      "type": "example",
      "file_name": "tca8418_gpiobutton.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_ticks import ticks_add, ticks_less, ticks_ms\n\nimport board\nimport digitalio\nled = digitalio.DigitalInOut(board.LED)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ticks/examples/ticks_simpletest.py",
      "library": "ticks",
      "type": "example",
      "file_name": "ticks_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2017 Scott Shawcroft, written for Adafruit Industries\n# SPDX-FileCopyrightText: Copyright (c) 2021 Jeff Epler for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport board\nimport digitalio\n\nfrom adafruit_ticks import ticks_add, ticks_less, ticks_ms\n\nled = digitalio.DigitalInOut(board.LED)\nled.switch_to_output()\n\n# Turn an LED on or off every 100ms, so that it will blink at 5Hz.\n\ndeadline = ticks_ms()\nwhile True:\n    led.value = not led.value\n    while ticks_less(ticks_ms(), deadline):\n        pass\n    deadline = ticks_add(deadline, 100)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ticks/examples/ticks_simpletest.py",
      "library": "ticks",
      "type": "example",
      "file_name": "ticks_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import subprocess\nimport time\nimport board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import st7789\n\n# Configuration for CS and DC pins (these are FeatherWing defaults on M0/M4):\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)\nreset_pin = None\n# Config for display baudrate (default max is 24mhz):",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_minipitftstats.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_minipitftstats.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import subprocess\nimport time\nimport board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import st7789\n\n# Configuration for CS and DC pins (these are FeatherWing defaults on M0/M4):\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)\nreset_pin = None\n# Config for display baudrate (default max is 24mhz):\nBAUDRATE = 64000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_minipitftstats.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_minipitftstats.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import subprocess\nimport time\nimport board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import st7789\n\n# Config for display baudrate (default max is 24mhz):\nBAUDRATE = 64000000\n# Setup SPI bus using hardware SPI:\nspi = board.SPI()\n# Create the ST7789 display:\ndisp = st7789.ST7789(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_minipitftstats.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_minipitftstats.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import subprocess\nimport time\nimport board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import st7789\n\n# same directory as the python script!\n# Some other nice fonts to try: http://www.dafont.com/bitmap.php\nfont = ImageFont.truetype(\"/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf\", 24)\n# Turn on the backlight\nbacklight = digitalio.DigitalInOut(board.D22)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_minipitftstats.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_minipitftstats.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\npaswword = getenv(\"paswword\")\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_certificate_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_certificate_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_certificate_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_certificate_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_certificate_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_certificate_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_certificate_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_certificate_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_certificate_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_certificate_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)  # Uncomment for Most Boards",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_certificate_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_certificate_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# from adafruit_esp32spi import PWMOut\n# RED_LED = PWMOut.PWMOut(esp, 26)\n# GREEN_LED = PWMOut.PWMOut(esp, 27)\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password, status_pixel=status_pixel)\n### Topic Setup ###\n# MQTT Topic",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_certificate_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_certificate_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef connect(client, userdata, flags, rc):\n    print('Connected to MQTT Broker!')\n    print(f'Flags: {flags}\\n RC: {rc}')\n\n# Usage example:\nfrom os import getenv\n\nimport adafruit_connection_manager\nimport board\nimport busio",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_certificate_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_certificate_esp32spi.py",
      "chunk_type": "function",
      "function_name": "connect"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef disconnect(client, userdata, rc):\n    print('Disconnected from MQTT Broker!')\n\n# Usage example:\n\ndef disconnect(client, userdata, rc):\n    # This method is called when the client disconnects\n    # from the broker.\n    print(\"Disconnected from MQTT Broker!\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_certificate_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_certificate_esp32spi.py",
      "chunk_type": "function",
      "function_name": "disconnect"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef subscribe(client, userdata, topic, granted_qos):\n    print(f'Subscribed to {topic} with QOS level {granted_qos}')\n\n# Usage example:\n\ndef subscribe(client, userdata, topic, granted_qos):\n    # This method is called when the client subscribes to a new feed.\n    print(f\"Subscribed to {topic} with QOS level {granted_qos}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_certificate_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_certificate_esp32spi.py",
      "chunk_type": "function",
      "function_name": "subscribe"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef unsubscribe(client, userdata, topic, pid):\n    print(f'Unsubscribed from {topic} with PID {pid}')\n\n# Usage example:\n\ndef unsubscribe(client, userdata, topic, pid):\n    # This method is called when the client unsubscribes from a feed.\n    print(f\"Unsubscribed from {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_certificate_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_certificate_esp32spi.py",
      "chunk_type": "function",
      "function_name": "unsubscribe"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef publish(client, userdata, topic, pid):\n    print(f'Published to {topic} with PID {pid}')\n\n# Usage example:\n\ndef publish(client, userdata, topic, pid):\n    # This method is called when the client publishes data to a feed.\n    print(f\"Published to {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_certificate_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_certificate_esp32spi.py",
      "chunk_type": "function",
      "function_name": "publish"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# Connect to WiFi\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Set up a MiniMQTT Client\nclient = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_certificate_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_certificate_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Set up a MiniMQTT Client\nclient = MQTT.MQTT(\n    broker=broker,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_certificate_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_certificate_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_circuitplayground import cp\nfrom adafruit_led_animation import color\nfrom adafruit_led_animation.animation.blink import Blink\nfrom adafruit_led_animation.animation.chase import Chase\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_led_animation.group import AnimationGroup\nfrom adafruit_led_animation.sequence import AnimationSequence\n\nstrip_pixels = neopixel.NeoPixel(board.A1, 30, brightness=0.5, auto_write=False)\ncp.pixels.brightness = 0.5\nanimations = AnimationSequence(\n    # Synchronized to 0.5 seconds. Ignores the second animation setting of 3 seconds.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_group.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_group.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import asyncio\nimport board\nimport digitalio\nimport neopixel\nfrom adafruit_debouncer import Debouncer\n\nimport neopixel\n# Import library modules, as is tradition\npin = digitalio.DigitalInOut(board.BUTTON)\npin.direction = digitalio.Direction.INPUT\npin.pull = digitalio.Pull.UP\nbutton = Debouncer(pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/asyncio/examples/asyncio_event_example.py",
      "library": "asyncio",
      "type": "example",
      "file_name": "asyncio_event_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import asyncio\nimport board\nimport digitalio\nimport neopixel\nfrom adafruit_debouncer import Debouncer\n\n# Import library modules, as is tradition\npin = digitalio.DigitalInOut(board.BUTTON)\npin.direction = digitalio.Direction.INPUT\npin.pull = digitalio.Pull.UP\nbutton = Debouncer(pin)\n# Instantiate the input, in this case, the 'BOOT' button on a",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/asyncio/examples/asyncio_event_example.py",
      "library": "asyncio",
      "type": "example",
      "file_name": "asyncio_event_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import asyncio\nimport board\nimport digitalio\nimport neopixel\nfrom adafruit_debouncer import Debouncer\n\n# Import library modules, as is tradition\npin = digitalio.DigitalInOut(board.BUTTON)\npin.direction = digitalio.Direction.INPUT\npin.pull = digitalio.Pull.UP\nbutton = Debouncer(pin)\n# Instantiate the input, in this case, the 'BOOT' button on a\n# QT Py 2040. The debouncer ensures a clean hit.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/asyncio/examples/asyncio_event_example.py",
      "library": "asyncio",
      "type": "example",
      "file_name": "asyncio_event_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import asyncio\nimport board\nimport digitalio\nimport neopixel\nfrom adafruit_debouncer import Debouncer\n\nclass Color:\n\n    def __init__(self, initial_value):\n        self.value = initial_value\n\n# Usage example:\n\n\nclass Color:\n    def __init__(self, initial_value):\n        self.value = initial_value",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/asyncio/examples/asyncio_event_example.py",
      "library": "asyncio",
      "type": "example",
      "file_name": "asyncio_event_example.py",
      "chunk_type": "function",
      "function_name": "Color"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport usb_hid\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keyboard_layout_us import KeyboardLayoutUS\n\nlayout = KeyboardLayoutUS(keyboard)\n# define buttons. these can be any physical switches/buttons, but the values\n# here work out-of-the-box with a CircuitPlayground Express' A and B buttons.\nslow_write = digitalio.DigitalInOut(board.D4)\nslow_write.direction = digitalio.Direction.INPUT\nslow_write.pull = digitalio.Pull.DOWN\nfast_write = digitalio.DigitalInOut(board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_keyboard_layout.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_keyboard_layout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport usb_hid\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keyboard_layout_us import KeyboardLayoutUS\n\n# define buttons. these can be any physical switches/buttons, but the values\n# here work out-of-the-box with a CircuitPlayground Express' A and B buttons.\nslow_write = digitalio.DigitalInOut(board.D4)\nslow_write.direction = digitalio.Direction.INPUT\nslow_write.pull = digitalio.Pull.DOWN\nfast_write = digitalio.DigitalInOut(board.D5)\nfast_write.direction = digitalio.Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_keyboard_layout.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_keyboard_layout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport usb_hid\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keyboard_layout_us import KeyboardLayoutUS\n\n# define buttons. these can be any physical switches/buttons, but the values\n# here work out-of-the-box with a CircuitPlayground Express' A and B buttons.\nslow_write = digitalio.DigitalInOut(board.D4)\nslow_write.direction = digitalio.Direction.INPUT\nslow_write.pull = digitalio.Pull.DOWN\nfast_write = digitalio.DigitalInOut(board.D5)\nfast_write.direction = digitalio.Direction.INPUT\nfast_write.pull = digitalio.Pull.DOWN",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_keyboard_layout.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_keyboard_layout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport usb_hid\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keyboard_layout_us import KeyboardLayoutUS\n\n# here work out-of-the-box with a CircuitPlayground Express' A and B buttons.\nslow_write = digitalio.DigitalInOut(board.D4)\nslow_write.direction = digitalio.Direction.INPUT\nslow_write.pull = digitalio.Pull.DOWN\nfast_write = digitalio.DigitalInOut(board.D5)\nfast_write.direction = digitalio.Direction.INPUT\nfast_write.pull = digitalio.Pull.DOWN",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_keyboard_layout.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_keyboard_layout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport usb_hid\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keyboard_layout_us import KeyboardLayoutUS\n\nslow_write = digitalio.DigitalInOut(board.D4)\nslow_write.direction = digitalio.Direction.INPUT\nslow_write.pull = digitalio.Pull.DOWN\nfast_write = digitalio.DigitalInOut(board.D5)\nfast_write.direction = digitalio.Direction.INPUT\nfast_write.pull = digitalio.Pull.DOWN",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_keyboard_layout.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_keyboard_layout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport usb_hid\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keyboard_layout_us import KeyboardLayoutUS\n\nslow_write.direction = digitalio.Direction.INPUT\nslow_write.pull = digitalio.Pull.DOWN\nfast_write = digitalio.DigitalInOut(board.D5)\nfast_write.direction = digitalio.Direction.INPUT\nfast_write.pull = digitalio.Pull.DOWN",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_keyboard_layout.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_keyboard_layout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport digitalio\nimport usb_hid\n\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keyboard_layout_us import KeyboardLayoutUS\n\nkeyboard = Keyboard(usb_hid.devices)\nlayout = KeyboardLayoutUS(keyboard)\n\n\n# define buttons. these can be any physical switches/buttons, but the values\n# here work out-of-the-box with a CircuitPlayground Express' A and B buttons.\nslow_write = digitalio.DigitalInOut(board.D4)\nslow_write.direction = digitalio.Direction.INPUT\nslow_write.pull = digitalio.Pull.DOWN\n\nfast_write = digitalio.DigitalInOut(board.D5)\nfast_write.direction = digitalio.Direction.INPUT\nfast_write.pull = digitalio.Pull.DOWN\n\nwhile True:\n    # Write `Hello World!` slowly\n    if slow_write.value:\n        layout.write(\"Hello World!\", delay=0.2)\n\n    # Write `Hello World!` normally\n    elif fast_write.value:\n        layout.write(\"Hello World!\")\n\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_keyboard_layout.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_keyboard_layout.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport terminalio\nimport vectorio\nfrom adafruit_display_text.label import Label\nfrom simpleio import map_range\nimport adafruit_touchscreen\n\n# A collection of colors used for graphic objects.\nclass Colors:\n    \"\"\"A collection of colors used for graphic objects.\"\"\"\n    BLUE_DK = 96\n    RED = 16711680\n    WHITE = 16777215\n\n# Usage example:\n\n\nclass Colors:\n    \"\"\"A collection of colors used for graphic objects.\"\"\"\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/touchscreen/examples/touchscreen_calibrator_built_in.py",
      "library": "touchscreen",
      "type": "example",
      "file_name": "touchscreen_calibrator_built_in.py",
      "chunk_type": "function",
      "function_name": "Colors"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport terminalio\nimport vectorio\nfrom adafruit_display_text.label import Label\nfrom simpleio import map_range\nimport adafruit_touchscreen\n\n    RED = 0xFF0000  # Boundary\n    WHITE = 0xFFFFFF  # Text\n# Instantiate the built-in display\ndisplay = board.DISPLAY\n# Check rotation value and update display.\n# Always set rotation before instantiating the touchscreen.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/touchscreen/examples/touchscreen_calibrator_built_in.py",
      "library": "touchscreen",
      "type": "example",
      "file_name": "touchscreen_calibrator_built_in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from asyncio import create_task, gather, run\nfrom asyncio import sleep as async_sleep\nimport board\nimport socketpool\nimport wifi\nfrom adafruit_httpserver import GET, FileResponse, Request, Response, Server, Websocket\nfrom adafruit_opt4048 import OPT4048, ConversionTime, Mode, Range\n\nwebsocket: Websocket = None\nREAD_INTERVAL = 0.1  # seconds\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = OPT4048(i2c)\nsensor.range = Range.AUTO",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/opt4048/examples/opt4048_websocket.py",
      "library": "opt4048",
      "type": "example",
      "file_name": "opt4048_websocket.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from asyncio import create_task, gather, run\nfrom asyncio import sleep as async_sleep\nimport board\nimport socketpool\nimport wifi\nfrom adafruit_httpserver import GET, FileResponse, Request, Response, Server, Websocket\nfrom adafruit_opt4048 import OPT4048, ConversionTime, Mode, Range\n\n@server.route('/connect-websocket', GET)\ndef connect_client(request: Request):\n    global websocket\n    if websocket is not None:\n        websocket.close()\n    websocket = Websocket(request)\n    return websocket",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/opt4048/examples/opt4048_websocket.py",
      "library": "opt4048",
      "type": "example",
      "file_name": "opt4048_websocket.py",
      "chunk_type": "function",
      "function_name": "connect_client"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom adafruit_progressbar.horizontalprogressbar import HorizontalFillDirection, HorizontalProgressBar\nfrom adafruit_progressbar.verticalprogressbar import VerticalFillDirection, VerticalProgressBar\n\ndisplay = board.DISPLAY\nmain_group = displayio.Group()\ndisplay.root_group = main_group\ncolor_bitmap = displayio.Bitmap(display.width, display.height, 1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/progressbar/examples/progressbar_accelerometer.py",
      "library": "progressbar",
      "type": "example",
      "file_name": "progressbar_accelerometer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import array\nimport math\nimport time\nimport board\nimport digitalio\nimport rp2pio\nimport adafruit_pioasm\n\nimport digitalio\nimport rp2pio\nimport adafruit_pioasm\ntrigger = digitalio.DigitalInOut(board.D4)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_i2sout.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_i2sout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import array\nimport math\nimport time\nimport board\nimport digitalio\nimport rp2pio\nimport adafruit_pioasm\n\nassembled = adafruit_pioasm.assemble(program)\ndac = rp2pio.StateMachine(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_i2sout.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_i2sout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import array\nimport math\nimport time\nimport board\nimport digitalio\nimport rp2pio\nimport adafruit_pioasm\n\ndac = rp2pio.StateMachine(assembled, frequency=800000 * 6, first_out_pin=board.D12, first_sideset_pin=board.D10, sideset_pin_count=2, auto_pull=False, out_shift_right=False, pull_threshold=32, wait_for_txstall=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_i2sout.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_i2sout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom math import atan2, degrees\nimport board\nimport adafruit_lis3mdl\n\nimport board\nimport adafruit_lis3mdl\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lis3mdl.LIS3MDL(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3mdl/examples/lis3mdl_compass.py",
      "library": "lis3mdl",
      "type": "example",
      "file_name": "lis3mdl_compass.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom math import atan2, degrees\nimport board\nimport adafruit_lis3mdl\n\nimport adafruit_lis3mdl\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lis3mdl.LIS3MDL(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3mdl/examples/lis3mdl_compass.py",
      "library": "lis3mdl",
      "type": "example",
      "file_name": "lis3mdl_compass.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom math import atan2, degrees\nimport board\nimport adafruit_lis3mdl\n\ndef vector_2_degrees(x, y):\n    angle = degrees(atan2(y, x))\n    if angle < 0:\n        angle += 360\n    return angle\n\n# Usage example:\ndef get_heading(_sensor):\n    magnet_x, magnet_y, _ = _sensor.magnetic\n    return vector_2_degrees(magnet_x, magnet_y)\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3mdl/examples/lis3mdl_compass.py",
      "library": "lis3mdl",
      "type": "example",
      "file_name": "lis3mdl_compass.py",
      "chunk_type": "function",
      "function_name": "vector_2_degrees"
    }
  },
  {
    "content": "import time\nfrom math import atan2, degrees\nimport board\nimport adafruit_lis3mdl\n\ndef get_heading(_sensor):\n    magnet_x, magnet_y, _ = _sensor.magnetic\n    return vector_2_degrees(magnet_x, magnet_y)\n\n# Usage example:\n\nwhile True:\n    print(f\"heading: {get_heading(sensor):.2f} degrees\")\n    time.sleep(0.2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3mdl/examples/lis3mdl_compass.py",
      "library": "lis3mdl",
      "type": "example",
      "file_name": "lis3mdl_compass.py",
      "chunk_type": "function",
      "function_name": "get_heading"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Display compass heading data five times per second\"\"\"\n\nimport time\nfrom math import atan2, degrees\n\nimport board\n\nimport adafruit_lis3mdl\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lis3mdl.LIS3MDL(i2c)\n\n\ndef vector_2_degrees(x, y):\n    angle = degrees(atan2(y, x))\n    if angle < 0:\n        angle += 360\n    return angle\n\n\ndef get_heading(_sensor):\n    magnet_x, magnet_y, _ = _sensor.magnetic\n    return vector_2_degrees(magnet_x, magnet_y)\n\n\nwhile True:\n    print(f\"heading: {get_heading(sensor):.2f} degrees\")\n    time.sleep(0.2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3mdl/examples/lis3mdl_compass.py",
      "library": "lis3mdl",
      "type": "example",
      "file_name": "lis3mdl_compass.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_max7219 import matrices\n\nimport digitalio\n# You may need to change the chip select pin depending on your wiring\nspi = board.SPI()\ncs = digitalio.DigitalInOut(board.D4)\nmatrix = matrices.Matrix8x8(spi, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max7219/examples/max7219_simpletest.py",
      "library": "max7219",
      "type": "example",
      "file_name": "max7219_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_max7219 import matrices\n\n# You may need to change the chip select pin depending on your wiring\nspi = board.SPI()\ncs = digitalio.DigitalInOut(board.D4)\nmatrix = matrices.Matrix8x8(spi, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max7219/examples/max7219_simpletest.py",
      "library": "max7219",
      "type": "example",
      "file_name": "max7219_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_displayio_layout.layouts.grid_layout import GridLayout\n\n# use built in display (PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\n# Make the display context\nmain_group = displayio.Group()\ndisplay.root_group = main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_simpletest.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lsm303_accel\n\nimport board\nimport adafruit_lsm303_accel\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lsm303_accel.LSM303_Accel(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303-accel/examples/lsm303_accel_simpletest.py",
      "library": "lsm303-accel",
      "type": "example",
      "file_name": "lsm303_accel_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lsm303_accel\n\nimport adafruit_lsm303_accel\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lsm303_accel.LSM303_Accel(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303-accel/examples/lsm303_accel_simpletest.py",
      "library": "lsm303-accel",
      "type": "example",
      "file_name": "lsm303_accel_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Display accelerometer data once per second\"\"\"\n\nimport time\n\nimport board\n\nimport adafruit_lsm303_accel\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lsm303_accel.LSM303_Accel(i2c)\n\nwhile True:\n    acc_x, acc_y, acc_z = sensor.acceleration\n\n    print(f\"Acceleration (m/s^2): ({acc_x:10.3f}, {acc_y:10.3f}, {acc_z:10.3f})\")\n    print(\"\")\n    time.sleep(1.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303-accel/examples/lsm303_accel_simpletest.py",
      "library": "lsm303-accel",
      "type": "example",
      "file_name": "lsm303_accel_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import adafruit_midi\nimport board\nimport busio\nimport usb.core\nfrom adafruit_midi.control_change import ControlChange\nfrom adafruit_midi.note_off import NoteOff\nfrom adafruit_midi.note_on import NoteOn\nfrom adafruit_midi.pitch_bend import PitchBend\nimport adafruit_usb_host_midi\n\n# This setup is to use TX pin on Feather RP2040 with USB Type A Host as MIDI out\n# You must wire up the needed resistors and jack yourself\n# This will forward all MIDI messages from the device to hardware uart MIDI\nuart = busio.UART(rx=board.RX, tx=board.TX, baudrate=31250, timeout=0.001)\nmidi_device = adafruit_midi.MIDI(midi_in=raw_midi, in_channel=0)\nmidi_uart = adafruit_midi.MIDI(midi_out=uart, midi_in=uart)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/usb_host_midi/examples/usb_host_midi_simpletest_rp2040usbfeather.py",
      "library": "usb_host_midi",
      "type": "example",
      "file_name": "usb_host_midi_simpletest_rp2040usbfeather.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_midi\nimport board\nimport busio\nimport usb.core\nfrom adafruit_midi.control_change import ControlChange\nfrom adafruit_midi.note_off import NoteOff\nfrom adafruit_midi.note_on import NoteOn\nfrom adafruit_midi.pitch_bend import PitchBend\nimport adafruit_usb_host_midi\n\n# This setup is to use TX pin on Feather RP2040 with USB Type A Host as MIDI out\n# You must wire up the needed resistors and jack yourself\n# This will forward all MIDI messages from the device to hardware uart MIDI\nuart = busio.UART(rx=board.RX, tx=board.TX, baudrate=31250, timeout=0.001)\nmidi_device = adafruit_midi.MIDI(midi_in=raw_midi, in_channel=0)\nmidi_uart = adafruit_midi.MIDI(midi_out=uart, midi_in=uart)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/usb_host_midi/examples/usb_host_midi_simpletest_rp2040usbfeather.py",
      "library": "usb_host_midi",
      "type": "example",
      "file_name": "usb_host_midi_simpletest_rp2040usbfeather.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_midi\nimport board\nimport busio\nimport usb.core\nfrom adafruit_midi.control_change import ControlChange\nfrom adafruit_midi.note_off import NoteOff\nfrom adafruit_midi.note_on import NoteOn\nfrom adafruit_midi.pitch_bend import PitchBend\nimport adafruit_usb_host_midi\n\n# You must wire up the needed resistors and jack yourself\n# This will forward all MIDI messages from the device to hardware uart MIDI\nuart = busio.UART(rx=board.RX, tx=board.TX, baudrate=31250, timeout=0.001)\nmidi_device = adafruit_midi.MIDI(midi_in=raw_midi, in_channel=0)\nmidi_uart = adafruit_midi.MIDI(midi_out=uart, midi_in=uart)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/usb_host_midi/examples/usb_host_midi_simpletest_rp2040usbfeather.py",
      "library": "usb_host_midi",
      "type": "example",
      "file_name": "usb_host_midi_simpletest_rp2040usbfeather.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import turtle\n\nimport board\nturtle = turtle(board.DISPLAY)\n# turtle.penup()\n# turtle.right(45)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_manual_hex.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_manual_hex.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\n\nfrom adafruit_turtle import turtle\n\nturtle = turtle(board.DISPLAY)\n\n\n# turtle.penup()\n# turtle.right(45)\n# turtle.forward(90)\n# turtle.right(75)\n\nturtle.pendown()\nfor _ in range(21):\n    for _ in range(6):\n        turtle.forward(50)\n        turtle.right(61)\n    turtle.right(11.1111)\n\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_manual_hex.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_manual_hex.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel\n\nimport neopixel\n# On CircuitPlayground Express, and boards with built in status NeoPixel -> board.NEOPIXEL\n# Otherwise choose an open pin connected to the Data In of the NeoPixel strip, i.e. board.D1\npixel_pin = board.NEOPIXEL\n# On a Raspberry pi, use this instead, not all pins are supported\n# pixel_pin = board.D18",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopixel/examples/neopixel_simpletest.py",
      "library": "neopixel",
      "type": "example",
      "file_name": "neopixel_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel\n\n# The number of NeoPixels\nnum_pixels = 10\n# The order of the pixel colors - RGB or GRB. Some NeoPixels have red and green reversed!\n# For RGBW NeoPixels, simply change the ORDER to RGBW or GRBW.\nORDER = neopixel.GRB\npixels = neopixel.NeoPixel(\n    pixel_pin, num_pixels, brightness=0.2, auto_write=False, pixel_order=ORDER",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopixel/examples/neopixel_simpletest.py",
      "library": "neopixel",
      "type": "example",
      "file_name": "neopixel_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel\n\npixels = neopixel.NeoPixel(pixel_pin, num_pixels, brightness=0.2, auto_write=False, pixel_order=ORDER)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopixel/examples/neopixel_simpletest.py",
      "library": "neopixel",
      "type": "example",
      "file_name": "neopixel_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel\n\ndef wheel(pos):\n    if pos < 0 or pos > 255:\n        r = g = b = 0\n    elif pos < 85:\n        r = int(pos * 3)\n        g = int(255 - pos * 3)\n        b = 0\n    elif pos < 170:\n        pos -= 85\n        r = int(255 - pos * 3)\n        g = 0\n        b = int(pos * 3)\n    else:\n        pos -= 170\n        r = 0\n        g = int(pos * 3)\n        b = int(255 - pos * 3)\n    return (r, g, b) if ORDER in {neopixel.RGB, neopixel.GRB} else (r, g, b, 0)\n\n# Usage example:\n        for i in range(num_pixels):\n            pixel_index = (i * 256 // num_pixels) + j\n            pixels[i] = wheel(pixel_index & 255)\n        pixels.show()\n        time.sleep(wait)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopixel/examples/neopixel_simpletest.py",
      "library": "neopixel",
      "type": "example",
      "file_name": "neopixel_simpletest.py",
      "chunk_type": "function",
      "function_name": "wheel"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel\n\ndef rainbow_cycle(wait):\n    for j in range(255):\n        for i in range(num_pixels):\n            pixel_index = i * 256 // num_pixels + j\n            pixels[i] = wheel(pixel_index & 255)\n        pixels.show()\n        time.sleep(wait)\n\n# Usage example:\n    time.sleep(1)\n\n    rainbow_cycle(0.001)  # rainbow cycle with 1ms delay per step\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopixel/examples/neopixel_simpletest.py",
      "library": "neopixel",
      "type": "example",
      "file_name": "neopixel_simpletest.py",
      "chunk_type": "function",
      "function_name": "rainbow_cycle"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom adafruit_ht16k33 import segments\n\n# Import the HT16K33 LED segment module.\n# Create the I2C interface.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create the LED segment class.\n# This creates a 7 segment 4 character display:\ndisplay = segments.Seg7x4(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ht16k33/examples/ht16k33_segments_simpletest.py",
      "library": "ht16k33",
      "type": "example",
      "file_name": "ht16k33_segments_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_displayio_ssd1306\n\nimport adafruit_displayio_ssd1306\noled_reset = board.D9\n# Use for I2C\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_ssd1306/examples/displayio_ssd1306_simpletest.py",
      "library": "displayio_ssd1306",
      "type": "example",
      "file_name": "displayio_ssd1306_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_displayio_ssd1306\n\noled_reset = board.D9\n# Use for I2C\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndisplay_bus = I2CDisplayBus(i2c, device_address=0x3C, reset=oled_reset)\n# Use for SPI",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_ssd1306/examples/displayio_ssd1306_simpletest.py",
      "library": "displayio_ssd1306",
      "type": "example",
      "file_name": "displayio_ssd1306_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_displayio_ssd1306\n\nWIDTH = 128\nHEIGHT = 32  # Change to 64 if needed\nBORDER = 5\ndisplay = adafruit_displayio_ssd1306.SSD1306(display_bus, width=WIDTH, height=HEIGHT)\n# Make the display context\nsplash = displayio.Group()\ndisplay.root_group = splash",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_ssd1306/examples/displayio_ssd1306_simpletest.py",
      "library": "displayio_ssd1306",
      "type": "example",
      "file_name": "displayio_ssd1306_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport usb_hid\nfrom adafruit_seesaw.seesaw import Seesaw\nfrom hid_gamepad import Gamepad\nfrom micropython import const\n\ndef range_map(value, in_min, in_max, out_min, out_max):\n    return (value - in_min) * (out_max - out_min) // (in_max - in_min) + out_min\n\n# Usage example:\n    y = ss.analog_read(3)\n\n    game_x = range_map(x, 0, 1023, -127, 127)\n    game_y = range_map(y, 0, 1023, -127, 127)\n    if last_game_x != game_x or last_game_y != game_y:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_joywing_gamepad.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_joywing_gamepad.py",
      "chunk_type": "function",
      "function_name": "range_map"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport usb_hid\nfrom adafruit_seesaw.seesaw import Seesaw\nfrom hid_gamepad import Gamepad\nfrom micropython import const\n\ni2c = busio.I2C(board.SCL, board.SDA)\nss = Seesaw(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_joywing_gamepad.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_joywing_gamepad.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport adafruit_mcp4728\n\nimport board\nimport adafruit_mcp4728\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmcp4728 = adafruit_mcp4728.MCP4728(i2c)\nFULL_VREF_RAW_VALUE = 4095",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp4728/examples/mcp4728_vref_example.py",
      "library": "mcp4728",
      "type": "example",
      "file_name": "mcp4728_vref_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport adafruit_mcp4728\n\nimport adafruit_mcp4728\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmcp4728 = adafruit_mcp4728.MCP4728(i2c)\nFULL_VREF_RAW_VALUE = 4095\nmcp4728.channel_a.raw_value = int(FULL_VREF_RAW_VALUE / 2)  # VDD/2",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp4728/examples/mcp4728_vref_example.py",
      "library": "mcp4728",
      "type": "example",
      "file_name": "mcp4728_vref_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport adafruit_mcp4728\n\nmcp4728 = adafruit_mcp4728.MCP4728(i2c)\nFULL_VREF_RAW_VALUE = 4095\nmcp4728.channel_a.raw_value = int(FULL_VREF_RAW_VALUE / 2)  # VDD/2\nmcp4728.channel_a.vref = adafruit_mcp4728.Vref.VDD  # sets the channel to scale between 0v and VDD\nmcp4728.channel_b.raw_value = int(FULL_VREF_RAW_VALUE / 2)  # VDD/2\nmcp4728.channel_b.vref = adafruit_mcp4728.Vref.INTERNAL\nmcp4728.channel_b.gain = 1",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp4728/examples/mcp4728_vref_example.py",
      "library": "mcp4728",
      "type": "example",
      "file_name": "mcp4728_vref_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport adafruit_mcp4728\n\nmcp4728.channel_a.raw_value = int(FULL_VREF_RAW_VALUE / 2)  # VDD/2\nmcp4728.channel_a.vref = adafruit_mcp4728.Vref.VDD  # sets the channel to scale between 0v and VDD\nmcp4728.channel_b.raw_value = int(FULL_VREF_RAW_VALUE / 2)  # VDD/2\nmcp4728.channel_b.vref = adafruit_mcp4728.Vref.INTERNAL\nmcp4728.channel_b.gain = 1\nmcp4728.channel_c.raw_value = int(FULL_VREF_RAW_VALUE / 2)  # VDD/2\nmcp4728.channel_c.vref = adafruit_mcp4728.Vref.INTERNAL",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp4728/examples/mcp4728_vref_example.py",
      "library": "mcp4728",
      "type": "example",
      "file_name": "mcp4728_vref_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport adafruit_mcp4728\n\nmcp4728.channel_b.raw_value = int(FULL_VREF_RAW_VALUE / 2)  # VDD/2\nmcp4728.channel_b.vref = adafruit_mcp4728.Vref.INTERNAL\nmcp4728.channel_b.gain = 1\nmcp4728.channel_c.raw_value = int(FULL_VREF_RAW_VALUE / 2)  # VDD/2\nmcp4728.channel_c.vref = adafruit_mcp4728.Vref.INTERNAL\nmcp4728.channel_c.gain = 2",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp4728/examples/mcp4728_vref_example.py",
      "library": "mcp4728",
      "type": "example",
      "file_name": "mcp4728_vref_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nfrom time import sleep\n\nimport board\n\nimport adafruit_mcp4728\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmcp4728 = adafruit_mcp4728.MCP4728(i2c)\n\nFULL_VREF_RAW_VALUE = 4095\n\nmcp4728.channel_a.raw_value = int(FULL_VREF_RAW_VALUE / 2)  # VDD/2\nmcp4728.channel_a.vref = adafruit_mcp4728.Vref.VDD  # sets the channel to scale between 0v and VDD\n\nmcp4728.channel_b.raw_value = int(FULL_VREF_RAW_VALUE / 2)  # VDD/2\nmcp4728.channel_b.vref = adafruit_mcp4728.Vref.INTERNAL\nmcp4728.channel_b.gain = 1\n\nmcp4728.channel_c.raw_value = int(FULL_VREF_RAW_VALUE / 2)  # VDD/2\nmcp4728.channel_c.vref = adafruit_mcp4728.Vref.INTERNAL\nmcp4728.channel_c.gain = 2\n\nmcp4728.save_settings()\n\nwhile True:\n    sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp4728/examples/mcp4728_vref_example.py",
      "library": "mcp4728",
      "type": "example",
      "file_name": "mcp4728_vref_example.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_seesaw.analoginput import AnalogInput\nfrom adafruit_seesaw.seesaw import Seesaw\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nss = Seesaw(i2c)\nanalogin_pin = 2",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_analogin_test.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_analogin_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# Simple seesaw test reading analog value\n# on SAMD09, analog in can be pins 2, 3, or 4\n# on Attiny8x7, analog in can be pins 0, 1, 2, 3, 6, 7, 18, 19, 20\n\nimport time\n\nimport board\n\nfrom adafruit_seesaw.analoginput import AnalogInput\nfrom adafruit_seesaw.seesaw import Seesaw\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nss = Seesaw(i2c)\n\nanalogin_pin = 2\nanalog_in = AnalogInput(ss, analogin_pin)\n\nwhile True:\n    print(analog_in.value)\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_analogin_test.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_analogin_test.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_tca8418 import TCA8418\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntca = TCA8418(i2c)\nkeymap = ((\"*\", \"0\", \"#\"), (\"7\", \"8\", \"9\"), (\"4\", \"5\", \"6\"), (\"1\", \"2\", \"3\"))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca8418/examples/tca8418_3x4_noOLED.py",
      "library": "tca8418",
      "type": "example",
      "file_name": "tca8418_3x4_noOLED.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_si4713\n\n# Specify the FM frequency to transmit on in kilohertz.  As the datasheet\n# mentions you can only specify 50khz steps!\nFREQUENCY_KHZ = 102300  # 102.300mhz\n# Initialize I2C bus.\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Initialize SI4713.\n# si4713 = adafruit_si4713.SI4713(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si4713/examples/si4713_simpletest.py",
      "library": "si4713",
      "type": "example",
      "file_name": "si4713_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_si4713\n\n# si4713 = adafruit_si4713.SI4713(i2c, address=0x11)\n# If you hooked up the reset line you should specify that too.  Make sure\n# to pass in a DigitalInOut instance.  You will need the reset pin with the\n# Raspberry Pi, and probably other devices:\nsi_reset = digitalio.DigitalInOut(board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si4713/examples/si4713_simpletest.py",
      "library": "si4713",
      "type": "example",
      "file_name": "si4713_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_si4713\n\n# to pass in a DigitalInOut instance.  You will need the reset pin with the\n# Raspberry Pi, and probably other devices:\nsi_reset = digitalio.DigitalInOut(board.D5)\nsi4713 = adafruit_si4713.SI4713(i2c, reset=si_reset, timeout_s=0.5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si4713/examples/si4713_simpletest.py",
      "library": "si4713",
      "type": "example",
      "file_name": "si4713_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import sys\nimport adafruit_miniqr\n\ndef prettyprint_QR(matrix):\n    for _ in range(4):\n        for _ in range(matrix.width + 8):\n            out.write(WHITE)\n        print()\n    for y in range(matrix.height):\n        out.write(WHITE * 4)\n        for x in range(matrix.width):\n            if matrix[x, y]:\n                out.write(BLACK)\n            else:\n                out.write(WHITE)\n        out.write(WHITE * 4)\n        print()\n    for _ in range(4):\n        for _ in range(matrix.width + 8):\n            out.write(WHITE)\n        print()\n\n# Usage example:\nqr.make()\nprint(qr.matrix)\nprettyprint_QR(qr.matrix)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniqr/examples/miniqr_simpletest.py",
      "library": "miniqr",
      "type": "example",
      "file_name": "miniqr_simpletest.py",
      "chunk_type": "function",
      "function_name": "prettyprint_QR"
    }
  },
  {
    "content": "import sys\nimport adafruit_miniqr\n\nqr = adafruit_miniqr.QRCode(qr_type=3, error_correct=adafruit_miniqr.L)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniqr/examples/miniqr_simpletest.py",
      "library": "miniqr",
      "type": "example",
      "file_name": "miniqr_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom fourwire import FourWire\nimport adafruit_ssd1681\n\n# This pinout works on a Feather RP2040 EPD and may need to be altered for other\n# boards. The 200x200px SSD1681 display with \"SYX 2024\" on the ribbon cable (tricolor) or\n# \"SYX 2118\" (bicolor) is connected directly via the ribbon cable.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1681/examples/ssd1681_four_corners.py",
      "library": "ssd1681",
      "type": "example",
      "file_name": "ssd1681_four_corners.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom fourwire import FourWire\nimport adafruit_ssd1681\n\n# This pinout works on a Feather RP2040 EPD and may need to be altered for other\n# boards. The 200x200px SSD1681 display with \"SYX 2024\" on the ribbon cable (tricolor) or\n# \"SYX 2118\" (bicolor) is connected directly via the ribbon cable.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1681/examples/ssd1681_four_corners.py",
      "library": "ssd1681",
      "type": "example",
      "file_name": "ssd1681_four_corners.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom fourwire import FourWire\nimport adafruit_ssd1681\n\n# This pinout works on a Feather RP2040 EPD and may need to be altered for other\n# boards. The 200x200px SSD1681 display with \"SYX 2024\" on the ribbon cable (tricolor) or\n# \"SYX 2118\" (bicolor) is connected directly via the ribbon cable.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1681/examples/ssd1681_four_corners.py",
      "library": "ssd1681",
      "type": "example",
      "file_name": "ssd1681_four_corners.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom fourwire import FourWire\nimport adafruit_ssd1681\n\n# boards. The 200x200px SSD1681 display with \"SYX 2024\" on the ribbon cable (tricolor) or\n# \"SYX 2118\" (bicolor) is connected directly via the ribbon cable.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)\ndisplay = adafruit_ssd1681.SSD1681(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1681/examples/ssd1681_four_corners.py",
      "library": "ssd1681",
      "type": "example",
      "file_name": "ssd1681_four_corners.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom fourwire import FourWire\nimport adafruit_ssd1681\n\n# \"SYX 2118\" (bicolor) is connected directly via the ribbon cable.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)\ndisplay = adafruit_ssd1681.SSD1681(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1681/examples/ssd1681_four_corners.py",
      "library": "ssd1681",
      "type": "example",
      "file_name": "ssd1681_four_corners.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom fourwire import FourWire\nimport adafruit_ssd1681\n\ndisplay = adafruit_ssd1681.SSD1681(display_bus, width=200, height=200, busy_pin=epd_busy, highlight_color=16711680, rotation=180, seconds_per_frame=15)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1681/examples/ssd1681_four_corners.py",
      "library": "ssd1681",
      "type": "example",
      "file_name": "ssd1681_four_corners.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\nimport adafruit_ov2640\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_aio_saola.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_aio_saola.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\nimport adafruit_ov2640\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_aio_saola.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_aio_saola.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\nimport adafruit_ov2640\n\n    ssl_context=ssl_context,\nio = IO_MQTT(mqtt_client)\nbus = busio.I2C(scl=board.IO7, sda=board.IO8)\ncam = adafruit_ov2640.OV2640(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_aio_saola.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_aio_saola.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\nimport adafruit_ov2640\n\ncam = adafruit_ov2640.OV2640(bus, data_pins=(board.IO36, board.IO37, board.IO41, board.IO42, board.IO39, board.IO40, board.IO21, board.IO38), clock=board.IO33, vsync=board.IO2, href=board.IO3, mclk=board.IO1, mclk_frequency=20000000, size=adafruit_ov2640.OV2640_SIZE_QVGA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_aio_saola.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_aio_saola.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\nimport adafruit_ov2640\n\ncam.flip_x = False\ncam.flip_y = False\ncam.size = adafruit_ov2640.OV2640_SIZE_SVGA\ncam.colorspace = adafruit_ov2640.OV2640_COLOR_JPEG\njpeg_buffer = bytearray(cam.capture_buffer_size)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_aio_saola.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_aio_saola.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\nimport adafruit_ov2640\n\ncam.flip_x = False\ncam.flip_y = False\ncam.size = adafruit_ov2640.OV2640_SIZE_SVGA\ncam.colorspace = adafruit_ov2640.OV2640_COLOR_JPEG\njpeg_buffer = bytearray(cam.capture_buffer_size)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_aio_saola.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_aio_saola.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_httpserver import Request, Response, Server\nimport adafruit_wiznet5k.adafruit_wiznet5k_socketpool as socketpool\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\n# For Adafruit Ethernet FeatherWing\ncs = digitalio.DigitalInOut(board.D10)\n# For Particle Ethernet FeatherWing\n# cs = digitalio.DigitalInOut(board.D5)\nspi_bus = board.SPI()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_httpserver.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_httpserver.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_httpserver import Request, Response, Server\nimport adafruit_wiznet5k.adafruit_wiznet5k_socketpool as socketpool\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\n# For Adafruit Ethernet FeatherWing\ncs = digitalio.DigitalInOut(board.D10)\n# For Particle Ethernet FeatherWing\n# cs = digitalio.DigitalInOut(board.D5)\nspi_bus = board.SPI()\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_httpserver.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_httpserver.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_httpserver import Request, Response, Server\nimport adafruit_wiznet5k.adafruit_wiznet5k_socketpool as socketpool\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\n# Serve a default static plain text message.\n@server.route('/')\ndef base(request: Request):\n    \"\"\"\n    Serve a default static plain text message.\n    \"\"\"\n    return Response(request, 'Hello from the CircuitPython HTTP Server!')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_httpserver.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_httpserver.py",
      "chunk_type": "function",
      "function_name": "base"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2023 Tim C for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport digitalio\nfrom adafruit_httpserver import Request, Response, Server\n\nimport adafruit_wiznet5k.adafruit_wiznet5k_socketpool as socketpool\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\nprint(\"Wiznet5k HTTPServer Test\")\n\n# For Adafruit Ethernet FeatherWing\ncs = digitalio.DigitalInOut(board.D10)\n# For Particle Ethernet FeatherWing\n# cs = digitalio.DigitalInOut(board.D5)\nspi_bus = board.SPI()\n\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)\n\n# Create a socket pool\npool = socketpool.SocketPool(eth)\n\n# initialize the server\nserver = Server(pool, \"/static\", debug=True)\n\n\n@server.route(\"/\")\ndef base(request: Request):\n    \"\"\"\n    Serve a default static plain text message.\n    \"\"\"\n    return Response(request, \"Hello from the CircuitPython HTTP Server!\")\n\n\nserver.serve_forever(str(eth.pretty_ip(eth.ip_address)))\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_httpserver.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_httpserver.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import math\nimport time\nfrom os import getenv\nimport adafruit_imageload\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\nfrom digitalio import DigitalInOut\n\nts = adafruit_touchscreen.Touchscreen(board.TOUCH_XL, board.TOUCH_XR, board.TOUCH_YD, board.TOUCH_YU, calibration=((5200, 59000), (5800, 57000)), size=(480, 320))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/neopixel_setter_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "neopixel_setter_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nfrom os import getenv\nimport adafruit_imageload\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\nfrom digitalio import DigitalInOut\n\nbackground, palette = adafruit_imageload.load('pyportal_setter.bmp', bitmap=displayio.Bitmap, palette=displayio.Palette)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/neopixel_setter_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "neopixel_setter_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nfrom os import getenv\nimport adafruit_imageload\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\nfrom digitalio import DigitalInOut\n\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# PyPortal ESP32 Setup\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# Secondary (SCK1) SPI used to connect to WiFi board on Arduino Nano Connect RP2040",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/neopixel_setter_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "neopixel_setter_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nfrom os import getenv\nimport adafruit_imageload\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\nfrom digitalio import DigitalInOut\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# PyPortal ESP32 Setup\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# Secondary (SCK1) SPI used to connect to WiFi board on Arduino Nano Connect RP2040",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/neopixel_setter_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "neopixel_setter_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nfrom os import getenv\nimport adafruit_imageload\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\nfrom digitalio import DigitalInOut\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# PyPortal ESP32 Setup\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# Secondary (SCK1) SPI used to connect to WiFi board on Arduino Nano Connect RP2040",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/neopixel_setter_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "neopixel_setter_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nfrom os import getenv\nimport adafruit_imageload\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\nfrom digitalio import DigitalInOut\n\n# Secondary (SCK1) SPI used to connect to WiFi board on Arduino Nano Connect RP2040\n    spi = busio.SPI(board.SCK1, board.MOSI1, board.MISO1)\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/neopixel_setter_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "neopixel_setter_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nfrom os import getenv\nimport adafruit_imageload\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\nfrom digitalio import DigitalInOut\n\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/neopixel_setter_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "neopixel_setter_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nfrom os import getenv\nimport adafruit_imageload\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\nfrom digitalio import DigitalInOut\n\n# RED_LED = PWMOut.PWMOut(esp, 26)\n# GREEN_LED = PWMOut.PWMOut(esp, 27)\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password, status_pixel=status_pixel)\n# Create an instance of the Adafruit IO HTTP client\nio = IO_HTTP(aio_username, aio_key, wifi)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/neopixel_setter_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "neopixel_setter_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nfrom os import getenv\nimport adafruit_imageload\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\nfrom digitalio import DigitalInOut\n\n    # Get the 'temperature' feed from Adafruit IO\n    neopixel_feed = io.get_feed(\"neopixel\")\n    neopixel_feed = io.create_new_feed(\"neopixel\")\nboard.DISPLAY.root_group = group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/neopixel_setter_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "neopixel_setter_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import bitmaptools\nimport board\nimport displayio\nimport fourwire\nimport adafruit_spd1656\n\nimport adafruit_spd1656\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_color_stripes.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_color_stripes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import bitmaptools\nimport board\nimport displayio\nimport fourwire\nimport adafruit_spd1656\n\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_color_stripes.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_color_stripes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import bitmaptools\nimport board\nimport displayio\nimport fourwire\nimport adafruit_spd1656\n\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12\ndisplay_bus = fourwire.FourWire(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_color_stripes.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_color_stripes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import bitmaptools\nimport board\nimport displayio\nimport fourwire\nimport adafruit_spd1656\n\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12\ndisplay_bus = fourwire.FourWire(\n    spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_color_stripes.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_color_stripes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import bitmaptools\nimport board\nimport displayio\nimport fourwire\nimport adafruit_spd1656\n\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12\ndisplay_bus = fourwire.FourWire(\n    spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_color_stripes.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_color_stripes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import bitmaptools\nimport board\nimport displayio\nimport fourwire\nimport adafruit_spd1656\n\ndisplay_bus = fourwire.FourWire(\n    spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000\ndisplay = adafruit_spd1656.SPD1656(display_bus, width=600, height=448, busy_pin=epd_busy)\ng = displayio.Group()\nbmp = displayio.Bitmap(display.width, display.height, 7)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_color_stripes.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_color_stripes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_mlx90640\n\nimport adafruit_mlx90640\nPRINT_TEMPERATURES = False\nPRINT_ASCIIART = True\ni2c = busio.I2C(board.SCL, board.SDA, frequency=800000)\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmlx = adafruit_mlx90640.MLX90640(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90640/examples/mlx90640_simpletest.py",
      "library": "mlx90640",
      "type": "example",
      "file_name": "mlx90640_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_mlx90640\n\nPRINT_ASCIIART = True\ni2c = busio.I2C(board.SCL, board.SDA, frequency=800000)\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmlx = adafruit_mlx90640.MLX90640(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90640/examples/mlx90640_simpletest.py",
      "library": "mlx90640",
      "type": "example",
      "file_name": "mlx90640_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_mlx90640\n\nmlx = adafruit_mlx90640.MLX90640(i2c)\nmlx.refresh_rate = adafruit_mlx90640.RefreshRate.REFRESH_2_HZ\nframe = [0] * 768",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90640/examples/mlx90640_simpletest.py",
      "library": "mlx90640",
      "type": "example",
      "file_name": "mlx90640_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_emc2101 import EMC2101\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nemc = EMC2101(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/emc2101/examples/emc2101_simpletest.py",
      "library": "emc2101",
      "type": "example",
      "file_name": "emc2101_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text.bitmap_label import Label\nfrom fourwire import FourWire\nfrom vectorio import Circle\nfrom adafruit_gc9a01a import GC9A01A\n\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ntft_reset = board.D9",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/gc9a01a/examples/gc9a01a_simpletest.py",
      "library": "gc9a01a",
      "type": "example",
      "file_name": "gc9a01a_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text.bitmap_label import Label\nfrom fourwire import FourWire\nfrom vectorio import Circle\nfrom adafruit_gc9a01a import GC9A01A\n\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ntft_reset = board.D9",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/gc9a01a/examples/gc9a01a_simpletest.py",
      "library": "gc9a01a",
      "type": "example",
      "file_name": "gc9a01a_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text.bitmap_label import Label\nfrom fourwire import FourWire\nfrom vectorio import Circle\nfrom adafruit_gc9a01a import GC9A01A\n\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ntft_reset = board.D9",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/gc9a01a/examples/gc9a01a_simpletest.py",
      "library": "gc9a01a",
      "type": "example",
      "file_name": "gc9a01a_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text.bitmap_label import Label\nfrom fourwire import FourWire\nfrom vectorio import Circle\nfrom adafruit_gc9a01a import GC9A01A\n\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ntft_reset = board.D9",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/gc9a01a/examples/gc9a01a_simpletest.py",
      "library": "gc9a01a",
      "type": "example",
      "file_name": "gc9a01a_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_vl6180x\n\nimport busio\nimport adafruit_vl6180x\n# Create I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create sensor instance, with explicit offset of 0 to clear the system offset\nsensor = adafruit_vl6180x.VL6180X(i2c, offset=0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl6180x/examples/vl6180x_calibrationtest.py",
      "library": "vl6180x",
      "type": "example",
      "file_name": "vl6180x_calibrationtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_vl6180x\n\n# Create I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create sensor instance, with explicit offset of 0 to clear the system offset\nsensor = adafruit_vl6180x.VL6180X(i2c, offset=0)\n# Place a target at 50mm away from VL6180X Collect a number of range measurements\n# with the target in place and calculate mean of the range results.  For a\n# reliable measurement, take at least 10 measurements.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl6180x/examples/vl6180x_calibrationtest.py",
      "library": "vl6180x",
      "type": "example",
      "file_name": "vl6180x_calibrationtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2018 Tony DiCola for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# Demo of calibrating the part to part range offset per Application Note 4545\n# for the VL6180X sensor\n\nimport time\n\nimport board\nimport busio\n\nimport adafruit_vl6180x\n\n# Create I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n\n# Create sensor instance, with explicit offset of 0 to clear the system offset\nsensor = adafruit_vl6180x.VL6180X(i2c, offset=0)\n\n# Place a target at 50mm away from VL6180X Collect a number of range measurements\n# with the target in place and calculate mean of the range results.  For a\n# reliable measurement, take at least 10 measurements.\nmeasurements = []\nfor msmt in range(10):\n    range_mm = sensor.range\n    measurements.append(range_mm)\n    time.sleep(1.0)\naverage_msmt = sum(measurements) / 10\n\n# Calculate the offset required:\ncalibration_offset = 50 - average_msmt\n\n# Apply offset\nsensor.offset = calibration_offset\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl6180x/examples/vl6180x_calibrationtest.py",
      "library": "vl6180x",
      "type": "example",
      "file_name": "vl6180x_calibrationtest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_pyportal\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\nimport adafruit_connection_manager\nimport adafruit_pyportal\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\npyportal = adafruit_pyportal.PyPortal()\n# Get Adafruit IO keys, ensure these are setup in settings.toml\n# (visit io.adafruit.com if you need to create an account, or if you need your Adafruit IO key.)\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_pyportal_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_pyportal_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_pyportal\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef connected(client, userdata, flags, rc):\n    print(f'Subscribing to {mqtt_topic}')\n    client.subscribe(mqtt_topic)\n\n# Usage example:\n# Define callback methods which are called when events occur\ndef connected(client, userdata, flags, rc):\n    # This function will be called when the client is connected\n    # successfully to the broker.\n    print(f\"Subscribing to {mqtt_topic}\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_pyportal_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_pyportal_esp32spi.py",
      "chunk_type": "function",
      "function_name": "connected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_pyportal\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef disconnected(client, userdata, rc):\n    print('Disconnected from MQTT Broker!')\n\n# Usage example:\n\ndef disconnected(client, userdata, rc):\n    # This method is called when the client is disconnected\n    print(\"Disconnected from MQTT Broker!\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_pyportal_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_pyportal_esp32spi.py",
      "chunk_type": "function",
      "function_name": "disconnected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_pyportal\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# Method callled when a client's subscribed feed has a new\nvalue.\n:param str topic: The topic of the feed with a new value.\n:param str message: The new value\ndef message(client, topic, message):\n    \"\"\"Method callled when a client's subscribed feed has a new\n    value.\n    :param str topic: The topic of the feed with a new value.\n    :param str message: The new value\n    \"\"\"\n    print(f'New message on topic {topic}: {message}')\n\n# Usage example:\n    value.\n    :param str topic: The topic of the feed with a new value.\n    :param str message: The new value\n    \"\"\"\n    print(f\"New message on topic {topic}: {message}\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_pyportal_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_pyportal_esp32spi.py",
      "chunk_type": "function",
      "function_name": "message"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_pyportal\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# Connect to WiFi\npool = adafruit_connection_manager.get_radio_socketpool(pyportal.network._wifi.esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(pyportal.network._wifi.esp)\n# Set up a MiniMQTT Client\nmqtt_client = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_pyportal_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_pyportal_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_pyportal\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\npool = adafruit_connection_manager.get_radio_socketpool(pyportal.network._wifi.esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(pyportal.network._wifi.esp)\n# Set up a MiniMQTT Client\nmqtt_client = MQTT.MQTT(\n    broker=broker,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_pyportal_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_pyportal_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# WARNING: absolutely shows extremely sensitive personal information & credentials\n# Including your real name, latitude, longitude, account id, mac address, etc...\nDEBUG = False\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nRACHIO_HEADER = {\"Authorization\": \" Bearer \" + RACHIO_KEY}",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_rachio_irrigation.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_rachio_irrigation.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Including your real name, latitude, longitude, account id, mac address, etc...\nDEBUG = False\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nRACHIO_HEADER = {\"Authorization\": \" Bearer \" + RACHIO_KEY}\nRACHIO_SOURCE = \"https://api.rach.io/1/public/person/info/\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_rachio_irrigation.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_rachio_irrigation.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nDEBUG = False\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nRACHIO_HEADER = {\"Authorization\": \" Bearer \" + RACHIO_KEY}\nRACHIO_SOURCE = \"https://api.rach.io/1/public/person/info/\"\nRACHIO_PERSON_SOURCE = \"https://api.rach.io/1/public/person/\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_rachio_irrigation.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_rachio_irrigation.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Obfuscates a string with asterisks except for a specified number of characters.\nparam object: str The string to obfuscate with asterisks\nparam direction: str Option either 'prepend', 'append', or 'all' direction\nparam characters: int The number of characters to keep unobfuscated (default is 2)\ndef obfuscating_asterix(obfuscate_object, direction, characters=2):\n    \"\"\"\n    Obfuscates a string with asterisks except for a specified number of characters.\n    param object: str The string to obfuscate with asterisks\n    param direction: str Option either 'prepend', 'append', or 'all' direction\n    param characters: int The number of characters to keep unobfuscated (default is 2)\n    \"\"\"\n    object_len = len(obfuscate_object)\n    if direction not in {'prepend', 'append', 'all'}:\n        raise ValueError(\"Invalid direction. Use 'prepend', 'append', or 'all'.\")\n    if characters >= object_len and direction != 'all':\n        return obfuscate_object\n    asterix_replace = '*' * object_len\n    if direction == 'append':\n        asterix_final = obfuscate_object[:characters] + '*' * (object_len - characters)\n    elif direction == 'prepend':\n        asterix_final = '*' * (object_len - characters) + obfuscate_object[-characters:]\n    elif direction == 'all':\n        asterix_final = asterix_replace\n    return asterix_final\n\n# Usage example:\n\n            rachio_id = rachio_json[\"id\"]\n            rachio_id_ast = obfuscating_asterix(rachio_id, \"append\", 3)\n            print(\" |  | PersonID: \", rachio_id_ast)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_rachio_irrigation.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_rachio_irrigation.py",
      "chunk_type": "function",
      "function_name": "obfuscating_asterix"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Converts seconds to minutes/hours/days\ndef time_calc(input_time):\n    \"\"\"Converts seconds to minutes/hours/days\"\"\"\n    if input_time < 60:\n        return f'{input_time:.0f} seconds'\n    if input_time < 3600:\n        return f'{input_time / 60:.0f} minutes'\n    if input_time < 86400:\n        return f'{input_time / 60 / 60:.0f} hours'\n    return f'{input_time / 60 / 60 / 24:.1f} days'\n\n# Usage example:\n\n            print(\"\\nFinished!\")\n            print(f\"Board Uptime: {time_calc(time.monotonic())}\")\n            print(f\"Next Update: {time_calc(SLEEP_TIME)}\")\n            print(\"===============================\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_rachio_irrigation.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_rachio_irrigation.py",
      "chunk_type": "function",
      "function_name": "time_calc"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# F-String formatted struct time conversion\ndef _format_datetime(datetime):\n    \"\"\"F-String formatted struct time conversion\"\"\"\n    return f'{datetime.tm_mon:02}/' + f'{datetime.tm_mday:02}/' + f'{datetime.tm_year:02} ' + f'{datetime.tm_hour:02}:' + f'{datetime.tm_min:02}:' + f'{datetime.tm_sec:02}'\n\n# Usage example:\n                print(f\" |  | Unix Timezone Offset: {rachio_timezone_offset}\")\n            current_struct_time = time.localtime(local_unix_time)\n            final_timestamp = f\"{_format_datetime(current_struct_time)}\"\n            print(f\" |  | Registration Date: {final_timestamp}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_rachio_irrigation.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_rachio_irrigation.py",
      "chunk_type": "function",
      "function_name": "_format_datetime"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nDemonstration of a Bluefruit BLE Central. Connects to the first BLE HID peripheral it finds.\n\"\"\"\n\n# import time\n\n# import board\n\n# import adafruit_ble\n# from adafruit_ble.services.standard.hid import HIDService\n# from adafruit_ble.core.scanner import Scanner\n\n# # This hasn't been updated.\n\n# adafruit_ble.detect_service(HIDService)\n\n# scanner = Scanner()\n\n# while True:\n#     print(\"scanning\")\n#     results = []\n#     while not results:\n#         results = scanner.scan(HIDService, timeout=4)\n\n#     peer = results[0].connect(timeout=10, pair=True)\n#     print(peer)\n#     print(peer.hid.protocol_mode)\n#     print(peer.hid.report_map)\n#     print(peer.hid.devices)\n\n#     time.sleep(0.2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_hid_central.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_hid_central.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fontio\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_text import bitmap_label, label\n\nimport terminalio\ndisplay = board.DISPLAY\nmain_group = displayio.Group()\nMEDIUM_FONT = bitmap_font.load_font(\"fonts/LeagueSpartan-Bold-16.bdf\")\nBIG_FONT = bitmap_font.load_font(\"fonts/LibreBodoniv2002-Bold-27.bdf\")\nTIME_PAUSE = 2",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-text/examples/display_text_advance_example.py",
      "library": "display-text",
      "type": "example",
      "file_name": "display_text_advance_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_waveform import square\n\nimport board\nimport digitalio\nLED = digitalio.DigitalInOut(board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/waveform/examples/waveform_square_simpletest.py",
      "library": "waveform",
      "type": "example",
      "file_name": "waveform_square_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"\n'square_demo.py'.\n\n=================================================\ntoggles the builtin LED using a square wave\n\"\"\"\n\nimport time\n\nimport board\nimport digitalio\n\nfrom adafruit_waveform import square\n\nLED = digitalio.DigitalInOut(board.D13)\nLED.switch_to_output()\nSAMPLE_SQUARE = square.square_wave(2)\n\nwhile True:\n    for i in range(len(SAMPLE_SQUARE)):\n        LED.value = i\n        print(LED.value)\n        time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/waveform/examples/waveform_square_simpletest.py",
      "library": "waveform",
      "type": "example",
      "file_name": "waveform_square_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_displayio_sh1106\n\nimport adafruit_displayio_sh1106\nspi = busio.SPI(board.SCK, board.MOSI)\ndisplay_bus = FourWire(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_sh1106/examples/displayio_sh1106_simpletest.py",
      "library": "displayio_sh1106",
      "type": "example",
      "file_name": "displayio_sh1106_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_displayio_sh1106\n\ndisplay_bus = FourWire(spi, command=board.OLED_DC, chip_select=board.OLED_CS, reset=board.OLED_RESET, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_sh1106/examples/displayio_sh1106_simpletest.py",
      "library": "displayio_sh1106",
      "type": "example",
      "file_name": "displayio_sh1106_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_displayio_sh1106\n\nWIDTH = 128\nHEIGHT = 64\nBORDER = 5\ndisplay = adafruit_displayio_sh1106.SH1106(display_bus, width=WIDTH, height=HEIGHT)\n# Make the display context\nsplash = displayio.Group()\ndisplay.root_group = splash",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_sh1106/examples/displayio_sh1106_simpletest.py",
      "library": "displayio_sh1106",
      "type": "example",
      "file_name": "displayio_sh1106_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from rainbowio import colorwheel\nimport adafruit_trellism4\n\nimport adafruit_trellism4\ntrellis = adafruit_trellism4.TrellisM4Express()\nled_on = []",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/trellism4/examples/trellism4_neopixel_toggle.py",
      "library": "trellism4",
      "type": "example",
      "file_name": "trellism4_neopixel_toggle.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nfrom rainbowio import colorwheel\n\nimport adafruit_trellism4\n\ntrellis = adafruit_trellism4.TrellisM4Express()\n\nled_on = []\n\nfor x in range(trellis.pixels.width):\n    led_on.append([])\n    for y in range(trellis.pixels.height):\n        led_on[x].append(False)\n\ntrellis.pixels.fill((0, 0, 0))\n\ncurrent_press = set()\n\nwhile True:\n    pressed = set(trellis.pressed_keys)\n\n    for press in pressed - current_press:\n        x, y = press\n\n        if not led_on[x][y]:\n            print(\"Turning on:\", press)\n            pixel_index = (x + (y * 8)) * 256 // 32\n            trellis.pixels[x, y] = colorwheel(pixel_index & 255)\n            led_on[x][y] = True\n\n        else:\n            print(\"Turning off:\", press)\n            trellis.pixels[x, y] = (0, 0, 0)\n            led_on[x][y] = False\n\n    current_press = pressed\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/trellism4/examples/trellism4_neopixel_toggle.py",
      "library": "trellism4",
      "type": "example",
      "file_name": "trellism4_neopixel_toggle.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import socket\nimport ssl\nfrom os import getenv\nimport adafruit_requests\nfrom adafruit_oauth2 import OAuth2\n\n# Get Google keys, ensure these are setup in settings.toml\ngoogle_client_id = getenv(\"google_client_id\")\ngoogle_client_secret = getenv(\"google_client_secret\")\nrequests = adafruit_requests.Session(socket, ssl.create_default_context())\n# Set scope(s) of access required by the API you're using\nscopes = [\"email\"]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/oauth_2/examples/oauth2_simpletest_cpython.py",
      "library": "oauth_2",
      "type": "example",
      "file_name": "oauth2_simpletest_cpython.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_sharpmemorydisplay\n\n# Parameters to Change\nBORDER = 5\nFONTSIZE = 10\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\nscs = digitalio.DigitalInOut(board.D6)  # inverted chip select\n# display = adafruit_sharpmemorydisplay.SharpMemoryDisplay(spi, scs, 96, 96)\n# display = adafruit_sharpmemorydisplay.SharpMemoryDisplay(spi, scs, 400, 240)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sharpmemorydisplay/examples/sharpmemorydisplay_pillow_demo.py",
      "library": "sharpmemorydisplay",
      "type": "example",
      "file_name": "sharpmemorydisplay_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_sharpmemorydisplay\n\n# Parameters to Change\nBORDER = 5\nFONTSIZE = 10\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\nscs = digitalio.DigitalInOut(board.D6)  # inverted chip select\n# display = adafruit_sharpmemorydisplay.SharpMemoryDisplay(spi, scs, 96, 96)\n# display = adafruit_sharpmemorydisplay.SharpMemoryDisplay(spi, scs, 400, 240)\ndisplay = adafruit_sharpmemorydisplay.SharpMemoryDisplay(spi, scs, 144, 168)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sharpmemorydisplay/examples/sharpmemorydisplay_pillow_demo.py",
      "library": "sharpmemorydisplay",
      "type": "example",
      "file_name": "sharpmemorydisplay_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_sharpmemorydisplay\n\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\nscs = digitalio.DigitalInOut(board.D6)  # inverted chip select\n# display = adafruit_sharpmemorydisplay.SharpMemoryDisplay(spi, scs, 96, 96)\n# display = adafruit_sharpmemorydisplay.SharpMemoryDisplay(spi, scs, 400, 240)\ndisplay = adafruit_sharpmemorydisplay.SharpMemoryDisplay(spi, scs, 144, 168)\n# Clear display.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sharpmemorydisplay/examples/sharpmemorydisplay_pillow_demo.py",
      "library": "sharpmemorydisplay",
      "type": "example",
      "file_name": "sharpmemorydisplay_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom adafruit_progressbar.verticalprogressbar import VerticalFillDirection, VerticalProgressBar\n\n# Make the display context\nsplash = displayio.Group()\nboard.DISPLAY.root_group = splash\n# set progress bar width and height relative to board's display\nwidth = 10\nheight = board.DISPLAY.height - 40",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/progressbar/examples/progressbar_vertical_simpletest.py",
      "library": "progressbar",
      "type": "example",
      "file_name": "progressbar_vertical_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom adafruit_progressbar.verticalprogressbar import VerticalFillDirection, VerticalProgressBar\n\nsplash = displayio.Group()\nboard.DISPLAY.root_group = splash\n# set progress bar width and height relative to board's display\nwidth = 10\nheight = board.DISPLAY.height - 40\nx = width * 2\ny = 10",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/progressbar/examples/progressbar_vertical_simpletest.py",
      "library": "progressbar",
      "type": "example",
      "file_name": "progressbar_vertical_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport digitalio\nfrom adafruit_max7219 import bcddigits\n\nimport digitalio\n# You may need to change the chip select pin depending on your wiring\nspi = board.SPI()\ncs = digitalio.DigitalInOut(board.D4)\nleds = bcddigits.BCDDigits(spi, cs, nDigits=8)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max7219/examples/max7219_showbcddigits.py",
      "library": "max7219",
      "type": "example",
      "file_name": "max7219_showbcddigits.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport digitalio\nfrom adafruit_max7219 import bcddigits\n\n# You may need to change the chip select pin depending on your wiring\nspi = board.SPI()\ncs = digitalio.DigitalInOut(board.D4)\nleds = bcddigits.BCDDigits(spi, cs, nDigits=8)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max7219/examples/max7219_showbcddigits.py",
      "library": "max7219",
      "type": "example",
      "file_name": "max7219_showbcddigits.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_onewire.bus import OneWireBus\n\n# Create the 1-Wire Bus\n# Use whatever pin you've connected to on your board\now_bus = OneWireBus(board.D2)\n# Reset and check for presence pulse.\n# This is basically - \"is there anything out there?\"\nprint(\"Resetting bus...\", end=\"\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/onewire/examples/onewire_simpletest.py",
      "library": "onewire",
      "type": "example",
      "file_name": "onewire_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom adafruit_cursorcontrol.cursorcontrol import Cursor\nfrom adafruit_cursorcontrol.cursorcontrol_cursormanager import CursorManager\n\n# Create the display\ndisplay = board.DISPLAY\n# Create the display context\nsplash = displayio.Group()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/cursorcontrol/examples/cursorcontrol_custom_cursor.py",
      "library": "cursorcontrol",
      "type": "example",
      "file_name": "cursorcontrol_custom_cursor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport displayio\n\nfrom adafruit_cursorcontrol.cursorcontrol import Cursor\nfrom adafruit_cursorcontrol.cursorcontrol_cursormanager import CursorManager\n\n# Create the display\ndisplay = board.DISPLAY\n\n# Create the display context\nsplash = displayio.Group()\n\n# initialize the mouse cursor object\nbmp = displayio.Bitmap(20, 20, 3)\nfor i in range(0, bmp.height):\n    bmp[0, i] = 1\n    bmp[bmp.width - 1, i] = 1\nfor i in range(0, bmp.width):\n    bmp[i, 0] = 1\n    bmp[i, bmp.height - 1] = 1\n\nmouse_cursor = Cursor(display, display_group=splash, bmp=bmp)\n\n# initialize the cursormanager\ncursor = CursorManager(mouse_cursor)\n\n# show displayio group\ndisplay.root_group = splash\n\nwhile True:\n    cursor.update()\n    if cursor.is_clicked:\n        if mouse_cursor.hidden:\n            mouse_cursor.show()\n        else:\n            mouse_cursor.hide()\n    time.sleep(0.01)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/cursorcontrol/examples/cursorcontrol_custom_cursor.py",
      "library": "cursorcontrol",
      "type": "example",
      "file_name": "cursorcontrol_custom_cursor.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_veml6070\n\nimport adafruit_veml6070\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nuv = adafruit_veml6070.VEML6070(i2c)\n# Create a Label to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/veml6070/examples/veml6070_displayio_simpletest.py",
      "library": "veml6070",
      "type": "example",
      "file_name": "veml6070_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_veml6070\n\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nuv = adafruit_veml6070.VEML6070(i2c)\n# Create a Label to show the readings. If you have a very small\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/veml6070/examples/veml6070_displayio_simpletest.py",
      "library": "veml6070",
      "type": "example",
      "file_name": "veml6070_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_veml6070\n\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)\n# place the label in the middle of the screen with anchored positioning\ndisplay_output_label.anchor_point = (0, 0)\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2)\n# add the label to the main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/veml6070/examples/veml6070_displayio_simpletest.py",
      "library": "veml6070",
      "type": "example",
      "file_name": "veml6070_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_veml6070\n\n# add the label to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/veml6070/examples/veml6070_displayio_simpletest.py",
      "library": "veml6070",
      "type": "example",
      "file_name": "veml6070_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_imageload\nimport board\nimport displayio\nimport adafruit_monsterm4sk\n\neye_image, eye_palette = adafruit_imageload.load('/small_triangle_eye.bmp', bitmap=displayio.Bitmap, palette=displayio.Palette)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/monsterm4sk/examples/monsterm4sk_pumpkin_shifting_eyes.py",
      "library": "monsterm4sk",
      "type": "example",
      "file_name": "monsterm4sk_pumpkin_shifting_eyes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_imageload\nimport board\nimport displayio\nimport adafruit_monsterm4sk\n\n# Create a TileGrid to hold the bitmap for each eye\nright_pumkin_eye_tilegrid = displayio.TileGrid(eye_image, pixel_shader=eye_palette)\nleft_pumkin_eye_tilegrid = displayio.TileGrid(eye_image, pixel_shader=eye_palette)\n# initialize the monster m4sk hardware\ni2c_bus = board.I2C()  # uses board.SCL and board.SDA\n# i2c_bus = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmask = adafruit_monsterm4sk.MonsterM4sk(i2c=i2c_bus)\n# left eye group setup",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/monsterm4sk/examples/monsterm4sk_pumpkin_shifting_eyes.py",
      "library": "monsterm4sk",
      "type": "example",
      "file_name": "monsterm4sk_pumpkin_shifting_eyes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_imageload\nimport board\nimport displayio\nimport adafruit_monsterm4sk\n\nleft_pumkin_eye_tilegrid = displayio.TileGrid(eye_image, pixel_shader=eye_palette)\n# initialize the monster m4sk hardware\ni2c_bus = board.I2C()  # uses board.SCL and board.SDA\n# i2c_bus = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmask = adafruit_monsterm4sk.MonsterM4sk(i2c=i2c_bus)\n# left eye group setup\nleft_group = displayio.Group()\nmask.left_display.root_group = left_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/monsterm4sk/examples/monsterm4sk_pumpkin_shifting_eyes.py",
      "library": "monsterm4sk",
      "type": "example",
      "file_name": "monsterm4sk_pumpkin_shifting_eyes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\n# Modify this if you have a different sized character LCD\nlcd_columns = 16\nlcd_rows = 2\n# Metro M0/M4 Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_customcharacter.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_customcharacter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_columns = 16\nlcd_rows = 2\n# Metro M0/M4 Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_customcharacter.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_customcharacter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_rows = 2\n# Metro M0/M4 Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nlcd_backlight = digitalio.DigitalInOut(board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_customcharacter.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_customcharacter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\n# Metro M0/M4 Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nlcd_backlight = digitalio.DigitalInOut(board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_customcharacter.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_customcharacter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\n# Metro M0/M4 Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nlcd_backlight = digitalio.DigitalInOut(board.D13)\n# Initialise the LCD class",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_customcharacter.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_customcharacter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nlcd_backlight = digitalio.DigitalInOut(board.D13)\n# Initialise the LCD class\nlcd = characterlcd.Character_LCD_Mono(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_customcharacter.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_customcharacter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nlcd_backlight = digitalio.DigitalInOut(board.D13)\n# Initialise the LCD class\nlcd = characterlcd.Character_LCD_Mono(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_customcharacter.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_customcharacter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Display a custom character\"\"\"\n\nimport board\nimport digitalio\n\nimport adafruit_character_lcd.character_lcd as characterlcd\n\n# Modify this if you have a different sized character LCD\nlcd_columns = 16\nlcd_rows = 2\n\n# Metro M0/M4 Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nlcd_backlight = digitalio.DigitalInOut(board.D13)\n\n# Initialise the LCD class\nlcd = characterlcd.Character_LCD_Mono(\n    lcd_rs, lcd_en, lcd_d4, lcd_d5, lcd_d6, lcd_d7, lcd_columns, lcd_rows, lcd_backlight\n)\n\ncheckmark = bytes([0x0, 0x0, 0x1, 0x3, 0x16, 0x1C, 0x8, 0x0])\n\n# Store in LCD character memory 0\nlcd.create_char(0, checkmark)\n\nlcd.clear()\nlcd.message = \"\\x00 Success \\x00\"\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_customcharacter.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_customcharacter.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport digitalio\nfrom adafruit_rgb_display import st7789\nfrom adafruit_rgb_display.rgb import color565\n\n# Configuratoin for CS and DC pins (these are FeatherWing defaults on M0/M4):\ncs_pin = digitalio.DigitalInOut(board.D5)\ndc_pin = digitalio.DigitalInOut(board.D6)\nreset_pin = digitalio.DigitalInOut(board.D9)\n# Config for display baudrate (default max is 24mhz):",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_simpletest.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport digitalio\nfrom adafruit_rgb_display import st7789\nfrom adafruit_rgb_display.rgb import color565\n\n# Configuratoin for CS and DC pins (these are FeatherWing defaults on M0/M4):\ncs_pin = digitalio.DigitalInOut(board.D5)\ndc_pin = digitalio.DigitalInOut(board.D6)\nreset_pin = digitalio.DigitalInOut(board.D9)\n# Config for display baudrate (default max is 24mhz):\nBAUDRATE = 24000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_simpletest.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport digitalio\nfrom adafruit_rgb_display import st7789\nfrom adafruit_rgb_display.rgb import color565\n\n# Configuratoin for CS and DC pins (these are FeatherWing defaults on M0/M4):\ncs_pin = digitalio.DigitalInOut(board.D5)\ndc_pin = digitalio.DigitalInOut(board.D6)\nreset_pin = digitalio.DigitalInOut(board.D9)\n# Config for display baudrate (default max is 24mhz):\nBAUDRATE = 24000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_simpletest.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport digitalio\nfrom adafruit_rgb_display import st7789\nfrom adafruit_rgb_display.rgb import color565\n\n# Config for display baudrate (default max is 24mhz):\nBAUDRATE = 24000000\n# Setup SPI bus using hardware SPI:\nspi = board.SPI()\n# Create the ST7789 display:\ndisplay = st7789.ST7789(spi, cs=cs_pin, dc=dc_pin, rst=reset_pin, baudrate=BAUDRATE)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_simpletest.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nfrom adafruit_dps310.basic import DPS310\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\ndps310 = DPS310(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dps310/examples/dps310_displayio_simpletest.py",
      "library": "dps310",
      "type": "example",
      "file_name": "dps310_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nfrom adafruit_dps310.basic import DPS310\n\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dps310/examples/dps310_displayio_simpletest.py",
      "library": "dps310",
      "type": "example",
      "file_name": "dps310_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nfrom adafruit_dps310.basic import DPS310\n\n# add the label(s) to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dps310/examples/dps310_displayio_simpletest.py",
      "library": "dps310",
      "type": "example",
      "file_name": "dps310_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import turtle\n\nturtle = turtle(board.DISPLAY)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_dots.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_dots.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\n\nfrom adafruit_turtle import turtle\n\nprint(\"Turtle time! Lets draw a square with dots\")\n\nturtle = turtle(board.DISPLAY)\nturtle.pendown()\n\nfor _ in range(4):\n    turtle.dot(8)\n    turtle.left(90)\n    turtle.forward(25)\n\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_dots.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_dots.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport supervisor\nimport adafruit_tlc59711\n\nimport adafruit_tlc59711\n##########################################\nPIXEL_COUNT = 16 * 8\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\npixels = adafruit_tlc59711.TLC59711(spi, pixel_count=PIXEL_COUNT)\n##########################################",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_test_bcdata.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_test_bcdata.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport supervisor\nimport adafruit_tlc59711\n\n##########################################\nPIXEL_COUNT = 16 * 8\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\npixels = adafruit_tlc59711.TLC59711(spi, pixel_count=PIXEL_COUNT)\n##########################################",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_test_bcdata.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_test_bcdata.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport supervisor\nimport adafruit_tlc59711\n\n# Loop.\ndef main_loop():\n    \"\"\"Loop.\"\"\"\n    new_value = input()\n    if 'v' in new_value:\n        try:\n            value = int(new_value[1:])\n        except ValueError as e:\n            print('Exception: ', e)\n        pixels.set_pixel_all_16bit_value(value, value, value)\n    else:\n        Ioclmax, IoutR, IoutG, IoutB = (18, 18, 11, 13)\n        try:\n            Ioclmax, IoutR, IoutG, IoutB = new_value.split(';')\n            Ioclmax = float(Ioclmax)\n            IoutR = float(IoutR)\n            IoutG = float(IoutG)\n            IoutB = float(IoutB)\n        except ValueError as e:\n            print('Exception: ', e)\n        BCValues = adafruit_tlc59711.TLC59711.calculate_BCData(Ioclmax=Ioclmax, IoutR=IoutR, IoutG=IoutG, IoutB=IoutB)\n        pixels.bcr = BCValues[0]\n        pixels.bcg = BCValues[1]\n        pixels.bcb = BCValues[2]\n        print(f'bcr: {pixels.bcr:>3}\\nbcg: {pixels.bcg:>3}\\nbcb: {pixels.bcb:>3}\\n')\n        pixels.update_BCData()\n    pixels.show()\n    print('\\nenter new values:')\n\n# Usage example:\n    while True:\n        if supervisor.runtime.serial_bytes_available:\n            main_loop()\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_test_bcdata.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_test_bcdata.py",
      "chunk_type": "function",
      "function_name": "main_loop"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport supervisor\nimport adafruit_tlc59711\n\n# Test Main.\ndef test_main():\n    \"\"\"Test Main.\"\"\"\n    print(42 * '*', end='')\n    print(__doc__, end='')\n    print(42 * '*')\n    print('set pixel all to 100, 100, 100')\n    pixels.set_pixel_all((5000, 5000, 5000))\n    Ioclmax = adafruit_tlc59711.TLC59711.calculate_Ioclmax(Riref=2.7)\n    print(f'Ioclmax = {Ioclmax}')\n    Riref = adafruit_tlc59711.TLC59711.calculate_Riref(Ioclmax=Ioclmax)\n    print(f'Riref = {Riref}')\n    BCValues = adafruit_tlc59711.TLC59711.calculate_BCData(Ioclmax=Ioclmax, IoutR=18, IoutG=11, IoutB=13)\n    print(f'BCValues = {BCValues}')\n    pixels.bcr = BCValues[0]\n    pixels.bcg = BCValues[1]\n    pixels.bcb = BCValues[2]\n    pixels.update_BCData()\n    pixels.show()\n    time.sleep(0.1)\n    if supervisor.runtime.serial_connected:\n        print(\"\\nthis script offers two things to be changed:\\n- value for all channels\\nexample: 'v10'\\nexample: 'v65535'\\n- (global) brightness control:\\nuse format: 'Ioclmax; IoutR; IoutG; IoutB'\\nexample: '18; 7; 15; 17'\\n\")\n    while True:\n        if supervisor.runtime.serial_bytes_available:\n            main_loop()\n\n# Usage example:\n\nif __name__ == \"__main__\":\n    test_main()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_test_bcdata.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_test_bcdata.py",
      "chunk_type": "function",
      "function_name": "test_main"
    }
  },
  {
    "content": "import board\nimport displayio\nimport adafruit_imageload\nfrom adafruit_imageload.tilegrid_inflator import inflate_tilegrid\n\nimage, palette = adafruit_imageload.load('images/castle_spritesheet.bmp')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_tilegrid_inflator_simpletest.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_tilegrid_inflator_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport adafruit_imageload\nfrom adafruit_imageload.tilegrid_inflator import inflate_tilegrid\n\nimage, palette = adafruit_imageload.load(\"images/castle_spritesheet.bmp\")\ntile_grid = inflate_tilegrid(bmp_obj=image, bmp_palette=palette, target_size=(10, 8))\ngroup = displayio.Group()\nboard.DISPLAY.root_group = group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_tilegrid_inflator_simpletest.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_tilegrid_inflator_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2022 Tim Cocks for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport displayio\n\nimport adafruit_imageload\nfrom adafruit_imageload.tilegrid_inflator import inflate_tilegrid\n\nimage, palette = adafruit_imageload.load(\"images/castle_spritesheet.bmp\")\ntile_grid = inflate_tilegrid(bmp_obj=image, bmp_palette=palette, target_size=(10, 8))\n\ngroup = displayio.Group()\ngroup.append(tile_grid)\nboard.DISPLAY.root_group = group\n\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_tilegrid_inflator_simpletest.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_tilegrid_inflator_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lis2mdl\n\nimport board\nimport adafruit_lis2mdl\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lis2mdl.LIS2MDL(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis2mdl/examples/lis2mdl_simpletest.py",
      "library": "lis2mdl",
      "type": "example",
      "file_name": "lis2mdl_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lis2mdl\n\nimport adafruit_lis2mdl\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lis2mdl.LIS2MDL(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis2mdl/examples/lis2mdl_simpletest.py",
      "library": "lis2mdl",
      "type": "example",
      "file_name": "lis2mdl_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Display magnetometer data once per second\"\"\"\n\nimport time\n\nimport board\n\nimport adafruit_lis2mdl\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lis2mdl.LIS2MDL(i2c)\n\nwhile True:\n    mag_x, mag_y, mag_z = sensor.magnetic\n\n    print(f\"X:{mag_x:10.2f}, Y:{mag_y:10.2f}, Z:{mag_z:10.2f} uT\")\n    print(\"\")\n    time.sleep(1.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis2mdl/examples/lis2mdl_simpletest.py",
      "library": "lis2mdl",
      "type": "example",
      "file_name": "lis2mdl_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\nimport adafruit_requests\n\napn = os.getenv(\"APN\")\napn_username = os.getenv(\"APN_USERNAME\")\napn_password = os.getenv(\"APN_PASSWORD\")\n# Create a serial connection for the FONA connection\nuart = busio.UART(board.TX, board.RX)\nrst = digitalio.DigitalInOut(board.D4)\n# Use this for FONA800 and FONA808\nradio = FONA(uart, rst)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/fona/requests_fona_advanced.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_fona_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\nimport adafruit_requests\n\napn_username = os.getenv(\"APN_USERNAME\")\napn_password = os.getenv(\"APN_PASSWORD\")\n# Create a serial connection for the FONA connection\nuart = busio.UART(board.TX, board.RX)\nrst = digitalio.DigitalInOut(board.D4)\n# Use this for FONA800 and FONA808\nradio = FONA(uart, rst)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/fona/requests_fona_advanced.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_fona_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\nimport adafruit_requests\n\n# Initialize a requests session\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nJSON_GET_URL = \"http://httpbin.org/get\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/fona/requests_fona_advanced.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_fona_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\nimport adafruit_requests\n\n# Initialize a requests session\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nJSON_GET_URL = \"http://httpbin.org/get\"\n# Define a custom header as a dict.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/fona/requests_fona_advanced.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_fona_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_icm20x\n\nimport board\nimport adafruit_icm20x\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nicm = adafruit_icm20x.ICM20948(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/icm20x/examples/icm20x_icm20948_simpletest.py",
      "library": "icm20x",
      "type": "example",
      "file_name": "icm20x_icm20948_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_icm20x\n\nimport adafruit_icm20x\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nicm = adafruit_icm20x.ICM20948(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/icm20x/examples/icm20x_icm20948_simpletest.py",
      "library": "icm20x",
      "type": "example",
      "file_name": "icm20x_icm20948_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_icm20x\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nicm = adafruit_icm20x.ICM20948(i2c)\n\nwhile True:\n    print(\"Acceleration: X:{:.2f}, Y: {:.2f}, Z: {:.2f} m/s^2\".format(*icm.acceleration))\n    print(\"Gyro X:{:.2f}, Y: {:.2f}, Z: {:.2f} rads/s\".format(*icm.gyro))\n    print(\"Magnetometer X:{:.2f}, Y: {:.2f}, Z: {:.2f} uT\".format(*icm.magnetic))\n    print(\"\")\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/icm20x/examples/icm20x_icm20948_simpletest.py",
      "library": "icm20x",
      "type": "example",
      "file_name": "icm20x_icm20948_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\n# set GPIO pins as necessary - this example is for Raspberry Pi\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node2_ack.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node2_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\n# set GPIO pins as necessary - this example is for Raspberry Pi\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node2_ack.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node2_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# set GPIO pins as necessary - this example is for Raspberry Pi\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm69 = adafruit_rfm69.RFM69(spi, CS, RESET, RADIO_FREQ_MHZ)\n# Optionally set an encryption key (16 byte AES key). MUST match both",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node2_ack.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node2_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm69 = adafruit_rfm69.RFM69(spi, CS, RESET, RADIO_FREQ_MHZ)\n# Optionally set an encryption key (16 byte AES key). MUST match both\n# on the transmitter and receiver (or be set to None to disable/the default).\nrfm69.encryption_key = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node2_ack.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node2_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_fruitjam\n\npobj = adafruit_fruitjam.peripherals.Peripherals(audio_output='headphone')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/fruitjam/examples/fruitjam_headphone.py",
      "library": "fruitjam",
      "type": "example",
      "file_name": "fruitjam_headphone.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2025 Tim Cocks for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\nimport time\n\nimport adafruit_fruitjam\n\npobj = adafruit_fruitjam.peripherals.Peripherals(audio_output=\"headphone\")\n\nFILES = [\"beep.wav\", \"dip.wav\", \"rise.wav\"]\nVOLUMES = [5, 7, 10, 11, 12]\n\nwhile True:\n    print(\"\\n=== Headphones Test ===\")\n    for vol in VOLUMES:\n        pobj.volume = vol\n        print(f\"Headphones volume: {vol}\")\n        for f in FILES:\n            print(f\"  -> {f}\")\n            pobj.play_file(f)\n            time.sleep(0.2)\n    time.sleep(1.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/fruitjam/examples/fruitjam_headphone.py",
      "library": "fruitjam",
      "type": "example",
      "file_name": "fruitjam_headphone.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_focaltouch\n\nimport busio\nimport adafruit_focaltouch\n# Create library object (named \"ft\") using a Bus I2C port\ni2c = busio.I2C(board.SCL, board.SDA)\nft = adafruit_focaltouch.Adafruit_FocalTouch(i2c, debug=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/focaltouch/examples/focaltouch_print_touches.py",
      "library": "focaltouch",
      "type": "example",
      "file_name": "focaltouch_print_touches.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_focaltouch\n\nimport adafruit_focaltouch\n# Create library object (named \"ft\") using a Bus I2C port\ni2c = busio.I2C(board.SCL, board.SDA)\nft = adafruit_focaltouch.Adafruit_FocalTouch(i2c, debug=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/focaltouch/examples/focaltouch_print_touches.py",
      "library": "focaltouch",
      "type": "example",
      "file_name": "focaltouch_print_touches.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nExample for getting touch data from an FT6206 or FT6236 capacitive\ntouch driver, over I2C\n\"\"\"\n\nimport time\n\nimport board\nimport busio\n\nimport adafruit_focaltouch\n\n# Create library object (named \"ft\") using a Bus I2C port\ni2c = busio.I2C(board.SCL, board.SDA)\n\nft = adafruit_focaltouch.Adafruit_FocalTouch(i2c, debug=False)\n\nwhile True:\n    # if the screen is being touched print the touches\n    if ft.touched:\n        print(ft.touches)\n    else:\n        print(\"no touch\")\n\n    time.sleep(0.15)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/focaltouch/examples/focaltouch_print_touches.py",
      "library": "focaltouch",
      "type": "example",
      "file_name": "focaltouch_print_touches.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_apds9960.apds9960 import APDS9960\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\napds = APDS9960(i2c)\napds.enable_proximity = True",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/apds9960/examples/apds9960_simpletest.py",
      "library": "apds9960",
      "type": "example",
      "file_name": "apds9960_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nfrom adafruit_apds9960.apds9960 import APDS9960\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\napds = APDS9960(i2c)\n\napds.enable_proximity = True\n\nwhile True:\n    print(apds.proximity)\n    time.sleep(0.2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/apds9960/examples/apds9960_simpletest.py",
      "library": "apds9960",
      "type": "example",
      "file_name": "apds9960_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_lc709203f import LC709203F\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = LC709203F(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lc709203f/examples/lc709203f_simpletest.py",
      "library": "lc709203f",
      "type": "example",
      "file_name": "lc709203f_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2017 Scott Shawcroft, written for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\n\nfrom adafruit_lc709203f import LC709203F\n\nprint(\"LC709203F simple test\")\nprint(\"Make sure LiPoly battery is plugged into the board!\")\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = LC709203F(i2c)\n\nprint(\"IC version:\", hex(sensor.ic_version))\nwhile True:\n    try:\n        print(f\"Battery: {sensor.cell_voltage:.3f} Volts / {sensor.cell_percent:.1f} %\")\n    except OSError:\n        print(\"retry reads\")\n\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lc709203f/examples/lc709203f_simpletest.py",
      "library": "lc709203f",
      "type": "example",
      "file_name": "lc709203f_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport adafruit_tca9548a\n\nimport board\nimport adafruit_tca9548a\n# Create I2C bus as normal\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Create the PCA9546A object and give it the I2C bus\nmux = adafruit_tca9548a.PCA9546A(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca9584a/examples/pca9546a_simpletest.py",
      "library": "tca9584a",
      "type": "example",
      "file_name": "pca9546a_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_tca9548a\n\n# Create I2C bus as normal\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Create the PCA9546A object and give it the I2C bus\nmux = adafruit_tca9548a.PCA9546A(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca9584a/examples/pca9546a_simpletest.py",
      "library": "tca9584a",
      "type": "example",
      "file_name": "pca9546a_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 Carter Nelson for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# This example shows using TCA9548A to perform a simple scan for connected devices\nimport board\n\nimport adafruit_tca9548a\n\n# Create I2C bus as normal\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\n# Create the PCA9546A object and give it the I2C bus\nmux = adafruit_tca9548a.PCA9546A(i2c)\n\nfor channel in range(4):\n    if mux[channel].try_lock():\n        print(f\"Channel {channel}:\", end=\"\")\n        addresses = mux[channel].scan()\n        print([hex(address) for address in addresses if address != 0x70])\n        mux[channel].unlock()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca9584a/examples/pca9546a_simpletest.py",
      "library": "tca9584a",
      "type": "example",
      "file_name": "pca9546a_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_lsm6ds.lsm6ds33 import LSM6DS33\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = LSM6DS33(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm6ds/examples/lsm6ds_lsm6ds33_simpletest.py",
      "library": "lsm6ds",
      "type": "example",
      "file_name": "lsm6ds_lsm6ds33_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2020 Bryan Siepert for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\nimport time\n\nimport board\n\nfrom adafruit_lsm6ds.lsm6ds33 import LSM6DS33\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = LSM6DS33(i2c)\n\nwhile True:\n    accel_x, accel_y, accel_z = sensor.acceleration\n    print(f\"Acceleration: X:{accel_x:.2f}, Y: {accel_y:.2f}, Z: {accel_z:.2f} m/s^2\")\n    gyro_x, gyro_y, gyro_z = sensor.gyro\n    print(f\"Gyro X:{gyro_x:.2f}, Y: {gyro_y:.2f}, Z: {gyro_z:.2f} radians/s\")\n    print(\"\")\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm6ds/examples/lsm6ds_lsm6ds33_simpletest.py",
      "library": "lsm6ds",
      "type": "example",
      "file_name": "lsm6ds_lsm6ds33_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom adafruit_display_shapes.arc import Arc\nfrom adafruit_display_shapes.circle import Circle\n\n# use built in display (PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\nw2 = int(display.width / 2)\nh2 = int(display.height / 2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-shapes/examples/display_shapes_arc.py",
      "library": "display-shapes",
      "type": "example",
      "file_name": "display_shapes_arc.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nfrom adafruit_display_shapes.filled_polygon import FilledPolygon\n\n# Make the display context\nsplash = displayio.Group()\nboard.DISPLAY.root_group = splash\n# Make a background color fill\ncolor_bitmap = displayio.Bitmap(320, 240, 1)\ncolor_palette = displayio.Palette(1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-shapes/examples/display_shapes_filled_polygon_simpletest.py",
      "library": "display-shapes",
      "type": "example",
      "file_name": "display_shapes_filled_polygon_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2024 Tim Cocks for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport displayio\n\nfrom adafruit_display_shapes.filled_polygon import FilledPolygon\n\n# Make the display context\nsplash = displayio.Group()\nboard.DISPLAY.root_group = splash\n\n# Make a background color fill\ncolor_bitmap = displayio.Bitmap(320, 240, 1)\ncolor_palette = displayio.Palette(1)\ncolor_palette[0] = 0xFFFFFF\nbg_sprite = displayio.TileGrid(color_bitmap, x=0, y=0, pixel_shader=color_palette)\nsplash.append(bg_sprite)\n##########################################################################\n\n# Draw a star with blue outline and pink fill\npolygon = FilledPolygon(\n    [\n        (55, 40),\n        (62, 62),\n        (85, 62),\n        (65, 76),\n        (75, 100),\n        (55, 84),\n        (35, 100),\n        (45, 76),\n        (25, 62),\n        (48, 62),\n    ],\n    outline=0x0000FF,\n    stroke=4,\n    fill=0xFF00FF,\n)\nsplash.append(polygon)\n\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-shapes/examples/display_shapes_filled_polygon_simpletest.py",
      "library": "display-shapes",
      "type": "example",
      "file_name": "display_shapes_filled_polygon_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_mcp3xxx.mcp3002 as MCP\nfrom adafruit_mcp3xxx.analog_in import AnalogIn\n\nimport adafruit_mcp3xxx.mcp3002 as MCP\n# create the spi bus\nspi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)\n# create the cs (chip select)\ncs = digitalio.DigitalInOut(board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp3xxx/examples/mcp3xxx_mcp3002_differential_simpletest.py",
      "library": "mcp3xxx",
      "type": "example",
      "file_name": "mcp3xxx_mcp3002_differential_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_mcp3xxx.mcp3002 as MCP\nfrom adafruit_mcp3xxx.analog_in import AnalogIn\n\n# create the spi bus\nspi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)\n# create the cs (chip select)\ncs = digitalio.DigitalInOut(board.D5)\n# create the mcp object\nmcp = MCP.MCP3002(spi, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp3xxx/examples/mcp3xxx_mcp3002_differential_simpletest.py",
      "library": "mcp3xxx",
      "type": "example",
      "file_name": "mcp3xxx_mcp3002_differential_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport busio\nimport digitalio\n\nimport adafruit_mcp3xxx.mcp3002 as MCP\nfrom adafruit_mcp3xxx.analog_in import AnalogIn\n\n# create the spi bus\nspi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)\n\n# create the cs (chip select)\ncs = digitalio.DigitalInOut(board.D5)\n\n# create the mcp object\nmcp = MCP.MCP3002(spi, cs)\n\n# create a differential ADC channel between Pin 0 and Pin 1\nchan = AnalogIn(mcp, MCP.P0, MCP.P1)\n\nprint(\"Differential ADC Value: \", chan.value)\nprint(\"Differential ADC Voltage: \" + str(chan.voltage) + \"V\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp3xxx/examples/mcp3xxx_mcp3002_differential_simpletest.py",
      "library": "mcp3xxx",
      "type": "example",
      "file_name": "mcp3xxx_mcp3002_differential_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bmp280\n\n# import digitalio # For use with SPI\nimport adafruit_bmp280\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nbmp280 = adafruit_bmp280.Adafruit_BMP280_I2C(i2c)\n# OR Create sensor object, communicating over the board's default SPI bus",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp280/examples/bmp280_simpletest.py",
      "library": "bmp280",
      "type": "example",
      "file_name": "bmp280_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bmp280\n\nimport adafruit_bmp280\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nbmp280 = adafruit_bmp280.Adafruit_BMP280_I2C(i2c)\n# OR Create sensor object, communicating over the board's default SPI bus\n# spi = board.SPI()\n# bmp_cs = digitalio.DigitalInOut(board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp280/examples/bmp280_simpletest.py",
      "library": "bmp280",
      "type": "example",
      "file_name": "bmp280_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_bme280 import basic as adafruit_bme280\n\nimport board\n# Create sensor object, using the board's default I2C bus.\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nbme280 = adafruit_bme280.Adafruit_BME280_I2C(i2c)\n# OR create sensor object, using the board's default SPI bus.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme280/examples/bme280_simpletest.py",
      "library": "bme280",
      "type": "example",
      "file_name": "bme280_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_bme280 import basic as adafruit_bme280\n\n# Create sensor object, using the board's default I2C bus.\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nbme280 = adafruit_bme280.Adafruit_BME280_I2C(i2c)\n# OR create sensor object, using the board's default SPI bus.\n# import digitalio\n# spi = board.SPI()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme280/examples/bme280_simpletest.py",
      "library": "bme280",
      "type": "example",
      "file_name": "bme280_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nfrom adafruit_bme280 import basic as adafruit_bme280\n\n# Create sensor object, using the board's default I2C bus.\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nbme280 = adafruit_bme280.Adafruit_BME280_I2C(i2c)\n\n# OR create sensor object, using the board's default SPI bus.\n# import digitalio\n# spi = board.SPI()\n# bme_cs = digitalio.DigitalInOut(board.D10)\n# bme280 = adafruit_bme280.Adafruit_BME280_SPI(spi, bme_cs)\n\n# change this to match the location's pressure (hPa) at sea level\nbme280.sea_level_pressure = 1013.25\n\nwhile True:\n    print(\"\\nTemperature: %0.1f C\" % bme280.temperature)\n    print(\"Humidity: %0.1f %%\" % bme280.relative_humidity)\n    print(\"Pressure: %0.1f hPa\" % bme280.pressure)\n    print(\"Altitude = %0.2f meters\" % bme280.altitude)\n    time.sleep(2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme280/examples/bme280_simpletest.py",
      "library": "bme280",
      "type": "example",
      "file_name": "bme280_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nimport pwmio\nimport adafruit_avrprog\n\nimport busio\nimport pwmio\nimport adafruit_avrprog\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\navrprog = adafruit_avrprog.AVRprog()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/avrprog/examples/avrprog_program_uno328.py",
      "library": "avrprog",
      "type": "example",
      "file_name": "avrprog_program_uno328.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport pwmio\nimport adafruit_avrprog\n\nimport pwmio\nimport adafruit_avrprog\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\navrprog = adafruit_avrprog.AVRprog()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/avrprog/examples/avrprog_program_uno328.py",
      "library": "avrprog",
      "type": "example",
      "file_name": "avrprog_program_uno328.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport pwmio\nimport adafruit_avrprog\n\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\navrprog = adafruit_avrprog.AVRprog()\n# we can generate an 6 MHz clock for driving bare chips too!\nclock_pwm = pwmio.PWMOut(board.D9, frequency=6000000, duty_cycle=65536 // 2)\n# Each chip has to have a definition so the script knows how to find it\natmega328p = avrprog.Boards.ATmega328p",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/avrprog/examples/avrprog_program_uno328.py",
      "library": "avrprog",
      "type": "example",
      "file_name": "avrprog_program_uno328.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport pwmio\nimport adafruit_avrprog\n\n# Helper to print out errors for us and then halt\ndef error(err):\n    \"\"\"Helper to print out errors for us and then halt\"\"\"\n    print('ERROR: ' + err)\n    avrprog.end()\n    while True:\n        pass\n\n# Usage example:\n\ndef error(err):\n    \"\"\"Helper to print out errors for us and then halt\"\"\"\n    print(\"ERROR: \" + err)\n    avrprog.end()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/avrprog/examples/avrprog_program_uno328.py",
      "library": "avrprog",
      "type": "example",
      "file_name": "avrprog_program_uno328.py",
      "chunk_type": "function",
      "function_name": "error"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom adafruit_progressbar.horizontalprogressbar import HorizontalProgressBar\nfrom adafruit_progressbar.verticalprogressbar import VerticalProgressBar\n\n# Make the display context\nsplash = displayio.Group()\nboard.DISPLAY.root_group = splash\n# set horizontal progress bar width and height relative to board's display\nh_width = board.DISPLAY.width - 40\nh_height = 30",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/progressbar/examples/progressbar_combined.py",
      "library": "progressbar",
      "type": "example",
      "file_name": "progressbar_combined.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom adafruit_progressbar.horizontalprogressbar import HorizontalProgressBar\nfrom adafruit_progressbar.verticalprogressbar import VerticalProgressBar\n\n# Make the display context\nsplash = displayio.Group()\nboard.DISPLAY.root_group = splash\n# set horizontal progress bar width and height relative to board's display\nh_width = board.DISPLAY.width - 40\nh_height = 30\nv_width = 30\nv_height = 140",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/progressbar/examples/progressbar_combined.py",
      "library": "progressbar",
      "type": "example",
      "file_name": "progressbar_combined.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_tmp117\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_ntp import NTP\nfrom adafruit_pyportal import PyPortal\nfrom digitalio import DigitalInOut\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\nclass gVars:\n\n    def __init__(self):\n        self.gVarsDict = {0: 'my_debug', 1: 'rtc', 2: 'temp_sensor', 3: 'lStart', 4: 'o_secs', 5: 'c_secs', 6: 'dt_refresh', 7: 'sDT_old', 8: 't0', 9: 't1', 10: 't2', 11: 'default_dt', 12: 'pge3_lbl_dflt', 13: 'pge4_lbl_dflt', 14: 'online_time_present', 15: 'temp_in_REPL', 16: 'old_temp', 17: 'use_ntp', 18: 'use_txt_in_month', 19: 'use_usa_notation', 20: 'content_sensor_idx', 21: 'ntp_refresh', 22: 'nHH_old', 23: 'next_NTP_sync', 24: 's_cnt', 25: 'five_min_cnt', 26: 'next_NTP_sync_t1', 27: 'next_NTP_sync_t3', 28: 'temp_in_fahrenheit'}\n        self.gVars_rDict = {'my_debug': 0, 'rtc': 1, 'temp_sensor': 2, 'lStart': 3, 'o_secs': 4, 'c_secs': 5, 'dt_refresh': 6, 'sDT_old': 7, 't0': 8, 't1': 9, 't2': 10, 'default_dt': 11, 'pge3_lbl_dflt': 12, 'pge4_lbl_dflt': 13, 'online_time_present': 14, 'temp_in_REPL': 15, 'old_temp': 16, 'use_ntp': 17, 'use_txt_in_month': 18, 'use_usa_notation': 19, 'content_sensor_idx': 20, 'ntp_refresh': 21, 'nHH_old': 22, 'next_NTP_sync': 23, 's_cnt': 24, 'five_min_cnt': 25, 'next_NTP_sync_t1': 26, 'next_NTP_sync_t3': 27, 'temp_in_fahrenheit': 28}\n        self.g_vars = {}\n\n    def write(self, s, value):\n        if isinstance(s, str):\n            if s in self.gVars_rDict:\n                n = self.gVars_rDict[s]\n                self.g_vars[n] = value\n            else:\n                raise KeyError(\"variable '{:>20s}' not found in self.gVars_rDict\".format(s))\n        else:\n            raise TypeError(f'myVars.write(): param s expected str, {type(s)} received')\n\n    def read(self, s):\n        RetVal = None\n        if isinstance(s, str):\n            if s in self.gVars_rDict:\n                n = self.gVars_rDict[s]\n                if n in self.g_vars:\n                    RetVal = self.g_vars[n]\n        return RetVal\n\n    def clean(self):\n        self.g_vars = {0: None, 1: None, 2: None, 3: None, 4: None, 5: None, 6: None, 7: None, 8: None, 9: None, 10: None, 11: None, 12: None, 13: None, 14: None, 15: None, 16: None, 17: None, 18: None, 19: None, 20: None, 21: None, 22: None, 23: None, 24: None, 25: None, 26: None, 27: None, 28: None}\n\n    def list(self):\n        for i in range(0, len(self.g_vars) - 1):\n            print(\"self.g_vars['{:>20s}'] = {}\".format(self.gVarsDict[i], self.g_vars[i] if i in self.g_vars else 'None'))\n\n# Usage example:\n# | Definition for variables in the past defined as global|\n# +-------------------------------------------------------+\n# The gVars class is created\n# to elminate the need for global variables.\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_temp_sensor.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_temp_sensor.py",
      "chunk_type": "function",
      "function_name": "gVars"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_tmp117\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_ntp import NTP\nfrom adafruit_pyportal import PyPortal\nfrom digitalio import DigitalInOut\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\n# -------------------------------------------------------------------------\n# degs_sign = chr(186)  # I preferred the real degrees sign which is: chr(176)\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_temp_sensor.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_temp_sensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_tmp117\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_ntp import NTP\nfrom adafruit_pyportal import PyPortal\nfrom digitalio import DigitalInOut\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\n# -------------------------------------------------------------------------\n# degs_sign = chr(186)  # I preferred the real degrees sign which is: chr(176)\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_temp_sensor.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_temp_sensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_tmp117\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_ntp import NTP\nfrom adafruit_pyportal import PyPortal\nfrom digitalio import DigitalInOut\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\n# degs_sign = chr(186)  # I preferred the real degrees sign which is: chr(176)\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_temp_sensor.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_temp_sensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_tmp117\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_ntp import NTP\nfrom adafruit_pyportal import PyPortal\nfrom digitalio import DigitalInOut\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\n# ------------- Screen Setup ------------- #\npyportal = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_temp_sensor.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_temp_sensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_tmp117\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_ntp import NTP\nfrom adafruit_pyportal import PyPortal\nfrom digitalio import DigitalInOut\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\n# ------------- Screen Setup ------------- #\npyportal = None\ntimeout_cnt = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_temp_sensor.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_temp_sensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_tmp117\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_ntp import NTP\nfrom adafruit_pyportal import PyPortal\nfrom digitalio import DigitalInOut\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\ni2c = board.I2C()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_temp_sensor.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_temp_sensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_tmp117\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_ntp import NTP\nfrom adafruit_pyportal import PyPortal\nfrom digitalio import DigitalInOut\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\ndef refresh_from_NTP():\n    timeout_cnt2 = 0\n    while not ntp.valid_time:\n        ntp.set_time(tz_offset)\n        if myVars.read('my_debug'):\n            print('Failed to obtain time, retrying in 5 seconds...')\n        timeout_cnt2 += 1\n        time.sleep(5)\n        if timeout_cnt2 > 10:\n            print('Timeout while trying to get ntp datetime to set the internal rtc')\n            break\n    if myVars.read('my_debug'):\n        print('Value ntp.valid_time = ', ntp.valid_time)\n    if ntp.valid_time:\n        myVars.write('online_time_present', True)\n        myVars.write('ntp_refresh', False)\n        ntp_current_time = time.time()\n        if myVars.read('my_debug'):\n            print(f'Seconds since Jan 1, 1970: {ntp_current_time} seconds')\n        myVars.write('default_dt', time.localtime(ntp_current_time))\n        if not myVars.read('my_debug'):\n            print('Internal clock synchronized from NTP pool, now =', myVars.read('default_dt'))\n\n# Usage example:\n        tz_offset = 0\n\n    refresh_from_NTP()\n\npixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_temp_sensor.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_temp_sensor.py",
      "chunk_type": "function",
      "function_name": "refresh_from_NTP"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_tmp117\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_ntp import NTP\nfrom adafruit_pyportal import PyPortal\nfrom digitalio import DigitalInOut\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\n        tz_offset = 0\npixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=1)\nWHITE = 0xFFFFFF\nRED = 0xFF0000\nYELLOW = 0xFFFF00\nGREEN = 0x00FF00",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_temp_sensor.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_temp_sensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_tmp117\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_ntp import NTP\nfrom adafruit_pyportal import PyPortal\nfrom digitalio import DigitalInOut\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\nsoundBeep = \"/sounds/beep.wav\"\nsoundTab = \"/sounds/tab.wav\"\n# ------------ Touchscreen setup --------------- #\n# See: https://learn.adafruit.com/making-a-pyportal-user-interface-displayio/display\ndisplay = board.DISPLAY  # create the display object\ndisplay.rotation = 0\n# screen_width = 320\n# screen_height = 240\nscreen_width = display.width",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_temp_sensor.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_temp_sensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_tmp117\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_ntp import NTP\nfrom adafruit_pyportal import PyPortal\nfrom digitalio import DigitalInOut\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\nts = adafruit_touchscreen.Touchscreen(board.TOUCH_XL, board.TOUCH_XR, board.TOUCH_YD, board.TOUCH_YU, calibration=((6815, 60095), (10520, 58007)), size=(screen_width, screen_height))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_temp_sensor.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_temp_sensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_tmp117\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_ntp import NTP\nfrom adafruit_pyportal import PyPortal\nfrom digitalio import DigitalInOut\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\ntest_page_layout = TabLayout(x=0, y=0, display=board.DISPLAY, tab_text_scale=2, custom_font=font_term, inactive_tab_spritesheet='lib/adafruit_displayio_layout/examples/bmps/inactive_tab_sprite.bmp', showing_tab_spritesheet='lib/adafruit_displayio_layout/examples/bmps/active_tab_sprite.bmp', showing_tab_text_color=43609, inactive_tab_text_color=15658734, inactive_tab_transparent_indexes=(0, 1), showing_tab_transparent_indexes=(0, 1), tab_count=4)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_temp_sensor.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_temp_sensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_tmp117\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_ntp import NTP\nfrom adafruit_pyportal import PyPortal\nfrom digitalio import DigitalInOut\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\n# Set the image file for a given goup for display.\nThis is most useful for Icons or image slideshows.\n    :param group: The chosen group\n    :param filename: The filename of the chosen image\ndef set_image(group, filename):\n    \"\"\"Set the image file for a given goup for display.\n    This is most useful for Icons or image slideshows.\n        :param group: The chosen group\n        :param filename: The filename of the chosen image\n    \"\"\"\n    print('Set image to ', filename)\n    image = None\n    image_sprite = None\n    if group:\n        group.pop()\n    if not filename:\n        return\n    try:\n        image = displayio.OnDiskBitmap(filename)\n    except OSError as exc:\n        if exc.args[0] == 2:\n            return\n    if image is not None:\n        image_sprite = displayio.TileGrid(image, pixel_shader=getattr(image, 'pixel_shader', displayio.ColorConverter()))\n        if image_sprite is not None:\n            main_group.append(image_sprite)\n\n# Usage example:\n\nbg_group = displayio.Group()\nset_image(bg_group, \"/images/BGimage4.bmp\")\nprint(\n    \"Please wait...building-up things...\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_temp_sensor.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_temp_sensor.py",
      "chunk_type": "function",
      "function_name": "set_image"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_tmp117\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_ntp import NTP\nfrom adafruit_pyportal import PyPortal\nfrom digitalio import DigitalInOut\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\ndef connect_temp_sensor():\n    t = 'temperature sensor found'\n    try:\n        myVars.write('temp_sensor', adafruit_tmp117.TMP117(i2c))\n    except ValueError:\n        pass\n    print('connect_temp_sensor(): type(temp_sensor) object = ', type(myVars.read('temp_sensor')))\n    if myVars.read('temp_sensor') is not None:\n        print(t)\n        print('temperature sensor connected')\n        myVars.write('t0', 'Temperature')\n        if myVars.read('temp_in_fahrenheit'):\n            myVars.write('t1', chr(186) + 'F')\n        else:\n            myVars.write('t1', chr(186) + 'C')\n        myVars.write('t2', 27 * '_')\n    else:\n        print('no ' + t)\n        print('failed to connect temperature sensor')\n        myVars.write('t0', None)\n        myVars.write('t1', None)\n        myVars.write('t2', None)\n\n# Usage example:\n\n    print(\n        \"connect_temp_sensor(): type(temp_sensor) object = \",\n        type(myVars.read(\"temp_sensor\")),\n    )",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_temp_sensor.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_temp_sensor.py",
      "chunk_type": "function",
      "function_name": "connect_temp_sensor"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_tmp117\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_ntp import NTP\nfrom adafruit_pyportal import PyPortal\nfrom digitalio import DigitalInOut\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\ndef connect_rtc():\n    t = 'RTC found'\n    try:\n        myVars.write('rtc', DS3231(i2c))\n    except ValueError:\n        pass\n    print('connect_rtc() type rtc object = ', type(myVars.read('rtc')))\n    if myVars.read('rtc') is not None:\n        print(t)\n        print('RTC connected')\n        if myVars.read('lStart'):\n            myVars.write('lStart', False)\n            myVars.read('rtc').datetime = myVars.read('default_dt')\n    else:\n        print('no ' + t)\n        print('Failed to connect RTC')\n\n# Usage example:\n        pass\n\n    print(\"connect_rtc() type rtc object = \", type(myVars.read(\"rtc\")))\n    if myVars.read(\"rtc\") is not None:\n        print(t)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_temp_sensor.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_temp_sensor.py",
      "chunk_type": "function",
      "function_name": "connect_rtc"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_tmp117\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_ntp import NTP\nfrom adafruit_pyportal import PyPortal\nfrom digitalio import DigitalInOut\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\ndef get_temp():\n    my_debug = myVars.read('my_debug')\n    showing_page_idx = test_page_layout.showing_page_index\n    RetVal = False\n    if myVars.read('temp_sensor') is not None:\n        try:\n            temp = myVars.read('temp_sensor').temperature\n            if myVars.read('temp_in_fahrenheit'):\n                temp = temp * 1.8 + 32\n            t = '{:5.2f}{} '.format(temp, myVars.read('t1'))\n            if my_debug and temp is not None and (not myVars.read('temp_in_REPL')):\n                myVars.write('temp_in_REPL', True)\n                print('get_temp(): {} {}'.format(myVars.read('t0'), t))\n            if showing_page_idx == 3:\n                if temp is not None:\n                    if temp != myVars.read('old_temp'):\n                        myVars.write('old_temp', temp)\n                        t = '{:5.2f}{} '.format(temp, myVars.read('t1'))\n                        pge4_lbl.text = ''\n                        pge4_lbl2.text = myVars.read('t0')\n                        pge4_lbl3.text = t\n                        RetVal = True\n                else:\n                    t = ''\n                    pge4_lbl.text = myVars.read('pge4_lbl_dflt')\n        except OSError:\n            print('Temperature sensor has disconnected')\n            t = ''\n            myVars.write('temp_sensor', None)\n            pge4_lbl.text = myVars.read('pge4_lbl_dflt')\n            pge4_lbl2.text = 'Sensor disconnected.'\n            pge4_lbl3.text = 'Check wiring.'\n    return RetVal\n\n# Usage example:\n            if my_debug and temp is not None and not myVars.read(\"temp_in_REPL\"):\n                myVars.write(\"temp_in_REPL\", True)\n                print(\"get_temp(): {} {}\".format(myVars.read(\"t0\"), t))\n            if showing_page_idx == 3:  # show temperature on most right Tab page\n                if temp is not None:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_temp_sensor.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_temp_sensor.py",
      "chunk_type": "function",
      "function_name": "get_temp"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_tmp117\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_ntp import NTP\nfrom adafruit_pyportal import PyPortal\nfrom digitalio import DigitalInOut\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\ndef handle_dt(dt):\n    my_debug = myVars.read('my_debug')\n    RetVal = False\n    s = 'Date/time: '\n    sYY = str(dt[dt_ridxs['yy']])\n    dd = dt_ridxs['dd']\n    hh = dt_ridxs['hh']\n    mm = dt_ridxs['mm']\n    ss = dt_ridxs['ss']\n    if 'mo' in dt_ridxs:\n        sMO = months[dt[dt_ridxs['mo']]] if myVars.read('use_txt_in_month') else '0' + str(dt[dt_ridxs['mo']]) if dt[dt_ridxs['mo']] < 10 else str(dt[dt_ridxs['mo']])\n    else:\n        raise KeyError('key {} not in dt_ridxs dict'.format('mo'))\n    dt_dict = {}\n    for _ in range(dd, ss + 1):\n        dt_dict[_] = '0' + str(dt[_]) if dt[_] < 10 else str(dt[_])\n    if my_debug:\n        print('dt_dict = ', dt_dict)\n    myVars.write('c_secs', dt_dict[ss])\n    sDT = sMO + '-' + dt_dict[dd] + '-' + sYY if myVars.read('use_usa_notation') else sYY + '-' + sMO + '-' + dt_dict[dd]\n    if my_debug:\n        print('handle_dt(): sDT_old = {}, sDT = {}'.format(myVars.read('sDT_old'), sDT))\n    if myVars.read('sDT_old') != sDT:\n        myVars.write('sDT_old', sDT)\n        myVars.write('dt_refresh', True)\n    sDT2 = dt_dict[hh] + ':' + dt_dict[mm] + ':' + dt_dict[ss]\n    if myVars.read('dt_refresh'):\n        myVars.write('dt_refresh', False)\n        pge3_lbl.text = s\n        pge3_lbl2.text = sDT\n    if myVars.read('c_secs') != myVars.read('o_secs'):\n        myVars.write('o_secs', myVars.read('c_secs'))\n        sDT3 = s + f'{sDT} {sDT2}'\n        print(sDT3)\n        pge3_lbl3.text = sDT2\n        if my_debug:\n            print(f'pge3_lbl.text = {pge3_lbl.text}')\n            print(f'pge3_lbl2.text = {pge3_lbl2.text}')\n            print(f'pge3_lbl3.text = {pge3_lbl3.text}')\n        RetVal = True\n    return RetVal\n\n# Usage example:\n    )\n    if my_debug:\n        print(\"handle_dt(): sDT_old = {}, sDT = {}\".format(myVars.read(\"sDT_old\"), sDT))\n    if myVars.read(\"sDT_old\") != sDT:\n        myVars.write(\"sDT_old\", sDT)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_temp_sensor.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_temp_sensor.py",
      "chunk_type": "function",
      "function_name": "handle_dt"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_tmp117\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_ntp import NTP\nfrom adafruit_pyportal import PyPortal\nfrom digitalio import DigitalInOut\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\ndef get_dt():\n    dt = None\n    RetVal = False\n    if myVars.read('rtc') is not None:\n        try:\n            dt = myVars.read('rtc').datetime\n        except OSError as exc:\n            if myVars.read('my_debug'):\n                print('Error number: ', exc.args[0])\n            if exc.args[0] == 5:\n                print('get_dt(): OSError occurred. RTC probably is disconnected')\n                pge3_lbl.text = myVars.read('pge3_lbl_dflt')\n                myVars.write('sDT_old', '')\n                pge3_lbl2.text = ''\n                pge3_lbl3.text = ''\n                return RetVal\n            raise\n    elif myVars.read('online_time_present') or myVars.read('use_ntp'):\n        dt = time.localtime()\n    if myVars.read('my_debug'):\n        print('get_dt(): dt = ', dt)\n    if dt is not None:\n        RetVal = handle_dt(dt)\n    else:\n        pge3_lbl.text = myVars.read('pge3_lbl_dflt')\n        pge3_lbl2.text = ''\n        pge3_lbl3.text = ''\n    return RetVal\n\n# Usage example:\n                print(\"Error number: \", exc.args[0])\n            if exc.args[0] == 5:  # Input/output error\n                print(\"get_dt(): OSError occurred. RTC probably is disconnected\")\n                pge3_lbl.text = myVars.read(\"pge3_lbl_dflt\")\n                myVars.write(\"sDT_old\", \"\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_temp_sensor.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_temp_sensor.py",
      "chunk_type": "function",
      "function_name": "get_dt"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_tmp117\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_ntp import NTP\nfrom adafruit_pyportal import PyPortal\nfrom digitalio import DigitalInOut\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\ndef hms_to_cnt():\n    dt = time.localtime()\n    return dt.tm_hour * 3600 + dt.tm_min * 60 + dt.tm_sec\n\n# Usage example:\n\n\n\"\"\"  hms_to_cnt()\n    function returns a integer value representing\n    the conversion from the current hours, minutes and seconds",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_temp_sensor.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_temp_sensor.py",
      "chunk_type": "function",
      "function_name": "hms_to_cnt"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_tmp117\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_ntp import NTP\nfrom adafruit_pyportal import PyPortal\nfrom digitalio import DigitalInOut\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\ndef ck_next_NTP_sync():\n    s_cnt = myVars.read('s_cnt')\n    c_cnt = hms_to_cnt()\n    c_elapsed = c_cnt - s_cnt\n    if c_elapsed < 10:\n        return\n    TAG = 'ck_next_NTP_sync(): '\n    my_debug = myVars.read('my_debug')\n    t1 = myVars.read('next_NTP_sync_t1')\n    t3 = myVars.read('next_NTP_sync_t3')\n    five_min = myVars.read('five_min_cnt')\n    myVars.write('s_cnt', hms_to_cnt())\n    if my_debug:\n        print(TAG + f'five_min = {five_min}, s_cnt = {s_cnt}, c_cnt = {c_cnt}')\n        print(TAG + 'c_elapsed = ', c_elapsed)\n    myVars.write('s_cnt', c_cnt)\n    five_min -= 10\n    myVars.write('five_min_cnt', five_min)\n    mm2 = five_min // 60\n    ss2 = five_min - mm2 * 60\n    t2 = f'{mm2:02d}:{ss2:02d}'\n    t0 = t1 + t2 + t3\n    print(t0)\n    pge3_lbl4.text = t0\n    if five_min == 0:\n        pge3_lbl4.text = ''\n        myVars.write('five_min_cnt', 300)\n        myVars.write('ntp_refresh', True)\n\n# Usage example:\n    if c_elapsed < 10:  # continue only when c_elapsed >= 10\n        return\n    TAG = \"ck_next_NTP_sync(): \"\n    my_debug = myVars.read(\"my_debug\")\n    t1 = myVars.read(\"next_NTP_sync_t1\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_temp_sensor.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_temp_sensor.py",
      "chunk_type": "function",
      "function_name": "ck_next_NTP_sync"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_tmp117\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_ntp import NTP\nfrom adafruit_pyportal import PyPortal\nfrom digitalio import DigitalInOut\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\ndef inc_cnt(cnt):\n    cnt += 1\n    if cnt > 999:\n        cnt = 0\n    return cnt\n\n# Usage example:\n            if myVars.read(\"temp_in_REPL\"):\n                myVars.write(\"temp_in_REPL\", False)\n            cnt = inc_cnt(cnt)\n        except KeyboardInterrupt as exc:\n            print(\"Keyboard interrupt...exiting...\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_temp_sensor.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_temp_sensor.py",
      "chunk_type": "function",
      "function_name": "inc_cnt"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_tmp117\nimport adafruit_touchscreen\nimport board\nimport busio\nimport displayio\nimport neopixel\nimport terminalio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_ds3231 import DS3231\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_ntp import NTP\nfrom adafruit_pyportal import PyPortal\nfrom digitalio import DigitalInOut\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\ndef main():\n    cnt = 1\n    wipe_pge1_lbl2_text = False\n    print('Starting loop')\n    pge1_lbl2.text = 'Ready...'\n    myVars.write('five_min_cnt', 300)\n    myVars.write('s_cnt', hms_to_cnt())\n    use_ntp = myVars.read('use_ntp')\n    rtc = myVars.read('rtc')\n    otp = myVars.read('online_time_present')\n    while True:\n        touch = ts.touch_point\n        try:\n            if use_ntp:\n                ck_next_NTP_sync()\n            ntp_refresh = myVars.read('ntp_refresh')\n            if touch:\n                if not wipe_pge1_lbl2_text:\n                    pge1_lbl2.text = ''\n                    wipe_pge1_lbl2_text = True\n                test_page_layout.handle_touch_events(touch)\n            if rtc is not None or otp:\n                if otp and ntp_refresh:\n                    refresh_from_NTP()\n                if get_dt():\n                    print(f'Loop nr: {cnt:03d}')\n            else:\n                connect_rtc()\n            if myVars.read('temp_sensor') is not None:\n                get_temp()\n            else:\n                connect_temp_sensor()\n                touch = ts.touch_point\n            if myVars.read('temp_in_REPL'):\n                myVars.write('temp_in_REPL', False)\n            cnt = inc_cnt(cnt)\n        except KeyboardInterrupt as exc:\n            print('Keyboard interrupt...exiting...')\n            raise KeyboardInterrupt from exc\n\n# Usage example:\n# -----------------------------------\n\n# create and show main_group\nmain_group = displayio.Group()  # The Main Display Group\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/hotplug_sensor_examples/displayio_layout_hotplug_temp_sensor.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_hotplug_temp_sensor.py",
      "chunk_type": "function",
      "function_name": "main"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_tcs34725\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = adafruit_tcs34725.TCS34725(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tcs34725/examples/tcs34725_displayio_simpletest.py",
      "library": "tcs34725",
      "type": "example",
      "file_name": "tcs34725_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_tcs34725\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = adafruit_tcs34725.TCS34725(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.\ncolor_output_label = Label(FONT, text=\"\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tcs34725/examples/tcs34725_displayio_simpletest.py",
      "library": "tcs34725",
      "type": "example",
      "file_name": "tcs34725_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_tcs34725\n\ncolor_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tcs34725/examples/tcs34725_displayio_simpletest.py",
      "library": "tcs34725",
      "type": "example",
      "file_name": "tcs34725_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_tcs34725\n\ntemperature_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tcs34725/examples/tcs34725_displayio_simpletest.py",
      "library": "tcs34725",
      "type": "example",
      "file_name": "tcs34725_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_tcs34725\n\nlux_output_label.anchored_position = (4, board.DISPLAY.height // 2 + 20)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tcs34725/examples/tcs34725_displayio_simpletest.py",
      "library": "tcs34725",
      "type": "example",
      "file_name": "tcs34725_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_tcs34725\n\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tcs34725/examples/tcs34725_displayio_simpletest.py",
      "library": "tcs34725",
      "type": "example",
      "file_name": "tcs34725_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_touchscreen\nimport board\nimport displayio\nfrom adafruit_displayio_layout.widgets.icon_animated import IconAnimated\n\nimport board\nimport displayio\ndisplay = board.DISPLAY\nts = adafruit_touchscreen.Touchscreen(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_icon_animated_simpletest.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_icon_animated_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_touchscreen\nimport board\nimport displayio\nfrom adafruit_displayio_layout.widgets.icon_animated import IconAnimated\n\nts = adafruit_touchscreen.Touchscreen(board.TOUCH_XL, board.TOUCH_XR, board.TOUCH_YD, board.TOUCH_YU, calibration=((5200, 59000), (5800, 57000)), size=(display.width, display.height))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_icon_animated_simpletest.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_icon_animated_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_lsm6ds import AccelRange, Rate\nfrom adafruit_lsm6ds.lsm6ds33 import LSM6DS33\n\n# pylint:disable=no-member\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = LSM6DS33(i2c)\n# enable accelerometer sensor @ 2G and 26 Hz",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm6ds/examples/lsm6ds_pedometer.py",
      "library": "lsm6ds",
      "type": "example",
      "file_name": "lsm6ds_pedometer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2020 Bryan Siepert for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\"\"\"This example shows off how to use the step counter built\ninto the ST LSM6DS series IMUs. The steps are calculated in\nthe chip so you don't have to do any calculations!\"\"\"\n\nimport time\n\nimport board\n\nfrom adafruit_lsm6ds import AccelRange, Rate\n\n# pylint:disable=no-member\nfrom adafruit_lsm6ds.lsm6ds33 import LSM6DS33\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = LSM6DS33(i2c)\n\n# enable accelerometer sensor @ 2G and 26 Hz\nsensor.accelerometer_range = AccelRange.RANGE_2G\nsensor.accelerometer_data_rate = Rate.RATE_26_HZ\n# no gyro used for step detection\nsensor.gyro_data_rate = Rate.RATE_SHUTDOWN\n\n# enable the pedometer\nsensor.pedometer_enable = True\n\nwhile True:\n    print(\"Steps: \", sensor.pedometer_steps)\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm6ds/examples/lsm6ds_pedometer.py",
      "library": "lsm6ds",
      "type": "example",
      "file_name": "lsm6ds_pedometer.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ens160\n\nimport board\nimport adafruit_ens160\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nens = adafruit_ens160.ENS160(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ens160/examples/ens160_simpletest.py",
      "library": "ens160",
      "type": "example",
      "file_name": "ens160_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ens160\n\nimport adafruit_ens160\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nens = adafruit_ens160.ENS160(i2c)\n# Set the temperature compensation variable to the ambient temp\n# for best sensor calibration\nens.temperature_compensation = 25",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ens160/examples/ens160_simpletest.py",
      "library": "ens160",
      "type": "example",
      "file_name": "ens160_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2022 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\n\nimport adafruit_ens160\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\nens = adafruit_ens160.ENS160(i2c)\n\n# Set the temperature compensation variable to the ambient temp\n# for best sensor calibration\nens.temperature_compensation = 25\n# Same for ambient relative humidity\nens.humidity_compensation = 50\n\n\nwhile True:\n    print(\"AQI (1-5):\", ens.AQI)\n    print(\"TVOC (ppb):\", ens.TVOC)\n    print(\"eCO2 (ppm):\", ens.eCO2)\n    print()\n\n    # new data shows up every second or so\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ens160/examples/ens160_simpletest.py",
      "library": "ens160",
      "type": "example",
      "file_name": "ens160_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import adafruit_pixelbuf\n\nclass TestBuf(adafruit_pixelbuf.PixelBuf):\n    called = False\n\n    @property\n    def n(self):\n        return len(self)\n\n    def _transmit(self, buffer):\n        self.called = True\n\n# Usage example:\n\n\nclass TestBuf(adafruit_pixelbuf.PixelBuf):\n    called = False\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pixelbuf/examples/pixelbuf_simpletest.py",
      "library": "pixelbuf",
      "type": "example",
      "file_name": "pixelbuf_simpletest.py",
      "chunk_type": "function",
      "function_name": "TestBuf"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2021 Rose Hooper for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\nimport adafruit_pixelbuf\n\n\nclass TestBuf(adafruit_pixelbuf.PixelBuf):\n    called = False\n\n    @property\n    def n(self):\n        return len(self)\n\n    def _transmit(self, buffer):\n        self.called = True\n\n\nbuf = TestBuf(20, \"RGBW\", brightness=0.5, auto_write=True)\nbuf[0] = (1, 2, 3)\nbuf[1] = (1, 2, 3, 4)\nbuf[2] = (2, 2, 2)\n\nprint(buf[0])\nprint(buf[0:2])\nprint(buf[0:2:2])\nprint(buf.called)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pixelbuf/examples/pixelbuf_simpletest.py",
      "library": "pixelbuf",
      "type": "example",
      "file_name": "pixelbuf_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_pixel_framebuf import VERTICAL, PixelFramebuffer\n\nimport board\nimport neopixel\npixel_pin = board.D6\npixel_width = 32\npixel_height = 8\npixels = neopixel.NeoPixel(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pixel_framebuf/examples/pixel_framebuf_32x8_test.py",
      "library": "pixel_framebuf",
      "type": "example",
      "file_name": "pixel_framebuf_32x8_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_pixel_framebuf import VERTICAL, PixelFramebuffer\n\npixels = neopixel.NeoPixel(pixel_pin, pixel_width * pixel_height, brightness=0.1, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pixel_framebuf/examples/pixel_framebuf_32x8_test.py",
      "library": "pixel_framebuf",
      "type": "example",
      "file_name": "pixel_framebuf_32x8_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 Melissa LeBlanc-Williams, written for Adafruit Industries\n# SPDX-License-Identifier: MIT\nimport board\nimport neopixel\n\nfrom adafruit_pixel_framebuf import VERTICAL, PixelFramebuffer\n\npixel_pin = board.D6\npixel_width = 32\npixel_height = 8\n\npixels = neopixel.NeoPixel(\n    pixel_pin,\n    pixel_width * pixel_height,\n    brightness=0.1,\n    auto_write=False,\n)\n\npixel_framebuf = PixelFramebuffer(\n    pixels, pixel_width, pixel_height, orientation=VERTICAL, rotation=2\n)\n\npixel_framebuf.fill(0x000088)\npixel_framebuf.pixel(2, 1, 0xFFFF00)\npixel_framebuf.line(0, 0, pixel_width - 1, pixel_height - 1, 0x00FF00)\npixel_framebuf.line(0, pixel_height - 1, pixel_width - 1, 0, 0x00FF00)\npixel_framebuf.circle(pixel_width // 2 - 1, pixel_height // 2 - 1, 4, 0xFF0000)\npixel_framebuf.rect(1, 2, 8, pixel_height - 3, 0xFF00FF)\npixel_framebuf.display()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pixel_framebuf/examples/pixel_framebuf_32x8_test.py",
      "library": "pixel_framebuf",
      "type": "example",
      "file_name": "pixel_framebuf_32x8_test.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\n\nTIME_API = \"http://worldtimeapi.org/api/ip\"\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_localtime.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_localtime.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\n\nTIME_API = \"http://worldtimeapi.org/api/ip\"\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_localtime.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_localtime.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\n\nTIME_API = \"http://worldtimeapi.org/api/ip\"\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_localtime.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_localtime.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\n\n# Secondary (SCK1) SPI used to connect to WiFi board on Arduino Nano Connect RP2040\n    spi = busio.SPI(board.SCK1, board.MOSI1, board.MISO1)\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_localtime.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_localtime.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\n\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_localtime.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_localtime.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_irremote\nimport board\nimport pulseio\nfrom adafruit_circuitplayground import cp\n\n# Create a decoder that will take pulses and turn them into numbers\ndecoder = adafruit_irremote.GenericDecode()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/circuitplayground/examples/circuitplayground_ir_receive.py",
      "library": "circuitplayground",
      "type": "example",
      "file_name": "circuitplayground_ir_receive.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport displayio\nimport fourwire\nfrom adafruit_seesaw.tftshield18 import TFTShield18\nfrom adafruit_st7735r import ST7735R\nfrom adafruit_ov7670 import OV7670, OV7670_NIGHT_MODE_2, OV7670_SIZE_DIV4, OV7670_SIZE_DIV8, OV7670_TEST_PATTERN_COLOR_BAR\n\n# Release any resources currently in use for the displays\nss = TFTShield18()\nspi = board.SPI()\ntft_cs = board.D10\ntft_dc = board.D8\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov7670/examples/ov7670_displayio_gcm4_tftshield18.py",
      "library": "ov7670",
      "type": "example",
      "file_name": "ov7670_displayio_gcm4_tftshield18.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport displayio\nimport fourwire\nfrom adafruit_seesaw.tftshield18 import TFTShield18\nfrom adafruit_st7735r import ST7735R\nfrom adafruit_ov7670 import OV7670, OV7670_NIGHT_MODE_2, OV7670_SIZE_DIV4, OV7670_SIZE_DIV8, OV7670_TEST_PATTERN_COLOR_BAR\n\nss = TFTShield18()\nspi = board.SPI()\ntft_cs = board.D10\ntft_dc = board.D8\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov7670/examples/ov7670_displayio_gcm4_tftshield18.py",
      "library": "ov7670",
      "type": "example",
      "file_name": "ov7670_displayio_gcm4_tftshield18.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport displayio\nimport fourwire\nfrom adafruit_seesaw.tftshield18 import TFTShield18\nfrom adafruit_st7735r import ST7735R\nfrom adafruit_ov7670 import OV7670, OV7670_NIGHT_MODE_2, OV7670_SIZE_DIV4, OV7670_SIZE_DIV8, OV7670_TEST_PATTERN_COLOR_BAR\n\nss = TFTShield18()\nspi = board.SPI()\ntft_cs = board.D10\ntft_dc = board.D8\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov7670/examples/ov7670_displayio_gcm4_tftshield18.py",
      "library": "ov7670",
      "type": "example",
      "file_name": "ov7670_displayio_gcm4_tftshield18.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport displayio\nimport fourwire\nfrom adafruit_seesaw.tftshield18 import TFTShield18\nfrom adafruit_st7735r import ST7735R\nfrom adafruit_ov7670 import OV7670, OV7670_NIGHT_MODE_2, OV7670_SIZE_DIV4, OV7670_SIZE_DIV8, OV7670_TEST_PATTERN_COLOR_BAR\n\nclass OV7670_GrandCentral(OV7670):\n\n    def __init__(self):\n        with digitalio.DigitalInOut(board.D39) as shutdown:\n            shutdown.switch_to_output(True)\n            time.sleep(0.001)\n            bus = busio.I2C(board.D24, board.D25)\n        self._bus = bus\n        OV7670.__init__(self, bus, mclk=board.PCC_XCLK, data_pins=[board.PCC_D0, board.PCC_D1, board.PCC_D2, board.PCC_D3, board.PCC_D4, board.PCC_D5, board.PCC_D6, board.PCC_D7], clock=board.PCC_CLK, vsync=board.PCC_DEN1, href=board.PCC_DEN2, shutdown=board.D39, reset=board.D38)\n\n    def deinit(self):\n        self._bus.deinit()\n        OV7670.deinit(self)\n\n# Usage example:\n)\n\n# Pylint is unable to see that the \"size\" property of OV7670_GrandCentral exists\n\n# Release any resources currently in use for the displays",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov7670/examples/ov7670_displayio_gcm4_tftshield18.py",
      "library": "ov7670",
      "type": "example",
      "file_name": "ov7670_displayio_gcm4_tftshield18.py",
      "chunk_type": "function",
      "function_name": "OV7670_GrandCentral"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_ble_radio import Radio\n\nimport board\nimport digitalio\nslide_switch = digitalio.DigitalInOut(board.SLIDE_SWITCH)\nslide_switch.pull = digitalio.Pull.UP\nbutton_a = digitalio.DigitalInOut(board.BUTTON_A)\nbutton_a.pull = digitalio.Pull.DOWN\nbutton_b = digitalio.DigitalInOut(board.BUTTON_B)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-radio/examples/ble_radio_simpletest.py",
      "library": "ble-radio",
      "type": "example",
      "file_name": "ble_radio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_ble_radio import Radio\n\nimport digitalio\nslide_switch = digitalio.DigitalInOut(board.SLIDE_SWITCH)\nslide_switch.pull = digitalio.Pull.UP\nbutton_a = digitalio.DigitalInOut(board.BUTTON_A)\nbutton_a.pull = digitalio.Pull.DOWN\nbutton_b = digitalio.DigitalInOut(board.BUTTON_B)\nbutton_b.pull = digitalio.Pull.DOWN",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-radio/examples/ble_radio_simpletest.py",
      "library": "ble-radio",
      "type": "example",
      "file_name": "ble_radio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_ble_radio import Radio\n\nslide_switch = digitalio.DigitalInOut(board.SLIDE_SWITCH)\nslide_switch.pull = digitalio.Pull.UP\nbutton_a = digitalio.DigitalInOut(board.BUTTON_A)\nbutton_a.pull = digitalio.Pull.DOWN\nbutton_b = digitalio.DigitalInOut(board.BUTTON_B)\nbutton_b.pull = digitalio.Pull.DOWN",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-radio/examples/ble_radio_simpletest.py",
      "library": "ble-radio",
      "type": "example",
      "file_name": "ble_radio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_ble_radio import Radio\n\nslide_switch = digitalio.DigitalInOut(board.SLIDE_SWITCH)\nslide_switch.pull = digitalio.Pull.UP\nbutton_a = digitalio.DigitalInOut(board.BUTTON_A)\nbutton_a.pull = digitalio.Pull.DOWN\nbutton_b = digitalio.DigitalInOut(board.BUTTON_B)\nbutton_b.pull = digitalio.Pull.DOWN\nled = digitalio.DigitalInOut(board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-radio/examples/ble_radio_simpletest.py",
      "library": "ble-radio",
      "type": "example",
      "file_name": "ble_radio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_ble_radio import Radio\n\nslide_switch = digitalio.DigitalInOut(board.SLIDE_SWITCH)\nslide_switch.pull = digitalio.Pull.UP\nbutton_a = digitalio.DigitalInOut(board.BUTTON_A)\nbutton_a.pull = digitalio.Pull.DOWN\nbutton_b = digitalio.DigitalInOut(board.BUTTON_B)\nbutton_b.pull = digitalio.Pull.DOWN\nled = digitalio.DigitalInOut(board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-radio/examples/ble_radio_simpletest.py",
      "library": "ble-radio",
      "type": "example",
      "file_name": "ble_radio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_ble_radio import Radio\n\nslide_switch = digitalio.DigitalInOut(board.SLIDE_SWITCH)\nslide_switch.pull = digitalio.Pull.UP\nbutton_a = digitalio.DigitalInOut(board.BUTTON_A)\nbutton_a.pull = digitalio.Pull.DOWN\nbutton_b = digitalio.DigitalInOut(board.BUTTON_B)\nbutton_b.pull = digitalio.Pull.DOWN\nled = digitalio.DigitalInOut(board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-radio/examples/ble_radio_simpletest.py",
      "library": "ble-radio",
      "type": "example",
      "file_name": "ble_radio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_ble_radio import Radio\n\nbutton_a = digitalio.DigitalInOut(board.BUTTON_A)\nbutton_a.pull = digitalio.Pull.DOWN\nbutton_b = digitalio.DigitalInOut(board.BUTTON_B)\nbutton_b.pull = digitalio.Pull.DOWN\nled = digitalio.DigitalInOut(board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-radio/examples/ble_radio_simpletest.py",
      "library": "ble-radio",
      "type": "example",
      "file_name": "ble_radio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.blink import Blink\nfrom adafruit_led_animation.animation.chase import Chase\nfrom adafruit_led_animation.animation.colorcycle import ColorCycle\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_led_animation.animation.pulse import Pulse\nfrom adafruit_led_animation.animation.solid import Solid\nfrom adafruit_led_animation.color import AMBER, JADE, MAGENTA, ORANGE, PINK, PURPLE, TEAL, WHITE\nfrom adafruit_led_animation.sequence import AnimationSequence\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\npixel_num = 32\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_basic_animations.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_basic_animations.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.blink import Blink\nfrom adafruit_led_animation.animation.chase import Chase\nfrom adafruit_led_animation.animation.colorcycle import ColorCycle\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_led_animation.animation.pulse import Pulse\nfrom adafruit_led_animation.animation.solid import Solid\nfrom adafruit_led_animation.color import AMBER, JADE, MAGENTA, ORANGE, PINK, PURPLE, TEAL, WHITE\nfrom adafruit_led_animation.sequence import AnimationSequence\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\npixel_num = 32\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)\nsolid = Solid(pixels, color=PINK)\nblink = Blink(pixels, speed=0.5, color=JADE)\ncolorcycle = ColorCycle(pixels, speed=0.4, colors=[MAGENTA, ORANGE, TEAL])",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_basic_animations.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_basic_animations.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport wifi\nfrom adafruit_aws_iot import MQTT_CLIENT\n\ndef connect(client, userdata, flags, rc):\n    print('Connected to MQTT Broker!')\n    print(f'Flags: {flags} - RC: {rc}')\n    print(f'Subscribing to topic {topic}')\n    aws_iot.subscribe(topic)\n\n# Usage example:\nfrom os import getenv\n\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport wifi",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_native_networking.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_native_networking.py",
      "chunk_type": "function",
      "function_name": "connect"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport wifi\nfrom adafruit_aws_iot import MQTT_CLIENT\n\ndef disconnect(client, userdata, rc):\n    print('Disconnected from MQTT Broker!')\n\n# Usage example:\n\ndef disconnect(client, userdata, rc):\n    # This method is called when the client disconnects\n    # from the broker.\n    print(\"Disconnected from MQTT Broker!\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_native_networking.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_native_networking.py",
      "chunk_type": "function",
      "function_name": "disconnect"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport wifi\nfrom adafruit_aws_iot import MQTT_CLIENT\n\ndef subscribe(client, userdata, topic, granted_qos):\n    print(f'Subscribed to {topic} with QOS level {granted_qos}')\n    message = {'message': 'Hello from AWS IoT CircuitPython'}\n    aws_iot.publish(topic, json.dumps(message))\n\n# Usage example:\n    # Subscribe to topic circuitpython/aws\n    print(f\"Subscribing to topic {topic}\")\n    aws_iot.subscribe(topic)\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_native_networking.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_native_networking.py",
      "chunk_type": "function",
      "function_name": "subscribe"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport wifi\nfrom adafruit_aws_iot import MQTT_CLIENT\n\ndef unsubscribe(client, userdata, topic, pid):\n    print(f'Unsubscribed from {topic} with PID {pid}')\n\n# Usage example:\n\ndef unsubscribe(client, userdata, topic, pid):\n    # This method is called when the client unsubscribes from a topic.\n    print(f\"Unsubscribed from {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_native_networking.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_native_networking.py",
      "chunk_type": "function",
      "function_name": "unsubscribe"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport wifi\nfrom adafruit_aws_iot import MQTT_CLIENT\n\ndef publish(client, userdata, topic, pid):\n    print(f'Published to {topic} with PID {pid}')\n\n# Usage example:\n    message = {\"message\": \"Hello from AWS IoT CircuitPython\"}\n    # Publish message to topic\n    aws_iot.publish(topic, json.dumps(message))\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_native_networking.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_native_networking.py",
      "chunk_type": "function",
      "function_name": "publish"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport wifi\nfrom adafruit_aws_iot import MQTT_CLIENT\n\ndef message(client, topic, msg):\n    print(f'Message from {topic}: {msg}')\n\n# Usage example:\n    print(f\"Subscribed to {topic} with QOS level {granted_qos}\")\n\n    # Create a json-formatted message\n    message = {\"message\": \"Hello from AWS IoT CircuitPython\"}\n    # Publish message to topic",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_native_networking.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_native_networking.py",
      "chunk_type": "function",
      "function_name": "message"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport wifi\nfrom adafruit_aws_iot import MQTT_CLIENT\n\n# Create a socket pool\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\n# Set AWS Device Certificate and AWS RSA Private Key\nssl_context.load_cert_chain(certfile=device_cert_path, keyfile=device_key_path)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_native_networking.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_native_networking.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport wifi\nfrom adafruit_aws_iot import MQTT_CLIENT\n\n# Create a socket pool\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\n# Set AWS Device Certificate and AWS RSA Private Key\nssl_context.load_cert_chain(certfile=device_cert_path, keyfile=device_key_path)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_native_networking.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_native_networking.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_tca8418 import TCA8418\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntca = TCA8418(i2c)\n# setup R0 as an output GPIO",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca8418/examples/tca8418_simpletest.py",
      "library": "tca8418",
      "type": "example",
      "file_name": "tca8418_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2022 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\n\nfrom adafruit_tca8418 import TCA8418\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntca = TCA8418(i2c)\n\n# setup R0 as an output GPIO\nOUTPIN = TCA8418.R0\ntca.gpio_mode[OUTPIN] = True\ntca.gpio_direction[OUTPIN] = True\n\n# blink it!\nwhile True:\n    tca.output_value[OUTPIN] = True\n    time.sleep(0.1)\n    tca.output_value[OUTPIN] = False\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca8418/examples/tca8418_simpletest.py",
      "library": "tca8418",
      "type": "example",
      "file_name": "tca8418_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport adafruit_imageload\nimport board\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_clock import FlipClock\n\nMEDIUM_LEVEL = 0.9\n# == END configuration variables ==\n# access built-in display\ndisplay = board.DISPLAY\n# load the static sprite sheet\nstatic_spritesheet, static_palette = adafruit_imageload.load(\"static_sheet.bmp\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipclock_hours_and_minutes.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipclock_hours_and_minutes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_imageload\nimport board\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_clock import FlipClock\n\nstatic_spritesheet, static_palette = adafruit_imageload.load('static_sheet.bmp')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipclock_hours_and_minutes.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipclock_hours_and_minutes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_imageload\nimport board\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_clock import FlipClock\n\ntop_animation_spritesheet, top_animation_palette = adafruit_imageload.load('grey_top_animation_sheet.bmp')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipclock_hours_and_minutes.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipclock_hours_and_minutes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_imageload\nimport board\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_clock import FlipClock\n\nbottom_animation_spritesheet, bottom_animation_palette = adafruit_imageload.load('grey_bottom_animation_sheet.bmp')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipclock_hours_and_minutes.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipclock_hours_and_minutes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_imageload\nimport board\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_clock import FlipClock\n\n# append the clock to the group\n# show the group on the display\nboard.DISPLAY.root_group = main_group\n# variables to store hours and minutes values\ncur_hour = clock.first_pair\ncur_minute = clock.second_pair",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipclock_hours_and_minutes.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipclock_hours_and_minutes.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_bme680\n\nimport digitalio\nimport adafruit_bme680\n# Create sensor object, communicating over the board's default SPI bus\ncs = digitalio.DigitalInOut(board.D10)\nspi = board.SPI()\nbme680 = adafruit_bme680.Adafruit_BME680_SPI(spi, cs)\n# change this to match the location's pressure (hPa) at sea level",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme680/examples/bme680_spi.py",
      "library": "bme680",
      "type": "example",
      "file_name": "bme680_spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_bme680\n\nimport adafruit_bme680\n# Create sensor object, communicating over the board's default SPI bus\ncs = digitalio.DigitalInOut(board.D10)\nspi = board.SPI()\nbme680 = adafruit_bme680.Adafruit_BME680_SPI(spi, cs)\n# change this to match the location's pressure (hPa) at sea level\nbme680.sea_level_pressure = 1013.25",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme680/examples/bme680_spi.py",
      "library": "bme680",
      "type": "example",
      "file_name": "bme680_spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_bme680\n\nimport adafruit_bme680\n# Create sensor object, communicating over the board's default SPI bus\ncs = digitalio.DigitalInOut(board.D10)\nspi = board.SPI()\nbme680 = adafruit_bme680.Adafruit_BME680_SPI(spi, cs)\n# change this to match the location's pressure (hPa) at sea level\nbme680.sea_level_pressure = 1013.25",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme680/examples/bme680_spi.py",
      "library": "bme680",
      "type": "example",
      "file_name": "bme680_spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 Carter Nelson for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport digitalio\n\nimport adafruit_bme680\n\n# Create sensor object, communicating over the board's default SPI bus\ncs = digitalio.DigitalInOut(board.D10)\nspi = board.SPI()\nbme680 = adafruit_bme680.Adafruit_BME680_SPI(spi, cs)\n\n# change this to match the location's pressure (hPa) at sea level\nbme680.sea_level_pressure = 1013.25\n\n# You will usually have to add an offset to account for the temperature of\n# the sensor. This is usually around 5 degrees but varies by use. Use a\n# separate temperature sensor to calibrate this one.\ntemperature_offset = -5\n\nwhile True:\n    print(\"\\nTemperature: %0.1f C\" % (bme680.temperature + temperature_offset))\n    print(\"Gas: %d ohm\" % bme680.gas)\n    print(\"Humidity: %0.1f %%\" % bme680.relative_humidity)\n    print(\"Pressure: %0.3f hPa\" % bme680.pressure)\n    print(\"Altitude = %0.2f meters\" % bme680.altitude)\n\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme680/examples/bme680_spi.py",
      "library": "bme680",
      "type": "example",
      "file_name": "bme680_spi.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport adafruit_bmp280\nimport adafruit_lis3mdl\nimport adafruit_lsm6ds\nimport adafruit_sht31d\nimport board\nimport adafruit_ble_broadcastnet\n\nimport adafruit_ble_broadcastnet\ni2c = board.I2C()\n# Define sensors:\n# Accelerometer/gyroscope:\nlsm6ds = adafruit_lsm6ds.LSM6DS33(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_multisensor.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_multisensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_bmp280\nimport adafruit_lis3mdl\nimport adafruit_lsm6ds\nimport adafruit_sht31d\nimport board\nimport adafruit_ble_broadcastnet\n\ni2c = board.I2C()\n# Define sensors:\n# Accelerometer/gyroscope:\nlsm6ds = adafruit_lsm6ds.LSM6DS33(i2c)\n# Magnetometer:\nlis3mdl = adafruit_lis3mdl.LIS3MDL(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_multisensor.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_multisensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_bmp280\nimport adafruit_lis3mdl\nimport adafruit_lsm6ds\nimport adafruit_sht31d\nimport board\nimport adafruit_ble_broadcastnet\n\n# Define sensors:\n# Accelerometer/gyroscope:\nlsm6ds = adafruit_lsm6ds.LSM6DS33(i2c)\n# Magnetometer:\nlis3mdl = adafruit_lis3mdl.LIS3MDL(i2c)\n# DGesture/proximity/color/light sensor:\n# TODO: How do we get the light level?\n# apds9960 = adafruit_apds9960.apds9960.APDS9960(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_multisensor.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_multisensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_bmp280\nimport adafruit_lis3mdl\nimport adafruit_lsm6ds\nimport adafruit_sht31d\nimport board\nimport adafruit_ble_broadcastnet\n\n# TODO: How do we get the light level?\n# apds9960 = adafruit_apds9960.apds9960.APDS9960(i2c)\n# apds9960.enable_color = True\n# Humidity sensor:\nsht31d = adafruit_sht31d.SHT31D(i2c)\n# Barometric pressure sensor:\nbmp280 = adafruit_bmp280.Adafruit_BMP280_I2C(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_multisensor.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_multisensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_bmp280\nimport adafruit_lis3mdl\nimport adafruit_lsm6ds\nimport adafruit_sht31d\nimport board\nimport adafruit_ble_broadcastnet\n\n# Humidity sensor:\nsht31d = adafruit_sht31d.SHT31D(i2c)\n# Barometric pressure sensor:\nbmp280 = adafruit_bmp280.Adafruit_BMP280_I2C(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_multisensor.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_multisensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import array\nimport time\nimport board\nimport rp2pio\nimport adafruit_pioasm\n\nprogram = adafruit_pioasm.Program('\\n    .pio_version 1\\n    .set 1\\n    .fifo txget\\n\\n    ; LED on time taken from rxfifo[0]\\n    mov osr, rxfifo[0]\\n    mov x, osr\\n\\n    set pins, 1\\nxloop1:\\n    jmp x--, xloop1\\n\\n    ; LED off time taken from rxfifo[1]\\n    mov osr, rxfifo[1]\\n    mov x, osr\\n\\n    set pins, 0\\nxloop2:\\n    jmp x--, xloop2\\n    ')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_rp2350_fifo.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_rp2350_fifo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import array\nimport time\nimport board\nimport rp2pio\nimport adafruit_pioasm\n\n# Assign multiple 32-bit registers within an AddressRange\ndef assign_uint32s(ar, off, *args):\n    \"\"\"Assign multiple 32-bit registers within an AddressRange\"\"\"\n    vv = b''.join((v.to_bytes(4, 'little') for v in args))\n    ar[off:off + 4 * len(args)] = vv\n\n# Usage example:\nwhile True:\n    # equal blinks\n    assign_uint32s(fifo, 0, 2000000, 2000000)\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_rp2350_fifo.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_rp2350_fifo.py",
      "chunk_type": "function",
      "function_name": "assign_uint32s"
    }
  },
  {
    "content": "import array\nimport time\nimport board\nimport rp2pio\nimport adafruit_pioasm\n\nsm = rp2pio.StateMachine(program.assembled, first_set_pin=board.GP25, frequency=10000000, **program.pio_kwargs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_rp2350_fifo.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_rp2350_fifo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_hx8357 import HX8357\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D9\ntft_dc = board.D10\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hx8357/examples/hx8357_simpletest.py",
      "library": "hx8357",
      "type": "example",
      "file_name": "hx8357_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_hx8357 import HX8357\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D9\ntft_dc = board.D10\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hx8357/examples/hx8357_simpletest.py",
      "library": "hx8357",
      "type": "example",
      "file_name": "hx8357_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_hx8357 import HX8357\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D9\ntft_dc = board.D10\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = HX8357(display_bus, width=480, height=320)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hx8357/examples/hx8357_simpletest.py",
      "library": "hx8357",
      "type": "example",
      "file_name": "hx8357_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lps35hw\n\nimport board\nimport adafruit_lps35hw\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nlps = adafruit_lps35hw.LPS35HW(i2c)\nlps.low_pass_enabled = True",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps35hw/examples/lps35hw_filter.py",
      "library": "lps35hw",
      "type": "example",
      "file_name": "lps35hw_filter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lps35hw\n\nimport adafruit_lps35hw\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nlps = adafruit_lps35hw.LPS35HW(i2c)\nlps.low_pass_enabled = True",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps35hw/examples/lps35hw_filter.py",
      "library": "lps35hw",
      "type": "example",
      "file_name": "lps35hw_filter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2019 Bryan Siepert, written for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\nimport time\n\nimport board\n\nimport adafruit_lps35hw\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nlps = adafruit_lps35hw.LPS35HW(i2c)\n\nlps.low_pass_enabled = True\nwhile True:\n    print(\"Pressure: %.2f hPa\" % lps.pressure)\n    print(\"\")\n    time.sleep(0.125)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps35hw/examples/lps35hw_filter.py",
      "library": "lps35hw",
      "type": "example",
      "file_name": "lps35hw_filter.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_adt7410\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nadt = adafruit_adt7410.ADT7410(i2c, address=0x48)\nadt.high_resolution = True\n# Create Label(s) to show the readings. If you have a very small",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adt7410/examples/adt7410_displayio_simpletest.py",
      "library": "adt7410",
      "type": "example",
      "file_name": "adt7410_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_adt7410\n\nadt = adafruit_adt7410.ADT7410(i2c, address=72)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adt7410/examples/adt7410_displayio_simpletest.py",
      "library": "adt7410",
      "type": "example",
      "file_name": "adt7410_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_adt7410\n\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adt7410/examples/adt7410_displayio_simpletest.py",
      "library": "adt7410",
      "type": "example",
      "file_name": "adt7410_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_adt7410\n\n# add the label(s) to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adt7410/examples/adt7410_displayio_simpletest.py",
      "library": "adt7410",
      "type": "example",
      "file_name": "adt7410_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_lsm303_accel\n\nimport board\nimport adafruit_lsm303_accel\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\naccel = adafruit_lsm303_accel.LSM303_Accel(i2c)\naccel.range = adafruit_lsm303_accel.Range.RANGE_8G",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303-accel/examples/lsm303_accel_tap_detection.py",
      "library": "lsm303-accel",
      "type": "example",
      "file_name": "lsm303_accel_tap_detection.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_lsm303_accel\n\nimport adafruit_lsm303_accel\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\naccel = adafruit_lsm303_accel.LSM303_Accel(i2c)\naccel.range = adafruit_lsm303_accel.Range.RANGE_8G",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303-accel/examples/lsm303_accel_tap_detection.py",
      "library": "lsm303-accel",
      "type": "example",
      "file_name": "lsm303_accel_tap_detection.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_lsm303_accel\n\nimport adafruit_lsm303_accel\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\naccel = adafruit_lsm303_accel.LSM303_Accel(i2c)\naccel.range = adafruit_lsm303_accel.Range.RANGE_8G",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303-accel/examples/lsm303_accel_tap_detection.py",
      "library": "lsm303-accel",
      "type": "example",
      "file_name": "lsm303_accel_tap_detection.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\n\nimport adafruit_lsm303_accel\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\naccel = adafruit_lsm303_accel.LSM303_Accel(i2c)\naccel.range = adafruit_lsm303_accel.Range.RANGE_8G\naccel.set_tap(1, 30)\n\nwhile True:\n    if accel.tapped:\n        print(\"Tapped!\\n\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303-accel/examples/lsm303_accel_tap_detection.py",
      "library": "lsm303-accel",
      "type": "example",
      "file_name": "lsm303_accel_tap_detection.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import sys\nimport time\nimport board\nimport busio\nimport digitalio\nimport adafruit_ov5640\n\nimport digitalio\nimport adafruit_ov5640\nbus = busio.I2C(board.GP9, board.GP8)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_pico_simpletest.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_pico_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import sys\nimport time\nimport board\nimport busio\nimport digitalio\nimport adafruit_ov5640\n\nimport adafruit_ov5640\nbus = busio.I2C(board.GP9, board.GP8)\nreset = digitalio.DigitalInOut(board.GP10)\ncam = adafruit_ov5640.OV5640(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_pico_simpletest.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_pico_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import sys\nimport time\nimport board\nimport busio\nimport digitalio\nimport adafruit_ov5640\n\ncam = adafruit_ov5640.OV5640(bus, data_pins=(board.GP12, board.GP13, board.GP14, board.GP15, board.GP16, board.GP17, board.GP18, board.GP19), clock=board.GP11, vsync=board.GP7, href=board.GP21, mclk=board.GP20, shutdown=None, reset=reset, size=adafruit_ov5640.OV5640_SIZE_QQVGA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_pico_simpletest.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_pico_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import sys\nimport time\nimport board\nimport busio\nimport digitalio\nimport adafruit_ov5640\n\ncam.colorspace = adafruit_ov5640.OV5640_COLOR_YUV\ncam.flip_y = True\ncam.flip_x = True\ncam.test_pattern = False",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_pico_simpletest.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_pico_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_ds248x import Adafruit_DS248x\n\nimport board\n# Initialize I2C bus and DS248x\ni2c = board.I2C()\nds248x = Adafruit_DS248x(i2c)\nrom = bytearray(8)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds248x/examples/ds248x_simpletest.py",
      "library": "ds248x",
      "type": "example",
      "file_name": "ds248x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2024 Liz Clark for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\n\"\"\"Adafruit DS248x DS18B20 Example\"\"\"\n\nimport time\n\nimport board\n\nfrom adafruit_ds248x import Adafruit_DS248x\n\n# Initialize I2C bus and DS248x\ni2c = board.I2C()\nds248x = Adafruit_DS248x(i2c)\n\nrom = bytearray(8)\nif not ds248x.onewire_search(rom):\n    print(\"No more devices found\\n\\n\")\n\nprint(\"Found device ROM: \", end=\"\")\nfor byte in rom:\n    print(f\"{byte:02X} \", end=\"\")\nprint()\nwhile True:\n    temperature = ds248x.ds18b20_temperature(rom)\n    print(f\"Temperature: {temperature:.2f} \u00b0C\")\n\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds248x/examples/ds248x_simpletest.py",
      "library": "ds248x",
      "type": "example",
      "file_name": "ds248x_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2017 Scott Shawcroft, written for Adafruit Industries\n# SPDX-FileCopyrightText: Copyright (c) 2023 Scott Shawcroft for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\n# Rename import to make the rest of the code compatible with CPython's prompt_toolkit library.\nimport adafruit_prompt_toolkit as prompt_toolkit\n\n# This basic example doesn't do much more than input but it's where to start.\nwhile True:\n    response = prompt_toolkit.prompt(\"$ \")\n    print(\"->\", response)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/prompt_toolkit/examples/prompt_toolkit_simpletest.py",
      "library": "prompt_toolkit",
      "type": "example",
      "file_name": "prompt_toolkit_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_avrprog\n\nimport board\nimport busio\nimport adafruit_avrprog\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\navrprog = adafruit_avrprog.AVRprog()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/avrprog/examples/avrprog_program_trinket85.py",
      "library": "avrprog",
      "type": "example",
      "file_name": "avrprog_program_trinket85.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_avrprog\n\nimport busio\nimport adafruit_avrprog\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\navrprog = adafruit_avrprog.AVRprog()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/avrprog/examples/avrprog_program_trinket85.py",
      "library": "avrprog",
      "type": "example",
      "file_name": "avrprog_program_trinket85.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_avrprog\n\n# Helper to print out errors for us and then halt\ndef error(err):\n    \"\"\"Helper to print out errors for us and then halt\"\"\"\n    print('ERROR: ' + err)\n    avrprog.end()\n    while True:\n        pass\n\n# Usage example:\n\ndef error(err):\n    \"\"\"Helper to print out errors for us and then halt\"\"\"\n    print(\"ERROR: \" + err)\n    avrprog.end()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/avrprog/examples/avrprog_program_trinket85.py",
      "library": "avrprog",
      "type": "example",
      "file_name": "avrprog_program_trinket85.py",
      "chunk_type": "function",
      "function_name": "error"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\npassword = os.getenv(\"CIRCUITPY_WIFI_PASSWORD\")\nCOOKIE_TEST_URL = \"https://www.adafruit.com\"\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_multiple_cookies.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_multiple_cookies.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nCOOKIE_TEST_URL = \"https://www.adafruit.com\"\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_multiple_cookies.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_multiple_cookies.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nCOOKIE_TEST_URL = \"https://www.adafruit.com\"\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_multiple_cookies.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_multiple_cookies.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_rgbled\n\nimport board\nimport adafruit_rgbled\n# Configure the setup\nRED_LED = board.D5  # Pin the Red LED is connected to\nGREEN_LED = board.D6  # Pin the Green LED is connected to\nBLUE_LED = board.D7  # Pin the Blue LED is connected to\nCOLOR = (100, 50, 150)  # color to blink\nCLEAR = (0, 0, 0)  # clear (or second color)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rgbled/examples/rgbled_blink.py",
      "library": "rgbled",
      "type": "example",
      "file_name": "rgbled_blink.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_rgbled\n\nimport adafruit_rgbled\n# Configure the setup\nRED_LED = board.D5  # Pin the Red LED is connected to\nGREEN_LED = board.D6  # Pin the Green LED is connected to\nBLUE_LED = board.D7  # Pin the Blue LED is connected to\nCOLOR = (100, 50, 150)  # color to blink\nCLEAR = (0, 0, 0)  # clear (or second color)\nDELAY = 0.25  # blink rate in seconds",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rgbled/examples/rgbled_blink.py",
      "library": "rgbled",
      "type": "example",
      "file_name": "rgbled_blink.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_rgbled\n\nimport adafruit_rgbled\n# Configure the setup\nRED_LED = board.D5  # Pin the Red LED is connected to\nGREEN_LED = board.D6  # Pin the Green LED is connected to\nBLUE_LED = board.D7  # Pin the Blue LED is connected to\nCOLOR = (100, 50, 150)  # color to blink\nCLEAR = (0, 0, 0)  # clear (or second color)\nDELAY = 0.25  # blink rate in seconds",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rgbled/examples/rgbled_blink.py",
      "library": "rgbled",
      "type": "example",
      "file_name": "rgbled_blink.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_rgbled\n\nCOLOR = (100, 50, 150)  # color to blink\nCLEAR = (0, 0, 0)  # clear (or second color)\nDELAY = 0.25  # blink rate in seconds\n# Create the RGB LED object\nled = adafruit_rgbled.RGBLED(RED_LED, GREEN_LED, BLUE_LED)\n# Optionally, you can also create the RGB LED object with inverted PWM\n# led = adafruit_rgbled.RGBLED(RED_LED, GREEN_LED, BLUE_LED, invert_pwm=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rgbled/examples/rgbled_blink.py",
      "library": "rgbled",
      "type": "example",
      "file_name": "rgbled_blink.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# This example shows how to create a single RGB LED with a specific color channel\n# order and blink it.\nimport time\n\nimport board\n\nimport adafruit_rgbled\n\n# Configure the setup\nRED_LED = board.D5  # Pin the Red LED is connected to\nGREEN_LED = board.D6  # Pin the Green LED is connected to\nBLUE_LED = board.D7  # Pin the Blue LED is connected to\nCOLOR = (100, 50, 150)  # color to blink\nCLEAR = (0, 0, 0)  # clear (or second color)\nDELAY = 0.25  # blink rate in seconds\n\n# Create the RGB LED object\nled = adafruit_rgbled.RGBLED(RED_LED, GREEN_LED, BLUE_LED)\n\n# Optionally, you can also create the RGB LED object with inverted PWM\n# led = adafruit_rgbled.RGBLED(RED_LED, GREEN_LED, BLUE_LED, invert_pwm=True)\n\n# Loop forever and blink the color\nwhile True:\n    led.color = COLOR\n    time.sleep(DELAY)\n    led.color = CLEAR\n    time.sleep(DELAY)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rgbled/examples/rgbled_blink.py",
      "library": "rgbled",
      "type": "example",
      "file_name": "rgbled_blink.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_button import Button\nfrom adafruit_hx8357 import HX8357\nimport adafruit_ft5336\n\nimport adafruit_ft5336\nspi = board.SPI()\n# for eyespi bff\n# tft_cs = board.TX\n# tft_dc = board.RX\n# else:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ft5336/examples/buttons_example.py",
      "library": "ft5336",
      "type": "example",
      "file_name": "buttons_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_button import Button\nfrom adafruit_hx8357 import HX8357\nimport adafruit_ft5336\n\nspi = board.SPI()\n# for eyespi bff\n# tft_cs = board.TX\n# tft_dc = board.RX\n# else:\ntft_cs = board.D9\ntft_dc = board.D10\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = HX8357(display_bus, width=480, height=320, rotation=0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ft5336/examples/buttons_example.py",
      "library": "ft5336",
      "type": "example",
      "file_name": "buttons_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_button import Button\nfrom adafruit_hx8357 import HX8357\nimport adafruit_ft5336\n\n# for eyespi bff\n# tft_cs = board.TX\n# tft_dc = board.RX\n# else:\ntft_cs = board.D9\ntft_dc = board.D10\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = HX8357(display_bus, width=480, height=320, rotation=0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ft5336/examples/buttons_example.py",
      "library": "ft5336",
      "type": "example",
      "file_name": "buttons_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_button import Button\nfrom adafruit_hx8357 import HX8357\nimport adafruit_ft5336\n\ntft_dc = board.D10\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = HX8357(display_bus, width=480, height=320, rotation=0)\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# touch coordinates are adjusted to match display with 0 rotation\ntouch = adafruit_ft5336.Adafruit_FT5336(i2c, invert_x=True, swap_xy=True)\nsplash = displayio.Group()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ft5336/examples/buttons_example.py",
      "library": "ft5336",
      "type": "example",
      "file_name": "buttons_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_button import Button\nfrom adafruit_hx8357 import HX8357\nimport adafruit_ft5336\n\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = HX8357(display_bus, width=480, height=320, rotation=0)\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# touch coordinates are adjusted to match display with 0 rotation\ntouch = adafruit_ft5336.Adafruit_FT5336(i2c, invert_x=True, swap_xy=True)\nsplash = displayio.Group()\ndisplay.root_group = splash",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ft5336/examples/buttons_example.py",
      "library": "ft5336",
      "type": "example",
      "file_name": "buttons_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import atexit\nimport time\nimport board\nfrom adafruit_motorkit import MotorKit\n\nimport board\nkit = MotorKit(i2c=board.I2C())",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/motorkit/examples/motorkit_robot.py",
      "library": "motorkit",
      "type": "example",
      "file_name": "motorkit_robot.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import atexit\nimport time\nimport board\nfrom adafruit_motorkit import MotorKit\n\nclass Robot:\n\n    def __init__(self, left_trim=0, right_trim=0, stop_at_exit=True):\n        \"\"\"Create an instance of the robot.  Can specify the following optional\n        parameter\n         - left_trim: Amount to offset the speed of the left motor, can be positive\n                      or negative and use useful for matching the speed of both\n                      motors.  Default is 0.\n         - right_trim: Amount to offset the speed of the right motor (see above).\n         - stop_at_exit: Boolean to indicate if the motors should stop on program\n                         exit.  Default is True (highly recommended to keep this\n                         value to prevent damage to the bot on program crash!).\n        \"\"\"\n        self._left_trim = left_trim\n        self._right_trim = right_trim\n        if stop_at_exit:\n            atexit.register(self.stop)\n\n    def _left_speed(self, speed):\n        \"\"\"Set the speed of the left motor, taking into account its trim offset.\"\"\"\n        assert -1 <= speed <= 1, 'Speed must be a value between -1 to 1 inclusive!'\n        speed += self._left_trim\n        speed = max(-1, min(1, speed))\n        kit.motor1.throttle = speed\n\n    def _right_speed(self, speed):\n        \"\"\"Set the speed of the right motor, taking into account its trim offset.\"\"\"\n        assert -1 <= speed <= 1, 'Speed must be a value between -1 to 1 inclusive!'\n        speed += self._right_trim\n        speed = max(-1, min(1, speed))\n        kit.motor2.throttle = speed\n\n    @staticmethod\n    def stop():\n        \"\"\"Stop all movement.\"\"\"\n        kit.motor1.throttle = 0\n        kit.motor2.throttle = 0\n\n    def forward(self, speed, seconds=None):\n        \"\"\"Move forward at the specified speed (0-255).  Will start moving\n        forward and return unless a seconds value is specified, in which\n        case the robot will move forward for that amount of time and then stop.\n        \"\"\"\n        self._left_speed(speed)\n        self._right_speed(speed)\n        if seconds is not None:\n            time.sleep(seconds)\n            self.stop()\n\n    def steer(self, speed, direction):\n        if speed + direction / 2 > 1:\n            speed = speed - direction / 2\n        left = speed + direction / 2\n        right = speed - direction / 2\n        self._left_speed(left)\n        self._right_speed(right)\n\n    def backward(self, speed, seconds=None):\n        \"\"\"Move backward at the specified speed (0-255).  Will start moving\n        backward and return unless a seconds value is specified, in which\n        case the robot will move backward for that amount of time and then stop.\n        \"\"\"\n        self._left_speed(-1 * speed)\n        self._right_speed(-1 * speed)\n        if seconds is not None:\n            time.sleep(seconds)\n            self.stop()\n\n    def right(self, speed, seconds=None):\n        \"\"\"Spin to the right at the specified speed.  Will start spinning and\n        return unless a seconds value is specified, in which case the robot will\n        spin for that amount of time and then stop.\n        \"\"\"\n        self._left_speed(speed)\n        self._right_speed(0)\n        if seconds is not None:\n            time.sleep(seconds)\n            self.stop()\n\n    def left(self, speed, seconds=None):\n        \"\"\"Spin to the left at the specified speed.  Will start spinning and\n        return unless a seconds value is specified, in which case the robot will\n        spin for that amount of time and then stop.\n        \"\"\"\n        self._left_speed(0)\n        self._right_speed(speed)\n        if seconds is not None:\n            time.sleep(seconds)\n            self.stop()\n\n# Usage example:\n\n# Simple two DC motor robot class.  Exposes a simple LOGO turtle-like API for\n# moving a robot forward, backward, and turning.  See RobotTest.py for an\n# example of using this class.\n# Author2: Tony DiCola, Chris Anderson",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/motorkit/examples/motorkit_robot.py",
      "library": "motorkit",
      "type": "example",
      "file_name": "motorkit_robot.py",
      "chunk_type": "function",
      "function_name": "Robot"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_espatcontrol import adafruit_espatcontrol\n\nesp = adafruit_espatcontrol.ESP_ATcontrol(uart, 115200, reset_pin=resetpin, rts_pin=rtspin, debug=debugflag)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_simpletest.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import bitmaptools\nimport board\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_display_text.bitmap_label import Label\nimport adafruit_spd1656\n\nimport adafruit_spd1656\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_colors_and_text.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_colors_and_text.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import bitmaptools\nimport board\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_display_text.bitmap_label import Label\nimport adafruit_spd1656\n\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_colors_and_text.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_colors_and_text.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import bitmaptools\nimport board\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_display_text.bitmap_label import Label\nimport adafruit_spd1656\n\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12\ndisplay_bus = fourwire.FourWire(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_colors_and_text.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_colors_and_text.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import bitmaptools\nimport board\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_display_text.bitmap_label import Label\nimport adafruit_spd1656\n\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12\ndisplay_bus = fourwire.FourWire(\n    spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_colors_and_text.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_colors_and_text.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import bitmaptools\nimport board\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_display_text.bitmap_label import Label\nimport adafruit_spd1656\n\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12\ndisplay_bus = fourwire.FourWire(\n    spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_colors_and_text.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_colors_and_text.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import bitmaptools\nimport board\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_display_text.bitmap_label import Label\nimport adafruit_spd1656\n\ndisplay_bus = fourwire.FourWire(\n    spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000\ndisplay = adafruit_spd1656.SPD1656(display_bus, width=600, height=448, busy_pin=epd_busy)\ng = displayio.Group()\nbmp = displayio.Bitmap(display.width, display.height, 7)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_colors_and_text.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_colors_and_text.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_apds9960.apds9960 import APDS9960\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\napds = APDS9960(i2c)\napds.enable_proximity = True",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/apds9960/examples/apds9960_gesture_simpletest.py",
      "library": "apds9960",
      "type": "example",
      "file_name": "apds9960_gesture_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\n\nfrom adafruit_apds9960.apds9960 import APDS9960\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\napds = APDS9960(i2c)\napds.enable_proximity = True\napds.enable_gesture = True\n\n# Uncomment and set the rotation if depending on how your sensor is mounted.\n# apds.rotation = 270 # 270 for CLUE\n\nwhile True:\n    gesture = apds.gesture()\n\n    if gesture == 0x01:\n        print(\"up\")\n    elif gesture == 0x02:\n        print(\"down\")\n    elif gesture == 0x03:\n        print(\"left\")\n    elif gesture == 0x04:\n        print(\"right\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/apds9960/examples/apds9960_gesture_simpletest.py",
      "library": "apds9960",
      "type": "example",
      "file_name": "apds9960_gesture_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_htu31d\n\nimport board\nimport adafruit_htu31d\n# import htu31d_setting_resolutions\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nhtu = adafruit_htu31d.HTU31D(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/htu31d/examples/htu31d_setting_resolutions.py",
      "library": "htu31d",
      "type": "example",
      "file_name": "htu31d_setting_resolutions.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_htu31d\n\nimport adafruit_htu31d\n# import htu31d_setting_resolutions\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nhtu = adafruit_htu31d.HTU31D(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/htu31d/examples/htu31d_setting_resolutions.py",
      "library": "htu31d",
      "type": "example",
      "file_name": "htu31d_setting_resolutions.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_ra8875 import ra8875\nfrom adafruit_ra8875.ra8875 import color565\n\nCYAN = color565(0, 255, 255)\nMAGENTA = color565(255, 0, 255)\nWHITE = color565(255, 255, 255)\n# Configuration for CS and RST pins:\ncs_pin = digitalio.DigitalInOut(board.D9)\nrst_pin = digitalio.DigitalInOut(board.D10)\nint_pin = digitalio.DigitalInOut(board.D11)\n# Config for display baudrate (default max is 6mhz):",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ra8875/examples/ra8875_simpletest.py",
      "library": "ra8875",
      "type": "example",
      "file_name": "ra8875_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_ra8875 import ra8875\nfrom adafruit_ra8875.ra8875 import color565\n\nMAGENTA = color565(255, 0, 255)\nWHITE = color565(255, 255, 255)\n# Configuration for CS and RST pins:\ncs_pin = digitalio.DigitalInOut(board.D9)\nrst_pin = digitalio.DigitalInOut(board.D10)\nint_pin = digitalio.DigitalInOut(board.D11)\n# Config for display baudrate (default max is 6mhz):\nBAUDRATE = 6000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ra8875/examples/ra8875_simpletest.py",
      "library": "ra8875",
      "type": "example",
      "file_name": "ra8875_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_ra8875 import ra8875\nfrom adafruit_ra8875.ra8875 import color565\n\nWHITE = color565(255, 255, 255)\n# Configuration for CS and RST pins:\ncs_pin = digitalio.DigitalInOut(board.D9)\nrst_pin = digitalio.DigitalInOut(board.D10)\nint_pin = digitalio.DigitalInOut(board.D11)\n# Config for display baudrate (default max is 6mhz):\nBAUDRATE = 6000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ra8875/examples/ra8875_simpletest.py",
      "library": "ra8875",
      "type": "example",
      "file_name": "ra8875_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_ra8875 import ra8875\nfrom adafruit_ra8875.ra8875 import color565\n\n# Config for display baudrate (default max is 6mhz):\nBAUDRATE = 6000000\n# Setup SPI bus using hardware SPI:\nspi = busio.SPI(clock=board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Create and setup the RA8875 display:\ndisplay = ra8875.RA8875(spi, cs=cs_pin, rst=rst_pin, baudrate=BAUDRATE)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ra8875/examples/ra8875_simpletest.py",
      "library": "ra8875",
      "type": "example",
      "file_name": "ra8875_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom math import atan2, degrees\nimport board\nimport adafruit_mpu6050\n\nimport board\nimport adafruit_mpu6050\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_mpu6050.MPU6050(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpu6050/examples/mpu6050_inclinometer.py",
      "library": "mpu6050",
      "type": "example",
      "file_name": "mpu6050_inclinometer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom math import atan2, degrees\nimport board\nimport adafruit_mpu6050\n\nimport adafruit_mpu6050\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_mpu6050.MPU6050(i2c)\n# Given a point (x, y) return the angle of that point relative to x axis.\n# Returns: angle in degrees",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpu6050/examples/mpu6050_inclinometer.py",
      "library": "mpu6050",
      "type": "example",
      "file_name": "mpu6050_inclinometer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom math import atan2, degrees\nimport board\nimport adafruit_mpu6050\n\ndef vector_2_degrees(x, y):\n    angle = degrees(atan2(y, x))\n    if angle < 0:\n        angle += 360\n    return angle\n\n# Usage example:\ndef get_inclination(_sensor):\n    x, y, z = _sensor.acceleration\n    return vector_2_degrees(x, z), vector_2_degrees(y, z)\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpu6050/examples/mpu6050_inclinometer.py",
      "library": "mpu6050",
      "type": "example",
      "file_name": "mpu6050_inclinometer.py",
      "chunk_type": "function",
      "function_name": "vector_2_degrees"
    }
  },
  {
    "content": "import time\nfrom math import atan2, degrees\nimport board\nimport adafruit_mpu6050\n\ndef get_inclination(_sensor):\n    x, y, z = _sensor.acceleration\n    return (vector_2_degrees(x, z), vector_2_degrees(y, z))\n\n# Usage example:\n\nwhile True:\n    angle_xz, angle_yz = get_inclination(sensor)\n    print(f\"XZ angle = {angle_xz:6.2f}deg   YZ angle = {angle_yz:6.2f}deg\")\n    time.sleep(0.2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpu6050/examples/mpu6050_inclinometer.py",
      "library": "mpu6050",
      "type": "example",
      "file_name": "mpu6050_inclinometer.py",
      "chunk_type": "function",
      "function_name": "get_inclination"
    }
  },
  {
    "content": "import time\nimport numpy as np\nimport serial\nfrom matplotlib import pyplot as plt\nimport adafruit_fingerprint\n\n# If using with Linux/Raspberry Pi and hardware UART:\n# import serial\n# uart = serial.Serial(\"/dev/ttyS0\", baudrate=57600, timeout=1)\nfinger = adafruit_fingerprint.Adafruit_Fingerprint(uart)\n##################################################",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_picturetest.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_picturetest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport numpy as np\nimport serial\nfrom matplotlib import pyplot as plt\nimport adafruit_fingerprint\n\n# Get a finger print image, template it, and see if it matches!\ndef get_fingerprint():\n    \"\"\"Get a finger print image, template it, and see if it matches!\"\"\"\n    print('Waiting for image...')\n    while finger.get_image() != adafruit_fingerprint.OK:\n        pass\n    print('Templating...')\n    if finger.image_2_tz(1) != adafruit_fingerprint.OK:\n        return False\n    print('Searching...')\n    if finger.finger_search() != adafruit_fingerprint.OK:\n        return False\n    return True\n\n# Usage example:\n        enroll_finger(get_num())\n    if c == \"f\":\n        if get_fingerprint():\n            print(\"Detected #\", finger.finger_id, \"with confidence\", finger.confidence)\n        else:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_picturetest.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_picturetest.py",
      "chunk_type": "function",
      "function_name": "get_fingerprint"
    }
  },
  {
    "content": "import time\nimport numpy as np\nimport serial\nfrom matplotlib import pyplot as plt\nimport adafruit_fingerprint\n\n# Get a finger print image, template it, and see if it matches!\nThis time, print out each error instead of just returning on failure\ndef get_fingerprint_detail():\n    \"\"\"Get a finger print image, template it, and see if it matches!\n    This time, print out each error instead of just returning on failure\"\"\"\n    print('Getting image...', end='')\n    i = finger.get_image()\n    if i == adafruit_fingerprint.OK:\n        print('Image taken')\n    else:\n        if i == adafruit_fingerprint.NOFINGER:\n            print('No finger detected')\n        elif i == adafruit_fingerprint.IMAGEFAIL:\n            print('Imaging error')\n        else:\n            print('Other error')\n        return False\n    print('Templating...', end='')\n    i = finger.image_2_tz(1)\n    if i == adafruit_fingerprint.OK:\n        print('Templated')\n    else:\n        if i == adafruit_fingerprint.IMAGEMESS:\n            print('Image too messy')\n        elif i == adafruit_fingerprint.FEATUREFAIL:\n            print('Could not identify features')\n        elif i == adafruit_fingerprint.INVALIDIMAGE:\n            print('Image invalid')\n        else:\n            print('Other error')\n        return False\n    print('Searching...', end='')\n    i = finger.finger_fast_search()\n    if i == adafruit_fingerprint.OK:\n        print('Found fingerprint!')\n        return True\n    else:\n        if i == adafruit_fingerprint.NOTFOUND:\n            print('No match found')\n        else:\n            print('Other error')\n        return False",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_picturetest.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_picturetest.py",
      "chunk_type": "function",
      "function_name": "get_fingerprint_detail"
    }
  },
  {
    "content": "import time\nimport numpy as np\nimport serial\nfrom matplotlib import pyplot as plt\nimport adafruit_fingerprint\n\n# Get and show fingerprint image\ndef get_fingerprint_photo():\n    \"\"\"Get and show fingerprint image\"\"\"\n    print('Waiting for image...')\n    while finger.get_image() != adafruit_fingerprint.OK:\n        pass\n    print('Got image...Transferring image data...')\n    imgList = finger.get_fpdata('image', 2)\n    imgArray = np.zeros(73728, np.uint8)\n    for i, val in enumerate(imgList):\n        imgArray[i * 2] = val & 240\n        imgArray[i * 2 + 1] = (val & 15) * 16\n    imgArray = np.reshape(imgArray, (288, 256))\n    plt.title('Fingerprint Image')\n    plt.imshow(imgArray)\n    plt.show(block=False)\n\n# Usage example:\n            print(\"Failed to delete\")\n    if c == \"v\":\n        get_fingerprint_photo()\n    if c == \"p\":\n        if get_fingerprint_preview():",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_picturetest.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_picturetest.py",
      "chunk_type": "function",
      "function_name": "get_fingerprint_photo"
    }
  },
  {
    "content": "import time\nimport numpy as np\nimport serial\nfrom matplotlib import pyplot as plt\nimport adafruit_fingerprint\n\n# Get a finger print image, show it, template it, and see if it matches!\ndef get_fingerprint_preview():\n    \"\"\"Get a finger print image, show it, template it, and see if it matches!\"\"\"\n    print('Waiting for image...')\n    while finger.get_image() != adafruit_fingerprint.OK:\n        pass\n    print('Got image...Transferring image data...')\n    imgList = finger.get_fpdata('image', 2)\n    imgArray = np.zeros(73728, np.uint8)\n    for i, val in enumerate(imgList):\n        imgArray[i * 2] = val & 240\n        imgArray[i * 2 + 1] = (val & 15) * 16\n    imgArray = np.reshape(imgArray, (288, 256))\n    plt.title('Fingerprint Image')\n    plt.imshow(imgArray)\n    plt.show(block=False)\n    print('Templating...')\n    if finger.image_2_tz(1) != adafruit_fingerprint.OK:\n        return False\n    print('Searching...')\n    if finger.finger_search() != adafruit_fingerprint.OK:\n        return False\n    return True\n\n# Usage example:\n        get_fingerprint_photo()\n    if c == \"p\":\n        if get_fingerprint_preview():\n            print(\"Detected #\", finger.finger_id, \"with confidence\", finger.confidence)\n        else:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_picturetest.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_picturetest.py",
      "chunk_type": "function",
      "function_name": "get_fingerprint_preview"
    }
  },
  {
    "content": "import time\nimport numpy as np\nimport serial\nfrom matplotlib import pyplot as plt\nimport adafruit_fingerprint\n\n# Take a 2 finger images and template it, then store in 'location'\ndef enroll_finger(location):\n    \"\"\"Take a 2 finger images and template it, then store in 'location'\"\"\"\n    for fingerimg in range(1, 3):\n        if fingerimg == 1:\n            print('Place finger on sensor...', end='')\n        else:\n            print('Place same finger again...', end='')\n        while True:\n            i = finger.get_image()\n            if i == adafruit_fingerprint.OK:\n                print('Image taken')\n                break\n            if i == adafruit_fingerprint.NOFINGER:\n                print('.', end='')\n            elif i == adafruit_fingerprint.IMAGEFAIL:\n                print('Imaging error')\n                return False\n            else:\n                print('Other error')\n                return False\n        print('Templating...', end='')\n        i = finger.image_2_tz(fingerimg)\n        if i == adafruit_fingerprint.OK:\n            print('Templated')\n        else:\n            if i == adafruit_fingerprint.IMAGEMESS:\n                print('Image too messy')\n            elif i == adafruit_fingerprint.FEATUREFAIL:\n                print('Could not identify features')\n            elif i == adafruit_fingerprint.INVALIDIMAGE:\n                print('Image invalid')\n            else:\n                print('Other error')\n            return False\n        if fingerimg == 1:\n            print('Remove finger')\n            time.sleep(1)\n            while i != adafruit_fingerprint.NOFINGER:\n                i = finger.get_image()\n    print('Creating model...', end='')\n    i = finger.create_model()\n    if i == adafruit_fingerprint.OK:\n        print('Created')\n    else:\n        if i == adafruit_fingerprint.ENROLLMISMATCH:\n            print('Prints did not match')\n        else:\n            print('Other error')\n        return False\n    print('Storing model #%d...' % location, end='')\n    i = finger.store_model(location)\n    if i == adafruit_fingerprint.OK:\n        print('Stored')\n    else:\n        if i == adafruit_fingerprint.BADLOCATION:\n            print('Bad storage location')\n        elif i == adafruit_fingerprint.FLASHERR:\n            print('Flash storage error')\n        else:\n            print('Other error')\n        return False\n    return True\n\n# Usage example:\n\n    if c == \"e\":\n        enroll_finger(get_num())\n    if c == \"f\":\n        if get_fingerprint():",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_picturetest.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_picturetest.py",
      "chunk_type": "function",
      "function_name": "enroll_finger"
    }
  },
  {
    "content": "import time\nimport numpy as np\nimport serial\nfrom matplotlib import pyplot as plt\nimport adafruit_fingerprint\n\n# Use input() to get a valid number from 1 to 127. Retry till success!\ndef get_num():\n    \"\"\"Use input() to get a valid number from 1 to 127. Retry till success!\"\"\"\n    i = 0\n    while i > 127 or i < 1:\n        try:\n            i = int(input('Enter ID # from 1-127: '))\n        except ValueError:\n            pass\n    return i\n\n# Usage example:\n\n    if c == \"e\":\n        enroll_finger(get_num())\n    if c == \"f\":\n        if get_fingerprint():",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_picturetest.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_picturetest.py",
      "chunk_type": "function",
      "function_name": "get_num"
    }
  },
  {
    "content": "import board\nimport displayio\nimport fourwire\nfrom adafruit_st7735 import ST7735\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735/examples/st7735_simpletest.py",
      "library": "st7735",
      "type": "example",
      "file_name": "st7735_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport fourwire\nfrom adafruit_st7735 import ST7735\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735/examples/st7735_simpletest.py",
      "library": "st7735",
      "type": "example",
      "file_name": "st7735_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport fourwire\nfrom adafruit_st7735 import ST7735\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)\ndisplay = ST7735(display_bus, width=128, height=128)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735/examples/st7735_simpletest.py",
      "library": "st7735",
      "type": "example",
      "file_name": "st7735_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport fourwire\nfrom adafruit_st7735 import ST7735\n\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)\ndisplay = ST7735(display_bus, width=128, height=128)\n# Make the display context",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735/examples/st7735_simpletest.py",
      "library": "st7735",
      "type": "example",
      "file_name": "st7735_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nThis test will initialize the display using displayio\nand draw a solid red background\n\"\"\"\n\nimport board\nimport displayio\nimport fourwire\n\nfrom adafruit_st7735 import ST7735\n\n# Release any resources currently in use for the displays\ndisplayio.release_displays()\n\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\n\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)\n\ndisplay = ST7735(display_bus, width=128, height=128)\n\n# Make the display context\nsplash = displayio.Group()\ndisplay.root_group = splash\n\ncolor_bitmap = displayio.Bitmap(128, 128, 1)\ncolor_palette = displayio.Palette(1)\ncolor_palette[0] = 0xFF0000\n\nbg_sprite = displayio.TileGrid(color_bitmap, pixel_shader=color_palette, x=0, y=0)\nsplash.append(bg_sprite)\n\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735/examples/st7735_simpletest.py",
      "library": "st7735",
      "type": "example",
      "file_name": "st7735_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_ltr329_ltr303 import LTR303\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ltr329_ltr303/examples/ltr303_simpletest.py",
      "library": "ltr329_ltr303",
      "type": "example",
      "file_name": "ltr303_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2022 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\n\nfrom adafruit_ltr329_ltr303 import LTR303\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\ntime.sleep(0.1)  # sensor takes 100ms to 'boot' on power up\nltr303 = LTR303(i2c)\n\nwhile True:\n    print(\"Visible + IR:\", ltr303.visible_plus_ir_light)\n    print(\"Infrared    :\", ltr303.ir_light)\n    print()\n    time.sleep(0.5)  # sleep for half a second\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ltr329_ltr303/examples/ltr303_simpletest.py",
      "library": "ltr329_ltr303",
      "type": "example",
      "file_name": "ltr303_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_icm20x import ICM20649, AccelRange, GyroRange\n\ndef printNewMax(value, current_max, axis):\n    if value > current_max:\n        current_max = value\n        print(axis, 'Max:', current_max)\n    return current_max\n\n# Usage example:\n\n#     acceleration = ism.acceleration\n#     # ax_max = printNewMax(acceleration[0], ax_max, \"AX\")\n#     # ay_max = printNewMax(acceleration[1], ay_max, \"AY\")\n#     # az_max = printNewMax(acceleration[2], az_max, \"AZ\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/icm20x/examples/icm20x_icm20649_full_test.py",
      "library": "icm20x",
      "type": "example",
      "file_name": "icm20x_icm20649_full_test.py",
      "chunk_type": "function",
      "function_name": "printNewMax"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_icm20x import ICM20649, AccelRange, GyroRange\n\n# pylint:disable=no-member\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nism = ICM20649(i2c, address=0x69)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/icm20x/examples/icm20x_icm20649_full_test.py",
      "library": "icm20x",
      "type": "example",
      "file_name": "icm20x_icm20649_full_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_scd30\n\nimport adafruit_scd30\n# SCD-30 has tempremental I2C with clock stretching, datasheet recommends\n# starting at 50KHz\ni2c = busio.I2C(board.SCL, board.SDA, frequency=50000)\nscd = adafruit_scd30.SCD30(i2c)\n# scd.temperature_offset = 10",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/scd30/examples/scd30_tuning_knobs.py",
      "library": "scd30",
      "type": "example",
      "file_name": "scd30_tuning_knobs.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_scd30\n\nimport adafruit_scd30\n# SCD-30 has tempremental I2C with clock stretching, datasheet recommends\n# starting at 50KHz\ni2c = busio.I2C(board.SCL, board.SDA, frequency=50000)\nscd = adafruit_scd30.SCD30(i2c)\n# scd.temperature_offset = 10",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/scd30/examples/scd30_tuning_knobs.py",
      "library": "scd30",
      "type": "example",
      "file_name": "scd30_tuning_knobs.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_emc2101.emc2101_lut import EMC2101_LUT as EMC2101\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nemc = EMC2101(i2c)\nemc.set_pwm_clock(use_preset=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/emc2101/examples/emc2101_set_pwm_freq.py",
      "library": "emc2101",
      "type": "example",
      "file_name": "emc2101_set_pwm_freq.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_acep7in\n\nimport adafruit_acep7in\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/acep7in/examples/acep7in_simpletest.py",
      "library": "acep7in",
      "type": "example",
      "file_name": "acep7in_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_acep7in\n\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/acep7in/examples/acep7in_simpletest.py",
      "library": "acep7in",
      "type": "example",
      "file_name": "acep7in_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_acep7in\n\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/acep7in/examples/acep7in_simpletest.py",
      "library": "acep7in",
      "type": "example",
      "file_name": "acep7in_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_acep7in\n\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/acep7in/examples/acep7in_simpletest.py",
      "library": "acep7in",
      "type": "example",
      "file_name": "acep7in_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_acep7in\n\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)\ndisplay = adafruit_acep7in.ACeP7In(display_bus, width=800, height=480, busy_pin=epd_busy)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/acep7in/examples/acep7in_simpletest.py",
      "library": "acep7in",
      "type": "example",
      "file_name": "acep7in_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_acep7in\n\nepd_reset = board.D11\nepd_busy = board.D12\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)\ndisplay = adafruit_acep7in.ACeP7In(display_bus, width=800, height=480, busy_pin=epd_busy)\ng = displayio.Group()\npic = displayio.OnDiskBitmap(\"/display-ruler-720p.bmp\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/acep7in/examples/acep7in_simpletest.py",
      "library": "acep7in",
      "type": "example",
      "file_name": "acep7in_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_ads1x15.ads1115 as ADS\nfrom adafruit_ads1x15.analog_in import AnalogIn\n\n# import adafruit_ads1x15.ads1015 as ADS\nimport adafruit_ads1x15.ads1115 as ADS\n# Create the I2C bus\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create the ADS object\n# ads = ADS.ADS1015(i2c)\nads = ADS.ADS1115(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ads1x15/examples/ads1x15_gain_example.py",
      "library": "ads1x15",
      "type": "example",
      "file_name": "ads1x15_gain_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tsl2561\n\nimport busio\nimport adafruit_tsl2561\n# Create the I2C bus\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create the TSL2561 instance, passing in the I2C bus\ntsl = adafruit_tsl2561.TSL2561(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tsl2561/examples/tsl2561_simpletest.py",
      "library": "tsl2561",
      "type": "example",
      "file_name": "tsl2561_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tsl2561\n\n# Create the I2C bus\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create the TSL2561 instance, passing in the I2C bus\ntsl = adafruit_tsl2561.TSL2561(i2c)\n# Print chip info\nprint(f\"Chip ID = {tsl.chip_id}\")\nprint(f\"Enabled = {tsl.enabled}\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tsl2561/examples/tsl2561_simpletest.py",
      "library": "tsl2561",
      "type": "example",
      "file_name": "tsl2561_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef connected(client, userdata, flags, rc):\n    print('Connected to MQTT Broker!')\n\n# Usage example:\n# Define callback methods which are called when events occur\ndef connected(client, userdata, flags, rc):\n    # This function will be called when the client is connected\n    # successfully to the broker.\n    print(\"Connected to MQTT Broker!\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/native_networking/minimqtt_pub_sub_blocking_topic_callbacks_native_networking.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_native_networking.py",
      "chunk_type": "function",
      "function_name": "connected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef disconnected(client, userdata, rc):\n    print('Disconnected from MQTT Broker!')\n\n# Usage example:\n\ndef disconnected(client, userdata, rc):\n    # This method is called when the client is disconnected\n    print(\"Disconnected from MQTT Broker!\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/native_networking/minimqtt_pub_sub_blocking_topic_callbacks_native_networking.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_native_networking.py",
      "chunk_type": "function",
      "function_name": "disconnected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef subscribe(client, userdata, topic, granted_qos):\n    print(f'Subscribed to {topic} with QOS level {granted_qos}')\n\n# Usage example:\n\ndef subscribe(client, userdata, topic, granted_qos):\n    # This method is called when the client subscribes to a new feed.\n    print(f\"Subscribed to {topic} with QOS level {granted_qos}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/native_networking/minimqtt_pub_sub_blocking_topic_callbacks_native_networking.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_native_networking.py",
      "chunk_type": "function",
      "function_name": "subscribe"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef unsubscribe(client, userdata, topic, pid):\n    print(f'Unsubscribed from {topic} with PID {pid}')\n\n# Usage example:\n\ndef unsubscribe(client, userdata, topic, pid):\n    # This method is called when the client unsubscribes from a feed.\n    print(f\"Unsubscribed from {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/native_networking/minimqtt_pub_sub_blocking_topic_callbacks_native_networking.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_native_networking.py",
      "chunk_type": "function",
      "function_name": "unsubscribe"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef on_battery_msg(client, topic, message):\n    print(f'Battery level: {message}v')\n\n# Usage example:\nclient.on_unsubscribe = unsubscribe\nclient.on_message = on_message\nclient.add_topic_callback(f\"{aio_username}/feeds/device.batterylevel\", on_battery_msg)\n\n# Connect the client to the MQTT broker.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/native_networking/minimqtt_pub_sub_blocking_topic_callbacks_native_networking.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_native_networking.py",
      "chunk_type": "function",
      "function_name": "on_battery_msg"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef on_message(client, topic, message):\n    print(f'New message on topic {topic}: {message}')\n\n# Usage example:\nclient.on_subscribe = subscribe\nclient.on_unsubscribe = unsubscribe\nclient.on_message = on_message\nclient.add_topic_callback(f\"{aio_username}/feeds/device.batterylevel\", on_battery_msg)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/native_networking/minimqtt_pub_sub_blocking_topic_callbacks_native_networking.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_native_networking.py",
      "chunk_type": "function",
      "function_name": "on_message"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n    # Method callled when a client's subscribed feed has a new value.\n# Create a socket pool and ssl_context\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\n# If you need to use certificate/key pair authentication (e.g. X.509), you can load them in the\n# ssl context by uncommenting the lines below and adding the following keys to your settings.toml:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/native_networking/minimqtt_pub_sub_blocking_topic_callbacks_native_networking.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_native_networking.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# Create a socket pool and ssl_context\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\n# If you need to use certificate/key pair authentication (e.g. X.509), you can load them in the\n# ssl context by uncommenting the lines below and adding the following keys to your settings.toml:\n# \"device_cert_path\" - Path to the Device Certificate",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/native_networking/minimqtt_pub_sub_blocking_topic_callbacks_native_networking.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_native_networking.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_touchscreen\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_button import Button\n\n# use built in display (MagTag, PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\n# --| Button Config |-------------------------------------------------\nBUTTON_X = 110\nBUTTON_Y = 95",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-button/examples/display_button_debounced.py",
      "library": "display-button",
      "type": "example",
      "file_name": "display_button_debounced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_touchscreen\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_button import Button\n\nts = adafruit_touchscreen.Touchscreen(board.TOUCH_XL, board.TOUCH_XR, board.TOUCH_YD, board.TOUCH_YU, calibration=((5200, 59000), (5800, 57000)), size=(display.width, display.height))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-button/examples/display_button_debounced.py",
      "library": "display-button",
      "type": "example",
      "file_name": "display_button_debounced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport keypad\nimport wifi\nfrom adafruit_wiz import SCENE_IDS, WizConnectedLight\n\nbuttons = keypad.Keys((board.D11, board.D12, board.A1, board.A0), value_when_pressed=False, pull=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/wiz/examples/wiz_buttons_controller.py",
      "library": "wiz",
      "type": "example",
      "file_name": "wiz_buttons_controller.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_espatcontrol.adafruit_espatcontrol_socket as pool\nfrom adafruit_espatcontrol import adafruit_espatcontrol\n\nesp = adafruit_espatcontrol.ESP_ATcontrol(uart, 115200, reset_pin=resetpin, rts_pin=rtspin, debug=debugflag)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_simple_enterprise.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_simple_enterprise.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_espatcontrol.adafruit_espatcontrol_socket as pool\nfrom adafruit_espatcontrol import adafruit_espatcontrol\n\n# time.sleep(20)\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, esp)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_simple_enterprise.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_simple_enterprise.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_espatcontrol.adafruit_espatcontrol_socket as pool\nfrom adafruit_espatcontrol import adafruit_espatcontrol\n\n# time.sleep(20)\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, esp)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_simple_enterprise.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_simple_enterprise.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_seesaw import pwmout, seesaw\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nss = seesaw.Seesaw(i2c)\nPWM_PIN = 12  # If desired, change to any valid PWM output!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_pwmout_test.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_pwmout_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_seesaw import pwmout, seesaw\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nss = seesaw.Seesaw(i2c)\nPWM_PIN = 12  # If desired, change to any valid PWM output!\nled = pwmout.PWMOut(ss, PWM_PIN)\ndelay = 0.01",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_pwmout_test.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_pwmout_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import rp2pio\nimport adafruit_pioasm\n\ncode = adafruit_pioasm.assemble('\\n.program uart_rx_mini\\n\\n; Minimum viable 8n1 UART receiver. Wait for the start bit, then sample 8 bits\\n; with the correct timing.\\n; IN pin 0 is mapped to the GPIO used as UART RX.\\n; Autopush must be enabled, with a threshold of 8.\\n\\n    wait 0 pin 0        ; Wait for start bit\\n    set x, 7 [10]       ; Preload bit counter, delay until eye of first data bit\\nbitloop:                ; Loop 8 times\\n    in pins, 1          ; Sample data\\n    jmp x-- bitloop [6] ; Each iteration is 8 cycles\\n\\n')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_rxuart.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_rxuart.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import rp2pio\nimport adafruit_pioasm\n\nclass RXUART:\n\n    def __init__(self, pin, baudrate=9600):\n        self.pio = rp2pio.StateMachine(code, first_in_pin=pin, frequency=8 * baudrate, auto_push=True, push_threshold=8)\n\n    @property\n    def timeout(self):\n        return 0\n\n    @property\n    def baudrate(self):\n        return self.pio.frequency // 8\n\n    @baudrate.setter\n    def baudrate(self, frequency):\n        self.pio.frequency = freqency * 8\n\n    @property\n    def in_waiting(self):\n        return self.pio.in_waiting\n\n    def read(self, n):\n        b = bytearray(n)\n        n = self.pio.readinto(b)\n        return b[:n]\n\n    def readinto(self, buf):\n        return self.pio.readinto(n)\n\n# Usage example:\n\n\nclass RXUART:\n    def __init__(self, pin, baudrate=9600):\n        self.pio = rp2pio.StateMachine(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_rxuart.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_rxuart.py",
      "chunk_type": "function",
      "function_name": "RXUART"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.blink import Blink\nfrom adafruit_led_animation.color import PURPLE\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.A3\n# Update to match the number of NeoPixels you have connected\npixel_num = 30\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_blink.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_blink.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.blink import Blink\nfrom adafruit_led_animation.color import PURPLE\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.A3\n# Update to match the number of NeoPixels you have connected\npixel_num = 30\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)\nblink = Blink(pixels, speed=0.5, color=PURPLE)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_blink.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_blink.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 Kattni Rembor for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nThis example blinks the LEDs purple at a 0.5 second interval.\n\nFor QT Py Haxpress and a NeoPixel strip. Update pixel_pin and pixel_num to match your wiring if\nusing a different board or form of NeoPixels.\n\nThis example will run on SAMD21 (M0) Express boards (such as Circuit Playground Express or QT Py\nHaxpress), but not on SAMD21 non-Express boards (such as QT Py or Trinket).\n\"\"\"\n\nimport board\nimport neopixel\n\nfrom adafruit_led_animation.animation.blink import Blink\nfrom adafruit_led_animation.color import PURPLE\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.A3\n# Update to match the number of NeoPixels you have connected\npixel_num = 30\n\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)\n\nblink = Blink(pixels, speed=0.5, color=PURPLE)\n\nwhile True:\n    blink.animate()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_blink.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_blink.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_ili9341\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport neopixel\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\nimport adafruit_ov5640\n# Release any resources currently in use for the displays\nspi = busio.SPI(MOSI=board.LCD_MOSI, clock=board.LCD_CLK)\ndisplay_bus = fourwire.FourWire(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_sdcard_kaluga_1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_sdcard_kaluga_1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_ili9341\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport neopixel\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ndisplay_bus = fourwire.FourWire(spi, command=board.LCD_D_C, chip_select=board.LCD_CS, reset=board.LCD_RST, baudrate=80000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_sdcard_kaluga_1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_sdcard_kaluga_1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_ili9341\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport neopixel\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\n    command=board.LCD_D_C,\n    chip_select=board.LCD_CS,\n    reset=board.LCD_RST,\n    baudrate=80_000_000,\ndisplay = adafruit_ili9341.ILI9341(display_bus, width=320, height=240, rotation=90)\nV_MODE = 1.98\nV_RECORD = 2.41",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_sdcard_kaluga_1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_sdcard_kaluga_1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_ili9341\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport neopixel\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ndisplay = adafruit_ili9341.ILI9341(display_bus, width=320, height=240, rotation=90)\nV_MODE = 1.98\nV_RECORD = 2.41\na = analogio.AnalogIn(board.IO6)\npixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.3, auto_write=False)\nbus = busio.I2C(scl=board.CAMERA_SIOC, sda=board.CAMERA_SIOD)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_sdcard_kaluga_1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_sdcard_kaluga_1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_ili9341\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport neopixel\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\nV_MODE = 1.98\nV_RECORD = 2.41\na = analogio.AnalogIn(board.IO6)\npixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.3, auto_write=False)\nbus = busio.I2C(scl=board.CAMERA_SIOC, sda=board.CAMERA_SIOD)\ncam = adafruit_ov5640.OV5640(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_sdcard_kaluga_1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_sdcard_kaluga_1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_ili9341\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport neopixel\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\na = analogio.AnalogIn(board.IO6)\npixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.3, auto_write=False)\nbus = busio.I2C(scl=board.CAMERA_SIOC, sda=board.CAMERA_SIOD)\ncam = adafruit_ov5640.OV5640(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_sdcard_kaluga_1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_sdcard_kaluga_1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_ili9341\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport neopixel\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ncam = adafruit_ov5640.OV5640(bus, data_pins=board.CAMERA_DATA, clock=board.CAMERA_PCLK, vsync=board.CAMERA_VSYNC, href=board.CAMERA_HREF, mclk=board.CAMERA_XCLK, size=adafruit_ov5640.OV5640_SIZE_QSXGA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_sdcard_kaluga_1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_sdcard_kaluga_1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_ili9341\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport neopixel\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\n    href=board.CAMERA_HREF,\n    mclk=board.CAMERA_XCLK,\n    size=adafruit_ov5640.OV5640_SIZE_QSXGA,\nsd_spi = busio.SPI(clock=board.IO18, MOSI=board.IO14, MISO=board.IO17)\nsd_cs = board.IO12\nsdcard = sdcardio.SDCard(sd_spi, sd_cs)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_sdcard_kaluga_1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_sdcard_kaluga_1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_ili9341\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport neopixel\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\n    mclk=board.CAMERA_XCLK,\n    size=adafruit_ov5640.OV5640_SIZE_QSXGA,\nsd_spi = busio.SPI(clock=board.IO18, MOSI=board.IO14, MISO=board.IO17)\nsd_cs = board.IO12\nsdcard = sdcardio.SDCard(sd_spi, sd_cs)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_sdcard_kaluga_1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_sdcard_kaluga_1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_ili9341\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport neopixel\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ndef exists(filename):\n    try:\n        os.stat(filename)\n        return True\n    except OSError as _:\n        return False\n\n# Usage example:\n            filename = f\"/sd/img{self.count:04d}.jpg\"\n            self.count += 1\n            if exists(filename):\n                continue\n            print(\"# writing to\", filename)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_sdcard_kaluga_1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_sdcard_kaluga_1_3.py",
      "chunk_type": "function",
      "function_name": "exists"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_ili9341\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport neopixel\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\nclass ImageCounter:\n\n    def __init__(self):\n        self.count = 0\n\n    def get_next(self):\n        while True:\n            filename = f'/sd/img{self.count:04d}.jpg'\n            self.count += 1\n            if exists(filename):\n                continue\n            print('# writing to', filename)\n            return open(filename, 'wb')\n\n# Usage example:\n\n\nclass ImageCounter:\n    def __init__(self):\n        self.count = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_sdcard_kaluga_1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_sdcard_kaluga_1_3.py",
      "chunk_type": "function",
      "function_name": "ImageCounter"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_ili9341\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport neopixel\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ndef open_next_image():\n    return _image_counter.get_next()\n\n# Usage example:\n            pixel[0] = 0x00FF00\n            pixel.write()\n            with open_next_image() as f:\n                f.write(jpeg)\n            print(\"# Wrote image\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_sdcard_kaluga_1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_sdcard_kaluga_1_3.py",
      "chunk_type": "function",
      "function_name": "open_next_image"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_ili9341\nimport analogio\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport neopixel\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ncam.colorspace = adafruit_ov5640.OV5640_COLOR_JPEG\ncam.quality = 7\nb = bytearray(cam.capture_buffer_size)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_sdcard_kaluga_1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_sdcard_kaluga_1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_dotstar\nimport board\nfrom adafruit_pixel_framebuf import PixelFramebuffer\n\nimport adafruit_dotstar\nimport board\npixel_pin = board.D6\npixel_width = 12\npixel_height = 6\npixels = adafruit_dotstar.DotStar(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pixel_framebuf/examples/pixel_framebuf_dotstar_simpletest.py",
      "library": "pixel_framebuf",
      "type": "example",
      "file_name": "pixel_framebuf_dotstar_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_dotstar\nimport board\nfrom adafruit_pixel_framebuf import PixelFramebuffer\n\npixels = adafruit_dotstar.DotStar(board.D13, board.D11, pixel_width * pixel_height, brightness=0.3, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pixel_framebuf/examples/pixel_framebuf_dotstar_simpletest.py",
      "library": "pixel_framebuf",
      "type": "example",
      "file_name": "pixel_framebuf_dotstar_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 Melissa LeBlanc-Williams, written for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\"\"\"\nThis example runs on an Adafruit Dotstar Feather\n\"\"\"\n\nimport adafruit_dotstar\nimport board\n\nfrom adafruit_pixel_framebuf import PixelFramebuffer\n\npixel_pin = board.D6\npixel_width = 12\npixel_height = 6\n\npixels = adafruit_dotstar.DotStar(\n    board.D13,\n    board.D11,\n    pixel_width * pixel_height,\n    brightness=0.3,\n    auto_write=False,\n)\n\npixel_framebuf = PixelFramebuffer(\n    pixels,\n    pixel_width,\n    pixel_height,\n    alternating=False,\n)\n\npixel_framebuf.fill(0x000088)\npixel_framebuf.pixel(5, 1, 0xFFFF00)\npixel_framebuf.line(0, 0, pixel_width - 1, pixel_height - 1, 0x00FF00)\npixel_framebuf.display()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pixel_framebuf/examples/pixel_framebuf_dotstar_simpletest.py",
      "library": "pixel_framebuf",
      "type": "example",
      "file_name": "pixel_framebuf_dotstar_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_sht4x\n\nimport adafruit_sht4x\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector\nsht = adafruit_sht4x.SHT4x(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sht4x/examples/sht4x_displayio_simpletest.py",
      "library": "sht4x",
      "type": "example",
      "file_name": "sht4x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_sht4x\n\nimport adafruit_sht4x\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector\nsht = adafruit_sht4x.SHT4x(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sht4x/examples/sht4x_displayio_simpletest.py",
      "library": "sht4x",
      "type": "example",
      "file_name": "sht4x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_sht4x\n\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector\nsht = adafruit_sht4x.SHT4x(i2c)\nsht.mode = adafruit_sht4x.Mode.NOHEAT_HIGHPRECISION\n# Can also set the mode to enable heater\n# sht.mode = adafruit_sht4x.Mode.LOWHEAT_100MS\n# print(\"Current mode is: \", adafruit_sht4x.Mode.string[sht.mode])",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sht4x/examples/sht4x_displayio_simpletest.py",
      "library": "sht4x",
      "type": "example",
      "file_name": "sht4x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_sht4x\n\n# sht.mode = adafruit_sht4x.Mode.LOWHEAT_100MS\n# print(\"Current mode is: \", adafruit_sht4x.Mode.string[sht.mode])\n# Example written for boards with built-in displays\ndisplay = board.DISPLAY\n# Create a main_group to hold anything we want to show on the display.\nmain_group = Group()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sht4x/examples/sht4x_displayio_simpletest.py",
      "library": "sht4x",
      "type": "example",
      "file_name": "sht4x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport socket\nimport ssl\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport adafruit_logging as logging\nfrom adafruit_logging import NOTSET, Handler, LogRecord\n\n# Log handler that emits log records as MQTT PUBLISH messages.\nclass MQTTHandler(Handler):\n    \"\"\"\n    Log handler that emits log records as MQTT PUBLISH messages.\n    \"\"\"\n\n    def __init__(self, mqtt_client: MQTT.MQTT, topic: str) -> None:\n        \"\"\"\n        Assumes that the MQTT client object is already connected.\n        \"\"\"\n        super().__init__()\n        self._mqtt_client = mqtt_client\n        self._topic = topic\n        self.level = NOTSET\n\n    def emit(self, record: LogRecord) -> None:\n        \"\"\"\n        Publish message from the LogRecord to the MQTT broker, if connected.\n        \"\"\"\n        try:\n            if self._mqtt_client.is_connected():\n                self._mqtt_client.publish(self._topic, record.msg)\n        except MQTT.MMQTTException:\n            pass\n\n    def handle(self, record: LogRecord) -> None:\n        \"\"\"\n        Handle the log record. Here, it means just emit.\n        \"\"\"\n        self.emit(record)\n\n# Usage example:\n\n\nclass MQTTHandler(Handler):\n    \"\"\"\n    Log handler that emits log records as MQTT PUBLISH messages.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/logging/examples/logging_mqtt_handler.py",
      "library": "logging",
      "type": "example",
      "file_name": "logging_mqtt_handler.py",
      "chunk_type": "function",
      "function_name": "MQTTHandler"
    }
  },
  {
    "content": "import json\nimport socket\nimport ssl\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport adafruit_logging as logging\nfrom adafruit_logging import NOTSET, Handler, LogRecord\n\n# Demonstrate how to use MQTT log handler.\ndef main():\n    \"\"\"\n    Demonstrate how to use MQTT log handler.\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    broker = 'io.adafruit.com'\n    port = 8883\n    username = 'Adafruit_IO_username'\n    password = 'Adafruit_IO_key'\n    feedname = 'Adafruit_feed_name'\n    mqtt_topic = f'{username}/feeds/{feedname}'\n    mqtt_client = MQTT.MQTT(broker=broker, port=port, username=username, password=password, socket_pool=socket, ssl_context=ssl.create_default_context())\n    mqtt_client.connect()\n    mqtt_handler = MQTTHandler(mqtt_client, mqtt_topic)\n    print('adding MQTT handler')\n    logger.addHandler(mqtt_handler)\n    stream_handler = logging.StreamHandler()\n    print('adding Stream handler')\n    logger.addHandler(stream_handler)\n    data = 'foo bar'\n    print('logging begins !')\n    logger.warning(json.dumps(data))\n\n# Usage example:\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/logging/examples/logging_mqtt_handler.py",
      "library": "logging",
      "type": "example",
      "file_name": "logging_mqtt_handler.py",
      "chunk_type": "function",
      "function_name": "main"
    }
  },
  {
    "content": "import argparse\nimport math\nimport os\nimport time\nimport board\nimport busio\nimport pygame\nfrom PIL import Image\nimport adafruit_mlx90640\n\nimport adafruit_mlx90640\nINTERPOLATE = 10\n# MUST set I2C freq to 1MHz in /boot/config.txt\ni2c = busio.I2C(board.SCL, board.SDA)\n# low range of the sensor (this will be black on the screen)\nMINTEMP = 20.0\n# high range of the sensor (this will be white on the screen)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90640/examples/mlx90640_camtest.py",
      "library": "mlx90640",
      "type": "example",
      "file_name": "mlx90640_camtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import argparse\nimport math\nimport os\nimport time\nimport board\nimport busio\nimport pygame\nfrom PIL import Image\nimport adafruit_mlx90640\n\ndef constrain(val, min_val, max_val):\n    return min(max_val, max(min_val, val))\n\n# Usage example:\n    g = sum(gaussian(x, p[1][1], p[0] * width, width / (spread * len(cmap))) for p in cmap)\n    b = sum(gaussian(x, p[1][2], p[0] * width, width / (spread * len(cmap))) for p in cmap)\n    r = int(constrain(r * 255, 0, 255))\n    g = int(constrain(g * 255, 0, 255))\n    b = int(constrain(b * 255, 0, 255))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90640/examples/mlx90640_camtest.py",
      "library": "mlx90640",
      "type": "example",
      "file_name": "mlx90640_camtest.py",
      "chunk_type": "function",
      "function_name": "constrain"
    }
  },
  {
    "content": "import argparse\nimport math\nimport os\nimport time\nimport board\nimport busio\nimport pygame\nfrom PIL import Image\nimport adafruit_mlx90640\n\ndef map_value(x, in_min, in_max, out_min, out_max):\n    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min\n\n# Usage example:\n    pixels = [0] * 768\n    for i, pixel in enumerate(frame):\n        coloridx = map_value(pixel, MINTEMP, MAXTEMP, 0, COLORDEPTH - 1)\n        coloridx = int(constrain(coloridx, 0, COLORDEPTH - 1))\n        pixels[i] = colormap[coloridx]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90640/examples/mlx90640_camtest.py",
      "library": "mlx90640",
      "type": "example",
      "file_name": "mlx90640_camtest.py",
      "chunk_type": "function",
      "function_name": "map_value"
    }
  },
  {
    "content": "import argparse\nimport math\nimport os\nimport time\nimport board\nimport busio\nimport pygame\nfrom PIL import Image\nimport adafruit_mlx90640\n\ndef gaussian(x, a, b, c, d=0):\n    return a * math.exp(-(x - b) ** 2 / (2 * c ** 2)) + d\n\n# Usage example:\ndef gradient(x, width, cmap, spread=1):\n    width = float(width)\n    r = sum(gaussian(x, p[1][0], p[0] * width, width / (spread * len(cmap))) for p in cmap)\n    g = sum(gaussian(x, p[1][1], p[0] * width, width / (spread * len(cmap))) for p in cmap)\n    b = sum(gaussian(x, p[1][2], p[0] * width, width / (spread * len(cmap))) for p in cmap)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90640/examples/mlx90640_camtest.py",
      "library": "mlx90640",
      "type": "example",
      "file_name": "mlx90640_camtest.py",
      "chunk_type": "function",
      "function_name": "gaussian"
    }
  },
  {
    "content": "import argparse\nimport math\nimport os\nimport time\nimport board\nimport busio\nimport pygame\nfrom PIL import Image\nimport adafruit_mlx90640\n\ndef gradient(x, width, cmap, spread=1):\n    width = float(width)\n    r = sum((gaussian(x, p[1][0], p[0] * width, width / (spread * len(cmap))) for p in cmap))\n    g = sum((gaussian(x, p[1][1], p[0] * width, width / (spread * len(cmap))) for p in cmap))\n    b = sum((gaussian(x, p[1][2], p[0] * width, width / (spread * len(cmap))) for p in cmap))\n    r = int(constrain(r * 255, 0, 255))\n    g = int(constrain(g * 255, 0, 255))\n    b = int(constrain(b * 255, 0, 255))\n    return (r, g, b)\n\n# Usage example:\n\nfor i in range(COLORDEPTH):\n    colormap[i] = gradient(i, COLORDEPTH, heatmap)\n\npygame.mouse.set_visible(False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90640/examples/mlx90640_camtest.py",
      "library": "mlx90640",
      "type": "example",
      "file_name": "mlx90640_camtest.py",
      "chunk_type": "function",
      "function_name": "gradient"
    }
  },
  {
    "content": "import argparse\nimport math\nimport os\nimport time\nimport board\nimport busio\nimport pygame\nfrom PIL import Image\nimport adafruit_mlx90640\n\nsensorout = pygame.Surface((32, 24))\n# initialize the sensor\nmlx = adafruit_mlx90640.MLX90640(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90640/examples/mlx90640_camtest.py",
      "library": "mlx90640",
      "type": "example",
      "file_name": "mlx90640_camtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import argparse\nimport math\nimport os\nimport time\nimport board\nimport busio\nimport pygame\nfrom PIL import Image\nimport adafruit_mlx90640\n\n# initialize the sensor\nmlx = adafruit_mlx90640.MLX90640(i2c)\nmlx.refresh_rate = adafruit_mlx90640.RefreshRate.REFRESH_32_HZ",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90640/examples/mlx90640_camtest.py",
      "library": "mlx90640",
      "type": "example",
      "file_name": "mlx90640_camtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_wiznet5k.adafruit_wiznet5k_socketpool as socketpool\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\n# For Adafruit Ethernet FeatherWing\ncs = digitalio.DigitalInOut(board.D10)\n# For Particle Ethernet FeatherWing\n# cs = digitalio.DigitalInOut(board.D5)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_simpleserver.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_simpleserver.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_wiznet5k.adafruit_wiznet5k_socketpool as socketpool\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\n# For Adafruit Ethernet FeatherWing\ncs = digitalio.DigitalInOut(board.D10)\n# For Particle Ethernet FeatherWing\n# cs = digitalio.DigitalInOut(board.D5)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialize ethernet interface\neth = WIZNET5K(spi_bus, cs, is_dhcp=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_simpleserver.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_simpleserver.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_stspin\n\nimport adafruit_stspin\nSTEPS_PER_REVOLUTION = 200\nDIR_PIN = board.D5\nSTEP_PIN = board.D6\n# Create stepper object with full pin configuration\n# Defaults to 1/16 microsteps",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/stspin/examples/stspin_simpletest.py",
      "library": "stspin",
      "type": "example",
      "file_name": "stspin_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_stspin\n\nimport adafruit_stspin\nSTEPS_PER_REVOLUTION = 200\nDIR_PIN = board.D5\nSTEP_PIN = board.D6\n# Create stepper object with full pin configuration\n# Defaults to 1/16 microsteps\nmotor = adafruit_stspin.STSPIN(STEP_PIN, DIR_PIN, STEPS_PER_REVOLUTION)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/stspin/examples/stspin_simpletest.py",
      "library": "stspin",
      "type": "example",
      "file_name": "stspin_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_stspin\n\nDIR_PIN = board.D5\nSTEP_PIN = board.D6\n# Create stepper object with full pin configuration\n# Defaults to 1/16 microsteps\nmotor = adafruit_stspin.STSPIN(STEP_PIN, DIR_PIN, STEPS_PER_REVOLUTION)\n# Set the speed to 60 RPM\nmotor.speed = 60",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/stspin/examples/stspin_simpletest.py",
      "library": "stspin",
      "type": "example",
      "file_name": "stspin_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom rainbowio import colorwheel\nimport adafruit_is31fl3741\nfrom adafruit_is31fl3741.adafruit_rgbmatrixqt import Adafruit_RGBMatrixQT\n\nimport adafruit_is31fl3741\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nis31 = Adafruit_RGBMatrixQT(i2c, allocate=adafruit_is31fl3741.PREFER_BUFFER)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3741/examples/is31fl3741_rgbswirl.py",
      "library": "is31fl3741",
      "type": "example",
      "file_name": "is31fl3741_rgbswirl.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom rainbowio import colorwheel\nimport adafruit_is31fl3741\nfrom adafruit_is31fl3741.adafruit_rgbmatrixqt import Adafruit_RGBMatrixQT\n\nimport adafruit_is31fl3741\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nis31 = Adafruit_RGBMatrixQT(i2c, allocate=adafruit_is31fl3741.PREFER_BUFFER)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3741/examples/is31fl3741_rgbswirl.py",
      "library": "is31fl3741",
      "type": "example",
      "file_name": "is31fl3741_rgbswirl.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nfrom rainbowio import colorwheel\n\nimport adafruit_is31fl3741\nfrom adafruit_is31fl3741.adafruit_rgbmatrixqt import Adafruit_RGBMatrixQT\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nis31 = Adafruit_RGBMatrixQT(i2c, allocate=adafruit_is31fl3741.PREFER_BUFFER)\nis31.set_led_scaling(0xFF)\nis31.global_current = 0xFF\n# print(\"Global current is: \", is31.global_current)\nis31.enable = True\n# print(\"Enabled? \", is31.enable)\n\nwheeloffset = 0\nwhile True:\n    for y in range(9):\n        for x in range(13):\n            is31.pixel(x, y, colorwheel((y * 13 + x) * 2 + wheeloffset))\n    wheeloffset += 1\n    is31.show()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3741/examples/is31fl3741_rgbswirl.py",
      "library": "is31fl3741",
      "type": "example",
      "file_name": "is31fl3741_rgbswirl.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import busio\nfrom board import SCL, SDA\nimport adafruit_ssd1306\n\n# Import the SSD1306 module.\nimport adafruit_ssd1306\n# Create the I2C interface.\ni2c = busio.I2C(SCL, SDA)\n# Create the SSD1306 OLED class.\n# The first two parameters are the pixel width and pixel height.  Change these\n# to the right size for your display!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_clear.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_clear.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import busio\nfrom board import SCL, SDA\nimport adafruit_ssd1306\n\ni2c = busio.I2C(SCL, SDA)\n# Create the SSD1306 OLED class.\n# The first two parameters are the pixel width and pixel height.  Change these\n# to the right size for your display!\ndisplay = adafruit_ssd1306.SSD1306_I2C(128, 32, i2c)\n# Alternatively you can change the I2C address of the device with an addr parameter:\n# display = adafruit_ssd1306.SSD1306_I2C(128, 32, i2c, addr=0x31)\n# Clear the display.  Always call show after changing pixels to make the display",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_clear.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_clear.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Tony DiCola\n# SPDX-License-Identifier: CC0-1.0\n\n# Basic example of clearing and drawing pixels on a SSD1306 OLED display.\n# This example and library is meant to work with Adafruit CircuitPython API.\n\n# Import all board pins.\nimport busio\nfrom board import SCL, SDA\n\n# Import the SSD1306 module.\nimport adafruit_ssd1306\n\n# Create the I2C interface.\ni2c = busio.I2C(SCL, SDA)\n\n# Create the SSD1306 OLED class.\n# The first two parameters are the pixel width and pixel height.  Change these\n# to the right size for your display!\ndisplay = adafruit_ssd1306.SSD1306_I2C(128, 32, i2c)\n# Alternatively you can change the I2C address of the device with an addr parameter:\n# display = adafruit_ssd1306.SSD1306_I2C(128, 32, i2c, addr=0x31)\n\n# Clear the display.  Always call show after changing pixels to make the display\n# update visible!\ndisplay.fill(0)\ndisplay.show()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_clear.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_clear.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport rtc\nimport adafruit_gps\n\nimport busio\nimport rtc\nimport adafruit_gps\nuart = busio.UART(board.TX, board.RX, baudrate=9600, timeout=10)\n# i2c = busio.I2C(board.SCL, board.SDA)\ngps = adafruit_gps.GPS(uart, debug=False)\n# gps = adafruit_gps.GPS_GtopI2C(i2c, debug=False)  # Use I2C interface",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/gps/examples/gps_time_source.py",
      "library": "gps",
      "type": "example",
      "file_name": "gps_time_source.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport rtc\nimport adafruit_gps\n\nimport adafruit_gps\nuart = busio.UART(board.TX, board.RX, baudrate=9600, timeout=10)\n# i2c = busio.I2C(board.SCL, board.SDA)\ngps = adafruit_gps.GPS(uart, debug=False)\n# gps = adafruit_gps.GPS_GtopI2C(i2c, debug=False)  # Use I2C interface",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/gps/examples/gps_time_source.py",
      "library": "gps",
      "type": "example",
      "file_name": "gps_time_source.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport rtc\nimport adafruit_gps\n\ndef _format_datetime(datetime):\n    date_part = f'{datetime.tm_mon:02}/{datetime.tm_mday:02}/{datetime.tm_year}'\n    time_part = f'{datetime.tm_hour:02}:{datetime.tm_min:02}:{datetime.tm_sec:02}'\n    return f'{date_part} {time_part}'\n\n# Usage example:\n            continue\n        # Time & date from GPS informations\n        print(f\"Fix timestamp: {_format_datetime(gps.timestamp_utc)}\")\n\n        # Time & date from internal RTC",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/gps/examples/gps_time_source.py",
      "library": "gps",
      "type": "example",
      "file_name": "gps_time_source.py",
      "chunk_type": "function",
      "function_name": "_format_datetime"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport fourwire\nfrom adafruit_ili9341 import ILI9341\nfrom adafruit_ov7670 import OV7670, OV7670_NIGHT_MODE_2, OV7670_SIZE_DIV2, OV7670_TEST_PATTERN_COLOR_BAR\n\n# Release any resources currently in use for the displays\nspi = busio.SPI(MOSI=board.LCD_MOSI, clock=board.LCD_CLK)\ndisplay_bus = fourwire.FourWire(\n    spi, command=board.LCD_D_C, chip_select=board.LCD_CS, reset=board.LCD_RST",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov7670/examples/ov7670_displayio_kaluga1_3_ili9341.py",
      "library": "ov7670",
      "type": "example",
      "file_name": "ov7670_displayio_kaluga1_3_ili9341.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport fourwire\nfrom adafruit_ili9341 import ILI9341\nfrom adafruit_ov7670 import OV7670, OV7670_NIGHT_MODE_2, OV7670_SIZE_DIV2, OV7670_TEST_PATTERN_COLOR_BAR\n\ndisplay_bus = fourwire.FourWire(spi, command=board.LCD_D_C, chip_select=board.LCD_CS, reset=board.LCD_RST)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov7670/examples/ov7670_displayio_kaluga1_3_ili9341.py",
      "library": "ov7670",
      "type": "example",
      "file_name": "ov7670_displayio_kaluga1_3_ili9341.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport fourwire\nfrom adafruit_ili9341 import ILI9341\nfrom adafruit_ov7670 import OV7670, OV7670_NIGHT_MODE_2, OV7670_SIZE_DIV2, OV7670_TEST_PATTERN_COLOR_BAR\n\ndisplay_bus = fourwire.FourWire(\n    spi, command=board.LCD_D_C, chip_select=board.LCD_CS, reset=board.LCD_RST\ndisplay = ILI9341(display_bus, width=320, height=240)\nbus = busio.I2C(scl=board.CAMERA_SIOC, sda=board.CAMERA_SIOD)\ncam = OV7670(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov7670/examples/ov7670_displayio_kaluga1_3_ili9341.py",
      "library": "ov7670",
      "type": "example",
      "file_name": "ov7670_displayio_kaluga1_3_ili9341.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport fourwire\nfrom adafruit_ili9341 import ILI9341\nfrom adafruit_ov7670 import OV7670, OV7670_NIGHT_MODE_2, OV7670_SIZE_DIV2, OV7670_TEST_PATTERN_COLOR_BAR\n\ncam = OV7670(bus, data_pins=board.CAMERA_DATA, clock=board.CAMERA_PCLK, vsync=board.CAMERA_VSYNC, href=board.CAMERA_HREF, mclk=board.CAMERA_XCLK, mclk_frequency=20000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov7670/examples/ov7670_displayio_kaluga1_3_ili9341.py",
      "library": "ov7670",
      "type": "example",
      "file_name": "ov7670_displayio_kaluga1_3_ili9341.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_apds9960.apds9960 import APDS9960\n\nimport board\nimport digitalio\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nint_pin = digitalio.DigitalInOut(board.D5)\nint_pin.switch_to_input(pull=digitalio.Pull.UP)\napds = APDS9960(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/apds9960/examples/apds9960_proximity_simpletest.py",
      "library": "apds9960",
      "type": "example",
      "file_name": "apds9960_proximity_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_apds9960.apds9960 import APDS9960\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nint_pin = digitalio.DigitalInOut(board.D5)\nint_pin.switch_to_input(pull=digitalio.Pull.UP)\napds = APDS9960(i2c)\n# set the interrupt threshold to fire when proximity reading goes above 175",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/apds9960/examples/apds9960_proximity_simpletest.py",
      "library": "apds9960",
      "type": "example",
      "file_name": "apds9960_proximity_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport digitalio\n\nfrom adafruit_apds9960.apds9960 import APDS9960\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nint_pin = digitalio.DigitalInOut(board.D5)\nint_pin.switch_to_input(pull=digitalio.Pull.UP)\napds = APDS9960(i2c)\n\n# set the interrupt threshold to fire when proximity reading goes above 175\napds.proximity_interrupt_threshold = (0, 175)\n\n# assert the interrupt pin when the proximity interrupt is triggered\napds.enable_proximity_interrupt = True\n\n# enable the sensor's proximity engine\napds.enable_proximity = True\n\nwhile True:\n    # print the proximity reading when the interrupt pin goes low\n    if not int_pin.value:\n        print(apds.proximity)\n\n        # clear the interrupt\n        apds.clear_interrupt()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/apds9960/examples/apds9960_proximity_simpletest.py",
      "library": "apds9960",
      "type": "example",
      "file_name": "apds9960_proximity_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport adafruit_ds3502\n\nimport board\nimport adafruit_ds3502\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nds3502 = adafruit_ds3502.DS3502(i2c)\n# As this code runs, measure the voltage between ground and the RW (wiper) pin",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds3502/examples/ds3502_blinka_simpletest.py",
      "library": "ds3502",
      "type": "example",
      "file_name": "ds3502_blinka_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport adafruit_ds3502\n\nimport adafruit_ds3502\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nds3502 = adafruit_ds3502.DS3502(i2c)\n# As this code runs, measure the voltage between ground and the RW (wiper) pin\n# with a multimeter. You should see the voltage change with each print statement.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds3502/examples/ds3502_blinka_simpletest.py",
      "library": "ds3502",
      "type": "example",
      "file_name": "ds3502_blinka_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nfrom time import sleep\n\nimport board\n\nimport adafruit_ds3502\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nds3502 = adafruit_ds3502.DS3502(i2c)\n\n# As this code runs, measure the voltage between ground and the RW (wiper) pin\n# with a multimeter. You should see the voltage change with each print statement.\nwhile True:\n    ds3502.wiper = 127\n    print(\"Wiper value set to 127\")\n    sleep(5.0)\n\n    ds3502.wiper = 0\n    print(\"Wiper value set to 0\")\n    sleep(5.0)\n\n    ds3502.wiper = 63\n    print(\"Wiper value set to 63\")\n    sleep(5.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds3502/examples/ds3502_blinka_simpletest.py",
      "library": "ds3502",
      "type": "example",
      "file_name": "ds3502_blinka_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_feeds.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feeds.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_feeds.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feeds.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_feeds.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feeds.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_feeds.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feeds.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_feeds.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feeds.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_feeds.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feeds.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_feeds.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feeds.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_feeds.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feeds.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import sys\nimport time\nimport board\nimport busio\nimport adafruit_ov5640\n\nimport busio\nimport adafruit_ov5640\nbus = busio.I2C(scl=board.CAMERA_SIOC, sda=board.CAMERA_SIOD)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_simpletest.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import sys\nimport time\nimport board\nimport busio\nimport adafruit_ov5640\n\ncam = adafruit_ov5640.OV5640(bus, data_pins=board.CAMERA_DATA, clock=board.CAMERA_PCLK, vsync=board.CAMERA_VSYNC, href=board.CAMERA_HREF, mclk=board.CAMERA_XCLK, size=adafruit_ov5640.OV5640_SIZE_QQVGA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_simpletest.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import sys\nimport time\nimport board\nimport busio\nimport adafruit_ov5640\n\ncam.colorspace = adafruit_ov5640.OV5640_COLOR_YUV\ncam.flip_y = True\ncam.flip_x = True\ncam.test_pattern = False",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_simpletest.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ahtx0\n\nimport board\nimport adafruit_ahtx0\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_ahtx0.AHTx0(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ahtx0/examples/ahtx0_simpletest.py",
      "library": "ahtx0",
      "type": "example",
      "file_name": "ahtx0_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ahtx0\n\nimport adafruit_ahtx0\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_ahtx0.AHTx0(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ahtx0/examples/ahtx0_simpletest.py",
      "library": "ahtx0",
      "type": "example",
      "file_name": "ahtx0_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nBasic `AHTx0` example test\n\"\"\"\n\nimport time\n\nimport board\n\nimport adafruit_ahtx0\n\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_ahtx0.AHTx0(i2c)\n\nwhile True:\n    print(\"\\nTemperature: %0.1f C\" % sensor.temperature)\n    print(\"Humidity: %0.1f %%\" % sensor.relative_humidity)\n    time.sleep(2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ahtx0/examples/ahtx0_simpletest.py",
      "library": "ahtx0",
      "type": "example",
      "file_name": "ahtx0_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nfrom adafruit_display_text import label\nfrom adafruit_bitmap_font import bitmap_font\n\n# use built in display (MagTag, PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\n# try uncommenting different font files if you like\nfont_file = \"fonts/LeagueSpartan-Bold-16.bdf\"\n# font_file = \"fonts/Junction-regular-24.pcf\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/bitmap-font/examples/bitmap_font_label_simpletest.py",
      "library": "bitmap-font",
      "type": "example",
      "file_name": "bitmap_font_label_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport displayio\nimport framebufferio\nimport rgbmatrix\nfrom adafruit_progressbar.horizontalprogressbar import HorizontalFillDirection, HorizontalProgressBar\nfrom adafruit_progressbar.verticalprogressbar import VerticalFillDirection, VerticalProgressBar\n\nmatrix = rgbmatrix.RGBMatrix(width=64, height=32, bit_depth=3, rgb_pins=[board.MTX_R1, board.MTX_G1, board.MTX_B1, board.MTX_R2, board.MTX_G2, board.MTX_B2], addr_pins=[board.MTX_ADDRA, board.MTX_ADDRB, board.MTX_ADDRC, board.MTX_ADDRD], clock_pin=board.MTX_CLK, latch_pin=board.MTX_LAT, output_enable_pin=board.MTX_OE)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/progressbar/examples/progressbar_matrixportal.py",
      "library": "progressbar",
      "type": "example",
      "file_name": "progressbar_matrixportal.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport displayio\nimport framebufferio\nimport rgbmatrix\nfrom adafruit_progressbar.horizontalprogressbar import HorizontalFillDirection, HorizontalProgressBar\nfrom adafruit_progressbar.verticalprogressbar import VerticalFillDirection, VerticalProgressBar\n\nprogress_bar_value = 0.0\nprogress_bar_incr = 3.0\nbutton1 = digitalio.DigitalInOut(board.BUTTON_UP)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/progressbar/examples/progressbar_matrixportal.py",
      "library": "progressbar",
      "type": "example",
      "file_name": "progressbar_matrixportal.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport displayio\nimport framebufferio\nimport rgbmatrix\nfrom adafruit_progressbar.horizontalprogressbar import HorizontalFillDirection, HorizontalProgressBar\nfrom adafruit_progressbar.verticalprogressbar import VerticalFillDirection, VerticalProgressBar\n\nprogress_bar_value = 0.0\nprogress_bar_incr = 3.0\nbutton1 = digitalio.DigitalInOut(board.BUTTON_UP)\nbutton2 = digitalio.DigitalInOut(board.BUTTON_DOWN)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/progressbar/examples/progressbar_matrixportal.py",
      "library": "progressbar",
      "type": "example",
      "file_name": "progressbar_matrixportal.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nfrom adafruit_ble_adafruit.adafruit_service import AdafruitServerAdvertisement\nfrom adafruit_ble_adafruit.temperature_service import TemperatureService\n\n# PyLint can't find BLERadio for some reason so special case it here.\nble = adafruit_ble.BLERadio()\nconnection = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_adafruit/examples/ble_adafruit_simpletest_client.py",
      "library": "ble_adafruit",
      "type": "example",
      "file_name": "ble_adafruit_simpletest_client.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport adafruit_ble\n\nfrom adafruit_ble_adafruit.adafruit_service import AdafruitServerAdvertisement\nfrom adafruit_ble_adafruit.temperature_service import TemperatureService\n\n# PyLint can't find BLERadio for some reason so special case it here.\nble = adafruit_ble.BLERadio()\n\nconnection = None\n\nwhile True:\n    print(\"Scanning for an Adafruit Server advertisement...\")\n    for adv in ble.start_scan(AdafruitServerAdvertisement, timeout=5):\n        connection = ble.connect(adv)\n        print(\"Connected\")\n        break\n\n    # Stop scanning whether or not we are connected.\n    ble.stop_scan()\n\n    if connection and connection.connected:\n        temp_service = connection[TemperatureService]\n        while connection.connected:\n            print(\"Temperature:\", temp_service.temperature)\n            time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_adafruit/examples/ble_adafruit_simpletest_client.py",
      "library": "ble_adafruit",
      "type": "example",
      "file_name": "ble_adafruit_simpletest_client.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_miniesptool\n\ntx = getattr(board, 'ESP_TX', board.TX)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniesptool/examples/miniesptool_simpletest.py",
      "library": "miniesptool",
      "type": "example",
      "file_name": "miniesptool_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_miniesptool\n\nrx = getattr(board, 'ESP_RX', board.RX)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniesptool/examples/miniesptool_simpletest.py",
      "library": "miniesptool",
      "type": "example",
      "file_name": "miniesptool_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_miniesptool\n\nresetpin = getattr(board, 'ESP_RESET', board.D12)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniesptool/examples/miniesptool_simpletest.py",
      "library": "miniesptool",
      "type": "example",
      "file_name": "miniesptool_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_miniesptool\n\ngpio0pin = getattr(board, 'ESP_GPIO0', board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniesptool/examples/miniesptool_simpletest.py",
      "library": "miniesptool",
      "type": "example",
      "file_name": "miniesptool_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_miniesptool\n\ntx = getattr(board, \"ESP_TX\", board.TX)\nrx = getattr(board, \"ESP_RX\", board.RX)\nresetpin = getattr(board, \"ESP_RESET\", board.D12)\ngpio0pin = getattr(board, \"ESP_GPIO0\", board.D10)\nuart = busio.UART(tx, rx, baudrate=115200, timeout=1)\nesptool = adafruit_miniesptool.miniesptool(\n    uart, DigitalInOut(gpio0pin), DigitalInOut(resetpin), flashsize=4 * 1024 * 1024",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniesptool/examples/miniesptool_simpletest.py",
      "library": "miniesptool",
      "type": "example",
      "file_name": "miniesptool_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_miniesptool\n\nesptool = adafruit_miniesptool.miniesptool(uart, DigitalInOut(gpio0pin), DigitalInOut(resetpin), flashsize=4 * 1024 * 1024)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniesptool/examples/miniesptool_simpletest.py",
      "library": "miniesptool",
      "type": "example",
      "file_name": "miniesptool_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport traceback\nimport adafruit_pycamera\n\nimport time\nimport traceback\nimport adafruit_pycamera\npycam = adafruit_pycamera.PyCamera()\npycam.mode = 0  # only mode 0 (JPEG) will work in this example\n# User settings - try changing these:\npycam.resolution = 1  # 0-12 preset resolutions:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pycamera/examples/overlay/code_simple.py",
      "library": "pycamera",
      "type": "example",
      "file_name": "code_simple.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_metadata.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_metadata.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_metadata.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_metadata.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_metadata.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_metadata.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_metadata.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_metadata.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_metadata.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_metadata.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_metadata.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_metadata.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_metadata.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_metadata.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_metadata.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_metadata.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ltr329_ltr303 as adafruit_ltr303\n\nimport board\nimport adafruit_ltr329_ltr303 as adafruit_ltr303\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ltr329_ltr303/examples/ltr303_advancedtest.py",
      "library": "ltr329_ltr303",
      "type": "example",
      "file_name": "ltr303_advancedtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ltr329_ltr303 as adafruit_ltr303\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nltr303 = adafruit_ltr303.LTR303(i2c)\n# Can set the ALS light gain, can be: 1, 2, 4, 8, 48 or 96 times\n# to range from 1~64 kLux to 0.01~600 Lux\nltr303.als_gain = 96",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ltr329_ltr303/examples/ltr303_advancedtest.py",
      "library": "ltr329_ltr303",
      "type": "example",
      "file_name": "ltr303_advancedtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_htu31d\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nhtu = adafruit_htu31d.HTU31D(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/htu31d/examples/htu31d_displayio_simpletest.py",
      "library": "htu31d",
      "type": "example",
      "file_name": "htu31d_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_htu31d\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nhtu = adafruit_htu31d.HTU31D(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/htu31d/examples/htu31d_displayio_simpletest.py",
      "library": "htu31d",
      "type": "example",
      "file_name": "htu31d_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_htu31d\n\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/htu31d/examples/htu31d_displayio_simpletest.py",
      "library": "htu31d",
      "type": "example",
      "file_name": "htu31d_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_htu31d\n\n# add the label(s) to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/htu31d/examples/htu31d_displayio_simpletest.py",
      "library": "htu31d",
      "type": "example",
      "file_name": "htu31d_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_touchscreen\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\n# built-in display\ndisplay = board.DISPLAY\n# ------------ Touchscreen setup --------------- #\n# See: https://learn.adafruit.com/making-a-pyportal-user-interface-displayio/display\ndisplay = board.DISPLAY  # create the display object",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_tab_layout_touchtest.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_tab_layout_touchtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_touchscreen\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\n# built-in display\ndisplay = board.DISPLAY\n# ------------ Touchscreen setup --------------- #\n# See: https://learn.adafruit.com/making-a-pyportal-user-interface-displayio/display\ndisplay = board.DISPLAY  # create the display object",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_tab_layout_touchtest.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_tab_layout_touchtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_touchscreen\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\nts = adafruit_touchscreen.Touchscreen(board.TOUCH_XL, board.TOUCH_XR, board.TOUCH_YD, board.TOUCH_YU, calibration=((5200, 59000), (5800, 57000)), size=(screen_width, screen_height))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_tab_layout_touchtest.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_tab_layout_touchtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_touchscreen\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_shapes.triangle import Triangle\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_displayio_layout.layouts.tab_layout import TabLayout\n\ntest_page_layout = TabLayout(x=0, y=0, display=board.DISPLAY, tab_text_scale=2, custom_font=font, inactive_tab_spritesheet='bmps/inactive_tab_sprite.bmp', showing_tab_spritesheet='bmps/active_tab_sprite.bmp', showing_tab_text_color=43609, inactive_tab_text_color=15658734, inactive_tab_transparent_indexes=(0, 1), showing_tab_transparent_indexes=(0, 1), tab_count=4)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_tab_layout_touchtest.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_tab_layout_touchtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adt7410\nimport board\n\nimport time\nimport adt7410\nimport board\ni2c = board.I2C()\nadt = adt7410.ADT7410(i2c)\nadt.resolution_mode = adt7410.HIGH_RESOLUTION",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adt7410/examples/adt7410_resolution_mode.py",
      "library": "adt7410",
      "type": "example",
      "file_name": "adt7410_resolution_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2023 Jose D. Montoya\n#\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport adt7410\nimport board\n\ni2c = board.I2C()\nadt = adt7410.ADT7410(i2c)\n\nadt.resolution_mode = adt7410.HIGH_RESOLUTION\n\nwhile True:\n    for resolution_mode in adt7410.resolution_mode_values:\n        print(\"Current Resolution mode setting: \", adt.resolution_mode)\n        for _ in range(10):\n            temp = adt.temperature\n            print(f\"Temperature :{temp:.2f}C\")\n            time.sleep(0.5)\n        adt.resolution_mode = resolution_mode\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adt7410/examples/adt7410_resolution_mode.py",
      "library": "adt7410",
      "type": "example",
      "file_name": "adt7410_resolution_mode.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_max31856\n\nimport digitalio\nimport adafruit_max31856\n# Create sensor object, communicating over the board's default SPI bus\nspi = board.SPI()\n# allocate a CS pin and set the direction\ncs = digitalio.DigitalInOut(board.D5)\ncs.direction = digitalio.Direction.OUTPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max31856/examples/max31856_simpletest.py",
      "library": "max31856",
      "type": "example",
      "file_name": "max31856_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_max31856\n\n# Create sensor object, communicating over the board's default SPI bus\nspi = board.SPI()\n# allocate a CS pin and set the direction\ncs = digitalio.DigitalInOut(board.D5)\ncs.direction = digitalio.Direction.OUTPUT\n# create a thermocouple object with the above\nthermocouple = adafruit_max31856.MAX31856(spi, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max31856/examples/max31856_simpletest.py",
      "library": "max31856",
      "type": "example",
      "file_name": "max31856_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_max31856\n\n# Create sensor object, communicating over the board's default SPI bus\nspi = board.SPI()\n# allocate a CS pin and set the direction\ncs = digitalio.DigitalInOut(board.D5)\ncs.direction = digitalio.Direction.OUTPUT\n# create a thermocouple object with the above\nthermocouple = adafruit_max31856.MAX31856(spi, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max31856/examples/max31856_simpletest.py",
      "library": "max31856",
      "type": "example",
      "file_name": "max31856_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_max31856\n\n# allocate a CS pin and set the direction\ncs = digitalio.DigitalInOut(board.D5)\ncs.direction = digitalio.Direction.OUTPUT\n# create a thermocouple object with the above\nthermocouple = adafruit_max31856.MAX31856(spi, cs)\n# print the temperature!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max31856/examples/max31856_simpletest.py",
      "library": "max31856",
      "type": "example",
      "file_name": "max31856_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport digitalio\n\nimport adafruit_max31856\n\n# Create sensor object, communicating over the board's default SPI bus\nspi = board.SPI()\n\n# allocate a CS pin and set the direction\ncs = digitalio.DigitalInOut(board.D5)\ncs.direction = digitalio.Direction.OUTPUT\n\n# create a thermocouple object with the above\nthermocouple = adafruit_max31856.MAX31856(spi, cs)\n\n# print the temperature!\nprint(thermocouple.temperature)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max31856/examples/max31856_simpletest.py",
      "library": "max31856",
      "type": "example",
      "file_name": "max31856_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\nimport digitalio\nimport adafruit_rfm9x\n# Button A\nbtnA = digitalio.DigitalInOut(board.D5)\nbtnA.direction = digitalio.Direction.INPUT\nbtnA.pull = digitalio.Pull.UP\n# Button B",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1_bonnet.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\nimport adafruit_rfm9x\n# Button A\nbtnA = digitalio.DigitalInOut(board.D5)\nbtnA.direction = digitalio.Direction.INPUT\nbtnA.pull = digitalio.Pull.UP\n# Button B\nbtnB = digitalio.DigitalInOut(board.D6)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1_bonnet.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\nimport adafruit_rfm9x\n# Button A\nbtnA = digitalio.DigitalInOut(board.D5)\nbtnA.direction = digitalio.Direction.INPUT\nbtnA.pull = digitalio.Pull.UP\n# Button B\nbtnB = digitalio.DigitalInOut(board.D6)\nbtnB.direction = digitalio.Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1_bonnet.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\nbtnA = digitalio.DigitalInOut(board.D5)\nbtnA.direction = digitalio.Direction.INPUT\nbtnA.pull = digitalio.Pull.UP\n# Button B\nbtnB = digitalio.DigitalInOut(board.D6)\nbtnB.direction = digitalio.Direction.INPUT\nbtnB.pull = digitalio.Pull.UP\n# Button C",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1_bonnet.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\nbtnA.direction = digitalio.Direction.INPUT\nbtnA.pull = digitalio.Pull.UP\n# Button B\nbtnB = digitalio.DigitalInOut(board.D6)\nbtnB.direction = digitalio.Direction.INPUT\nbtnB.pull = digitalio.Pull.UP\n# Button C\nbtnC = digitalio.DigitalInOut(board.D12)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1_bonnet.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\nbtnA.pull = digitalio.Pull.UP\n# Button B\nbtnB = digitalio.DigitalInOut(board.D6)\nbtnB.direction = digitalio.Direction.INPUT\nbtnB.pull = digitalio.Pull.UP\n# Button C\nbtnC = digitalio.DigitalInOut(board.D12)\nbtnC.direction = digitalio.Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1_bonnet.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\nbtnB = digitalio.DigitalInOut(board.D6)\nbtnB.direction = digitalio.Direction.INPUT\nbtnB.pull = digitalio.Pull.UP\n# Button C\nbtnC = digitalio.DigitalInOut(board.D12)\nbtnC.direction = digitalio.Direction.INPUT\nbtnC.pull = digitalio.Pull.UP\n# Create the I2C interface.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1_bonnet.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\nbtnB.direction = digitalio.Direction.INPUT\nbtnB.pull = digitalio.Pull.UP\n# Button C\nbtnC = digitalio.DigitalInOut(board.D12)\nbtnC.direction = digitalio.Direction.INPUT\nbtnC.pull = digitalio.Pull.UP\n# Create the I2C interface.\ni2c = busio.I2C(board.SCL, board.SDA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1_bonnet.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\nbtnB.pull = digitalio.Pull.UP\n# Button C\nbtnC = digitalio.DigitalInOut(board.D12)\nbtnC.direction = digitalio.Direction.INPUT\nbtnC.pull = digitalio.Pull.UP\n# Create the I2C interface.\ni2c = busio.I2C(board.SCL, board.SDA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1_bonnet.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\nbtnC = digitalio.DigitalInOut(board.D12)\nbtnC.direction = digitalio.Direction.INPUT\nbtnC.pull = digitalio.Pull.UP\n# Create the I2C interface.\ni2c = busio.I2C(board.SCL, board.SDA)\n# 128x32 OLED Display\nreset_pin = digitalio.DigitalInOut(board.D4)\ndisplay = adafruit_ssd1306.SSD1306_I2C(128, 32, i2c, reset=reset_pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1_bonnet.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# Create the I2C interface.\ni2c = busio.I2C(board.SCL, board.SDA)\n# 128x32 OLED Display\nreset_pin = digitalio.DigitalInOut(board.D4)\ndisplay = adafruit_ssd1306.SSD1306_I2C(128, 32, i2c, reset=reset_pin)\n# Clear the display.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1_bonnet.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# Create the I2C interface.\ni2c = busio.I2C(board.SCL, board.SDA)\n# 128x32 OLED Display\nreset_pin = digitalio.DigitalInOut(board.D4)\ndisplay = adafruit_ssd1306.SSD1306_I2C(128, 32, i2c, reset=reset_pin)\n# Clear the display.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1_bonnet.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1_bonnet.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1_bonnet.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\n# Attempt to set up the rfm9x Module",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1_bonnet.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\nTEXT_SCALE = 3\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ntft_rst = board.D9",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_170x320_1.9_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_170x320_1.9_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ntft_rst = board.D9\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=tft_rst)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_170x320_1.9_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_170x320_1.9_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ntft_rst = board.D9\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=tft_rst)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_170x320_1.9_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_170x320_1.9_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ntft_rst = board.D9\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=tft_rst)\ndisplay = ST7789(display_bus, width=320, height=170, colstart=35, rotation=90)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_170x320_1.9_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_170x320_1.9_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_floppy\n\nfloppy = adafruit_floppy.MFMFloppy(densitypin=board.A1, indexpin=D25, selectpin=board.A0, motorpin=board.A2, directionpin=board.A3, steppin=D24, track0pin=board.D10, protectpin=board.D11, rddatapin=board.D9, sidepin=board.D6, readypin=board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/floppy/examples/floppy_simpletest.py",
      "library": "floppy",
      "type": "example",
      "file_name": "floppy_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lis2mdl\n\nimport board\nimport adafruit_lis2mdl\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nlis = adafruit_lis2mdl.LIS2MDL(i2c)\nlis.interrupt_threshold = 80\nlis.interrupt_enabled = True",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis2mdl/examples/lis2mdl_interrupt.py",
      "library": "lis2mdl",
      "type": "example",
      "file_name": "lis2mdl_interrupt.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lis2mdl\n\nimport adafruit_lis2mdl\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nlis = adafruit_lis2mdl.LIS2MDL(i2c)\nlis.interrupt_threshold = 80\nlis.interrupt_enabled = True",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis2mdl/examples/lis2mdl_interrupt.py",
      "library": "lis2mdl",
      "type": "example",
      "file_name": "lis2mdl_interrupt.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_lis2mdl\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nlis = adafruit_lis2mdl.LIS2MDL(i2c)\nlis.interrupt_threshold = 80\nlis.interrupt_enabled = True\n\nwhile True:\n    x_hi, y_hi, z_hi, x_lo, y_lo, z_lo, int_triggered = lis.faults\n\n    print(lis.magnetic)\n    print(f\"Xhi:{x_hi}\\tYhi:{y_hi}\\tZhi:{z_hi}\")\n    print(f\"Xlo:{x_lo}\\tYlo:{y_lo}\\tZlo:{z_lo}\")\n    print(f\"Int triggered: {int_triggered}\")\n    print()\n\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis2mdl/examples/lis2mdl_interrupt.py",
      "library": "lis2mdl",
      "type": "example",
      "file_name": "lis2mdl_interrupt.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport adafruit_ssd1306\n\nimport board\nimport adafruit_ssd1306\n# Create the I2C bus interface.\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = busio.I2C(board.GP1, board.GP0)    # Pi Pico RP2040\n# Create the SSD1306 OLED class.\ndisplay_width = 128",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_simpletest.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_ssd1306\n\n# i2c = busio.I2C(board.GP1, board.GP0)    # Pi Pico RP2040\n# Create the SSD1306 OLED class.\ndisplay_width = 128\ndisplay_height = 32\ndisplay = adafruit_ssd1306.SSD1306_I2C(display_width, display_height, i2c)\n# You can change the I2C address with an addr parameter:\n# display = adafruit_ssd1306.SSD1306_I2C(display_width, display_height, i2c, addr=0x31)\n# fills display with black pixels clearing it",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_simpletest.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom adafruit_tla202x import TLA2024, Mux\n\nimport board\nimport busio\ni2c = busio.I2C(board.SCL, board.SDA)\ntla = TLA2024(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tla202x/examples/tla202x_mux_test.py",
      "library": "tla202x",
      "type": "example",
      "file_name": "tla202x_mux_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_randomizer.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_randomizer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_randomizer.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_randomizer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_randomizer.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_randomizer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_randomizer.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_randomizer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_randomizer.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_randomizer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_randomizer.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_randomizer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_randomizer.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_randomizer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_randomizer.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_randomizer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import turtle\n\ndef getMid(p1, p2):\n    return ((p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2)\n\n# Usage example:\n    if depth > 0:\n        triangle(\n            [points[0], getMid(points[0], points[1]), getMid(points[0], points[2])],\n            depth - 1,\n        )",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_sierpinski.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_sierpinski.py",
      "chunk_type": "function",
      "function_name": "getMid"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import turtle\n\ndef triangle(points, depth):\n    turtle.penup()\n    turtle.goto(points[0][0], points[0][1])\n    turtle.pendown()\n    turtle.goto(points[1][0], points[1][1])\n    turtle.goto(points[2][0], points[2][1])\n    turtle.goto(points[0][0], points[0][1])\n    if depth > 0:\n        triangle([points[0], getMid(points[0], points[1]), getMid(points[0], points[2])], depth - 1)\n        triangle([points[1], getMid(points[0], points[1]), getMid(points[1], points[2])], depth - 1)\n        triangle([points[2], getMid(points[2], points[1]), getMid(points[0], points[2])], depth - 1)\n\n# Usage example:\n\n    if depth > 0:\n        triangle(\n            [points[0], getMid(points[0], points[1]), getMid(points[0], points[2])],\n            depth - 1,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_sierpinski.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_sierpinski.py",
      "chunk_type": "function",
      "function_name": "triangle"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import turtle\n\nturtle = turtle(board.DISPLAY)\nbig = min(board.DISPLAY.width / 2, board.DISPLAY.height / 2)\nlittle = big / 1.4\nseed_points = [[-big, -little], [0, big], [big, -little]]  # size of triangle",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_sierpinski.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_sierpinski.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import turtle\n\nturtle = turtle(board.DISPLAY)\nbig = min(board.DISPLAY.width / 2, board.DISPLAY.height / 2)\nlittle = big / 1.4\nseed_points = [[-big, -little], [0, big], [big, -little]]  # size of triangle",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_sierpinski.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_sierpinski.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom cedargrove_nau7802 import NAU7802\n\nnau7802 = NAU7802(board.I2C(), address=42, active_channels=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/nau7802/examples/nau7802_simpletest.py",
      "library": "nau7802",
      "type": "example",
      "file_name": "nau7802_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom cedargrove_nau7802 import NAU7802\n\n# Initiate internal calibration for current channel.Use when scale is started,\na new channel is selected, or to adjust for measurement drift. Remove weight\nand tare from load cell before executing.\ndef zero_channel():\n    \"\"\"Initiate internal calibration for current channel.Use when scale is started,\n    a new channel is selected, or to adjust for measurement drift. Remove weight\n    and tare from load cell before executing.\"\"\"\n    print('channel {0:1d} calibrate.INTERNAL: {1:5s}'.format(nau7802.channel, str(nau7802.calibrate('INTERNAL'))))\n    print('channel {0:1d} calibrate.OFFSET:   {1:5s}'.format(nau7802.channel, str(nau7802.calibrate('OFFSET'))))\n    print(f'...channel {nau7802.channel:1d} zeroed')\n\n# Usage example:\n\nnau7802.channel = 1\nzero_channel()  # Calibrate and zero channel\nnau7802.channel = 2\nzero_channel()  # Calibrate and zero channel",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/nau7802/examples/nau7802_simpletest.py",
      "library": "nau7802",
      "type": "example",
      "file_name": "nau7802_simpletest.py",
      "chunk_type": "function",
      "function_name": "zero_channel"
    }
  },
  {
    "content": "import time\nimport board\nfrom cedargrove_nau7802 import NAU7802\n\n# Read and average consecutive raw sample values. Return average raw value.\ndef read_raw_value(samples=2):\n    \"\"\"Read and average consecutive raw sample values. Return average raw value.\"\"\"\n    sample_sum = 0\n    sample_count = samples\n    while sample_count > 0:\n        while not nau7802.available():\n            pass\n        sample_sum = sample_sum + nau7802.read()\n        sample_count -= 1\n    return int(sample_sum / samples)\n\n# Usage example:\n    print(\"=====\")\n    nau7802.channel = 1\n    value = read_raw_value()\n    print(f\"channel {nau7802.channel:1.0f} raw value: {value:7.0f}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/nau7802/examples/nau7802_simpletest.py",
      "library": "nau7802",
      "type": "example",
      "file_name": "nau7802_simpletest.py",
      "chunk_type": "function",
      "function_name": "read_raw_value"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\n# Get Adafruit IO keys, ensure these are setup in settings.toml\n# (visit io.adafruit.com if you need to create an account, or if you need your Adafruit IO key.)\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\ncs = DigitalInOut(board.D10)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_aio_post.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_aio_post.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\n# (visit io.adafruit.com if you need to create an account, or if you need your Adafruit IO key.)\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\ncs = DigitalInOut(board.D10)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)\n# Initialize a requests session",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_aio_post.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_aio_post.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(eth)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(eth)\nrequests = adafruit_requests.Session(pool, ssl_context)\ncounter = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_aio_post.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_aio_post.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(eth)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(eth)\nrequests = adafruit_requests.Session(pool, ssl_context)\ncounter = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_aio_post.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_aio_post.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(eth)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(eth)\nrequests = adafruit_requests.Session(pool, ssl_context)\ncounter = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_aio_post.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_aio_post.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_mcp9600\n\nimport board\nimport busio\nimport adafruit_mcp9600\ni2c = busio.I2C(board.SCL, board.SDA, frequency=100000)\nmcp = adafruit_mcp9600.MCP9600(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp9600/examples/mcp9600_simpletest.py",
      "library": "mcp9600",
      "type": "example",
      "file_name": "mcp9600_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_mcp9600\n\nimport busio\nimport adafruit_mcp9600\ni2c = busio.I2C(board.SCL, board.SDA, frequency=100000)\nmcp = adafruit_mcp9600.MCP9600(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp9600/examples/mcp9600_simpletest.py",
      "library": "mcp9600",
      "type": "example",
      "file_name": "mcp9600_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport busio\n\nimport adafruit_mcp9600\n\ni2c = busio.I2C(board.SCL, board.SDA, frequency=100000)\nmcp = adafruit_mcp9600.MCP9600(i2c)\n\nwhile True:\n    print((mcp.ambient_temperature, mcp.temperature, mcp.delta_temperature))\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp9600/examples/mcp9600_simpletest.py",
      "library": "mcp9600",
      "type": "example",
      "file_name": "mcp9600_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport adafruit_dotstar as dotstar\n\nimport board\nimport adafruit_dotstar as dotstar\n# On-board DotStar for boards including Gemma, Trinket, and ItsyBitsy\ndots = dotstar.DotStar(board.APA102_SCK, board.APA102_MOSI, 1, brightness=0.2)\n# Using a DotStar Digital LED Strip with 30 LEDs connected to hardware SPI\n# dots = dotstar.DotStar(board.SCK, board.MOSI, 30, brightness=0.2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dotstar/examples/dotstar_simpletest.py",
      "library": "dotstar",
      "type": "example",
      "file_name": "dotstar_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport adafruit_dotstar as dotstar\n\ndef random_color():\n    return random.randrange(0, 7) * 32\n\n# Usage example:\n    # Fill each dot with a random color\n    for dot in range(n_dots):\n        dots[dot] = (random_color(), random_color(), random_color())\n\n    time.sleep(0.25)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dotstar/examples/dotstar_simpletest.py",
      "library": "dotstar",
      "type": "example",
      "file_name": "dotstar_simpletest.py",
      "chunk_type": "function",
      "function_name": "random_color"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport random\nimport time\n\nimport board\n\nimport adafruit_dotstar as dotstar\n\n# On-board DotStar for boards including Gemma, Trinket, and ItsyBitsy\ndots = dotstar.DotStar(board.APA102_SCK, board.APA102_MOSI, 1, brightness=0.2)\n\n# Using a DotStar Digital LED Strip with 30 LEDs connected to hardware SPI\n# dots = dotstar.DotStar(board.SCK, board.MOSI, 30, brightness=0.2)\n\n# Using a DotStar Digital LED Strip with 30 LEDs connected to digital pins\n# dots = dotstar.DotStar(board.D6, board.D5, 30, brightness=0.2)\n\n\n# HELPERS\n# a random color 0 -> 192\ndef random_color():\n    return random.randrange(0, 7) * 32\n\n\n# MAIN LOOP\nn_dots = len(dots)\nwhile True:\n    # Fill each dot with a random color\n    for dot in range(n_dots):\n        dots[dot] = (random_color(), random_color(), random_color())\n\n    time.sleep(0.25)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dotstar/examples/dotstar_simpletest.py",
      "library": "dotstar",
      "type": "example",
      "file_name": "dotstar_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom adafruit_lis3mdl import LIS3MDL\n\nSAMPLE_SIZE = 2000\ni2c = busio.I2C(board.SCL, board.SDA)\nmagnetometer = LIS3MDL(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3mdl/examples/lis3mdl_calibrator.py",
      "library": "lis3mdl",
      "type": "example",
      "file_name": "lis3mdl_calibrator.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom adafruit_bme280 import basic as adafruit_bme280\n\nimport busio\n# Create sensor object, using the board's default I2C bus.\ni2c = busio.I2C(board.GP1, board.GP0)  # SCL, SDA\nbme280 = adafruit_bme280.Adafruit_BME280_I2C(i2c)\n# OR create sensor object, using the board's default SPI bus.\n# spi = busio.SPI(board.GP2, MISO=board.GP0, MOSI=board.GP3)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme280/examples/bme280_simpletest_pico.py",
      "library": "bme280",
      "type": "example",
      "file_name": "bme280_simpletest_pico.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom adafruit_bme280 import basic as adafruit_bme280\n\n# Create sensor object, using the board's default I2C bus.\ni2c = busio.I2C(board.GP1, board.GP0)  # SCL, SDA\nbme280 = adafruit_bme280.Adafruit_BME280_I2C(i2c)\n# OR create sensor object, using the board's default SPI bus.\n# spi = busio.SPI(board.GP2, MISO=board.GP0, MOSI=board.GP3)\n# bme_cs = digitalio.DigitalInOut(board.GP1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme280/examples/bme280_simpletest_pico.py",
      "library": "bme280",
      "type": "example",
      "file_name": "bme280_simpletest_pico.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport busio\n\nfrom adafruit_bme280 import basic as adafruit_bme280\n\n# Create sensor object, using the board's default I2C bus.\ni2c = busio.I2C(board.GP1, board.GP0)  # SCL, SDA\nbme280 = adafruit_bme280.Adafruit_BME280_I2C(i2c)\n\n# OR create sensor object, using the board's default SPI bus.\n# spi = busio.SPI(board.GP2, MISO=board.GP0, MOSI=board.GP3)\n# bme_cs = digitalio.DigitalInOut(board.GP1)\n# bme280 = adafruit_bme280.Adafruit_BME280_SPI(spi, bme_cs)\n\n# change this to match the location's pressure (hPa) at sea level\nbme280.sea_level_pressure = 1013.25\n\nwhile True:\n    print(\"\\nTemperature: %0.1f C\" % bme280.temperature)\n    print(\"Humidity: %0.1f %%\" % bme280.relative_humidity)\n    print(\"Pressure: %0.1f hPa\" % bme280.pressure)\n    print(\"Altitude = %0.2f meters\" % bme280.altitude)\n    time.sleep(2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme280/examples/bme280_simpletest_pico.py",
      "library": "bme280",
      "type": "example",
      "file_name": "bme280_simpletest_pico.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport adafruit_ili9341\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport microcontroller\nimport adafruit_ov5640\n\nimport adafruit_ov5640\n# Release any resources currently in use for the displays\nspi = busio.SPI(MOSI=board.LCD_MOSI, clock=board.LCD_CLK)\ndisplay_bus = fourwire.FourWire(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_kaluga1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ili9341\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport microcontroller\nimport adafruit_ov5640\n\ndisplay_bus = fourwire.FourWire(spi, command=board.LCD_D_C, chip_select=board.LCD_CS, reset=board.LCD_RST, baudrate=80000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_kaluga1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ili9341\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport microcontroller\nimport adafruit_ov5640\n\n    command=board.LCD_D_C,\n    chip_select=board.LCD_CS,\n    reset=board.LCD_RST,\n    baudrate=80_000_000,\ndisplay = adafruit_ili9341.ILI9341(display_bus, width=320, height=240, rotation=90)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_kaluga1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ili9341\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport microcontroller\nimport adafruit_ov5640\n\nbus = busio.I2C(scl=board.CAMERA_SIOC, sda=board.CAMERA_SIOD)\ncam = adafruit_ov5640.OV5640(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_kaluga1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ili9341\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport microcontroller\nimport adafruit_ov5640\n\ncam = adafruit_ov5640.OV5640(bus, data_pins=board.CAMERA_DATA, clock=board.CAMERA_PCLK, vsync=board.CAMERA_VSYNC, href=board.CAMERA_HREF, mclk=board.CAMERA_XCLK, size=adafruit_ov5640.OV5640_SIZE_QSXGA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_kaluga1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ili9341\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport microcontroller\nimport adafruit_ov5640\n\n    href=board.CAMERA_HREF,\n    mclk=board.CAMERA_XCLK,\n    size=adafruit_ov5640.OV5640_SIZE_QSXGA,\ncam.colorspace = adafruit_ov5640.OV5640_COLOR_JPEG\ncam.quality = 5\nb = bytearray(cam.capture_buffer_size)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_kaluga1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_lora_sf_base.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_lora_sf_base.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_lora_sf_base.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_lora_sf_base.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\n# uncommnet the desired import and rfm initialization depending on the radio boards being used",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_lora_sf_base.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_lora_sf_base.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.adafruit import AdafruitColor\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_text import label\nfrom adafruit_clue import clue\n\ndef make_transparent():\n    palette_mapping.make_transparent(0)\n    for i in range(0, 8):\n        for j in range(0, 8):\n            bitmap[i, j] = 0\n\n# Usage example:\n# make all pixels in the patchwork bitmap transparent\ndef make_transparent():\n    palette_mapping.make_transparent(0)\n    for i in range(0, 8):\n        for j in range(0, 8):",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/clue/examples/clue_ble_color_patchwork.py",
      "library": "clue",
      "type": "example",
      "file_name": "clue_ble_color_patchwork.py",
      "chunk_type": "function",
      "function_name": "make_transparent"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.adafruit import AdafruitColor\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_text import label\nfrom adafruit_clue import clue\n\ndef make_white():\n    for i in range(2, 66):\n        palette_mapping[i] = 16777215\n\n# Usage example:\nnearby_colors = [color_options[cur_color]]\n\nmake_white()\n\nlast_scan_time = -30",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/clue/examples/clue_ble_color_patchwork.py",
      "library": "clue",
      "type": "example",
      "file_name": "clue_ble_color_patchwork.py",
      "chunk_type": "function",
      "function_name": "make_white"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.adafruit import AdafruitColor\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_text import label\nfrom adafruit_clue import clue\n\ndef draw_grid():\n    for i, color in enumerate(nearby_colors):\n        if i < 64:\n            palette_mapping[i + 2] = color & 16777215\n            print(i)\n            print(color)\n\n# Usage example:\n            print(f\"after scan found {len(nearby_colors)} results\")\n            # print(nearby_addresses)\n            draw_grid()\n\n        if clue.proximity >= PROXIMITY_LIMIT:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/clue/examples/clue_ble_color_patchwork.py",
      "library": "clue",
      "type": "example",
      "file_name": "clue_ble_color_patchwork.py",
      "chunk_type": "function",
      "function_name": "draw_grid"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.adafruit import AdafruitColor\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_text import label\nfrom adafruit_clue import clue\n\ndef add_fake():\n    fake_mac = ''.join([random.choice('0123456789abcdef') for _ in range(10)])\n    fake_color = random.choice(color_options)\n    nearby_addresses.append(fake_mac)\n    nearby_colors.append(fake_color)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/clue/examples/clue_ble_color_patchwork.py",
      "library": "clue",
      "type": "example",
      "file_name": "clue_ble_color_patchwork.py",
      "chunk_type": "function",
      "function_name": "add_fake"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.adafruit import AdafruitColor\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_text import label\nfrom adafruit_clue import clue\n\ndef ble_scan():\n    print('scanning')\n    for entry in ble.start_scan(AdafruitColor, minimum_rssi=-100, timeout=1):\n        if entry.color in color_options:\n            print('new color')\n        if entry.address.address_bytes not in nearby_addresses:\n            nearby_addresses.append(entry.address.address_bytes)\n            nearby_colors.append(entry.color)\n        else:\n            _index = nearby_addresses.index(entry.address.address_bytes)\n            nearby_colors[_index] = entry.color\n\n# Usage example:\n        # is it time to scan?\n        if last_scan_time + SCAN_INTERVAL < now:\n            ble_scan()\n            last_scan_time = now\n            print(f\"after scan found {len(nearby_colors)} results\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/clue/examples/clue_ble_color_patchwork.py",
      "library": "clue",
      "type": "example",
      "file_name": "clue_ble_color_patchwork.py",
      "chunk_type": "function",
      "function_name": "ble_scan"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.adafruit import AdafruitColor\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_text import label\nfrom adafruit_clue import clue\n\ndef change_advertisement(color):\n    ble.stop_advertising()\n    advertisement.color = color\n    ble.start_advertising(advertisement)\n    clue.pixel.fill(color)\n    nearby_colors[0] = color\n\n# Usage example:\n                r, g, b, w = clue.color\n                clue.pixel.fill(((r >> 8) & 0xFF, (g >> 8) & 0xFF, (b >> 8) & 0xFF))\n                change_advertisement(((r & 0xFF00) << 8) + (g & 0xFF00) + ((b >> 8) & 0xFF))\n                time.sleep(0.1)\n            clue.white_leds = False",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/clue/examples/clue_ble_color_patchwork.py",
      "library": "clue",
      "type": "example",
      "file_name": "clue_ble_color_patchwork.py",
      "chunk_type": "function",
      "function_name": "change_advertisement"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.adafruit import AdafruitColor\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_text import label\nfrom adafruit_clue import clue\n\n# init neopixel\nclue.pixel.brightness = 0.05\ndisplay = board.DISPLAY\n# Create a bitmap with two colors + 64 colors for the map\nbitmap = displayio.Bitmap(8, 8, 64 + 2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/clue/examples/clue_ble_color_patchwork.py",
      "library": "clue",
      "type": "example",
      "file_name": "clue_ble_color_patchwork.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport random\nimport time\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.standard import Advertisement, ProvideServicesAdvertisement\nimport adafruit_ble_file_transfer\n\ndef _write(client, filename, contents, *, offset=0):\n    start = time.monotonic()\n    try:\n        client.write(filename, contents, offset=offset)\n        duration = time.monotonic() - start\n        client = wait_for_reconnect()\n    except RuntimeError:\n        print('write failed. is usb connected?')\n        return client\n    print('wrote', filename, 'at rate', len(contents) / duration, 'B/s')\n    return client\n\n# Usage example:\n\n                print(\"Testing write\")\n                client = _write(client, \"/hello.txt\", b\"Hello world\")\n                time.sleep(1)\n                c = _read(client, \"/hello.txt\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_file_transfer/examples/ble_file_transfer_simpletest.py",
      "library": "ble_file_transfer",
      "type": "example",
      "file_name": "ble_file_transfer_simpletest.py",
      "chunk_type": "function",
      "function_name": "_write"
    }
  },
  {
    "content": "import binascii\nimport random\nimport time\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.standard import Advertisement, ProvideServicesAdvertisement\nimport adafruit_ble_file_transfer\n\ndef _read(client, filename, *, offset=0):\n    start = time.monotonic()\n    try:\n        contents = client.read(filename, offset=offset)\n        duration = time.monotonic() - start\n    except ValueError:\n        print('missing file:', filename)\n        return b''\n    print('read', filename, 'at rate', len(contents) / duration, 'B/s')\n    return contents\n\n# Usage example:\n                client = _write(client, \"/hello.txt\", b\"Hello world\")\n                time.sleep(1)\n                c = _read(client, \"/hello.txt\")\n                print(len(c), c)\n                print()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_file_transfer/examples/ble_file_transfer_simpletest.py",
      "library": "ble_file_transfer",
      "type": "example",
      "file_name": "ble_file_transfer_simpletest.py",
      "chunk_type": "function",
      "function_name": "_read"
    }
  },
  {
    "content": "import binascii\nimport random\nimport time\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.standard import Advertisement, ProvideServicesAdvertisement\nimport adafruit_ble_file_transfer\n\ndef wait_for_reconnect():\n    print('reconnecting', end='')\n    while ble.connected:\n        pass\n    print('.', end='')\n    new_connection = ble.connect(peer_address)\n    print('.', end='')\n    if not new_connection.paired:\n        print('.', end='')\n        new_connection.pair()\n    new_service = new_connection[adafruit_ble_file_transfer.FileTransferService]\n    new_client = adafruit_ble_file_transfer.FileTransferClient(new_service)\n    print('.', end='')\n    time.sleep(2)\n    print('done')\n    return new_client\n\n# Usage example:\n        client.write(filename, contents, offset=offset)\n        duration = time.monotonic() - start\n        client = wait_for_reconnect()\n    except RuntimeError:\n        print(\"write failed. is usb connected?\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_file_transfer/examples/ble_file_transfer_simpletest.py",
      "library": "ble_file_transfer",
      "type": "example",
      "file_name": "ble_file_transfer_simpletest.py",
      "chunk_type": "function",
      "function_name": "wait_for_reconnect"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport pulseio\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_esp32spi import adafruit_esp32spi\n\ndef esp_reset_all():\n    esp.reset()\n    time.sleep(1)\n    esp.set_esp_debug(True)\n    esp_init_pin_modes(ESP_D_R_PIN, ESP_D_W_PIN)\n\n# Usage example:\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\n\nesp_reset_all()\n\nprint(\"ESP32 Firmware:\", esp.firmware_version)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/gpio/esp32spi_gpio.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_gpio.py",
      "chunk_type": "function",
      "function_name": "esp_reset_all"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport pulseio\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_esp32spi import adafruit_esp32spi\n\ndef esp_init_pin_modes(din, dout):\n    esp.set_pin_mode(din, 0)\n    esp.set_pin_mode(dout, 1)\n\n# Usage example:\n    esp.set_esp_debug(True)  # False, True\n    # (re-)set digital pin modes\n    esp_init_pin_modes(ESP_D_R_PIN, ESP_D_W_PIN)\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/gpio/esp32spi_gpio.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_gpio.py",
      "chunk_type": "function",
      "function_name": "esp_init_pin_modes"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport pulseio\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n    # ESP32 Digital Output (no output on pins 34-39)\n# M4 R/W Pin Assignments\nM4_D_W_PIN = DigitalInOut(board.A1)  # digital write to ESP_D_R_PIN\nM4_D_W_PIN.direction = Direction.OUTPUT\nM4_A_R_PIN = pulseio.PulseIn(board.A0, maxlen=64)  # PWM read from ESP_A_W_PIN",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/gpio/esp32spi_gpio.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_gpio.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport pulseio\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n# M4 R/W Pin Assignments\nM4_D_W_PIN = DigitalInOut(board.A1)  # digital write to ESP_D_R_PIN\nM4_D_W_PIN.direction = Direction.OUTPUT\nM4_A_R_PIN = pulseio.PulseIn(board.A0, maxlen=64)  # PWM read from ESP_A_W_PIN",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/gpio/esp32spi_gpio.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_gpio.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport pulseio\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n# esp.set_pin_mode(35, 0x0)  # INPUT OK (1/2 of Battery on ESP32 Feather)\nESP_A_R_PIN = 32  # analog read from 10k potentiometer\n# ESP32 Analog (PWM/LEDC) Output (no output on pins 34-39)\nESP_A_W_PIN = 27  # analog (PWM) write to M4_A_R_PIN\nspi = board.SPI()\n# Airlift FeatherWing & Bitsy Add-On compatible\nesp32_cs = DigitalInOut(board.D13)  # M4 Red LED\nesp32_ready = DigitalInOut(board.D11)\nesp32_reset = DigitalInOut(board.D12)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/gpio/esp32spi_gpio.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_gpio.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport pulseio\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n# ESP32 Analog (PWM/LEDC) Output (no output on pins 34-39)\nESP_A_W_PIN = 27  # analog (PWM) write to M4_A_R_PIN\nspi = board.SPI()\n# Airlift FeatherWing & Bitsy Add-On compatible\nesp32_cs = DigitalInOut(board.D13)  # M4 Red LED\nesp32_ready = DigitalInOut(board.D11)\nesp32_reset = DigitalInOut(board.D12)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/gpio/esp32spi_gpio.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_gpio.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport pulseio\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_esp32spi import adafruit_esp32spi\n\nESP_A_W_PIN = 27  # analog (PWM) write to M4_A_R_PIN\nspi = board.SPI()\n# Airlift FeatherWing & Bitsy Add-On compatible\nesp32_cs = DigitalInOut(board.D13)  # M4 Red LED\nesp32_ready = DigitalInOut(board.D11)\nesp32_reset = DigitalInOut(board.D12)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/gpio/esp32spi_gpio.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_gpio.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport pulseio\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_esp32spi import adafruit_esp32spi\n\nspi = board.SPI()\n# Airlift FeatherWing & Bitsy Add-On compatible\nesp32_cs = DigitalInOut(board.D13)  # M4 Red LED\nesp32_ready = DigitalInOut(board.D11)\nesp32_reset = DigitalInOut(board.D12)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/gpio/esp32spi_gpio.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_gpio.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport pulseio\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_esp32spi import adafruit_esp32spi\n\nspi = board.SPI()\n# Airlift FeatherWing & Bitsy Add-On compatible\nesp32_cs = DigitalInOut(board.D13)  # M4 Red LED\nesp32_ready = DigitalInOut(board.D11)\nesp32_reset = DigitalInOut(board.D12)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/gpio/esp32spi_gpio.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_gpio.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom micropython import const\nfrom adafruit_seesaw.seesaw import Seesaw\n\ni2c_bus = board.STEMMA_I2C()  # The built-in STEMMA QT connector on the microcontroller\n# i2c_bus = board.I2C()  # Uses board.SCL and board.SDA. Use with breadboard.\nseesaw = Seesaw(i2c_bus, addr=0x50)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_gamepad_qt.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_gamepad_qt.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport rtc\nimport socketpool\nimport wifi\nimport adafruit_ntp\n\npool = socketpool.SocketPool(wifi.radio)\nntp = adafruit_ntp.NTP(pool, tz_offset=0, cache_seconds=3600)\n# NOTE: This changes the system time so make sure you aren't assuming that time\n# doesn't jump.\nrtc.RTC().datetime = ntp.datetime",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ntp/examples/ntp_set_rtc.py",
      "library": "ntp",
      "type": "example",
      "file_name": "ntp_set_rtc.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Set debug to True for full JSON response.\n# WARNING: may include visible credentials\nDEBUG = False\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nGITHUB_HEADER = {\"Authorization\": \" token \" + token}",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_github.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_github.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# WARNING: may include visible credentials\nDEBUG = False\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nGITHUB_HEADER = {\"Authorization\": \" token \" + token}\nGITHUB_SOURCE = \"https://api.github.com/users/\" + username",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_github.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_github.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nDEBUG = False\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nGITHUB_HEADER = {\"Authorization\": \" token \" + token}\nGITHUB_SOURCE = \"https://api.github.com/users/\" + username",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_github.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_github.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Converts seconds to minutes/hours/days\ndef time_calc(input_time):\n    \"\"\"Converts seconds to minutes/hours/days\"\"\"\n    if input_time < 60:\n        return f'{input_time:.0f} seconds'\n    if input_time < 3600:\n        return f'{input_time / 60:.0f} minutes'\n    if input_time < 86400:\n        return f'{input_time / 60 / 60:.0f} hours'\n    return f'{input_time / 60 / 60 / 24:.1f} days'\n\n# Usage example:\n\n        print(\"\\nFinished!\")\n        print(f\"Board Uptime: {time_calc(time.monotonic())}\")\n        print(f\"Next Update: {time_calc(SLEEP_TIME)}\")\n        print(\"===============================\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_github.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_github.py",
      "chunk_type": "function",
      "function_name": "time_calc"
    }
  },
  {
    "content": "import board\nimport adafruit_cst8xx\n\nimport board\nimport adafruit_cst8xx\nctp = adafruit_cst8xx.Adafruit_CST8XX(board.I2C())\nevents = adafruit_cst8xx.EVENTS",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/cst8xx/examples/cst8xx_simpletest.py",
      "library": "cst8xx",
      "type": "example",
      "file_name": "cst8xx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_cst8xx\n\nimport adafruit_cst8xx\nctp = adafruit_cst8xx.Adafruit_CST8XX(board.I2C())\nevents = adafruit_cst8xx.EVENTS",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/cst8xx/examples/cst8xx_simpletest.py",
      "library": "cst8xx",
      "type": "example",
      "file_name": "cst8xx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2017 Scott Shawcroft, written for Adafruit Industries\n# SPDX-FileCopyrightText: Copyright (c) 2023 Melissa LeBlanc-Williams for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\n\nimport board\n\nimport adafruit_cst8xx\n\nctp = adafruit_cst8xx.Adafruit_CST8XX(board.I2C())\n\nevents = adafruit_cst8xx.EVENTS\nwhile True:\n    if ctp.touched:\n        for touch_id, touch in enumerate(ctp.touches):\n            x = touch[\"x\"]\n            y = touch[\"y\"]\n            event = events[touch[\"event_id\"]]\n            print(f\"touch_id: {touch_id}, x: {x}, y: {y}, event: {event}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/cst8xx/examples/cst8xx_simpletest.py",
      "library": "cst8xx",
      "type": "example",
      "file_name": "cst8xx_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_lsm6ds import AccelRange, GyroRange, Rate\nfrom adafruit_lsm6ds.lsm6dsox import LSM6DSOX as LSM6DS\n\n# from adafruit_lsm6ds.lsm6ds33 import LSM6DS33 as LSM6DS\n# from adafruit_lsm6ds.lsm6dso32 import LSM6DSO32 as LSM6DS\n# from adafruit_lsm6ds.ism330dhcx import ISM330DHCX as LSM6DS\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = LSM6DS(i2c)\nsensor.accelerometer_range = AccelRange.RANGE_8G",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm6ds/examples/lsm6ds_full_test.py",
      "library": "lsm6ds",
      "type": "example",
      "file_name": "lsm6ds_full_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import turtle\n\ndef hilbert2(step, rule, angle, depth, t):\n    if depth > 0:\n        a = lambda: hilbert2(step, 'a', angle, depth - 1, t)\n        b = lambda: hilbert2(step, 'b', angle, depth - 1, t)\n        left = lambda: t.left(angle)\n        right = lambda: t.right(angle)\n        forward = lambda: t.forward(step)\n        if rule == 'a':\n            left()\n            b()\n            forward()\n            right()\n            a()\n            forward()\n            a()\n            right()\n            forward()\n            b()\n            left()\n        if rule == 'b':\n            right()\n            a()\n            forward()\n            left()\n            b()\n            forward()\n            b()\n            left()\n            forward()\n            a()\n            right()\n\n# Usage example:\ndef hilbert2(step, rule, angle, depth, t):\n    if depth > 0:\n        a = lambda: hilbert2(step, \"a\", angle, depth - 1, t)\n        b = lambda: hilbert2(step, \"b\", angle, depth - 1, t)\n        left = lambda: t.left(angle)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_hilbert.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_hilbert.py",
      "chunk_type": "function",
      "function_name": "hilbert2"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import turtle\n\nturtle = turtle(board.DISPLAY)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_hilbert.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_hilbert.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_mcp3xxx.mcp3004 as MCP\nfrom adafruit_mcp3xxx.analog_in import AnalogIn\n\nimport adafruit_mcp3xxx.mcp3004 as MCP\n# create the spi bus\nspi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)\n# create the cs (chip select)\ncs = digitalio.DigitalInOut(board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp3xxx/examples/mcp3xxx_mcp3004_differential_simpletest.py",
      "library": "mcp3xxx",
      "type": "example",
      "file_name": "mcp3xxx_mcp3004_differential_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_mcp3xxx.mcp3004 as MCP\nfrom adafruit_mcp3xxx.analog_in import AnalogIn\n\n# create the spi bus\nspi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)\n# create the cs (chip select)\ncs = digitalio.DigitalInOut(board.D5)\n# create the mcp object\nmcp = MCP.MCP3004(spi, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp3xxx/examples/mcp3xxx_mcp3004_differential_simpletest.py",
      "library": "mcp3xxx",
      "type": "example",
      "file_name": "mcp3xxx_mcp3004_differential_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport busio\nimport digitalio\n\nimport adafruit_mcp3xxx.mcp3004 as MCP\nfrom adafruit_mcp3xxx.analog_in import AnalogIn\n\n# create the spi bus\nspi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)\n\n# create the cs (chip select)\ncs = digitalio.DigitalInOut(board.D5)\n\n# create the mcp object\nmcp = MCP.MCP3004(spi, cs)\n\n# create a differential ADC channel between Pin 0 and Pin 1\nchan = AnalogIn(mcp, MCP.P0, MCP.P1)\n\nprint(\"Differential ADC Value: \", chan.value)\nprint(\"Differential ADC Voltage: \" + str(chan.voltage) + \"V\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp3xxx/examples/mcp3xxx_mcp3004_differential_simpletest.py",
      "library": "mcp3xxx",
      "type": "example",
      "file_name": "mcp3xxx_mcp3004_differential_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import subprocess\nimport time\nimport board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\n# Configuration for CS and DC pins (these are PiTFT defaults):\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)\nreset_pin = digitalio.DigitalInOut(board.D24)\n# Config for display baudrate (default max is 24mhz):",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_stats.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_stats.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import subprocess\nimport time\nimport board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\n# Configuration for CS and DC pins (these are PiTFT defaults):\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)\nreset_pin = digitalio.DigitalInOut(board.D24)\n# Config for display baudrate (default max is 24mhz):\nBAUDRATE = 24000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_stats.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_stats.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import subprocess\nimport time\nimport board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\n# Configuration for CS and DC pins (these are PiTFT defaults):\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)\nreset_pin = digitalio.DigitalInOut(board.D24)\n# Config for display baudrate (default max is 24mhz):\nBAUDRATE = 24000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_stats.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_stats.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import subprocess\nimport time\nimport board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\n# Config for display baudrate (default max is 24mhz):\nBAUDRATE = 24000000\n# Setup SPI bus using hardware SPI:\nspi = board.SPI()\n# Create the display:\n# disp = st7789.ST7789(spi, rotation=90,                            # 2.0\" ST7789\n# disp = st7789.ST7789(spi, height=240, y_offset=80, rotation=180,  # 1.3\", 1.54\" ST7789",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_stats.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_stats.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nimport adafruit_fancyled.adafruit_fancyled as fancy\n\n# Declare a NeoPixel object on pin D6 with num_leds pixels, no auto-write.\n# Set brightness to max because we'll be using FancyLED's brightness control.\npixels = neopixel.NeoPixel(board.D6, num_leds, brightness=1.0, auto_write=False)\noffset = 0  # Positional offset into color palette to get it to 'spin'",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/fancyled/examples/fancyled_neopixel_rotate_simpletest.py",
      "library": "fancyled",
      "type": "example",
      "file_name": "fancyled_neopixel_rotate_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_led_animation.animation.colorcycle import ColorCycle\nfrom adafruit_led_animation.animation.rainbowcomet import RainbowComet\nfrom adafruit_led_animation.animation.sparkle import Sparkle\nfrom adafruit_led_animation.color import PURPLE\nfrom adafruit_led_animation.sequence import AnimationSequence\nfrom adafruit_is31fl3741.adafruit_ledglasses import MUST_BUFFER, LED_Glasses\nfrom adafruit_is31fl3741.led_glasses_animation import LED_Glasses_Animation\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nglasses = LED_Glasses(i2c, allocate=MUST_BUFFER)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3741/examples/is31fl3741_animation.py",
      "library": "is31fl3741",
      "type": "example",
      "file_name": "is31fl3741_animation.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_pcf8575\n\nimport adafruit_pcf8575\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8575.PCF8575(i2c)\n# get a 'digitalio' like pin from the pcf",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8575/examples/pcf8575_simpletest.py",
      "library": "pcf8575",
      "type": "example",
      "file_name": "pcf8575_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_pcf8575\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8575.PCF8575(i2c)\n# get a 'digitalio' like pin from the pcf\nled = pcf.get_pin(0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8575/examples/pcf8575_simpletest.py",
      "library": "pcf8575",
      "type": "example",
      "file_name": "pcf8575_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2022 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\n\nimport adafruit_pcf8575\n\nprint(\"PCF8575 digitalio LED blink test\")\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8575.PCF8575(i2c)\n\n# get a 'digitalio' like pin from the pcf\nled = pcf.get_pin(0)\n\n# Setup pin 15 as an output that's at a high logic level default\nled.switch_to_output(value=True)\n\nwhile True:\n    led.value = True\n    time.sleep(0.2)\n    led.value = False\n    time.sleep(0.2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8575/examples/pcf8575_simpletest.py",
      "library": "pcf8575",
      "type": "example",
      "file_name": "pcf8575_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pulseio\nimport adafruit_irremote\n\nimport pulseio\nimport adafruit_irremote\n# Create a button object to trigger IR transmit\nbutton = digitalio.DigitalInOut(board.D4)\nbutton.direction = digitalio.Direction.INPUT\nbutton.pull = digitalio.Pull.DOWN\n# Create a 'PulseOut' to send infrared signals on the IR transmitter @ 38KHz",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/irremote/examples/irremote_transmit.py",
      "library": "irremote",
      "type": "example",
      "file_name": "irremote_transmit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pulseio\nimport adafruit_irremote\n\nimport adafruit_irremote\n# Create a button object to trigger IR transmit\nbutton = digitalio.DigitalInOut(board.D4)\nbutton.direction = digitalio.Direction.INPUT\nbutton.pull = digitalio.Pull.DOWN\n# Create a 'PulseOut' to send infrared signals on the IR transmitter @ 38KHz\npulseout = pulseio.PulseOut(board.IR_TX, frequency=38000, duty_cycle=2**15)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/irremote/examples/irremote_transmit.py",
      "library": "irremote",
      "type": "example",
      "file_name": "irremote_transmit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pulseio\nimport adafruit_irremote\n\nimport adafruit_irremote\n# Create a button object to trigger IR transmit\nbutton = digitalio.DigitalInOut(board.D4)\nbutton.direction = digitalio.Direction.INPUT\nbutton.pull = digitalio.Pull.DOWN\n# Create a 'PulseOut' to send infrared signals on the IR transmitter @ 38KHz\npulseout = pulseio.PulseOut(board.IR_TX, frequency=38000, duty_cycle=2**15)\n# Create an encoder that will take numbers and turn them into NEC IR pulses",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/irremote/examples/irremote_transmit.py",
      "library": "irremote",
      "type": "example",
      "file_name": "irremote_transmit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pulseio\nimport adafruit_irremote\n\npulseout = pulseio.PulseOut(board.IR_TX, frequency=38000, duty_cycle=2 ** 15)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/irremote/examples/irremote_transmit.py",
      "library": "irremote",
      "type": "example",
      "file_name": "irremote_transmit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pulseio\nimport adafruit_irremote\n\nencoder = adafruit_irremote.GenericTransmit(header=[9000, 4500], one=[560, 1700], zero=[560, 560], trail=560)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/irremote/examples/irremote_transmit.py",
      "library": "irremote",
      "type": "example",
      "file_name": "irremote_transmit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"IR transmit example using Circuit Playground Express\"\"\"\n\nimport time\n\nimport board\nimport digitalio\nimport pulseio\n\nimport adafruit_irremote\n\n# Create a button object to trigger IR transmit\nbutton = digitalio.DigitalInOut(board.D4)\nbutton.direction = digitalio.Direction.INPUT\nbutton.pull = digitalio.Pull.DOWN\n\n# Create a 'PulseOut' to send infrared signals on the IR transmitter @ 38KHz\npulseout = pulseio.PulseOut(board.IR_TX, frequency=38000, duty_cycle=2**15)\n# Create an encoder that will take numbers and turn them into NEC IR pulses\nencoder = adafruit_irremote.GenericTransmit(\n    header=[9000, 4500], one=[560, 1700], zero=[560, 560], trail=560\n)\n\nwhile True:\n    if button.value:\n        print(\"IR signal sent!\")\n        encoder.transmit(pulseout, [255, 2, 255, 0])\n        time.sleep(0.2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/irremote/examples/irremote_transmit.py",
      "library": "irremote",
      "type": "example",
      "file_name": "irremote_transmit.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_debouncer import Debouncer\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\n\nssid = getenv(\"CIRCUITPY_WIFI_SSID\")\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\nswitch_pin = DigitalInOut(board.D10)\nswitch_pin.direction = Direction.INPUT\nswitch_pin.pull = Pull.UP\nswitch = Debouncer(switch_pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/door_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "door_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_debouncer import Debouncer\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\n\nswitch = Debouncer(switch_pin)\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/door_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "door_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_debouncer import Debouncer\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/door_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "door_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_debouncer import Debouncer\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D13)\n# esp32_ready = DigitalInOut(board.D11)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/door_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "door_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_debouncer import Debouncer\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\n\n# Secondary (SCK1) SPI used to connect to WiFi board on Arduino Nano Connect RP2040\n    spi = busio.SPI(board.SCK1, board.MOSI1, board.MISO1)\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/door_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "door_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_debouncer import Debouncer\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\n\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/door_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "door_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_debouncer import Debouncer\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\n\n# RED_LED = PWMOut.PWMOut(esp, 26)\n# GREEN_LED = PWMOut.PWMOut(esp, 27)\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password, status_pixel=status_pixel)\n# Connect to WiFi",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/door_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "door_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_debouncer import Debouncer\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\n\n# Connect to WiFi\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/door_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "door_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_debouncer import Debouncer\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(\n    broker=\"io.adafruit.com\",",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/door_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "door_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_lsm6ds.lsm6dso32 import LSM6DSO32\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = LSM6DSO32(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm6ds/examples/lsm6ds_lsm6dso32_simpletest.py",
      "library": "lsm6ds",
      "type": "example",
      "file_name": "lsm6ds_lsm6dso32_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2020 Bryan Siepert for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\nimport time\n\nimport board\n\nfrom adafruit_lsm6ds.lsm6dso32 import LSM6DSO32\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = LSM6DSO32(i2c)\n\nwhile True:\n    accel_x, accel_y, accel_z = sensor.acceleration\n    print(f\"Acceleration: X:{accel_x:.2f}, Y: {accel_y:.2f}, Z: {accel_z:.2f} m/s^2\")\n    gyro_x, gyro_y, gyro_z = sensor.gyro\n    print(f\"Gyro X:{gyro_x:.2f}, Y: {gyro_y:.2f}, Z: {gyro_z:.2f} radians/s\")\n    print(\"\")\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm6ds/examples/lsm6ds_lsm6dso32_simpletest.py",
      "library": "lsm6ds",
      "type": "example",
      "file_name": "lsm6ds_lsm6dso32_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import asyncio\nimport time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_asyncio_node1.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_asyncio_node1.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import asyncio\nimport time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_asyncio_node1.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_asyncio_node1.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import asyncio\nimport time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\n# uncommnet the desired import and rfm initialization depending on the radio boards being used",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_asyncio_node1.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_asyncio_node1.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import asyncio\nimport time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\n# Simple class to hold an  value. Use .value to to read or write.\nclass Packet:\n    \"\"\"Simple class to hold an  value. Use .value to to read or write.\"\"\"\n\n    def __init__(self):\n        self.received = False\n\n# Usage example:\n\n# pylint: disable=too-few-public-methods\nclass Packet:\n    \"\"\"Simple class to hold an  value. Use .value to to read or write.\"\"\"\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_asyncio_node1.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_asyncio_node1.py",
      "chunk_type": "function",
      "function_name": "Packet"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\n\nboard.DISPLAY.root_group = text_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-text/examples/display_text_anchored_position.py",
      "library": "display-text",
      "type": "example",
      "file_name": "display_text_anchored_position.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_lsm303dlh_mag\n\nimport board\nimport adafruit_lsm303dlh_mag\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lsm303dlh_mag.LSM303DLH_Mag(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303dlh-mag/examples/lsm303dlh_mag_fast.py",
      "library": "lsm303dlh-mag",
      "type": "example",
      "file_name": "lsm303dlh_mag_fast.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_lsm303dlh_mag\n\nimport adafruit_lsm303dlh_mag\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lsm303dlh_mag.LSM303DLH_Mag(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303dlh-mag/examples/lsm303dlh_mag_fast.py",
      "library": "lsm303dlh-mag",
      "type": "example",
      "file_name": "lsm303dlh_mag_fast.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Read data from the magnetometer and print it out, ASAP!\"\"\"\n\nimport board\n\nimport adafruit_lsm303dlh_mag\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lsm303dlh_mag.LSM303DLH_Mag(i2c)\n\nwhile True:\n    mag_x, mag_y, mag_z = sensor.magnetic\n    print(f\"{mag_x:10.3f} {mag_y:10.3f} {mag_z:10.3f}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303dlh-mag/examples/lsm303dlh_mag_fast.py",
      "library": "lsm303dlh-mag",
      "type": "example",
      "file_name": "lsm303dlh_mag_fast.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_funhouse import FunHouse\n\ndef set_label_color(conditional, index, on_color):\n    if conditional:\n        funhouse.set_text_color(on_color, index)\n    else:\n        funhouse.set_text_color(6316128, index)\n\n# Usage example:\n\n    print(funhouse.peripherals.temperature, funhouse.peripherals.relative_humidity)\n    set_label_color(funhouse.peripherals.captouch6, onoff_label, 0x00FF00)\n    set_label_color(funhouse.peripherals.captouch7, capleft_label, 0x00FF00)\n    set_label_color(funhouse.peripherals.captouch8, capright_label, 0x00FF00)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/funhouse/examples/funhouse_simpletest.py",
      "library": "funhouse",
      "type": "example",
      "file_name": "funhouse_simpletest.py",
      "chunk_type": "function",
      "function_name": "set_label_color"
    }
  },
  {
    "content": "import board\nimport busio\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom PIL import Image, ImageDraw\nimport adafruit_ssd1306\n\nimport adafruit_ssd1306\n# Create the I2C interface.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create the SSD1306 OLED class.\ndisp = adafruit_ssd1306.SSD1306_I2C(128, 64, i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_bonnet_buttons.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_bonnet_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom PIL import Image, ImageDraw\nimport adafruit_ssd1306\n\nimport adafruit_ssd1306\n# Create the I2C interface.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create the SSD1306 OLED class.\ndisp = adafruit_ssd1306.SSD1306_I2C(128, 64, i2c)\n# Input pins:\nbutton_A = DigitalInOut(board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_bonnet_buttons.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_bonnet_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom PIL import Image, ImageDraw\nimport adafruit_ssd1306\n\n# Create the SSD1306 OLED class.\ndisp = adafruit_ssd1306.SSD1306_I2C(128, 64, i2c)\n# Input pins:\nbutton_A = DigitalInOut(board.D5)\nbutton_A.direction = Direction.INPUT\nbutton_A.pull = Pull.UP\nbutton_B = DigitalInOut(board.D6)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_bonnet_buttons.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_bonnet_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom PIL import Image, ImageDraw\nimport adafruit_ssd1306\n\n# Input pins:\nbutton_A = DigitalInOut(board.D5)\nbutton_A.direction = Direction.INPUT\nbutton_A.pull = Pull.UP\nbutton_B = DigitalInOut(board.D6)\nbutton_B.direction = Direction.INPUT\nbutton_B.pull = Pull.UP\nbutton_L = DigitalInOut(board.D27)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_bonnet_buttons.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_bonnet_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom PIL import Image, ImageDraw\nimport adafruit_ssd1306\n\nbutton_B = DigitalInOut(board.D6)\nbutton_B.direction = Direction.INPUT\nbutton_B.pull = Pull.UP\nbutton_L = DigitalInOut(board.D27)\nbutton_L.direction = Direction.INPUT\nbutton_L.pull = Pull.UP\nbutton_R = DigitalInOut(board.D23)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_bonnet_buttons.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_bonnet_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom PIL import Image, ImageDraw\nimport adafruit_ssd1306\n\nbutton_L = DigitalInOut(board.D27)\nbutton_L.direction = Direction.INPUT\nbutton_L.pull = Pull.UP\nbutton_R = DigitalInOut(board.D23)\nbutton_R.direction = Direction.INPUT\nbutton_R.pull = Pull.UP\nbutton_U = DigitalInOut(board.D17)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_bonnet_buttons.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_bonnet_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom PIL import Image, ImageDraw\nimport adafruit_ssd1306\n\nbutton_R = DigitalInOut(board.D23)\nbutton_R.direction = Direction.INPUT\nbutton_R.pull = Pull.UP\nbutton_U = DigitalInOut(board.D17)\nbutton_U.direction = Direction.INPUT\nbutton_U.pull = Pull.UP\nbutton_D = DigitalInOut(board.D22)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_bonnet_buttons.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_bonnet_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom PIL import Image, ImageDraw\nimport adafruit_ssd1306\n\nbutton_U = DigitalInOut(board.D17)\nbutton_U.direction = Direction.INPUT\nbutton_U.pull = Pull.UP\nbutton_D = DigitalInOut(board.D22)\nbutton_D.direction = Direction.INPUT\nbutton_D.pull = Pull.UP\nbutton_C = DigitalInOut(board.D4)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_bonnet_buttons.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_bonnet_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom PIL import Image, ImageDraw\nimport adafruit_ssd1306\n\nbutton_D = DigitalInOut(board.D22)\nbutton_D.direction = Direction.INPUT\nbutton_D.pull = Pull.UP\nbutton_C = DigitalInOut(board.D4)\nbutton_C.direction = Direction.INPUT\nbutton_C.pull = Pull.UP",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_bonnet_buttons.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_bonnet_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_mcp4725\n\nimport busio\nimport adafruit_mcp4725\n# Initialize I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Initialize MCP4725.\ndac = adafruit_mcp4725.MCP4725(i2c)\n# Optionally you can specify a different addres if you override the A0 pin.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp4725/examples/mcp4725_simpletest.py",
      "library": "mcp4725",
      "type": "example",
      "file_name": "mcp4725_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_mcp4725\n\n# Initialize I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Initialize MCP4725.\ndac = adafruit_mcp4725.MCP4725(i2c)\n# Optionally you can specify a different addres if you override the A0 pin.\n# amp = adafruit_max9744.MAX9744(i2c, address=0x63)\n# There are a three ways to set the DAC output, you can use any of these:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp4725/examples/mcp4725_simpletest.py",
      "library": "mcp4725",
      "type": "example",
      "file_name": "mcp4725_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_touchscreen\n\nts = adafruit_touchscreen.Touchscreen(board.TOUCH_XL, board.TOUCH_XR, board.TOUCH_YD, board.TOUCH_YU, calibration=((5200, 59000), (5800, 57000)), size=(320, 240))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/touchscreen/examples/touchscreen_simpletest.py",
      "library": "touchscreen",
      "type": "example",
      "file_name": "touchscreen_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\n\nimport adafruit_touchscreen\n\n# These pins are used as both analog and digital! XL, XR and YU must be analog\n# and digital capable. YD just need to be digital\nts = adafruit_touchscreen.Touchscreen(\n    board.TOUCH_XL,\n    board.TOUCH_XR,\n    board.TOUCH_YD,\n    board.TOUCH_YU,\n    calibration=((5200, 59000), (5800, 57000)),\n    size=(320, 240),\n)\n\nwhile True:\n    p = ts.touch_point\n    if p:\n        print(p)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/touchscreen/examples/touchscreen_simpletest.py",
      "library": "touchscreen",
      "type": "example",
      "file_name": "touchscreen_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8253\n\nimport adafruit_uc8253\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8253/examples/uc8253_simpletest.py",
      "library": "uc8253",
      "type": "example",
      "file_name": "uc8253_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8253\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8253/examples/uc8253_simpletest.py",
      "library": "uc8253",
      "type": "example",
      "file_name": "uc8253_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8253\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8253/examples/uc8253_simpletest.py",
      "library": "uc8253",
      "type": "example",
      "file_name": "uc8253_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8253\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8253/examples/uc8253_simpletest.py",
      "library": "uc8253",
      "type": "example",
      "file_name": "uc8253_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8253\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8253/examples/uc8253_simpletest.py",
      "library": "uc8253",
      "type": "example",
      "file_name": "uc8253_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8253\n\ndisplay = adafruit_uc8253.UC8253(display_bus, width=240, height=416, busy_pin=epd_busy, rotation=0, vcom_cdi=151)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8253/examples/uc8253_simpletest.py",
      "library": "uc8253",
      "type": "example",
      "file_name": "uc8253_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport board\nimport displayio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_display_text.label import Label\n\nWRAP_CHARS = 40\n##########################################################################\n# Make the display context\nsplash = displayio.Group()\nboard.DISPLAY.root_group = splash\n# Make a background color fill\ncolor_bitmap = displayio.Bitmap(320, 240, 1)\ncolor_palette = displayio.Palette(1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-text/examples/display_text_textarea_boundingbox.py",
      "library": "display-text",
      "type": "example",
      "file_name": "display_text_textarea_boundingbox.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport json\nimport adafruit_rsa\nfrom adafruit_rsa import PrivateKey, PublicKey\n\n# Encode the string as bytes (Adafruit_RSA only operates on bytes!)\nmessage = message.encode(\"utf-8\")\n# Encrypt the message using the public key\nencrypted_message = adafruit_rsa.encrypt(message, public_key)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rsa/examples/rsa_json_keys.py",
      "library": "rsa",
      "type": "example",
      "file_name": "rsa_json_keys.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport json\nimport adafruit_rsa\nfrom adafruit_rsa import PrivateKey, PublicKey\n\n# Decrypt the encrypted message using a private key\ndecrypted_message = adafruit_rsa.decrypt(encrypted_message, private_key)\n# Print out the decrypted message",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rsa/examples/rsa_json_keys.py",
      "library": "rsa",
      "type": "example",
      "file_name": "rsa_json_keys.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_vl6180x\n\nimport busio\nimport adafruit_vl6180x\n# Create I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create sensor instance.\nsensor = adafruit_vl6180x.VL6180X(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl6180x/examples/vl6180x_continuoustest.py",
      "library": "vl6180x",
      "type": "example",
      "file_name": "vl6180x_continuoustest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_vl6180x\n\n# Create I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create sensor instance.\nsensor = adafruit_vl6180x.VL6180X(i2c)\n# Starting continuous mode",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl6180x/examples/vl6180x_continuoustest.py",
      "library": "vl6180x",
      "type": "example",
      "file_name": "vl6180x_continuoustest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2018 Jonas Schatz\n# SPDX-License-Identifier: MIT\n\n# Demo of reading the range from the VL6180x distance sensor in\n# continuous mode\n\nimport time\n\nimport board\nimport busio\n\nimport adafruit_vl6180x\n\n# Create I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n\n# Create sensor instance.\nsensor = adafruit_vl6180x.VL6180X(i2c)\n\n# Starting continuous mode\nprint(\"Starting continuous mode\")\nsensor.start_range_continuous(20)\n\n# Main loop prints the range and lux every 0.01 seconds\nfor _ in range(100):\n    # Read the range in millimeters and print it.\n    range_mm = sensor.range\n    print(f\"Range: {range_mm}mm\")\n\n    # Delay for 10 ms\n    time.sleep(0.01)\n\n# Stop continuous mode. This is advised as the sensor\n# wouldn't stop measuring after the program has ended\nsensor.stop_range_continuous()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl6180x/examples/vl6180x_continuoustest.py",
      "library": "vl6180x",
      "type": "example",
      "file_name": "vl6180x_continuoustest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_vl6180x\n\n# Simple demo of the vl6180x distance sensor.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = adafruit_vl6180x.VL6180X(i2c)\n# Create two Labels to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl6180x/examples/vl6180x_displayio_simpletest.py",
      "library": "vl6180x",
      "type": "example",
      "file_name": "vl6180x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_vl6180x\n\n# Simple demo of the vl6180x distance sensor.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = adafruit_vl6180x.VL6180X(i2c)\n# Create two Labels to show the readings. If you have a very small\n# display you may need to change to scale=1.\nrange_output_label = Label(FONT, text=\"\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl6180x/examples/vl6180x_displayio_simpletest.py",
      "library": "vl6180x",
      "type": "example",
      "file_name": "vl6180x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_vl6180x\n\nrange_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 40)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl6180x/examples/vl6180x_displayio_simpletest.py",
      "library": "vl6180x",
      "type": "example",
      "file_name": "vl6180x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_vl6180x\n\nrange_output_label.anchored_position = (\nlight_lux_output_label.anchor_point = (0, 0)\nlight_lux_output_label.anchored_position = (4, board.DISPLAY.height // 2)\n# add the label to the main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl6180x/examples/vl6180x_displayio_simpletest.py",
      "library": "vl6180x",
      "type": "example",
      "file_name": "vl6180x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_vl6180x\n\n# add the label to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl6180x/examples/vl6180x_displayio_simpletest.py",
      "library": "vl6180x",
      "type": "example",
      "file_name": "vl6180x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport adafruit_ntp\n\n    # adjust pin for the specific board...\n    eth_cs = DigitalInOut(board.D10)\n    radio = WIZNET5K(spi, eth_cs)\n# get the socket pool from connection manager\nsocket = adafruit_connection_manager.get_radio_socketpool(radio)\n# adjust tz_offset for locale, only ping NTP server every hour\nntp = adafruit_ntp.NTP(socket, tz_offset=-5, cache_seconds=3600)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ntp/examples/ntp_connection_manager.py",
      "library": "ntp",
      "type": "example",
      "file_name": "ntp_connection_manager.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport adafruit_ntp\n\n# get the socket pool from connection manager\nsocket = adafruit_connection_manager.get_radio_socketpool(radio)\n# adjust tz_offset for locale, only ping NTP server every hour\nntp = adafruit_ntp.NTP(socket, tz_offset=-5, cache_seconds=3600)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ntp/examples/ntp_connection_manager.py",
      "library": "ntp",
      "type": "example",
      "file_name": "ntp_connection_manager.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport board\nfrom PIL import Image\nimport adafruit_mlx90640\n\nMINTEMP = 25.0  # low range of the sensor (deg C)\nMAXTEMP = 45.0  # high range of the sensor (deg C)\nCOLORDEPTH = 1000  # how many color values we can have\nINTERPOLATE = 10  # scale factor for final image\nmlx = adafruit_mlx90640.MLX90640(board.I2C())  # uses board.SCL and board.SDA\n# the list of colors we can choose from\nheatmap = (",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90640/examples/mlx90640_pil.py",
      "library": "mlx90640",
      "type": "example",
      "file_name": "mlx90640_pil.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport board\nfrom PIL import Image\nimport adafruit_mlx90640\n\ndef constrain(val, min_val, max_val):\n    return min(max_val, max(min_val, val))\n\n# Usage example:\n    g = sum(gaussian(x, p[1][1], p[0] * width, width / (spread * len(cmap))) for p in cmap)\n    b = sum(gaussian(x, p[1][2], p[0] * width, width / (spread * len(cmap))) for p in cmap)\n    r = int(constrain(r * 255, 0, 255))\n    g = int(constrain(g * 255, 0, 255))\n    b = int(constrain(b * 255, 0, 255))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90640/examples/mlx90640_pil.py",
      "library": "mlx90640",
      "type": "example",
      "file_name": "mlx90640_pil.py",
      "chunk_type": "function",
      "function_name": "constrain"
    }
  },
  {
    "content": "import math\nimport board\nfrom PIL import Image\nimport adafruit_mlx90640\n\ndef map_value(x, in_min, in_max, out_min, out_max):\n    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min\n\n# Usage example:\npixels = [0] * 768\nfor i, pixel in enumerate(frame):\n    coloridx = map_value(pixel, MINTEMP, MAXTEMP, 0, COLORDEPTH - 1)\n    coloridx = int(constrain(coloridx, 0, COLORDEPTH - 1))\n    pixels[i] = colormap[coloridx]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90640/examples/mlx90640_pil.py",
      "library": "mlx90640",
      "type": "example",
      "file_name": "mlx90640_pil.py",
      "chunk_type": "function",
      "function_name": "map_value"
    }
  },
  {
    "content": "import math\nimport board\nfrom PIL import Image\nimport adafruit_mlx90640\n\ndef gaussian(x, a, b, c, d=0):\n    return a * math.exp(-(x - b) ** 2 / (2 * c ** 2)) + d\n\n# Usage example:\ndef gradient(x, width, cmap, spread=1):\n    width = float(width)\n    r = sum(gaussian(x, p[1][0], p[0] * width, width / (spread * len(cmap))) for p in cmap)\n    g = sum(gaussian(x, p[1][1], p[0] * width, width / (spread * len(cmap))) for p in cmap)\n    b = sum(gaussian(x, p[1][2], p[0] * width, width / (spread * len(cmap))) for p in cmap)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90640/examples/mlx90640_pil.py",
      "library": "mlx90640",
      "type": "example",
      "file_name": "mlx90640_pil.py",
      "chunk_type": "function",
      "function_name": "gaussian"
    }
  },
  {
    "content": "import math\nimport board\nfrom PIL import Image\nimport adafruit_mlx90640\n\ndef gradient(x, width, cmap, spread=1):\n    width = float(width)\n    r = sum((gaussian(x, p[1][0], p[0] * width, width / (spread * len(cmap))) for p in cmap))\n    g = sum((gaussian(x, p[1][1], p[0] * width, width / (spread * len(cmap))) for p in cmap))\n    b = sum((gaussian(x, p[1][2], p[0] * width, width / (spread * len(cmap))) for p in cmap))\n    r = int(constrain(r * 255, 0, 255))\n    g = int(constrain(g * 255, 0, 255))\n    b = int(constrain(b * 255, 0, 255))\n    return (r, g, b)\n\n# Usage example:\n\nfor i in range(COLORDEPTH):\n    colormap[i] = gradient(i, COLORDEPTH, heatmap)\n\n# get sensor data",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90640/examples/mlx90640_pil.py",
      "library": "mlx90640",
      "type": "example",
      "file_name": "mlx90640_pil.py",
      "chunk_type": "function",
      "function_name": "gradient"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_transmit.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_transmit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_transmit.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_transmit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm69 = adafruit_rfm69.RFM69(spi, CS, RESET, RADIO_FREQ_MHZ)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_transmit.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_transmit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm69 = adafruit_rfm69.RFM69(spi, CS, RESET, RADIO_FREQ_MHZ)\n# Optionally set an encryption key (16 byte AES key). MUST match both\n# on the transmitter and receiver (or be set to None to disable/the default).\nrfm69.encryption_key = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_transmit.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_transmit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom micropython import const\nfrom adafruit_seesaw.seesaw import Seesaw\n\ni2c_bus = board.I2C()  # uses board.SCL and board.SDA\n# i2c_bus = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nss = Seesaw(i2c_bus)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_joy_featherwing.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_joy_featherwing.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_128x160_colored_labels.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_128x160_colored_labels.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_128x160_colored_labels.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_128x160_colored_labels.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)\ndisplay = ST7735R(display_bus, width=160, height=80, colstart=24, rotation=270, bgr=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_128x160_colored_labels.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_128x160_colored_labels.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)\ndisplay = ST7735R(display_bus, width=160, height=80, colstart=24, rotation=270, bgr=False)\n# Make the display context",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_128x160_colored_labels.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_128x160_colored_labels.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom PIL import Image\nimport adafruit_dotstar as dotstar\n\nDOTS = dotstar.DotStar(board.SCK, board.MOSI, NUMPIXELS, brightness=0.25, auto_write=False, pixel_order=dotstar.BGR)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dotstar/examples/dotstar_image_paint.py",
      "library": "dotstar",
      "type": "example",
      "file_name": "dotstar_image_paint.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_adxl34x\n\nimport board\nimport adafruit_adxl34x\ni2c = board.STEMMA_I2C()  # uses board.SCL and board.SDA\n# For ADXL343\naccelerometer = adafruit_adxl34x.ADXL343(i2c)\n# For ADXL345",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl34x/examples/adxl34x_offset_calibration.py",
      "library": "adxl34x",
      "type": "example",
      "file_name": "adxl34x_offset_calibration.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_adxl34x\n\nimport adafruit_adxl34x\ni2c = board.STEMMA_I2C()  # uses board.SCL and board.SDA\n# For ADXL343\naccelerometer = adafruit_adxl34x.ADXL343(i2c)\n# For ADXL345\n# accelerometer = adafruit_adxl34x.ADXL345(i2c)\naccelerometer.offset = 0, 0, 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl34x/examples/adxl34x_offset_calibration.py",
      "library": "adxl34x",
      "type": "example",
      "file_name": "adxl34x_offset_calibration.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2022 Kattni Rembor for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_adxl34x\n\ni2c = board.STEMMA_I2C()  # uses board.SCL and board.SDA\n\n# For ADXL343\naccelerometer = adafruit_adxl34x.ADXL343(i2c)\n# For ADXL345\n# accelerometer = adafruit_adxl34x.ADXL345(i2c)\n\naccelerometer.offset = 0, 0, 0\n\nprint(\"Hold accelerometer flat to set offsets to 0, 0, and -1g...\")\ntime.sleep(1)\nx = accelerometer.raw_x\ny = accelerometer.raw_y\nz = accelerometer.raw_z\nprint(\"Raw x: \", x)\nprint(\"Raw y: \", y)\nprint(\"Raw z: \", z)\n\naccelerometer.offset = (\n    round(-x / 8),\n    round(-y / 8),\n    round(-(z - 250) / 8),  # Z should be '250' at 1g (4mg per bit)\n)\nprint(\"Calibrated offsets: \", accelerometer.offset)\n\nwhile True:\n    print(\"{} {} {} m/s^2\".format(*accelerometer.acceleration))\n    time.sleep(0.2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl34x/examples/adxl34x_offset_calibration.py",
      "library": "adxl34x",
      "type": "example",
      "file_name": "adxl34x_offset_calibration.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_aw9523\n\nimport board\nimport busio\nimport adafruit_aw9523\ni2c = busio.I2C(board.SCL, board.SDA)\naw = adafruit_aw9523.AW9523(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/aw9523/examples/aw9523_read_all_inputs.py",
      "library": "aw9523",
      "type": "example",
      "file_name": "aw9523_read_all_inputs.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_aw9523\n\nimport busio\nimport adafruit_aw9523\ni2c = busio.I2C(board.SCL, board.SDA)\naw = adafruit_aw9523.AW9523(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/aw9523/examples/aw9523_read_all_inputs.py",
      "library": "aw9523",
      "type": "example",
      "file_name": "aw9523_read_all_inputs.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2020 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport busio\n\nimport adafruit_aw9523\n\ni2c = busio.I2C(board.SCL, board.SDA)\naw = adafruit_aw9523.AW9523(i2c)\nprint(\"Found AW9523\")\n\n# set all pins to be inputs\naw.directions = 0x0000\n\nwhile True:\n    # read all input bits and print them out as binary 0/1\n    print(f\"Inputs: {aw.inputs:016b}\")\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/aw9523/examples/aw9523_read_all_inputs.py",
      "library": "aw9523",
      "type": "example",
      "file_name": "aw9523_read_all_inputs.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport adafruit_rsa\n\ndef test_encrypt_decrypt():\n    pub, priv = adafruit_rsa.newkeys(256, log_level='DEBUG')\n    msg = b'blinka'\n    msg_enc = adafruit_rsa.encrypt(msg, pub)\n    msg_dec = adafruit_rsa.decrypt(msg_enc, priv)\n    assert msg == msg_dec, 'Decrypted message does not match original message'\n\n# Usage example:\n# List all tests\nall_tests = [\n    test_encrypt_decrypt,\n    test_mod_msg,\n    test_randomness,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rsa/examples/rsa_tests.py",
      "library": "rsa",
      "type": "example",
      "file_name": "rsa_tests.py",
      "chunk_type": "function",
      "function_name": "test_encrypt_decrypt"
    }
  },
  {
    "content": "import time\nimport adafruit_rsa\n\n# Modifies an enecrypted message, asserts failure\ndef test_mod_msg():\n    \"\"\"Modifies an enecrypted message, asserts failure\"\"\"\n    pub, priv = adafruit_rsa.newkeys(256, log_level='DEBUG')\n    msg = b'blinka'\n    msg_enc = adafruit_rsa.encrypt(msg, pub)\n    msg_enc = msg_enc[:-1] + b'X'\n    try:\n        msg_dec = adafruit_rsa.decrypt(msg_enc, priv)\n        assert msg_dec != msg, 'ERROR: Decrypted message matches original'\n    except adafruit_rsa.pkcs1.DecryptionError:\n        pass\n\n# Usage example:\nall_tests = [\n    test_encrypt_decrypt,\n    test_mod_msg,\n    test_randomness,\n    test_sign_verify_sha256,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rsa/examples/rsa_tests.py",
      "library": "rsa",
      "type": "example",
      "file_name": "rsa_tests.py",
      "chunk_type": "function",
      "function_name": "test_mod_msg"
    }
  },
  {
    "content": "import time\nimport adafruit_rsa\n\n# Encrypt msg 2x yields diff. encrypted values.\ndef test_randomness():\n    \"\"\"Encrypt msg 2x yields diff. encrypted values.\"\"\"\n    pub, priv = adafruit_rsa.newkeys(256, log_level='DEBUG')\n    msg = b'blinka'\n    msg_enc_1 = adafruit_rsa.encrypt(msg, pub)\n    msg_enc_2 = adafruit_rsa.encrypt(msg, pub)\n    assert msg_enc_1 != msg_enc_2, 'Messages should yield different values.'\n\n# Usage example:\n    test_encrypt_decrypt,\n    test_mod_msg,\n    test_randomness,\n    test_sign_verify_sha256,\n    test_sign_verify_sha384,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rsa/examples/rsa_tests.py",
      "library": "rsa",
      "type": "example",
      "file_name": "rsa_tests.py",
      "chunk_type": "function",
      "function_name": "test_randomness"
    }
  },
  {
    "content": "import time\nimport adafruit_rsa\n\n# Test SHA256 sign and verify the message.\ndef test_sign_verify_sha256():\n    \"\"\"Test SHA256 sign and verify the message.\"\"\"\n    pub, priv = adafruit_rsa.newkeys(496, log_level='DEBUG')\n    msg = 'red apple'\n    signature = adafruit_rsa.sign(msg, priv, 'SHA-256')\n    adafruit_rsa.verify(msg, signature, pub)\n\n# Usage example:\n    test_mod_msg,\n    test_randomness,\n    test_sign_verify_sha256,\n    test_sign_verify_sha384,\n    test_sign_verify_sha512,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rsa/examples/rsa_tests.py",
      "library": "rsa",
      "type": "example",
      "file_name": "rsa_tests.py",
      "chunk_type": "function",
      "function_name": "test_sign_verify_sha256"
    }
  },
  {
    "content": "import time\nimport adafruit_rsa\n\n# Test SHA-384 sign and verify the message.\ndef test_sign_verify_sha384():\n    \"\"\"Test SHA-384 sign and verify the message.\"\"\"\n    pub, priv = adafruit_rsa.newkeys(624, log_level='DEBUG')\n    msg = 'red apple'\n    signature = adafruit_rsa.sign(msg, priv, 'SHA-384')\n    adafruit_rsa.verify(msg, signature, pub)\n\n# Usage example:\n    test_randomness,\n    test_sign_verify_sha256,\n    test_sign_verify_sha384,\n    test_sign_verify_sha512,\n]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rsa/examples/rsa_tests.py",
      "library": "rsa",
      "type": "example",
      "file_name": "rsa_tests.py",
      "chunk_type": "function",
      "function_name": "test_sign_verify_sha384"
    }
  },
  {
    "content": "import time\nimport adafruit_rsa\n\n# Test SHA-512 sign and verify the message.\ndef test_sign_verify_sha512():\n    \"\"\"Test SHA-512 sign and verify the message.\"\"\"\n    pub, priv = adafruit_rsa.newkeys(752, log_level='DEBUG')\n    msg = 'red apple'\n    signature = adafruit_rsa.sign(msg, priv, 'SHA-512')\n    adafruit_rsa.verify(msg, signature, pub)\n\n# Usage example:\n    test_sign_verify_sha256,\n    test_sign_verify_sha384,\n    test_sign_verify_sha512,\n]\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rsa/examples/rsa_tests.py",
      "library": "rsa",
      "type": "example",
      "file_name": "rsa_tests.py",
      "chunk_type": "function",
      "function_name": "test_sign_verify_sha512"
    }
  },
  {
    "content": "import time\nimport adafruit_rsa\n\n# Check for adafruit_rsa.pkcs1.VerificationError on\na modified message (invalid signature).\ndef test_sign_verify_fail():\n    \"\"\"Check for adafruit_rsa.pkcs1.VerificationError on\n    a modified message (invalid signature).\n    \"\"\"\n    pub, priv = adafruit_rsa.newkeys(256, log_level='DEBUG')\n    msg = 'red apple'\n    signature = adafruit_rsa.sign(msg, priv, 'SHA-512')\n    msg = 'blue apple'\n    try:\n        adafruit_rsa.verify(msg, signature, pub)\n    except adafruit_rsa.pkcs1.VerificationError:\n        pass",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rsa/examples/rsa_tests.py",
      "library": "rsa",
      "type": "example",
      "file_name": "rsa_tests.py",
      "chunk_type": "function",
      "function_name": "test_sign_verify_fail"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rgb_display import ili9341\nfrom adafruit_rgb_display.rgb import color565\n\n# Configuratoin for CS and DC pins (these are FeatherWing defaults on M0/M4):\ncs_pin = digitalio.DigitalInOut(board.D9)\ndc_pin = digitalio.DigitalInOut(board.D10)\n# Config for display baudrate (default max is 24mhz):\nBAUDRATE = 24000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_ili9341test.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_ili9341test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rgb_display import ili9341\nfrom adafruit_rgb_display.rgb import color565\n\n# Configuratoin for CS and DC pins (these are FeatherWing defaults on M0/M4):\ncs_pin = digitalio.DigitalInOut(board.D9)\ndc_pin = digitalio.DigitalInOut(board.D10)\n# Config for display baudrate (default max is 24mhz):\nBAUDRATE = 24000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_ili9341test.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_ili9341test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rgb_display import ili9341\nfrom adafruit_rgb_display.rgb import color565\n\n# Config for display baudrate (default max is 24mhz):\nBAUDRATE = 24000000\n# Setup SPI bus using hardware SPI:\nspi = busio.SPI(clock=board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Create the ILI9341 display:\ndisplay = ili9341.ILI9341(spi, cs=cs_pin, dc=dc_pin, baudrate=BAUDRATE)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_ili9341test.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_ili9341test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nfrom adafruit_display_emoji_text import EmojiLabel\n\nimport displayio\nmain_group = displayio.Group()\ndisplay = board.DISPLAY\nemoji_lbl = EmojiLabel(\"Circuit\ud83d\ude0ePython\\n\ud83c\udf08E\ud83d\udc0dm\ud83d\udcbeo\ud83d\udcbbj\ud83d\udc99i\ud83c\udf89\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display_emoji_text/examples/display_emoji_text_simpletest.py",
      "library": "display_emoji_text",
      "type": "example",
      "file_name": "display_emoji_text_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2025 Tim Cocks for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\"\"\"\nSimple demonstration of EmojiLabel class\n\"\"\"\n\nimport board\nimport displayio\n\nfrom adafruit_display_emoji_text import EmojiLabel\n\nmain_group = displayio.Group()\ndisplay = board.DISPLAY\n\nemoji_lbl = EmojiLabel(\"Circuit\ud83d\ude0ePython\\n\ud83c\udf08E\ud83d\udc0dm\ud83d\udcbeo\ud83d\udcbbj\ud83d\udc99i\ud83c\udf89\", scale=2)\n\nmain_group.append(emoji_lbl)\ndisplay.root_group = main_group\n\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display_emoji_text/examples/display_emoji_text_simpletest.py",
      "library": "display_emoji_text",
      "type": "example",
      "file_name": "display_emoji_text_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport adafruit_sht31d\n\nimport board\nimport adafruit_sht31d\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_sht31d.SHT31D(i2c)\nprint(\"\\033[1mSensor\\033[0m = SHT31-D\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sht31/examples/sht31d_simple_mode.py",
      "library": "sht31",
      "type": "example",
      "file_name": "sht31d_simple_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_sht31d\n\nimport adafruit_sht31d\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_sht31d.SHT31D(i2c)\nprint(\"\\033[1mSensor\\033[0m = SHT31-D\")\nprint(\"\\033[1mSerial Number\\033[0m = \", sensor.serial_number, \"\\n\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sht31/examples/sht31d_simple_mode.py",
      "library": "sht31",
      "type": "example",
      "file_name": "sht31d_simple_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_led_animation.animation.pulse import Pulse\nfrom adafruit_led_animation.color import RED\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\npixel_num = 32\n# Update to matchpin connected to button that connect logic high when pushed",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_resume_animation.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_resume_animation.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_led_animation.animation.pulse import Pulse\nfrom adafruit_led_animation.color import RED\n\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\npixel_num = 32\n# Update to matchpin connected to button that connect logic high when pushed\nbutton_pin = board.D3\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)\nbutton = DigitalInOut(button_pin)\nbutton.direction = Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_resume_animation.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_resume_animation.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_led_animation.animation.pulse import Pulse\nfrom adafruit_led_animation.color import RED\n\npixel_num = 32\n# Update to matchpin connected to button that connect logic high when pushed\nbutton_pin = board.D3\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)\nbutton = DigitalInOut(button_pin)\nbutton.direction = Direction.INPUT\nbutton.pull = Pull.UP",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_resume_animation.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_resume_animation.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"\n'tone_demo.py'.\n\n=================================================\na short piezo song using tone()\n\"\"\"\n\nimport time\n\nimport board\n\nimport simpleio\n\nwhile True:\n    for f in (262, 294, 330, 349, 392, 440, 494, 523):\n        simpleio.tone(board.A0, f, 0.25)\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/simpleio/examples/simpleio_tone_demo.py",
      "library": "simpleio",
      "type": "example",
      "file_name": "simpleio_tone_demo.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lps35hw\n\nimport board\nimport adafruit_lps35hw\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nlps = adafruit_lps35hw.LPS35HW(i2c)\n# You may need to adjust the threshold to something closer",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps35hw/examples/lps35hw_high_threshold.py",
      "library": "lps35hw",
      "type": "example",
      "file_name": "lps35hw_high_threshold.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lps35hw\n\nimport adafruit_lps35hw\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nlps = adafruit_lps35hw.LPS35HW(i2c)\n# You may need to adjust the threshold to something closer\n# to the current pressure where the sensor is\nlps.pressure_threshold = 1030",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps35hw/examples/lps35hw_high_threshold.py",
      "library": "lps35hw",
      "type": "example",
      "file_name": "lps35hw_high_threshold.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2019 Bryan Siepert, written for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\nimport time\n\nimport board\n\nimport adafruit_lps35hw\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nlps = adafruit_lps35hw.LPS35HW(i2c)\n\n# You may need to adjust the threshold to something closer\n# to the current pressure where the sensor is\nlps.pressure_threshold = 1030\n\nlps.high_threshold_enabled = True\n\nwhile True:\n    print(\"Pressure: %.2f hPa\" % lps.pressure)\n    print(\"Threshhold exceeded: %s\" % lps.high_threshold_exceeded)\n    print(\"\")\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps35hw/examples/lps35hw_high_threshold.py",
      "library": "lps35hw",
      "type": "example",
      "file_name": "lps35hw_high_threshold.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lps35hw\n\nimport board\nimport adafruit_lps35hw\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nlps = adafruit_lps35hw.LPS35HW(i2c)\n# set the current pressure as zero hPa and make measurements",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps35hw/examples/lps35hw_relative.py",
      "library": "lps35hw",
      "type": "example",
      "file_name": "lps35hw_relative.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lps35hw\n\nimport adafruit_lps35hw\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nlps = adafruit_lps35hw.LPS35HW(i2c)\n# set the current pressure as zero hPa and make measurements\n# relative to that pressure, even negative!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps35hw/examples/lps35hw_relative.py",
      "library": "lps35hw",
      "type": "example",
      "file_name": "lps35hw_relative.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2019 Bryan Siepert, written for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\nimport time\n\nimport board\n\nimport adafruit_lps35hw\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nlps = adafruit_lps35hw.LPS35HW(i2c)\n\n# set the current pressure as zero hPa and make measurements\n# relative to that pressure, even negative!\nlps.zero_pressure()\nwhile True:\n    print(\"Pressure: %.2f hPa\" % lps.pressure)\n    print(\"\")\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps35hw/examples/lps35hw_relative.py",
      "library": "lps35hw",
      "type": "example",
      "file_name": "lps35hw_relative.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import socket\nimport time\nimport adafruit_ntp\n\nimport time\nimport adafruit_ntp\n# Don't use tz_offset kwarg with CPython because it will adjust automatically.\nntp = adafruit_ntp.NTP(socket, cache_seconds=3600)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ntp/examples/ntp_cpython.py",
      "library": "ntp",
      "type": "example",
      "file_name": "ntp_cpython.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2022 Scott Shawcroft for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Tests NTP with CPython socket\"\"\"\n\nimport socket\nimport time\n\nimport adafruit_ntp\n\n# Don't use tz_offset kwarg with CPython because it will adjust automatically.\nntp = adafruit_ntp.NTP(socket, cache_seconds=3600)\n\nwhile True:\n    print(ntp.datetime)\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ntp/examples/ntp_cpython.py",
      "library": "ntp",
      "type": "example",
      "file_name": "ntp_cpython.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ads7830.ads7830 as ADC\nfrom adafruit_ads7830.analog_in import AnalogIn\n\nimport board\nimport adafruit_ads7830.ads7830 as ADC\ni2c = board.I2C()\n# Initialize ADS7830\nadc = ADC.ADS7830(i2c)\nchan = AnalogIn(adc, 0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ads7830/examples/ads7830_simpletest.py",
      "library": "ads7830",
      "type": "example",
      "file_name": "ads7830_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2023 Liz Clark for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# Simple demo to read analog input on channel 0\n\nimport time\n\nimport board\n\nimport adafruit_ads7830.ads7830 as ADC\nfrom adafruit_ads7830.analog_in import AnalogIn\n\ni2c = board.I2C()\n\n# Initialize ADS7830\nadc = ADC.ADS7830(i2c)\nchan = AnalogIn(adc, 0)\n\nwhile True:\n    print(f\"ADC channel 0 = {chan.value}\")\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ads7830/examples/ads7830_simpletest.py",
      "library": "ads7830",
      "type": "example",
      "file_name": "ads7830_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nfrom adafruit_as7341 import AS7341\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = AS7341(i2c)\nsensor.flicker_detection_enabled = True\n# Create Label(s) to show the readings. If you have a very small",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/as7341/examples/as3741_displayio_simpletest.py",
      "library": "as7341",
      "type": "example",
      "file_name": "as3741_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nfrom adafruit_as7341 import AS7341\n\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/as7341/examples/as3741_displayio_simpletest.py",
      "library": "as7341",
      "type": "example",
      "file_name": "as3741_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nfrom adafruit_as7341 import AS7341\n\n# add the label(s) to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/as7341/examples/as3741_displayio_simpletest.py",
      "library": "as7341",
      "type": "example",
      "file_name": "as3741_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import busio\nimport digitalio\nfrom board import D4, SCL, SDA\nimport adafruit_ssd1305\n\n# Import the SSD1305 module.\nimport adafruit_ssd1305\n# Define the Reset Pin\noled_reset = digitalio.DigitalInOut(D4)\n# Create the I2C interface.\ni2c = busio.I2C(SCL, SDA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1305/examples/ssd1305_simpletest.py",
      "library": "ssd1305",
      "type": "example",
      "file_name": "ssd1305_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import busio\nimport digitalio\nfrom board import D4, SCL, SDA\nimport adafruit_ssd1305\n\n# Define the Reset Pin\noled_reset = digitalio.DigitalInOut(D4)\n# Create the I2C interface.\ni2c = busio.I2C(SCL, SDA)\n# Create the SSD1305 OLED class.\n# The first two parameters are the pixel width and pixel height.  Change these\n# to the right size for your display!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1305/examples/ssd1305_simpletest.py",
      "library": "ssd1305",
      "type": "example",
      "file_name": "ssd1305_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import busio\nimport digitalio\nfrom board import D4, SCL, SDA\nimport adafruit_ssd1305\n\ndisplay = adafruit_ssd1305.SSD1305_I2C(128, 32, i2c, addr=60, reset=oled_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1305/examples/ssd1305_simpletest.py",
      "library": "ssd1305",
      "type": "example",
      "file_name": "ssd1305_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.jd79661 import Adafruit_JD79661\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.CE0)\ndc = digitalio.DigitalInOut(board.D22)\nsrcs = None\nrst = digitalio.DigitalInOut(board.D27)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_pillow_image.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_pillow_image.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.jd79661 import Adafruit_JD79661\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.CE0)\ndc = digitalio.DigitalInOut(board.D22)\nsrcs = None\nrst = digitalio.DigitalInOut(board.D27)\nbusy = digitalio.DigitalInOut(board.D17)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_pillow_image.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_pillow_image.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.jd79661 import Adafruit_JD79661\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.CE0)\ndc = digitalio.DigitalInOut(board.D22)\nsrcs = None\nrst = digitalio.DigitalInOut(board.D27)\nbusy = digitalio.DigitalInOut(board.D17)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_pillow_image.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_pillow_image.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.jd79661 import Adafruit_JD79661\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.CE0)\ndc = digitalio.DigitalInOut(board.D22)\nsrcs = None\nrst = digitalio.DigitalInOut(board.D27)\nbusy = digitalio.DigitalInOut(board.D17)\n# give them all to our driver\n# display = Adafruit_JD79661(122, 150,        # 2.13\" Quad-color display",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_pillow_image.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_pillow_image.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.jd79661 import Adafruit_JD79661\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.CE0)\ndc = digitalio.DigitalInOut(board.D22)\nsrcs = None\nrst = digitalio.DigitalInOut(board.D27)\nbusy = digitalio.DigitalInOut(board.D17)\n# give them all to our driver\n# display = Adafruit_JD79661(122, 150,        # 2.13\" Quad-color display\n# display = Adafruit_SSD1608(200, 200,        # 1.54\" HD mono display",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_pillow_image.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_pillow_image.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_bme280\nimport board\nimport adafruit_sgp40\n\nimport board\nimport adafruit_sgp40\n# Boards i2c bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsgp = adafruit_sgp40.SGP40(i2c)\n# Humidity sensor for compensated Readings",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sgp40/examples/sgp40_indextest.py",
      "library": "sgp40",
      "type": "example",
      "file_name": "sgp40_indextest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_bme280\nimport board\nimport adafruit_sgp40\n\nimport adafruit_sgp40\n# Boards i2c bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsgp = adafruit_sgp40.SGP40(i2c)\n# Humidity sensor for compensated Readings\nbme280 = adafruit_bme280.Adafruit_BME280_I2C(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sgp40/examples/sgp40_indextest.py",
      "library": "sgp40",
      "type": "example",
      "file_name": "sgp40_indextest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_bme280\nimport board\nimport adafruit_sgp40\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsgp = adafruit_sgp40.SGP40(i2c)\n# Humidity sensor for compensated Readings\nbme280 = adafruit_bme280.Adafruit_BME280_I2C(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sgp40/examples/sgp40_indextest.py",
      "library": "sgp40",
      "type": "example",
      "file_name": "sgp40_indextest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_qmc5883p\n\nimport board\nimport adafruit_qmc5883p\ni2c = board.I2C()\n# i2c = board.STEMMA_I2C()\nsensor = adafruit_qmc5883p.QMC5883P(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/qmc5883p/examples/qmc5883p_simpletest.py",
      "library": "qmc5883p",
      "type": "example",
      "file_name": "qmc5883p_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_qmc5883p\n\nimport adafruit_qmc5883p\ni2c = board.I2C()\n# i2c = board.STEMMA_I2C()\nsensor = adafruit_qmc5883p.QMC5883P(i2c)\n# configure sensor settings\n# defaults to MODE_NORMAL, ODR_50HZ, RANGE_8G",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/qmc5883p/examples/qmc5883p_simpletest.py",
      "library": "qmc5883p",
      "type": "example",
      "file_name": "qmc5883p_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2025 Liz Clark for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\n\"\"\"QMC5333P Simple Test\"\"\"\n\nimport time\n\nimport board\n\nimport adafruit_qmc5883p\n\ni2c = board.I2C()\n# i2c = board.STEMMA_I2C()\n\nsensor = adafruit_qmc5883p.QMC5883P(i2c)\n\n# configure sensor settings\n# defaults to MODE_NORMAL, ODR_50HZ, RANGE_8G\n\n# sensor.mode = adafruit_qmc5883p.MODE_CONTINUOUS\n# sensor.data_rate = adafruit_qmc5883p.ODR_10HZ\n# sensor.range = adafruit_qmc5883p.RANGE_2G\n\nprint(\"QMC5883P Magnetometer Test\")\nprint(\"-\" * 40)\n\nwhile True:\n    mag_x, mag_y, mag_z = sensor.magnetic\n\n    print(f\"X:{mag_x:2.3f}, Y:{mag_y:2.3f}, Z:{mag_z:2.3f} G\")\n\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/qmc5883p/examples/qmc5883p_simpletest.py",
      "library": "qmc5883p",
      "type": "example",
      "file_name": "qmc5883p_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.D5)\nRESET = digitalio.DigitalInOut(board.D6)\n# Or uncomment and instead use these if using a Feather M0 RFM9x board and the appropriate\n# CircuitPython build:\n# CS = digitalio.DigitalInOut(board.RFM9X_CS)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_simpletest.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.D5)\nRESET = digitalio.DigitalInOut(board.D6)\n# Or uncomment and instead use these if using a Feather M0 RFM9x board and the appropriate\n# CircuitPython build:\n# CS = digitalio.DigitalInOut(board.RFM9X_CS)\n# RESET = digitalio.DigitalInOut(board.RFM9X_RST)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_simpletest.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# CircuitPython build:\n# CS = digitalio.DigitalInOut(board.RFM9X_CS)\n# RESET = digitalio.DigitalInOut(board.RFM9X_RST)\n# Define the onboard LED\nLED = digitalio.DigitalInOut(board.D13)\nLED.direction = digitalio.Direction.OUTPUT\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_simpletest.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# CS = digitalio.DigitalInOut(board.RFM9X_CS)\n# RESET = digitalio.DigitalInOut(board.RFM9X_RST)\n# Define the onboard LED\nLED = digitalio.DigitalInOut(board.D13)\nLED.direction = digitalio.Direction.OUTPUT\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_simpletest.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# Define the onboard LED\nLED = digitalio.DigitalInOut(board.D13)\nLED.direction = digitalio.Direction.OUTPUT\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm9x = adafruit_rfm9x.RFM9x(spi, CS, RESET, RADIO_FREQ_MHZ)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_simpletest.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm9x = adafruit_rfm9x.RFM9x(spi, CS, RESET, RADIO_FREQ_MHZ)\n# Note that the radio is configured in LoRa mode so you can't control sync\n# word, encryption, frequency deviation, or other settings!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_simpletest.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nfrom adafruit_bitmap_font import bitmap_font\n\n# use built in display (MagTag, PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\n# try uncommenting different font files if you like\nfont_file = \"fonts/LeagueSpartan-Bold-16.bdf\"\n# font_file = \"fonts/Junction-regular-24.pcf\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/bitmap-font/examples/bitmap_font_displayio_simpletest.py",
      "library": "bitmap-font",
      "type": "example",
      "file_name": "bitmap_font_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text.label import Label\nfrom simpleio import map_range\nimport adafruit_mlx90640\n\ndef MakeHeatMapColor():\n    for c in range(number_of_colors):\n        value = c * (NUM_COLORS - 1) / last_color\n        idx1 = int(value)\n        if idx1 == value:\n            red = color[idx1][0]\n            green = color[idx1][1]\n            blue = color[idx1][2]\n        else:\n            idx2 = idx1 + 1\n            fractBetween = value - idx1\n            red = int(round((color[idx2][0] - color[idx1][0]) * fractBetween + color[idx1][0]))\n            green = int(round((color[idx2][1] - color[idx1][1]) * fractBetween + color[idx1][1]))\n            blue = int(round((color[idx2][2] - color[idx1][2]) * fractBetween + color[idx1][2]))\n        palette[c] = 65536 * red + 256 * green + 1 * blue\n\n# Usage example:\n\n\nMakeHeatMapColor()\n\n# Bitmap for colour coded thermal value",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90640/examples/mlx90640_pygamer.py",
      "library": "mlx90640",
      "type": "example",
      "file_name": "mlx90640_pygamer.py",
      "chunk_type": "function",
      "function_name": "MakeHeatMapColor"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text.label import Label\nfrom simpleio import map_range\nimport adafruit_mlx90640\n\n# Add the SuperGroup to the Display\nboard.DISPLAY.root_group = group\nmin_t = 20  # Initial minimum temperature range, before auto scale\nmax_t = 37  # Initial maximum temperature range, before auto scale",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90640/examples/mlx90640_pygamer.py",
      "library": "mlx90640",
      "type": "example",
      "file_name": "mlx90640_pygamer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text.label import Label\nfrom simpleio import map_range\nimport adafruit_mlx90640\n\nboard.DISPLAY.root_group = group\nmin_t = 20  # Initial minimum temperature range, before auto scale\nmax_t = 37  # Initial maximum temperature range, before auto scale\ni2c = busio.I2C(board.SCL, board.SDA, frequency=800000)\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmlx = adafruit_mlx90640.MLX90640(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90640/examples/mlx90640_pygamer.py",
      "library": "mlx90640",
      "type": "example",
      "file_name": "mlx90640_pygamer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text.label import Label\nfrom simpleio import map_range\nimport adafruit_mlx90640\n\nmax_t = 37  # Initial maximum temperature range, before auto scale\ni2c = busio.I2C(board.SCL, board.SDA, frequency=800000)\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmlx = adafruit_mlx90640.MLX90640(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90640/examples/mlx90640_pygamer.py",
      "library": "mlx90640",
      "type": "example",
      "file_name": "mlx90640_pygamer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text.label import Label\nfrom simpleio import map_range\nimport adafruit_mlx90640\n\nmlx = adafruit_mlx90640.MLX90640(i2c)\n# mlx.refresh_rate = adafruit_mlx90640.RefreshRate.REFRESH_2_HZ\nmlx.refresh_rate = adafruit_mlx90640.RefreshRate.REFRESH_4_HZ\nframe = [0] * 768",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90640/examples/mlx90640_pygamer.py",
      "library": "mlx90640",
      "type": "example",
      "file_name": "mlx90640_pygamer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport microcontroller\nimport neopixel\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_led_animation.color import PURPLE\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.A3\n# Update to match the number of NeoPixels you have connected\npixel_num = 30\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_samd21_reset_interval.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_samd21_reset_interval.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport microcontroller\nimport neopixel\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_led_animation.color import PURPLE\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.A3\n# Update to match the number of NeoPixels you have connected\npixel_num = 30\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)\ncomet = Comet(pixels, speed=0.02, color=PURPLE, tail_length=10, bounce=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_samd21_reset_interval.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_samd21_reset_interval.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import array\nimport time\nimport board\nimport rp2pio\nimport adafruit_pioasm\n\n_program = adafruit_pioasm.Program('\\n    out pins, 14       ; set the pins to their new state\\n    ')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_7seg.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_7seg.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import array\nimport time\nimport board\nimport rp2pio\nimport adafruit_pioasm\n\ndef make_digit_wt(v):\n    val = ALL_COM\n    seg = DIGITS[v]\n    for i in range(8):\n        if seg & 1 << i:\n            val |= SEG_WT[i]\n    return val\n\n# Usage example:\n\n\nDIGITS_WT = [make_digit_wt(i) for i in range(10)]\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_7seg.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_7seg.py",
      "chunk_type": "function",
      "function_name": "make_digit_wt"
    }
  },
  {
    "content": "import array\nimport time\nimport board\nimport rp2pio\nimport adafruit_pioasm\n\nclass SMSevenSegment:\n\n    def __init__(self, first_pin=board.GP9):\n        self._buf = array.array('H', (DIGITS_WT[0] & ~COM_WT[i] for i in range(4)))\n        self._sm = rp2pio.StateMachine(_program.assembled, frequency=4000, first_out_pin=first_pin, out_pin_count=14, auto_pull=True, pull_threshold=14, **_program.pio_kwargs)\n        self._sm.background_write(loop=self._buf)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.deinit()\n\n    def deinit(self):\n        self._sm.deinit()\n\n    def __setitem__(self, i, v):\n        if v is None:\n            self._buf[i] = 0\n        else:\n            self._buf[i] = DIGITS_WT[v] & ~COM_WT[i]\n\n    def set_number(self, number):\n        for j in range(4):\n            self[3 - j] = number % 10\n            number //= 10\n\n# Usage example:\n\n\nclass SMSevenSegment:\n    def __init__(self, first_pin=board.GP9):\n        self._buf = array.array(\"H\", (DIGITS_WT[0] & ~COM_WT[i] for i in range(4)))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_7seg.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_7seg.py",
      "chunk_type": "function",
      "function_name": "SMSevenSegment"
    }
  },
  {
    "content": "import array\nimport time\nimport board\nimport rp2pio\nimport adafruit_pioasm\n\ndef count(start=0):\n    val = start\n    while True:\n        yield val\n        val += 1\n\n# Usage example:\nBy updating the buffer being written to the display, the shown digits can be changed.\n\nThe main program just counts up, looping back to 0000 after 9999.\n\nThis example is designed for a Raspberry Pi Pico and bare LED display. For",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_7seg.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_7seg.py",
      "chunk_type": "function",
      "function_name": "count"
    }
  },
  {
    "content": "import array\nimport time\nimport board\nimport rp2pio\nimport adafruit_pioasm\n\ndef main():\n    with SMSevenSegment(board.GP9) as s:\n        for i in count():\n            s.set_number(i)\n            time.sleep(0.05)\n\n# Usage example:\nBy updating the buffer being written to the display, the shown digits can be changed.\n\nThe main program just counts up, looping back to 0000 after 9999.\n\nThis example is designed for a Raspberry Pi Pico and bare LED display. For",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_7seg.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_7seg.py",
      "chunk_type": "function",
      "function_name": "main"
    }
  },
  {
    "content": "import sys\nimport board\nimport busio\nimport adafruit_gps\n\n# Create a serial connection for the GPS connection using default speed and\n# a slightly higher timeout (GPS modules typically update once a second).\n# These are the defaults you should use for the GPS FeatherWing.\n# For other boards set RX = GPS module TX, and TX = GPS module RX pins.\nuart = busio.UART(board.TX, board.RX, baudrate=9600, timeout=10)\n# If using a USB/Serial converter, use pyserial and update the serial\n# port name to match the serial connection for the GPS!\n# import serial",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/gps/examples/gps_datalogging.py",
      "library": "gps",
      "type": "example",
      "file_name": "gps_datalogging.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import sys\nimport board\nimport busio\nimport adafruit_gps\n\n# If using I2C, we'll create an I2C interface to talk to using default pins\n# i2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Create a GPS module instance.\ngps = adafruit_gps.GPS(uart)  # Use UART/pyserial\n# gps = adafruit_gps.GPS_GtopI2C(i2c)  # Use I2C interface\n# Main loop just reads data from the GPS module and writes it back out to\n# the output file while also printing to serial output.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/gps/examples/gps_datalogging.py",
      "library": "gps",
      "type": "example",
      "file_name": "gps_datalogging.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import usb_hid\nimport adafruit_radial_controller.device\n\nimport adafruit_radial_controller.device\nREPORT_ID = 5\nradial_controller_device = adafruit_radial_controller.device.device(REPORT_ID)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/radial_controller/examples/radial_controller_boot.py",
      "library": "radial_controller",
      "type": "example",
      "file_name": "radial_controller_boot.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2021 Dan Halbert for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport usb_hid\n\nimport adafruit_radial_controller.device\n\nREPORT_ID = 5\n\nradial_controller_device = adafruit_radial_controller.device.device(REPORT_ID)\nusb_hid.enable((radial_controller_device,))\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/radial_controller/examples/radial_controller_boot.py",
      "library": "radial_controller",
      "type": "example",
      "file_name": "radial_controller_boot.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport microcontroller\nimport rp2pio\nimport adafruit_pioasm\n\nassembled = adafruit_pioasm.assemble(program)\n# If the board has a designated neopixel, then use it. Otherwise use\n# GPIO16 as an arbitrary choice.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_neopixel.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_neopixel.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom adafruit_is31fl3731.led_shim import LedShim as Display\n\nimport board\nimport busio\ni2c = busio.I2C(board.SCL, board.SDA)\n# initial display if you are using Pimoroni LED SHIM\ndisplay = Display(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3731/examples/is31fl3731_ledshim_rainbow.py",
      "library": "is31fl3731",
      "type": "example",
      "file_name": "is31fl3731_ledshim_rainbow.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.jd79661 import Adafruit_JD79661\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.D12)\ndc = digitalio.DigitalInOut(board.D11)\nsrcs = digitalio.DigitalInOut(board.D10)  # can be None to use internal memory\nrst = digitalio.DigitalInOut(board.D9)  # can be None to not use this pin",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_simpletest.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.jd79661 import Adafruit_JD79661\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.D12)\ndc = digitalio.DigitalInOut(board.D11)\nsrcs = digitalio.DigitalInOut(board.D10)  # can be None to use internal memory\nrst = digitalio.DigitalInOut(board.D9)  # can be None to not use this pin\nbusy = digitalio.DigitalInOut(board.D5)  # can be None to not use this pin",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_simpletest.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.jd79661 import Adafruit_JD79661\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.D12)\ndc = digitalio.DigitalInOut(board.D11)\nsrcs = digitalio.DigitalInOut(board.D10)  # can be None to use internal memory\nrst = digitalio.DigitalInOut(board.D9)  # can be None to not use this pin\nbusy = digitalio.DigitalInOut(board.D5)  # can be None to not use this pin",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_simpletest.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.jd79661 import Adafruit_JD79661\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.D12)\ndc = digitalio.DigitalInOut(board.D11)\nsrcs = digitalio.DigitalInOut(board.D10)  # can be None to use internal memory\nrst = digitalio.DigitalInOut(board.D9)  # can be None to not use this pin\nbusy = digitalio.DigitalInOut(board.D5)  # can be None to not use this pin\n# give them all to our drivers",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_simpletest.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.jd79661 import Adafruit_JD79661\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.D12)\ndc = digitalio.DigitalInOut(board.D11)\nsrcs = digitalio.DigitalInOut(board.D10)  # can be None to use internal memory\nrst = digitalio.DigitalInOut(board.D9)  # can be None to not use this pin\nbusy = digitalio.DigitalInOut(board.D5)  # can be None to not use this pin\n# give them all to our drivers",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_simpletest.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.jd79661 import Adafruit_JD79661\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.D12)\ndc = digitalio.DigitalInOut(board.D11)\nsrcs = digitalio.DigitalInOut(board.D10)  # can be None to use internal memory\nrst = digitalio.DigitalInOut(board.D9)  # can be None to not use this pin\nbusy = digitalio.DigitalInOut(board.D5)  # can be None to not use this pin\n# give them all to our drivers",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_simpletest.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_wm8960 import WM8960, Input\n\nimport board\ncodec = WM8960(board.I2C())\n# Select the desired input. Available options are MIC1 (single-ended), MIC2 (differential),\n# MIC3 (differential), LINE2, or LINE3.\ncodec.input = Input.MIC1",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wm8960/examples/wm8960_input.py",
      "library": "wm8960",
      "type": "example",
      "file_name": "wm8960_input.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_max31855\n\nimport board\nimport digitalio\nimport adafruit_max31855\nspi = board.SPI()\ncs = digitalio.DigitalInOut(board.D5)\nmax31855 = adafruit_max31855.MAX31855(spi, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max31855/examples/max31855_simpletest.py",
      "library": "max31855",
      "type": "example",
      "file_name": "max31855_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_max31855\n\nimport digitalio\nimport adafruit_max31855\nspi = board.SPI()\ncs = digitalio.DigitalInOut(board.D5)\nmax31855 = adafruit_max31855.MAX31855(spi, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max31855/examples/max31855_simpletest.py",
      "library": "max31855",
      "type": "example",
      "file_name": "max31855_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_max31855\n\nimport adafruit_max31855\nspi = board.SPI()\ncs = digitalio.DigitalInOut(board.D5)\nmax31855 = adafruit_max31855.MAX31855(spi, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max31855/examples/max31855_simpletest.py",
      "library": "max31855",
      "type": "example",
      "file_name": "max31855_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport digitalio\n\nimport adafruit_max31855\n\nspi = board.SPI()\ncs = digitalio.DigitalInOut(board.D5)\n\nmax31855 = adafruit_max31855.MAX31855(spi, cs)\nwhile True:\n    tempC = max31855.temperature\n    tempF = tempC * 9 / 5 + 32\n    print(f\"Temperature: {tempC} C {tempF} F \")\n    time.sleep(2.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max31855/examples/max31855_simpletest.py",
      "library": "max31855",
      "type": "example",
      "file_name": "max31855_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_motorkit import MotorKit\n\nimport board\nkit = MotorKit(i2c=board.I2C())\nkit.motor1.throttle = 1.0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/motorkit/examples/motorkit_dc_motor_simpletest.py",
      "library": "motorkit",
      "type": "example",
      "file_name": "motorkit_dc_motor_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Simple test for using adafruit_motorkit with a DC motor\"\"\"\n\nimport time\n\nimport board\n\nfrom adafruit_motorkit import MotorKit\n\nkit = MotorKit(i2c=board.I2C())\n\nkit.motor1.throttle = 1.0\ntime.sleep(0.5)\nkit.motor1.throttle = 0\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/motorkit/examples/motorkit_dc_motor_simpletest.py",
      "library": "motorkit",
      "type": "example",
      "file_name": "motorkit_dc_motor_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_tlc59711\n\n# Define SPI bus connected to chip.\n# You only need the clock and MOSI (output) line to use this chip.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\npixels = adafruit_tlc59711.TLC59711(spi, pixel_count=16)\n# examples how to set the pixels:\n# range:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_simpletest.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_tlc59711\n\n# Define SPI bus connected to chip.\n# You only need the clock and MOSI (output) line to use this chip.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\npixels = adafruit_tlc59711.TLC59711(spi, pixel_count=16)\n# examples how to set the pixels:\n# range:\n# 0 - 65535",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_simpletest.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel\nfrom adafruit_pixelmap import PixelMap, horizontal_strip_gridmap\n\n# board.NEOPIXEL is the pin on the NeoTrellis M4.\n# Update to match the pin that your neopixels are connected to.\npixel_pin = board.NEOPIXEL\n# Update to match the number of NeoPixels you have connected\npixel_num = 32",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pixelmap/examples/pixelmap_simpletest.py",
      "library": "pixelmap",
      "type": "example",
      "file_name": "pixelmap_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel\nfrom adafruit_pixelmap import PixelMap, horizontal_strip_gridmap\n\npixel_pin = board.NEOPIXEL\n# Update to match the number of NeoPixels you have connected\npixel_num = 32\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.1, auto_write=True)\npixel_wing_vertical = PixelMap.vertical_lines(\n    pixels, 8, 4, horizontal_strip_gridmap(8, alternating=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pixelmap/examples/pixelmap_simpletest.py",
      "library": "pixelmap",
      "type": "example",
      "file_name": "pixelmap_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_lis2mdl\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = adafruit_lis2mdl.LIS2MDL(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis2mdl/examples/lis2mdl_displayio_simpletest.py",
      "library": "lis2mdl",
      "type": "example",
      "file_name": "lis2mdl_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_lis2mdl\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = adafruit_lis2mdl.LIS2MDL(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis2mdl/examples/lis2mdl_displayio_simpletest.py",
      "library": "lis2mdl",
      "type": "example",
      "file_name": "lis2mdl_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_lis2mdl\n\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis2mdl/examples/lis2mdl_displayio_simpletest.py",
      "library": "lis2mdl",
      "type": "example",
      "file_name": "lis2mdl_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_lis2mdl\n\n# add the label(s) to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis2mdl/examples/lis2mdl_displayio_simpletest.py",
      "library": "lis2mdl",
      "type": "example",
      "file_name": "lis2mdl_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport rainbowio\nimport supervisor\nfrom adafruit_tm1814 import TM1814PixelBackground\n\nimport supervisor\n# The pin where the LED strip data line is connected\nTM1814 = board.A0\n# The number of TM1814 controllers. Note that sometimes one \"pixel\" controls\n# more than one LED package.\n#\n# One common configuration is 3 LED packages & 1",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tm1814/examples/tm1814_simpletest.py",
      "library": "tm1814",
      "type": "example",
      "file_name": "tm1814_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2024 Jeff Epler for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport board\nimport rainbowio\nimport supervisor\n\nfrom adafruit_tm1814 import TM1814PixelBackground\n\n# The pin where the LED strip data line is connected\nTM1814 = board.A0\n# The number of TM1814 controllers. Note that sometimes one \"pixel\" controls\n# more than one LED package.\n#\n# One common configuration is 3 LED packages & 1\n# controller per 50mm, giving 100 TM1814 controllers (300 LED packages) in 5\n# meters of LED strip.\nNUM_PIXELS = 100\npixels = TM1814PixelBackground(TM1814, NUM_PIXELS, brightness=0.1)\n\n# Cycle the rainbow at about 1 cycle every 4 seconds\nwhile True:\n    pixels.fill(rainbowio.colorwheel(supervisor.ticks_ms() // 16))\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tm1814/examples/tm1814_simpletest.py",
      "library": "tm1814",
      "type": "example",
      "file_name": "tm1814_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel_write\nfrom adafruit_ble import BLERadio\nfrom adafruit_clue import clue\nfrom digitalio import DigitalInOut\nfrom ulab import numpy as np\nfrom adafruit_ble_adafruit.accelerometer_service import AccelerometerService\nfrom adafruit_ble_adafruit.adafruit_service import AdafruitServerAdvertisement\nfrom adafruit_ble_adafruit.addressable_pixel_service import AddressablePixelService\nfrom adafruit_ble_adafruit.barometric_pressure_service import BarometricPressureService\nfrom adafruit_ble_adafruit.button_service import ButtonService\nfrom adafruit_ble_adafruit.humidity_service import HumidityService\nfrom adafruit_ble_adafruit.light_sensor_service import LightSensorService\nfrom adafruit_ble_adafruit.microphone_service import MicrophoneService\nfrom adafruit_ble_adafruit.temperature_service import TemperatureService\nfrom adafruit_ble_adafruit.tone_service import ToneService\n\naccel_svc.measurement_period = 100\naccel_last_update = 0\n# CLUE has just one board pixel. 3 RGB bytes * 1 pixel.\nNEOPIXEL_BUF_LENGTH = 3 * 1\nneopixel_svc = AddressablePixelService()\nneopixel_buf = bytearray(NEOPIXEL_BUF_LENGTH)\n# Take over NeoPixel control from clue.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_adafruit/examples/ble_adafruit_clue.py",
      "library": "ble_adafruit",
      "type": "example",
      "file_name": "ble_adafruit_clue.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel_write\nfrom adafruit_ble import BLERadio\nfrom adafruit_clue import clue\nfrom digitalio import DigitalInOut\nfrom ulab import numpy as np\nfrom adafruit_ble_adafruit.accelerometer_service import AccelerometerService\nfrom adafruit_ble_adafruit.adafruit_service import AdafruitServerAdvertisement\nfrom adafruit_ble_adafruit.addressable_pixel_service import AddressablePixelService\nfrom adafruit_ble_adafruit.barometric_pressure_service import BarometricPressureService\nfrom adafruit_ble_adafruit.button_service import ButtonService\nfrom adafruit_ble_adafruit.humidity_service import HumidityService\nfrom adafruit_ble_adafruit.light_sensor_service import LightSensorService\nfrom adafruit_ble_adafruit.microphone_service import MicrophoneService\nfrom adafruit_ble_adafruit.temperature_service import TemperatureService\nfrom adafruit_ble_adafruit.tone_service import ToneService\n\naccel_last_update = 0\n# CLUE has just one board pixel. 3 RGB bytes * 1 pixel.\nNEOPIXEL_BUF_LENGTH = 3 * 1\nneopixel_svc = AddressablePixelService()\nneopixel_buf = bytearray(NEOPIXEL_BUF_LENGTH)\n# Take over NeoPixel control from clue.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_adafruit/examples/ble_adafruit_clue.py",
      "library": "ble_adafruit",
      "type": "example",
      "file_name": "ble_adafruit_clue.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel_write\nfrom adafruit_ble import BLERadio\nfrom adafruit_clue import clue\nfrom digitalio import DigitalInOut\nfrom ulab import numpy as np\nfrom adafruit_ble_adafruit.accelerometer_service import AccelerometerService\nfrom adafruit_ble_adafruit.adafruit_service import AdafruitServerAdvertisement\nfrom adafruit_ble_adafruit.addressable_pixel_service import AddressablePixelService\nfrom adafruit_ble_adafruit.barometric_pressure_service import BarometricPressureService\nfrom adafruit_ble_adafruit.button_service import ButtonService\nfrom adafruit_ble_adafruit.humidity_service import HumidityService\nfrom adafruit_ble_adafruit.light_sensor_service import LightSensorService\nfrom adafruit_ble_adafruit.microphone_service import MicrophoneService\nfrom adafruit_ble_adafruit.temperature_service import TemperatureService\nfrom adafruit_ble_adafruit.tone_service import ToneService\n\nNEOPIXEL_BUF_LENGTH = 3 * 1\nneopixel_svc = AddressablePixelService()\nneopixel_buf = bytearray(NEOPIXEL_BUF_LENGTH)\n# Take over NeoPixel control from clue.\nneopixel_out = DigitalInOut(board.NEOPIXEL)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_adafruit/examples/ble_adafruit_clue.py",
      "library": "ble_adafruit",
      "type": "example",
      "file_name": "ble_adafruit_clue.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_pcf8523.clock import Clock\nfrom adafruit_pcf8523.timer import Timer\n\nLOW_FREQ_TIMER = 10\nHIGH_FREQ_TIMER = 0.02\nHIGH_FREQ_TIME = 10\nPIN_INT = board.GP5\nPIN_SDA = board.GP2\nPIN_SCL = board.GP3\n# use board.SCL and board.SDA if available",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8523/examples/pcf8523_timer_interrupt.py",
      "library": "pcf8523",
      "type": "example",
      "file_name": "pcf8523_timer_interrupt.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_pcf8523.clock import Clock\nfrom adafruit_pcf8523.timer import Timer\n\nLOW_FREQ_TIMER = 10\nHIGH_FREQ_TIMER = 0.02\nHIGH_FREQ_TIME = 10\nPIN_INT = board.GP5\nPIN_SDA = board.GP2\nPIN_SCL = board.GP3\n# use board.SCL and board.SDA if available\ni2c = busio.I2C(PIN_SCL, PIN_SDA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8523/examples/pcf8523_timer_interrupt.py",
      "library": "pcf8523",
      "type": "example",
      "file_name": "pcf8523_timer_interrupt.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_pcf8523.clock import Clock\nfrom adafruit_pcf8523.timer import Timer\n\nLOW_FREQ_TIMER = 10\nHIGH_FREQ_TIMER = 0.02\nHIGH_FREQ_TIME = 10\nPIN_INT = board.GP5\nPIN_SDA = board.GP2\nPIN_SCL = board.GP3\n# use board.SCL and board.SDA if available\ni2c = busio.I2C(PIN_SCL, PIN_SDA)\n# or i2c = board.I2C() if available",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8523/examples/pcf8523_timer_interrupt.py",
      "library": "pcf8523",
      "type": "example",
      "file_name": "pcf8523_timer_interrupt.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_pcf8523.clock import Clock\nfrom adafruit_pcf8523.timer import Timer\n\nPIN_INT = board.GP5\nPIN_SDA = board.GP2\nPIN_SCL = board.GP3\n# use board.SCL and board.SDA if available\ni2c = busio.I2C(PIN_SCL, PIN_SDA)\n# or i2c = board.I2C() if available\ntimer = Timer(i2c)\nclock = Clock(timer.i2c_device)\nclock.clockout_frequency = clock.CLOCKOUT_FREQ_DISABLED",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8523/examples/pcf8523_timer_interrupt.py",
      "library": "pcf8523",
      "type": "example",
      "file_name": "pcf8523_timer_interrupt.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.chase import Chase\nfrom adafruit_led_animation.color import WHITE\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.A3\n# Update to match the number of NeoPixels you have connected\npixel_num = 30\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_chase.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_chase.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.chase import Chase\nfrom adafruit_led_animation.color import WHITE\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.A3\n# Update to match the number of NeoPixels you have connected\npixel_num = 30\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)\nchase = Chase(pixels, speed=0.1, size=3, spacing=6, color=WHITE)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_chase.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_chase.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\nTEXT_URL = \"http://wifitest.adafruit.com/testwifi/index.html\"\nJSON_URL = \"http://api.coindesk.com/v1/bpi/currentprice/USD.json\"\n# For Adafruit Ethernet FeatherWing\ncs = digitalio.DigitalInOut(board.D10)\n# For Particle Ethernet FeatherWing\n# cs = digitalio.DigitalInOut(board.D5)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_simpletest.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\n# For Adafruit Ethernet FeatherWing\ncs = digitalio.DigitalInOut(board.D10)\n# For Particle Ethernet FeatherWing\n# cs = digitalio.DigitalInOut(board.D5)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_simpletest.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(eth)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(eth)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_simpletest.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\n# Initialize ethernet interface with DHCP\neth = WIZNET5K(spi_bus, cs)\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(eth)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(eth)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_simpletest.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\n\neth = WIZNET5K(spi_bus, cs)\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(eth)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(eth)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wiznet5k/examples/wiznet5k_simpletest.py",
      "library": "wiznet5k",
      "type": "example",
      "file_name": "wiznet5k_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_si1145\n\nimport adafruit_si1145\n# setup I2C bus using board default\n# change as needed for specific boards\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# setup sensor\nsi1145 = adafruit_si1145.SI1145(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si1145/examples/si1145_simpletest.py",
      "library": "si1145",
      "type": "example",
      "file_name": "si1145_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_si1145\n\n# change as needed for specific boards\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# setup sensor\nsi1145 = adafruit_si1145.SI1145(i2c)\n# loop forever printing values",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si1145/examples/si1145_simpletest.py",
      "library": "si1145",
      "type": "example",
      "file_name": "si1145_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2017 Scott Shawcroft, written for Adafruit Industries\n# SPDX-FileCopyrightText: Copyright (c) 2022 Carter Nelson for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\n\nimport adafruit_si1145\n\n# setup I2C bus using board default\n# change as needed for specific boards\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\n# setup sensor\nsi1145 = adafruit_si1145.SI1145(i2c)\n\n# loop forever printing values\nwhile True:\n    vis, ir = si1145.als\n    print(f\"Visible = {vis}, Infrared = {ir}\")\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si1145/examples/si1145_simpletest.py",
      "library": "si1145",
      "type": "example",
      "file_name": "si1145_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import array\nimport time\nimport board\nimport digitalio\nimport rp2pio\nimport adafruit_pioasm\n\nimport digitalio\nimport rp2pio\nimport adafruit_pioasm\ntrigger = digitalio.DigitalInOut(board.D4)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_pdm.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_pdm.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import array\nimport time\nimport board\nimport digitalio\nimport rp2pio\nimport adafruit_pioasm\n\nassembled = adafruit_pioasm.assemble(program)\nsm = rp2pio.StateMachine(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_pdm.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_pdm.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import array\nimport time\nimport board\nimport digitalio\nimport rp2pio\nimport adafruit_pioasm\n\nsm = rp2pio.StateMachine(assembled, frequency=24000 * 2 * 32, first_in_pin=board.D12, first_sideset_pin=board.D11, auto_push=False, in_shift_right=True, push_threshold=32)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_pdm.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_pdm.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_fruitjam\n\npobj = adafruit_fruitjam.peripherals.Peripherals(audio_output='speaker')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/fruitjam/examples/fruitjam_speaker.py",
      "library": "fruitjam",
      "type": "example",
      "file_name": "fruitjam_speaker.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2025 Tim Cocks for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\nimport time\n\nimport adafruit_fruitjam\n\npobj = adafruit_fruitjam.peripherals.Peripherals(audio_output=\"speaker\")\n\nFILES = [\"beep.wav\", \"dip.wav\", \"rise.wav\"]\nVOLUMES = [5, 7, 10, 11, 12]\n\nwhile True:\n    print(\"\\n=== Speaker Test ===\")\n    for vol in VOLUMES:\n        pobj.volume = vol\n        print(f\"Speaker volume: {vol}\")\n        for f in FILES:\n            print(f\"  -> {f}\")\n            pobj.play_file(f)\n            time.sleep(0.2)\n    time.sleep(1.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/fruitjam/examples/fruitjam_speaker.py",
      "library": "fruitjam",
      "type": "example",
      "file_name": "fruitjam_speaker.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom rainbowio import colorwheel\nimport adafruit_rgbled\n\nimport adafruit_rgbled\n# Pin the Red LED is connected to\nRED_LED = board.D5\n# Pin the Green LED is connected to\nGREEN_LED = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rgbled/examples/rgbled_simpletest.py",
      "library": "rgbled",
      "type": "example",
      "file_name": "rgbled_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom rainbowio import colorwheel\nimport adafruit_rgbled\n\n# Pin the Red LED is connected to\nRED_LED = board.D5\n# Pin the Green LED is connected to\nGREEN_LED = board.D6\n# Pin the Blue LED is connected to\nBLUE_LED = board.D7",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rgbled/examples/rgbled_simpletest.py",
      "library": "rgbled",
      "type": "example",
      "file_name": "rgbled_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom rainbowio import colorwheel\nimport adafruit_rgbled\n\n# Pin the Green LED is connected to\nGREEN_LED = board.D6\n# Pin the Blue LED is connected to\nBLUE_LED = board.D7\n# Create the RGB LED object\nled = adafruit_rgbled.RGBLED(RED_LED, GREEN_LED, BLUE_LED)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rgbled/examples/rgbled_simpletest.py",
      "library": "rgbled",
      "type": "example",
      "file_name": "rgbled_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom rainbowio import colorwheel\nimport adafruit_rgbled\n\n# Pin the Blue LED is connected to\nBLUE_LED = board.D7\n# Create the RGB LED object\nled = adafruit_rgbled.RGBLED(RED_LED, GREEN_LED, BLUE_LED)\n# Optionally, you can also create the RGB LED object with inverted PWM\n# led = adafruit_rgbled.RGBLED(RED_LED, GREEN_LED, BLUE_LED, invert_pwm=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rgbled/examples/rgbled_simpletest.py",
      "library": "rgbled",
      "type": "example",
      "file_name": "rgbled_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom rainbowio import colorwheel\nimport adafruit_rgbled\n\ndef rainbow_cycle(wait):\n    for i in range(255):\n        i = (i + 1) % 256\n        led.color = colorwheel(i)\n        time.sleep(wait)\n\n# Usage example:\n\n    # rainbow cycle the RGB LED\n    rainbow_cycle(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rgbled/examples/rgbled_simpletest.py",
      "library": "rgbled",
      "type": "example",
      "file_name": "rgbled_simpletest.py",
      "chunk_type": "function",
      "function_name": "rainbow_cycle"
    }
  },
  {
    "content": "from os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_simpletest_esp32spi.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_simpletest_esp32spi.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_simpletest_esp32spi.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_simpletest_esp32spi.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_simpletest_esp32spi.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_simpletest_esp32spi.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_simpletest_esp32spi.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_simpletest_esp32spi.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lps35hw\n\nimport board\nimport adafruit_lps35hw\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nlps = adafruit_lps35hw.LPS35HW(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps35hw/examples/lps35hw_simpletest.py",
      "library": "lps35hw",
      "type": "example",
      "file_name": "lps35hw_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lps35hw\n\nimport adafruit_lps35hw\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nlps = adafruit_lps35hw.LPS35HW(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps35hw/examples/lps35hw_simpletest.py",
      "library": "lps35hw",
      "type": "example",
      "file_name": "lps35hw_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2019 Bryan Siepert, written for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\nimport time\n\nimport board\n\nimport adafruit_lps35hw\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nlps = adafruit_lps35hw.LPS35HW(i2c)\n\nwhile True:\n    print(\"Pressure: %.2f hPa\" % lps.pressure)\n    print(\"Temperature: %.2f C\" % lps.temperature)\n    print(\"\")\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps35hw/examples/lps35hw_simpletest.py",
      "library": "lps35hw",
      "type": "example",
      "file_name": "lps35hw_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_adxl34x\n\nimport board\nimport adafruit_adxl34x\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# For ADXL343\naccelerometer = adafruit_adxl34x.ADXL343(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl34x/examples/adxl34x_tap_detection_test.py",
      "library": "adxl34x",
      "type": "example",
      "file_name": "adxl34x_tap_detection_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_adxl34x\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# For ADXL343\naccelerometer = adafruit_adxl34x.ADXL343(i2c)\n# For ADXL345\n# accelerometer = adafruit_adxl34x.ADXL345(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl34x/examples/adxl34x_tap_detection_test.py",
      "library": "adxl34x",
      "type": "example",
      "file_name": "adxl34x_tap_detection_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_adxl34x\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\n# For ADXL343\naccelerometer = adafruit_adxl34x.ADXL343(i2c)\n# For ADXL345\n# accelerometer = adafruit_adxl34x.ADXL345(i2c)\n\naccelerometer.enable_tap_detection()\n# you can also configure the tap detection parameters when you enable tap detection:\n# accelerometer.enable_tap_detection(tap_count=2,threshold=20, duration=50)\n\nwhile True:\n    print(\"{} {} {}\".format(*accelerometer.acceleration))\n\n    print(\"Tapped: {}\".format(accelerometer.events[\"tap\"]))\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl34x/examples/adxl34x_tap_detection_test.py",
      "library": "adxl34x",
      "type": "example",
      "file_name": "adxl34x_tap_detection_test.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_nonblocking_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_nonblocking_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_nonblocking_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_nonblocking_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_nonblocking_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_nonblocking_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_nonblocking_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_nonblocking_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_nonblocking_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_nonblocking_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)  # Uncomment for Most Boards",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_nonblocking_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_nonblocking_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef connected(client, userdata, flags, rc):\n    print(f'Connected to MQTT broker! Listening for topic changes on {default_topic}')\n    client.subscribe(default_topic)\n\n# Usage example:\nesp32_reset = DigitalInOut(board.ESP_RESET)\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_nonblocking_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_nonblocking_esp32spi.py",
      "chunk_type": "function",
      "function_name": "connected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef disconnected(client, userdata, rc):\n    print('Disconnected from MQTT Broker!')\n\n# Usage example:\n\ndef disconnected(client, userdata, rc):\n    # This method is called when the client is disconnected\n    print(\"Disconnected from MQTT Broker!\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_nonblocking_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_nonblocking_esp32spi.py",
      "chunk_type": "function",
      "function_name": "disconnected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# Method callled when a client's subscribed feed has a new\nvalue.\n:param str topic: The topic of the feed with a new value.\n:param str message: The new value\ndef message(client, topic, message):\n    \"\"\"Method callled when a client's subscribed feed has a new\n    value.\n    :param str topic: The topic of the feed with a new value.\n    :param str message: The new value\n    \"\"\"\n    print(f'New message on topic {topic}: {message}')\n\n# Usage example:\n    value.\n    :param str topic: The topic of the feed with a new value.\n    :param str message: The new value\n    \"\"\"\n    print(f\"New message on topic {topic}: {message}\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_nonblocking_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_nonblocking_esp32spi.py",
      "chunk_type": "function",
      "function_name": "message"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# Connect to WiFi\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Set up a MiniMQTT Client\nmqtt_client = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_nonblocking_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_nonblocking_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Set up a MiniMQTT Client\nmqtt_client = MQTT.MQTT(\n    broker=\"io.adafruit.com\",",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_nonblocking_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_nonblocking_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\nbroker = getenv(\"broker\", \"io.adafruit.com\")\n# Create a serial connection for the FONA connection\nuart = busio.UART(board.TX, board.RX)\nrst = digitalio.DigitalInOut(board.D4)\n# Initialize FONA\nfona = FONA(uart, rst)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cellular/minimqtt_simpletest_cellular.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_cellular.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\nbroker = getenv(\"broker\", \"io.adafruit.com\")\n# Create a serial connection for the FONA connection\nuart = busio.UART(board.TX, board.RX)\nrst = digitalio.DigitalInOut(board.D4)\n# Initialize FONA\nfona = FONA(uart, rst)\n### Topic Setup ###",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cellular/minimqtt_simpletest_cellular.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_cellular.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef connect(client, userdata, flags, rc):\n    print('Connected to MQTT Broker!')\n    print(f'Flags: {flags}\\n RC: {rc}')\n\n# Usage example:\nfrom os import getenv\n\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cellular/minimqtt_simpletest_cellular.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_cellular.py",
      "chunk_type": "function",
      "function_name": "connect"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef disconnect(client, userdata, rc):\n    print('Disconnected from MQTT Broker!')\n\n# Usage example:\n\ndef disconnect(client, userdata, rc):\n    # This method is called when the client disconnects\n    # from the broker.\n    print(\"Disconnected from MQTT Broker!\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cellular/minimqtt_simpletest_cellular.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_cellular.py",
      "chunk_type": "function",
      "function_name": "disconnect"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef subscribe(client, userdata, topic, granted_qos):\n    print(f'Subscribed to {topic} with QOS level {granted_qos}')\n\n# Usage example:\n\ndef subscribe(client, userdata, topic, granted_qos):\n    # This method is called when the client subscribes to a new feed.\n    print(f\"Subscribed to {topic} with QOS level {granted_qos}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cellular/minimqtt_simpletest_cellular.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_cellular.py",
      "chunk_type": "function",
      "function_name": "subscribe"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef unsubscribe(client, userdata, topic, pid):\n    print(f'Unsubscribed from {topic} with PID {pid}')\n\n# Usage example:\n\ndef unsubscribe(client, userdata, topic, pid):\n    # This method is called when the client unsubscribes from a feed.\n    print(f\"Unsubscribed from {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cellular/minimqtt_simpletest_cellular.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_cellular.py",
      "chunk_type": "function",
      "function_name": "unsubscribe"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef publish(client, userdata, topic, pid):\n    print(f'Published to {topic} with PID {pid}')\n\n# Usage example:\n\ndef publish(client, userdata, topic, pid):\n    # This method is called when the client publishes data to a feed.\n    print(f\"Published to {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cellular/minimqtt_simpletest_cellular.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_cellular.py",
      "chunk_type": "function",
      "function_name": "publish"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, fona)\n# Set up a MiniMQTT Client\nclient = MQTT.MQTT(\n    broker=broker,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cellular/minimqtt_simpletest_cellular.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest_cellular.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_displayio_layout.widgets.cartesian import Cartesian\n\n# Fonts used for the Dial tick labels\ntick_font = terminalio.FONT\ndisplay = board.DISPLAY  # create the display on the PyPortal or Clue (for example)\n# otherwise change this to setup the display\n# for display chip driver and pinout you have (e.g. ILI9341)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_cartesian_simpletest.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_cartesian_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom digitalio import DigitalInOut\nfrom adafruit_vl53l0x import VL53L0X\n\n# declare the singleton variable for the default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# declare the digital output pins connected to the \"SHDN\" pin on each VL53L0X sensor\nxshut = [",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l0x/examples/vl53l0x_multiple_sensors_continuous.py",
      "library": "vl53l0x",
      "type": "example",
      "file_name": "vl53l0x_multiple_sensors_continuous.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom digitalio import DigitalInOut\nfrom adafruit_vl53l0x import VL53L0X\n\nxshut = [DigitalInOut(board.D17), DigitalInOut(board.D18)]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l0x/examples/vl53l0x_multiple_sensors_continuous.py",
      "library": "vl53l0x",
      "type": "example",
      "file_name": "vl53l0x_multiple_sensors_continuous.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom digitalio import DigitalInOut\nfrom adafruit_vl53l0x import VL53L0X\n\n# take count=5 samples\ndef detect_range(count=5):\n    \"\"\"take count=5 samples\"\"\"\n    while count:\n        for index, sensor in enumerate(vl53):\n            print(f'Sensor {index + 1} Range: {sensor.range}mm')\n        time.sleep(1.0)\n        count -= 1\n\n# Usage example:\n\nif __name__ == \"__main__\":\n    detect_range()\n    stop_continuous()\nelse:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l0x/examples/vl53l0x_multiple_sensors_continuous.py",
      "library": "vl53l0x",
      "type": "example",
      "file_name": "vl53l0x_multiple_sensors_continuous.py",
      "chunk_type": "function",
      "function_name": "detect_range"
    }
  },
  {
    "content": "import time\nimport board\nfrom digitalio import DigitalInOut\nfrom adafruit_vl53l0x import VL53L0X\n\n# this is not required, if you use XSHUT to reset the sensor.\nunless if you want to save some energy\ndef stop_continuous():\n    \"\"\"this is not required, if you use XSHUT to reset the sensor.\n    unless if you want to save some energy\n    \"\"\"\n    for sensor in vl53:\n        sensor.stop_continuous()\n\n# Usage example:\n    \"\"\"\n    for sensor in vl53:\n        sensor.stop_continuous()\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l0x/examples/vl53l0x_multiple_sensors_continuous.py",
      "library": "vl53l0x",
      "type": "example",
      "file_name": "vl53l0x_multiple_sensors_continuous.py",
      "chunk_type": "function",
      "function_name": "stop_continuous"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_mpr121\n\n# Import MPR121 module.\nimport adafruit_mpr121\n# Create I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create MPR121 object.\nmpr121 = adafruit_mpr121.MPR121(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpr121/examples/mpr121_simpletest.py",
      "library": "mpr121",
      "type": "example",
      "file_name": "mpr121_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_mpr121\n\n# Create I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create MPR121 object.\nmpr121 = adafruit_mpr121.MPR121(i2c)\n# Note you can optionally change the address of the device:\n# mpr121 = adafruit_mpr121.MPR121(i2c, address=0x91)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpr121/examples/mpr121_simpletest.py",
      "library": "mpr121",
      "type": "example",
      "file_name": "mpr121_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_espatcontrol import adafruit_espatcontrol, adafruit_espatcontrol_wifimanager\n\npixel_status = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.3, auto_write=True)\n# Debug Level\n# Change the Debug Flag if you have issues with AT commands\ndebugflag = False",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_AIO_wifimanager_enterprise.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_AIO_wifimanager_enterprise.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_espatcontrol import adafruit_espatcontrol, adafruit_espatcontrol_wifimanager\n\nesp = adafruit_espatcontrol.ESP_ATcontrol(uart, 115200, reset_pin=resetpin, rts_pin=rtspin, debug=debugflag)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_AIO_wifimanager_enterprise.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_AIO_wifimanager_enterprise.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_espatcontrol import adafruit_espatcontrol, adafruit_espatcontrol_wifimanager\n\nwifi = adafruit_espatcontrol_wifimanager.ESPAT_WiFiManager(esp, secrets, status_light, enterprise=True, debug=debugflag)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_AIO_wifimanager_enterprise.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_AIO_wifimanager_enterprise.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom displayio import Group, OnDiskBitmap, Palette\nfrom vectorio import Circle\nfrom adafruit_anchored_tilegrid import AnchoredTileGrid\n\n# Reference to built-in display\ndisplay = board.DISPLAY\n# palette to use for drawing a circle\ncircle_palette = Palette(1)\ncircle_palette[0] = 0xFF00FF",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/anchored_tilegrid/examples/anchored_tilegrid_simpletest.py",
      "library": "anchored_tilegrid",
      "type": "example",
      "file_name": "anchored_tilegrid_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_drv2605\n\nimport busio\nimport adafruit_drv2605\n# Initialize I2C bus and DRV2605 module.\ni2c = busio.I2C(board.SCL, board.SDA)\ndrv = adafruit_drv2605.DRV2605(i2c)\n# Main loop runs forever trying each effect (1-123).\n# See table 11.2 in the datasheet for a list of all the effect names and IDs.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/drv2605/examples/drv2605_simpletest.py",
      "library": "drv2605",
      "type": "example",
      "file_name": "drv2605_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_drv2605\n\nimport adafruit_drv2605\n# Initialize I2C bus and DRV2605 module.\ni2c = busio.I2C(board.SCL, board.SDA)\ndrv = adafruit_drv2605.DRV2605(i2c)\n# Main loop runs forever trying each effect (1-123).\n# See table 11.2 in the datasheet for a list of all the effect names and IDs.\n#   http://www.ti.com/lit/ds/symlink/drv2605.pdf",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/drv2605/examples/drv2605_simpletest.py",
      "library": "drv2605",
      "type": "example",
      "file_name": "drv2605_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8253\n\nimport adafruit_uc8253\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8253/examples/uc8253_ThinkInk_370_Tricolor_BABMFGNR.py",
      "library": "uc8253",
      "type": "example",
      "file_name": "uc8253_ThinkInk_370_Tricolor_BABMFGNR.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8253\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8253/examples/uc8253_ThinkInk_370_Tricolor_BABMFGNR.py",
      "library": "uc8253",
      "type": "example",
      "file_name": "uc8253_ThinkInk_370_Tricolor_BABMFGNR.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8253\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8253/examples/uc8253_ThinkInk_370_Tricolor_BABMFGNR.py",
      "library": "uc8253",
      "type": "example",
      "file_name": "uc8253_ThinkInk_370_Tricolor_BABMFGNR.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8253\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8253/examples/uc8253_ThinkInk_370_Tricolor_BABMFGNR.py",
      "library": "uc8253",
      "type": "example",
      "file_name": "uc8253_ThinkInk_370_Tricolor_BABMFGNR.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8253\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8253/examples/uc8253_ThinkInk_370_Tricolor_BABMFGNR.py",
      "library": "uc8253",
      "type": "example",
      "file_name": "uc8253_ThinkInk_370_Tricolor_BABMFGNR.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8253\n\ndisplay = adafruit_uc8253.UC8253(display_bus, width=240, height=416, busy_pin=epd_busy, rotation=0, highlight_color=16711680)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8253/examples/uc8253_ThinkInk_370_Tricolor_BABMFGNR.py",
      "library": "uc8253",
      "type": "example",
      "file_name": "uc8253_ThinkInk_370_Tricolor_BABMFGNR.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_pcf8575\n\nimport adafruit_pcf8575\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8575.PCF8575(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8575/examples/pcf8575_blink16outputs.py",
      "library": "pcf8575",
      "type": "example",
      "file_name": "pcf8575_blink16outputs.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_pcf8575\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8575.PCF8575(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8575/examples/pcf8575_blink16outputs.py",
      "library": "pcf8575",
      "type": "example",
      "file_name": "pcf8575_blink16outputs.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2022 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\n\nimport adafruit_pcf8575\n\nprint(\"PCF8575 16 output LED blink test\")\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8575.PCF8575(i2c)\n\nwhile True:\n    pcf.write_gpio(0x5555)  # set every other pin high\n    time.sleep(0.2)\n    pcf.write_gpio(0xAAAA)  # toggle high/low pins\n    time.sleep(0.2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8575/examples/pcf8575_blink16outputs.py",
      "library": "pcf8575",
      "type": "example",
      "file_name": "pcf8575_blink16outputs.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport busio\nfrom digitalio import Direction, Pull\nfrom RPi import GPIO\nfrom adafruit_mcp230xx.mcp23017 import MCP23017\n\n# Initialize the I2C bus:\ni2c = busio.I2C(board.SCL, board.SDA)\n# Initialize the MCP23017 chip on the bonnet\nmcp = MCP23017(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp230xx/examples/mcp230xx_event_detect_interrupt.py",
      "library": "mcp230xx",
      "type": "example",
      "file_name": "mcp230xx_event_detect_interrupt.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport busio\nfrom digitalio import Direction, Pull\nfrom RPi import GPIO\nfrom adafruit_mcp230xx.mcp23017 import MCP23017\n\n# Callback function to be called when an Interrupt occurs.\ndef print_interrupt(port):\n    \"\"\"Callback function to be called when an Interrupt occurs.\"\"\"\n    for pin_flag in mcp.int_flag:\n        print(f'Interrupt connected to Pin: {port}')\n        print(f'Pin number: {pin_flag} changed to: {pins[pin_flag].value}')\n    mcp.clear_ints()\n\n# Usage example:\nGPIO.setup(interrupt, GPIO.IN, GPIO.PUD_UP)  # Set up Pi's pin as input, pull up\n\n# The add_event_detect fuction will call our print_interrupt callback function\n# every time an interrupt gets triggered.\nGPIO.add_event_detect(interrupt, GPIO.FALLING, callback=print_interrupt, bouncetime=10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp230xx/examples/mcp230xx_event_detect_interrupt.py",
      "library": "mcp230xx",
      "type": "example",
      "file_name": "mcp230xx_event_detect_interrupt.py",
      "chunk_type": "function",
      "function_name": "print_interrupt"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lsm9ds1\n\nimport board\nimport adafruit_lsm9ds1\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lsm9ds1.LSM9DS1_I2C(i2c)\n# SPI connection:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm9ds1/examples/lsm9ds1_simpletest.py",
      "library": "lsm9ds1",
      "type": "example",
      "file_name": "lsm9ds1_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lsm9ds1\n\nimport adafruit_lsm9ds1\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lsm9ds1.LSM9DS1_I2C(i2c)\n# SPI connection:\n# from digitalio import DigitalInOut, Direction\n# spi = board.SPI()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm9ds1/examples/lsm9ds1_simpletest.py",
      "library": "lsm9ds1",
      "type": "example",
      "file_name": "lsm9ds1_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport rp2pio\nimport adafruit_pioasm\n\nassembled = adafruit_pioasm.assemble(hello)\nsm = rp2pio.StateMachine(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_hello.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_hello.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport rp2pio\nimport adafruit_pioasm\n\nsm = rp2pio.StateMachine(assembled, frequency=4000, first_out_pin=board.LED)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_hello.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_hello.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 Jeff Epler, written for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n#\n# Adapted from the example https://github.com/raspberrypi/pico-examples/tree/master/pio/hello_pio\n\nimport time\n\nimport board\nimport rp2pio\n\nimport adafruit_pioasm\n\nhello = \"\"\"\n.program hello\nloop:\n    pull\n    out pins, 1\n; This program uses a 'jmp' at the end to follow the example.  However,\n; in a many cases (including this one!) there is no jmp needed at the end\n; and the default \"wrap\" behavior will automatically return to the \"pull\"\n; instruction at the beginning.\n    jmp loop\n\"\"\"\n\nassembled = adafruit_pioasm.assemble(hello)\n\nsm = rp2pio.StateMachine(\n    assembled,\n    frequency=4000,\n    first_out_pin=board.LED,\n)\nprint(\"real frequency\", sm.frequency)\n\nwhile True:\n    sm.write(bytes((1,)))\n    time.sleep(0.5)\n    sm.write(bytes((0,)))\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_hello.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_hello.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_si5351\n\nimport busio\nimport adafruit_si5351\n# Initialize I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Initialize SI5351.\nsi5351 = adafruit_si5351.SI5351(i2c)\n# Alternatively you can specify the I2C address if it has been changed:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si5351/examples/si5351_simpletest.py",
      "library": "si5351",
      "type": "example",
      "file_name": "si5351_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_si5351\n\n# Initialize I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Initialize SI5351.\nsi5351 = adafruit_si5351.SI5351(i2c)\n# Alternatively you can specify the I2C address if it has been changed:\n# si5351 = adafruit_si5351.SI5351(i2c, address=0x61)\n# Now configue the PLLs and clock outputs.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si5351/examples/si5351_simpletest.py",
      "library": "si5351",
      "type": "example",
      "file_name": "si5351_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_si5351\n\n#  - R_DIV_8: divider of 8\n#  - R_DIV_16: divider of 16\n#  - R_DIV_32: divider of 32\n#  - R_DIV_64: divider of 64\n#  - R_DIV_128: divider of 128\nsi5351.clock_2.r_divider = adafruit_si5351.R_DIV_64",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si5351/examples/si5351_simpletest.py",
      "library": "si5351",
      "type": "example",
      "file_name": "si5351_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\n\n# use built in display (PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\n# wait until we can draw",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-text/examples/display_text_magtag.py",
      "library": "display-text",
      "type": "example",
      "file_name": "display_text_magtag.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_vcnl4040\n\nimport board\nimport adafruit_vcnl4040\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_vcnl4040.VCNL4040(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4040/examples/vcnl4040_simpletest.py",
      "library": "vcnl4040",
      "type": "example",
      "file_name": "vcnl4040_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_vcnl4040\n\nimport adafruit_vcnl4040\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_vcnl4040.VCNL4040(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4040/examples/vcnl4040_simpletest.py",
      "library": "vcnl4040",
      "type": "example",
      "file_name": "vcnl4040_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_vcnl4040\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_vcnl4040.VCNL4040(i2c)\n\nwhile True:\n    print(\"Proximity:\", sensor.proximity)\n    print(\"Light: %d lux\" % sensor.lux)\n    time.sleep(1.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4040/examples/vcnl4040_simpletest.py",
      "library": "vcnl4040",
      "type": "example",
      "file_name": "vcnl4040_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_icm20x import ICM20948, MagDataRate\n\nimport board\ncycles = 200\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nicm = ICM20948(i2c)\n# Cycle between two data rates",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/icm20x/examples/icm20x_icm20948_mag_data_rate_test.py",
      "library": "icm20x",
      "type": "example",
      "file_name": "icm20x_icm20948_mag_data_rate_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# pylint: disable=no-member\nimport time\n\nimport board\n\nfrom adafruit_icm20x import ICM20948, MagDataRate\n\ncycles = 200\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nicm = ICM20948(i2c)\n\n# Cycle between two data rates\n# Best viewed in the Mu serial plotter where you can see how\n# the data rate affects the resolution of the data\nwhile True:\n    icm.magnetometer_data_rate = MagDataRate.RATE_100HZ\n    for i in range(cycles):\n        print(icm.magnetic)\n    time.sleep(0.3)\n    icm.magnetometer_data_rate = MagDataRate.RATE_10HZ\n    for i in range(cycles):\n        print(icm.magnetic)\n    time.sleep(0.3)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/icm20x/examples/icm20x_icm20948_mag_data_rate_test.py",
      "library": "icm20x",
      "type": "example",
      "file_name": "icm20x_icm20948_mag_data_rate_test.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_scd30\n\nimport adafruit_scd30\n# SCD-30 has tempremental I2C with clock stretching, datasheet recommends\n# starting at 50KHz\ni2c = busio.I2C(board.SCL, board.SDA, frequency=50000)\nscd = adafruit_scd30.SCD30(i2c)\n# The SCD30 reset generates a hiccup on the SCL and SDA lines\n# which can end up not being handled well by different hosts.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/scd30/examples/scd30_mcp2221test.py",
      "library": "scd30",
      "type": "example",
      "file_name": "scd30_mcp2221test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_scd30\n\nimport adafruit_scd30\n# SCD-30 has tempremental I2C with clock stretching, datasheet recommends\n# starting at 50KHz\ni2c = busio.I2C(board.SCL, board.SDA, frequency=50000)\nscd = adafruit_scd30.SCD30(i2c)\n# The SCD30 reset generates a hiccup on the SCL and SDA lines\n# which can end up not being handled well by different hosts.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/scd30/examples/scd30_mcp2221test.py",
      "library": "scd30",
      "type": "example",
      "file_name": "scd30_mcp2221test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\n\nTEXT_URL = \"http://wifitest.adafruit.com/testwifi/index.html\"\nJSON_URL = \"http://wifitest.adafruit.com/testwifi/sample.json\"\n# Raspberry Pi RP2040 Pinout\nesp32_cs = DigitalInOut(board.GP13)\nesp32_ready = DigitalInOut(board.GP14)\nesp32_reset = DigitalInOut(board.GP15)\nspi = busio.SPI(board.GP10, board.GP11, board.GP12)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_simpletest_rp2040.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_simpletest_rp2040.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\n\nTEXT_URL = \"http://wifitest.adafruit.com/testwifi/index.html\"\nJSON_URL = \"http://wifitest.adafruit.com/testwifi/sample.json\"\n# Raspberry Pi RP2040 Pinout\nesp32_cs = DigitalInOut(board.GP13)\nesp32_ready = DigitalInOut(board.GP14)\nesp32_reset = DigitalInOut(board.GP15)\nspi = busio.SPI(board.GP10, board.GP11, board.GP12)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_simpletest_rp2040.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_simpletest_rp2040.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\n\nJSON_URL = \"http://wifitest.adafruit.com/testwifi/sample.json\"\n# Raspberry Pi RP2040 Pinout\nesp32_cs = DigitalInOut(board.GP13)\nesp32_ready = DigitalInOut(board.GP14)\nesp32_reset = DigitalInOut(board.GP15)\nspi = busio.SPI(board.GP10, board.GP11, board.GP12)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_simpletest_rp2040.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_simpletest_rp2040.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n# Raspberry Pi RP2040 Pinout\nesp32_cs = DigitalInOut(board.GP13)\nesp32_ready = DigitalInOut(board.GP14)\nesp32_reset = DigitalInOut(board.GP15)\nspi = busio.SPI(board.GP10, board.GP11, board.GP12)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_simpletest_rp2040.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_simpletest_rp2040.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\n\nesp32_cs = DigitalInOut(board.GP13)\nesp32_ready = DigitalInOut(board.GP14)\nesp32_reset = DigitalInOut(board.GP15)\nspi = busio.SPI(board.GP10, board.GP11, board.GP12)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_simpletest_rp2040.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_simpletest_rp2040.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\n\nesp32_reset = DigitalInOut(board.GP15)\nspi = busio.SPI(board.GP10, board.GP11, board.GP12)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\nif esp.status == adafruit_esp32spi.WL_IDLE_STATUS:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_simpletest_rp2040.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_simpletest_rp2040.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\n\nspi = busio.SPI(board.GP10, board.GP11, board.GP12)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\nif esp.status == adafruit_esp32spi.WL_IDLE_STATUS:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_simpletest_rp2040.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_simpletest_rp2040.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\n\nspi = busio.SPI(board.GP10, board.GP11, board.GP12)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\nif esp.status == adafruit_esp32spi.WL_IDLE_STATUS:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_simpletest_rp2040.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_simpletest_rp2040.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import ssl\nimport time\nimport adafruit_requests\nimport socketpool\nimport wifi\nimport adafruit_json_stream as json_stream\n\nimport wifi\nimport adafruit_json_stream as json_stream\npool = socketpool.SocketPool(wifi.radio)\nsession = adafruit_requests.Session(pool, ssl.create_default_context())\nSCORE_URL = \"http://site.api.espn.com/apis/site/v2/sports/baseball/mlb/scoreboard\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/json_stream/examples/json_stream_simpletest.py",
      "library": "json_stream",
      "type": "example",
      "file_name": "json_stream_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2017 Scott Shawcroft, written for Adafruit Industries\n# SPDX-FileCopyrightText: Copyright (c) 2023 Scott Shawcroft for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport ssl\nimport time\n\nimport adafruit_requests\nimport socketpool\nimport wifi\n\nimport adafruit_json_stream as json_stream\n\npool = socketpool.SocketPool(wifi.radio)\nsession = adafruit_requests.Session(pool, ssl.create_default_context())\n\nSCORE_URL = \"http://site.api.espn.com/apis/site/v2/sports/baseball/mlb/scoreboard\"\n\nwhile True:\n    resp = session.get(SCORE_URL)\n    json_data = json_stream.load(resp.iter_content(32))\n    for event in json_data[\"events\"]:\n        if \"Seattle\" not in event[\"name\"]:\n            continue\n        for competition in event[\"competitions\"]:\n            for competitor in competition[\"competitors\"]:\n                print(competitor[\"team\"][\"displayName\"], competitor[\"score\"])\n    resp.close()\n    time.sleep(60)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/json_stream/examples/json_stream_simpletest.py",
      "library": "json_stream",
      "type": "example",
      "file_name": "json_stream_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport keypad\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\nimport storage\nimport adafruit_ov5640\nsd_spi = busio.SPI(clock=board.GP18, MOSI=board.GP19, MISO=board.GP16)\nsd_cs = board.GP17\nsdcard = sdcardio.SDCard(sd_spi, sd_cs)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_capture_manual_focus.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_capture_manual_focus.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport keypad\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\nimport adafruit_ov5640\nsd_spi = busio.SPI(clock=board.GP18, MOSI=board.GP19, MISO=board.GP16)\nsd_cs = board.GP17\nsdcard = sdcardio.SDCard(sd_spi, sd_cs)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_capture_manual_focus.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_capture_manual_focus.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport keypad\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\nsdcard = sdcardio.SDCard(sd_spi, sd_cs)\nvfs = storage.VfsFat(sdcard)\ni2c = busio.I2C(board.GP5, board.GP4)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_capture_manual_focus.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_capture_manual_focus.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport keypad\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ni2c = busio.I2C(board.GP5, board.GP4)\nreset = digitalio.DigitalInOut(board.GP14)\ncam = adafruit_ov5640.OV5640(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_capture_manual_focus.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_capture_manual_focus.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport keypad\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ncam = adafruit_ov5640.OV5640(i2c, data_pins=(board.GP6, board.GP7, board.GP8, board.GP9, board.GP10, board.GP11, board.GP12, board.GP13), clock=board.GP3, vsync=board.GP0, href=board.GP2, mclk=None, shutdown=None, reset=reset, size=adafruit_ov5640.OV5640_SIZE_VGA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_capture_manual_focus.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_capture_manual_focus.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport keypad\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\n    size=adafruit_ov5640.OV5640_SIZE_VGA,\nkeys = keypad.Keys((board.GP22,), value_when_pressed=False, pull=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_capture_manual_focus.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_capture_manual_focus.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport keypad\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ndef exists(filename):\n    try:\n        os.stat(filename)\n        return True\n    except OSError as _:\n        return False\n\n# Usage example:\n            filename = f\"/sd/img{self.count:04d}.jpg\"\n            self.count += 1\n            if exists(filename):\n                continue\n            print(\"# writing to\", filename)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_capture_manual_focus.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_capture_manual_focus.py",
      "chunk_type": "function",
      "function_name": "exists"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport keypad\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\nclass ImageCounter:\n\n    def __init__(self):\n        self.count = 0\n\n    def get_next(self):\n        while True:\n            filename = f'/sd/img{self.count:04d}.jpg'\n            self.count += 1\n            if exists(filename):\n                continue\n            print('# writing to', filename)\n            return open(filename, 'wb')\n\n# Usage example:\n\n\nclass ImageCounter:\n    def __init__(self):\n        self.count = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_capture_manual_focus.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_capture_manual_focus.py",
      "chunk_type": "function",
      "function_name": "ImageCounter"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport keypad\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ndef open_next_image():\n    return _image_counter.get_next()\n\n# Usage example:\n            print(f\"Resolution {cam.width}x{cam.height}\")\n            try:\n                with open_next_image() as f:\n                    f.write(jpeg)\n                print(\"# Wrote image\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_capture_manual_focus.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_capture_manual_focus.py",
      "chunk_type": "function",
      "function_name": "open_next_image"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport keypad\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ncam.colorspace = adafruit_ov5640.OV5640_COLOR_JPEG\ncam.quality = 3\nb = bytearray(cam.capture_buffer_size)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_capture_manual_focus.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_capture_manual_focus.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport sys\nimport time\nimport board\nimport busio\nimport numpy as np\nfrom colour import Color\nfrom scipy.interpolate import griddata\nimport adafruit_amg88xx\n\nimport adafruit_amg88xx\nI2C_BUS = busio.I2C(board.SCL, board.SDA)\n# low range of the sensor (this will be blue on the screen)\nMINTEMP = 26.0\n# high range of the sensor (this will be red on the screen)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/amg88xx/examples/amg88xx_rpi_thermal_cam_console.py",
      "library": "amg88xx",
      "type": "example",
      "file_name": "amg88xx_rpi_thermal_cam_console.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport sys\nimport time\nimport board\nimport busio\nimport numpy as np\nfrom colour import Color\nfrom scipy.interpolate import griddata\nimport adafruit_amg88xx\n\n# low range of the sensor (this will be blue on the screen)\nMINTEMP = 26.0\n# high range of the sensor (this will be red on the screen)\nMAXTEMP = 32.0\nCOLORDEPTH = 1024\nSENSOR = adafruit_amg88xx.AMG88XX(I2C_BUS)\nPOINTS = [(math.floor(ix / 8), (ix % 8)) for ix in range(0, 64)]\nGRID_X, GRID_Y = np.mgrid[0:7:32j, 0:7:32j]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/amg88xx/examples/amg88xx_rpi_thermal_cam_console.py",
      "library": "amg88xx",
      "type": "example",
      "file_name": "amg88xx_rpi_thermal_cam_console.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport sys\nimport time\nimport board\nimport busio\nimport numpy as np\nfrom colour import Color\nfrom scipy.interpolate import griddata\nimport adafruit_amg88xx\n\n# Maps value of the temperature to color\ndef map_value(x_value, in_min, in_max, out_min, out_max):\n    \"\"\"Maps value of the temperature to color\"\"\"\n    return (x_value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min\n\n# Usage example:\n    for row in SENSOR.pixels:\n        PIXELS = PIXELS + row\n    PIXELS = [map_value(p, MINTEMP, MAXTEMP, 0, COLORDEPTH - 1) for p in PIXELS]\n\n    # perform interpolation",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/amg88xx/examples/amg88xx_rpi_thermal_cam_console.py",
      "library": "amg88xx",
      "type": "example",
      "file_name": "amg88xx_rpi_thermal_cam_console.py",
      "chunk_type": "function",
      "function_name": "map_value"
    }
  },
  {
    "content": "import math\nimport sys\nimport time\nimport board\nimport busio\nimport numpy as np\nfrom colour import Color\nfrom scipy.interpolate import griddata\nimport adafruit_amg88xx\n\n# Outputs a colored text to console at coordinates\ndef print_there(console_x, console_y, text, color):\n    \"\"\"Outputs a colored text to console at coordinates\"\"\"\n    sys.stdout.write('\\x1b7\\x1b[48;5;%dm' % color)\n    sys.stdout.write('\\x1b7\\x1b[%d;%df%s\\x1b8' % (console_x, console_y, text))\n\n# Usage example:\n            if color_index > len(CONSOLE_COLORS) - 1:\n                color_index = len(CONSOLE_COLORS) - 1\n            print_there(x_console, Y_CONSOLE * 2 - 2, \"  \", CONSOLE_COLORS[color_index])\n            if pixel > MAXPIXEL:\n                MAXPIXEL = pixel",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/amg88xx/examples/amg88xx_rpi_thermal_cam_console.py",
      "library": "amg88xx",
      "type": "example",
      "file_name": "amg88xx_rpi_thermal_cam_console.py",
      "chunk_type": "function",
      "function_name": "print_there"
    }
  },
  {
    "content": "import board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_pn532.spi import PN532_SPI\n\n# wakeup! this means we don't need to do the I2C clock-stretch thing\n# req_pin = DigitalInOut(board.D12)\n# pn532 = PN532_I2C(i2c, debug=False, reset=reset_pin, req=req_pin)\n# SPI connection:\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\ncs_pin = DigitalInOut(board.D5)\npn532 = PN532_SPI(spi, cs_pin, debug=False)\n# UART connection",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pn532/examples/pn532_readwrite_ntag2xx.py",
      "library": "pn532",
      "type": "example",
      "file_name": "pn532_readwrite_ntag2xx.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_pn532.spi import PN532_SPI\n\n# req_pin = DigitalInOut(board.D12)\n# pn532 = PN532_I2C(i2c, debug=False, reset=reset_pin, req=req_pin)\n# SPI connection:\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\ncs_pin = DigitalInOut(board.D5)\npn532 = PN532_SPI(spi, cs_pin, debug=False)\n# UART connection\n# uart = busio.UART(board.TX, board.RX, baudrate=115200, timeout=0.1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pn532/examples/pn532_readwrite_ntag2xx.py",
      "library": "pn532",
      "type": "example",
      "file_name": "pn532_readwrite_ntag2xx.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mprls\n\nimport board\nimport adafruit_mprls\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Simplest use, connect to default over I2C\nmpr = adafruit_mprls.MPRLS(i2c, psi_min=0, psi_max=25)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mprls/examples/mprls_simpletest.py",
      "library": "mprls",
      "type": "example",
      "file_name": "mprls_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mprls\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Simplest use, connect to default over I2C\nmpr = adafruit_mprls.MPRLS(i2c, psi_min=0, psi_max=25)\n# You can also specify both reset and eoc pins",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mprls/examples/mprls_simpletest.py",
      "library": "mprls",
      "type": "example",
      "file_name": "mprls_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_mprls\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\n# Simplest use, connect to default over I2C\nmpr = adafruit_mprls.MPRLS(i2c, psi_min=0, psi_max=25)\n\n# You can also specify both reset and eoc pins\n\"\"\"\nimport digitalio\nreset = digitalio.DigitalInOut(board.D5)\neoc = digitalio.DigitalInOut(board.D6)\nmpr = adafruit_mprls.MPRLS(i2c, eoc_pin=eoc, reset_pin=reset,\n                           psi_min=0, psi_max=25)\n\"\"\"\n\nwhile True:\n    print((mpr.pressure,))\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mprls/examples/mprls_simpletest.py",
      "library": "mprls",
      "type": "example",
      "file_name": "mprls_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nfrom adafruit_neokey.neokey1x4 import NeoKey1x4\n\nimport board\n# use default I2C bus\ni2c_bus = board.I2C()\n# Create a NeoKey object\nneokey = NeoKey1x4(i2c_bus, addr=0x30)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/neokey/examples/neokey1x4_simpletest.py",
      "library": "neokey",
      "type": "example",
      "file_name": "neokey1x4_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\"\"\"NeoKey simpletest.\"\"\"\n\nimport board\n\nfrom adafruit_neokey.neokey1x4 import NeoKey1x4\n\n# use default I2C bus\ni2c_bus = board.I2C()\n\n# Create a NeoKey object\nneokey = NeoKey1x4(i2c_bus, addr=0x30)\n\nprint(\"Adafruit NeoKey simple test\")\n\n# Check each button, if pressed, light up the matching neopixel!\nwhile True:\n    if neokey[0]:\n        print(\"Button A\")\n        neokey.pixels[0] = 0xFF0000\n    else:\n        neokey.pixels[0] = 0x0\n\n    if neokey[1]:\n        print(\"Button B\")\n        neokey.pixels[1] = 0xFFFF00\n    else:\n        neokey.pixels[1] = 0x0\n\n    if neokey[2]:\n        print(\"Button C\")\n        neokey.pixels[2] = 0x00FF00\n    else:\n        neokey.pixels[2] = 0x0\n\n    if neokey[3]:\n        print(\"Button D\")\n        neokey.pixels[3] = 0x00FFFF\n    else:\n        neokey.pixels[3] = 0x0\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/neokey/examples/neokey1x4_simpletest.py",
      "library": "neokey",
      "type": "example",
      "file_name": "neokey1x4_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_displayio_sh1107\n\n# oled_reset = board.D9\n# Use for I2C\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndisplay_bus = I2CDisplayBus(i2c, device_address=0x3C)\n# SH1107 is vertically oriented 64x128",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_sh1107/examples/displayio_sh1107_simpletest.py",
      "library": "displayio_sh1107",
      "type": "example",
      "file_name": "displayio_sh1107_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_displayio_sh1107\n\n# SH1107 is vertically oriented 64x128\nWIDTH = 128\nHEIGHT = 64\nBORDER = 2\ndisplay = adafruit_displayio_sh1107.SH1107(display_bus, width=WIDTH, height=HEIGHT)\n# Make the display context\nsplash = displayio.Group()\ndisplay.root_group = splash",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_sh1107/examples/displayio_sh1107_simpletest.py",
      "library": "displayio_sh1107",
      "type": "example",
      "file_name": "displayio_sh1107_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_74hc595\n\nimport board\nimport digitalio\nimport adafruit_74hc595\nlatch_pin = digitalio.DigitalInOut(board.D5)\nsr = adafruit_74hc595.ShiftRegister74HC595(board.SPI(), latch_pin)\n# Create the pin objects in a list\npins = [sr.get_pin(n) for n in range(8)]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/74hc595/examples/74hc595_8_led.py",
      "library": "74hc595",
      "type": "example",
      "file_name": "74hc595_8_led.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_74hc595\n\nimport digitalio\nimport adafruit_74hc595\nlatch_pin = digitalio.DigitalInOut(board.D5)\nsr = adafruit_74hc595.ShiftRegister74HC595(board.SPI(), latch_pin)\n# Create the pin objects in a list\npins = [sr.get_pin(n) for n in range(8)]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/74hc595/examples/74hc595_8_led.py",
      "library": "74hc595",
      "type": "example",
      "file_name": "74hc595_8_led.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport digitalio\n\nimport adafruit_74hc595\n\nlatch_pin = digitalio.DigitalInOut(board.D5)\nsr = adafruit_74hc595.ShiftRegister74HC595(board.SPI(), latch_pin)\n\n# Create the pin objects in a list\npins = [sr.get_pin(n) for n in range(8)]\n\nwhile True:\n    for _ in range(2):  # Run the chase animation twice\n        for enabled_pin in range(len(pins)):\n            for pin_number, pin in enumerate(pins):\n                if pin_number == enabled_pin:\n                    pin.value = True\n                else:\n                    pin.value = False\n                time.sleep(0.01)\n    for _ in range(3):  # Run the blink animation three times\n        for pin in pins:\n            pin.value = True\n        time.sleep(0.5)\n        for pin in pins:\n            pin.value = False\n        time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/74hc595/examples/74hc595_8_led.py",
      "library": "74hc595",
      "type": "example",
      "file_name": "74hc595_8_led.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import array\nimport board\nimport rp2pio\nimport adafruit_pioasm\n\ndef i2s_codec(channels=2, sample_rate=48000, bits=16, bclk_pin=None, out_pin=None, in_pin=None):\n    i2s_clock = sample_rate * channels * bits\n    pio_clock = 4 * i2s_clock\n    pio_code = '\\n        .program i2s_codec\\n        .side_set 2\\n                            ; at program start we initialize the bit count top\\n                            ; (which may be >32) with data\\n                            ; pulled from the input fifo\\n            pull noblock    ; first empty the input fifo\\n            pull noblock\\n            pull noblock\\n            pull noblock\\n            out null, 32    ; then clear OSR so we can get a new value\\n            pull block      ; then get the bit count top value from the fifo\\n                            ;        /--- LRCLK\\n                            ;        |/-- BCLK\\n                            ;        ||\\n            mov x, osr;       side 0b01 [1] ; save it in x\\n            out null, 32      side 0b00 [1]\\n            mov y, x          side 0b01 [1] ; start of main loop (wrap target=8)\\n        bitloop1:\\n            out pins 1        side 0b00\\n            in pins 1         side 0b00\\n            jmp y-- bitloop1  side 0b01 [1]\\n            out pins 1        side 0b10\\n            in pins 1         side 0b10\\n            mov y, x          side 0b11 [1]\\n        bitloop0:\\n            out pins 1        side 0b10\\n            in pins 1         side 0b10\\n            jmp y-- bitloop0  side 0b11 [1]\\n            out pins 1        side 0b00\\n            in pins 1         side 0b00\\n    '\n    pio_params = {'frequency': pio_clock, 'first_out_pin': out_pin, 'first_in_pin': in_pin, 'first_sideset_pin': bclk_pin, 'sideset_pin_count': 2, 'auto_pull': True, 'auto_push': True, 'out_shift_right': False, 'in_shift_right': False, 'pull_threshold': bits, 'push_threshold': bits, 'wait_for_txstall': False, 'wrap_target': 8}\n    pio_instructions = adafruit_pioasm.assemble(pio_code)\n    i2s_clock = sample_rate * channels * bits\n    pio_clock = 4 * i2s_clock\n    pio = rp2pio.StateMachine(pio_instructions, **pio_params)\n    return pio\n\n# Usage example:\n    pio_clock = 4 * i2s_clock\n    pio_code = \"\"\"\n        .program i2s_codec\n        .side_set 2\n                            ; at program start we initialize the bit count top",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_i2s_codec.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_i2s_codec.py",
      "chunk_type": "function",
      "function_name": "i2s_codec"
    }
  },
  {
    "content": "import array\nimport board\nimport rp2pio\nimport adafruit_pioasm\n\ndef spaced_samples(length, bits):\n    max_int = (1 << bits) - 1\n    if length == 1:\n        return [0]\n    step = max_int / (length - 1)\n    result = [round(i * step) for i in range(length)]\n    result[0] = 0\n    result[-1] = max_int\n    return result\n\n# Usage example:\n    buffer_type = \"L\"\n    buffer_width = 32\n    data = [0] * CHANNELS + spaced_samples(n_samples, BITS) + [0] * CHANNELS\n    # initialize pio bit count top value by sending it at the start of output data\n    bit_count_top = BITS * (CHANNELS // 2) - 2",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_i2s_codec.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_i2s_codec.py",
      "chunk_type": "function",
      "function_name": "spaced_samples"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_gc_iot_core import MQTT_API, Cloud_Core\n\njwt = getenv(\"jwt\")\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/GC_IOT_Core/examples/gc_iot_core_simpletest.py",
      "library": "GC_IOT_Core",
      "type": "example",
      "file_name": "gc_iot_core_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_gc_iot_core import MQTT_API, Cloud_Core\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/GC_IOT_Core/examples/gc_iot_core_simpletest.py",
      "library": "GC_IOT_Core",
      "type": "example",
      "file_name": "gc_iot_core_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_gc_iot_core import MQTT_API, Cloud_Core\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/GC_IOT_Core/examples/gc_iot_core_simpletest.py",
      "library": "GC_IOT_Core",
      "type": "example",
      "file_name": "gc_iot_core_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_gc_iot_core import MQTT_API, Cloud_Core\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/GC_IOT_Core/examples/gc_iot_core_simpletest.py",
      "library": "GC_IOT_Core",
      "type": "example",
      "file_name": "gc_iot_core_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_gc_iot_core import MQTT_API, Cloud_Core\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/GC_IOT_Core/examples/gc_iot_core_simpletest.py",
      "library": "GC_IOT_Core",
      "type": "example",
      "file_name": "gc_iot_core_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_gc_iot_core import MQTT_API, Cloud_Core\n\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)  # Uncomment for Most Boards",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/GC_IOT_Core/examples/gc_iot_core_simpletest.py",
      "library": "GC_IOT_Core",
      "type": "example",
      "file_name": "gc_iot_core_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_gc_iot_core import MQTT_API, Cloud_Core\n\n# from adafruit_esp32spi import PWMOut\n# RED_LED = PWMOut.PWMOut(esp, 26)\n# GREEN_LED = PWMOut.PWMOut(esp, 27)\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password, status_pixel=status_pixel)\n### Code ###",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/GC_IOT_Core/examples/gc_iot_core_simpletest.py",
      "library": "GC_IOT_Core",
      "type": "example",
      "file_name": "gc_iot_core_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_gc_iot_core import MQTT_API, Cloud_Core\n\ndef connect(client, userdata, flags, rc):\n    print('Connected to MQTT Broker!')\n    print(f'Flags: {flags}\\n RC: {rc}')\n    google_mqtt.subscribe_to_all_commands()\n    google_mqtt.publish('testing', 'events', qos=1)\n\n# Usage example:\nfrom os import getenv\n\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/GC_IOT_Core/examples/gc_iot_core_simpletest.py",
      "library": "GC_IOT_Core",
      "type": "example",
      "file_name": "gc_iot_core_simpletest.py",
      "chunk_type": "function",
      "function_name": "connect"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_gc_iot_core import MQTT_API, Cloud_Core\n\ndef disconnect(client, userdata, rc):\n    print('Disconnected from MQTT Broker!')\n\n# Usage example:\n\ndef disconnect(client, userdata, rc):\n    # This method is called when the client disconnects\n    # from the broker.\n    print(\"Disconnected from MQTT Broker!\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/GC_IOT_Core/examples/gc_iot_core_simpletest.py",
      "library": "GC_IOT_Core",
      "type": "example",
      "file_name": "gc_iot_core_simpletest.py",
      "chunk_type": "function",
      "function_name": "disconnect"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_gc_iot_core import MQTT_API, Cloud_Core\n\ndef subscribe(client, userdata, topic, granted_qos):\n    print(f'Subscribed to {topic} with QOS level {granted_qos}')\n\n# Usage example:\n    print(f\"Flags: {flags}\\n RC: {rc}\")\n    # Subscribes to commands/# topic\n    google_mqtt.subscribe_to_all_commands()\n\n    # Publish to the default \"events\" topic",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/GC_IOT_Core/examples/gc_iot_core_simpletest.py",
      "library": "GC_IOT_Core",
      "type": "example",
      "file_name": "gc_iot_core_simpletest.py",
      "chunk_type": "function",
      "function_name": "subscribe"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_gc_iot_core import MQTT_API, Cloud_Core\n\ndef unsubscribe(client, userdata, topic, pid):\n    print(f'Unsubscribed from {topic} with PID {pid}')\n\n# Usage example:\n\ndef unsubscribe(client, userdata, topic, pid):\n    # This method is called when the client unsubscribes from a topic.\n    print(f\"Unsubscribed from {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/GC_IOT_Core/examples/gc_iot_core_simpletest.py",
      "library": "GC_IOT_Core",
      "type": "example",
      "file_name": "gc_iot_core_simpletest.py",
      "chunk_type": "function",
      "function_name": "unsubscribe"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_gc_iot_core import MQTT_API, Cloud_Core\n\ndef publish(client, userdata, topic, pid):\n    print(f'Published to {topic} with PID {pid}')\n\n# Usage example:\n\n    # Publish to the default \"events\" topic\n    google_mqtt.publish(\"testing\", \"events\", qos=1)\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/GC_IOT_Core/examples/gc_iot_core_simpletest.py",
      "library": "GC_IOT_Core",
      "type": "example",
      "file_name": "gc_iot_core_simpletest.py",
      "chunk_type": "function",
      "function_name": "publish"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_gc_iot_core import MQTT_API, Cloud_Core\n\ndef message(client, topic, msg):\n    print(f'Message from {topic}: {msg}')\n\n# Usage example:\ngoogle_mqtt.on_unsubscribe = unsubscribe\ngoogle_mqtt.on_publish = publish\ngoogle_mqtt.on_message = message\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/GC_IOT_Core/examples/gc_iot_core_simpletest.py",
      "library": "GC_IOT_Core",
      "type": "example",
      "file_name": "gc_iot_core_simpletest.py",
      "chunk_type": "function",
      "function_name": "message"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_gc_iot_core import MQTT_API, Cloud_Core\n\n# Connect to WiFi\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Initialize Google Cloud IoT Core interface\nsettings = {",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/GC_IOT_Core/examples/gc_iot_core_simpletest.py",
      "library": "GC_IOT_Core",
      "type": "example",
      "file_name": "gc_iot_core_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_gc_iot_core import MQTT_API, Cloud_Core\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Initialize Google Cloud IoT Core interface\nsettings = {",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/GC_IOT_Core/examples/gc_iot_core_simpletest.py",
      "library": "GC_IOT_Core",
      "type": "example",
      "file_name": "gc_iot_core_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_shtc3\n\nimport board\nimport adafruit_shtc3\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsht = adafruit_shtc3.SHTC3(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/shtc3/examples/shtc3_simpletest.py",
      "library": "shtc3",
      "type": "example",
      "file_name": "shtc3_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_shtc3\n\nimport adafruit_shtc3\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsht = adafruit_shtc3.SHTC3(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/shtc3/examples/shtc3_simpletest.py",
      "library": "shtc3",
      "type": "example",
      "file_name": "shtc3_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2020 Bryan Siepert for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\nimport time\n\nimport board\n\nimport adafruit_shtc3\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsht = adafruit_shtc3.SHTC3(i2c)\n\nwhile True:\n    temperature, relative_humidity = sht.measurements\n    print(\"Temperature: %0.1f C\" % temperature)\n    print(\"Humidity: %0.1f %%\" % relative_humidity)\n    print(\"\")\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/shtc3/examples/shtc3_simpletest.py",
      "library": "shtc3",
      "type": "example",
      "file_name": "shtc3_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import adafruit_framebuf\nimport board\nfrom adafruit_is31fl3731.matrix import Matrix as Display\n\n# Uncomment for Pi Pico\n# import busio\n# i2c = busio.I2C(board.GP21, board.GP20)\ni2c = board.STEMMA_I2C()\ndisplay = Display(i2c, address=0x74)\nPIXEL_ROTATION = 0  # display rotation (0,90,180,270)\nPIXEL_BRIGHTNESS = 20  # values (0-255)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3731/examples/is31fl3731_16x9_charlieplexed_pwm.py",
      "library": "is31fl3731",
      "type": "example",
      "file_name": "is31fl3731_16x9_charlieplexed_pwm.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_framebuf\nimport board\nfrom adafruit_is31fl3731.matrix import Matrix as Display\n\n# Create a framebuffer for our display\nbuf = bytearray(32)  # 2 bytes tall x 16 wide = 32 bytes (9 bits is 2 bytes)\nbuffer = adafruit_framebuf.FrameBuffer(buf, display.width, display.height, adafruit_framebuf.MVLSB)\nFRAME = 0  # start with frame 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3731/examples/is31fl3731_16x9_charlieplexed_pwm.py",
      "library": "is31fl3731",
      "type": "example",
      "file_name": "is31fl3731_16x9_charlieplexed_pwm.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_adxl34x\n\nimport adafruit_adxl34x\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# For ADXL343\naccelerometer = adafruit_adxl34x.ADXL343(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl34x/examples/adxl34x_displayio_simpletest.py",
      "library": "adxl34x",
      "type": "example",
      "file_name": "adxl34x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_adxl34x\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# For ADXL343\naccelerometer = adafruit_adxl34x.ADXL343(i2c)\n# For ADXL345\n# accelerometer = adafruit_adxl34x.ADXL345(i2c)\n# Create a Label to show the readings. If you have a very small",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl34x/examples/adxl34x_displayio_simpletest.py",
      "library": "adxl34x",
      "type": "example",
      "file_name": "adxl34x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_adxl34x\n\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=1)\n# place the label in the middle of the screen with anchored positioning\ndisplay_output_label.anchor_point = (0, 0)\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2)\n# add the label to the main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl34x/examples/adxl34x_displayio_simpletest.py",
      "library": "adxl34x",
      "type": "example",
      "file_name": "adxl34x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_adxl34x\n\n# add the label to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl34x/examples/adxl34x_displayio_simpletest.py",
      "library": "adxl34x",
      "type": "example",
      "file_name": "adxl34x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_vl53l1x\n\nimport board\nimport adafruit_vl53l1x\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nvl53 = adafruit_vl53l1x.VL53L1X(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l1x/examples/vl53l1x_simpletest.py",
      "library": "vl53l1x",
      "type": "example",
      "file_name": "vl53l1x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_vl53l1x\n\nimport adafruit_vl53l1x\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nvl53 = adafruit_vl53l1x.VL53L1X(i2c)\n# OPTIONAL: can set non-default values\nvl53.distance_mode = 1\nvl53.timing_budget = 100",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l1x/examples/vl53l1x_simpletest.py",
      "library": "vl53l1x",
      "type": "example",
      "file_name": "vl53l1x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom adafruit_pcf8563.pcf8563 import PCF8563\n\nimport busio\n# Change to the appropriate I2C clock & data pins here!\ni2c_bus = busio.I2C(board.SCL, board.SDA)\n# Create the RTC instance:\nrtc = PCF8563(i2c_bus)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8563/examples/pcf8563_simpletest.py",
      "library": "pcf8563",
      "type": "example",
      "file_name": "pcf8563_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# API Polling Rate\n# 900 = 15 mins, 1800 = 30 mins, 3600 = 1 hour\nSLEEP_TIME = 900\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_discord.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_discord.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# 900 = 15 mins, 1800 = 30 mins, 3600 = 1 hour\nSLEEP_TIME = 900\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_discord.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_discord.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nSLEEP_TIME = 900\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_discord.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_discord.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Converts seconds to minutes/hours/days\ndef time_calc(input_time):\n    \"\"\"Converts seconds to minutes/hours/days\"\"\"\n    if input_time < 60:\n        return f'{input_time:.0f} seconds'\n    if input_time < 3600:\n        return f'{input_time / 60:.0f} minutes'\n    if input_time < 86400:\n        return f'{input_time / 60 / 60:.0f} hours'\n    return f'{input_time / 60 / 60 / 24:.1f} days'\n\n# Usage example:\n        print(\"\\nFinished!\")\n        print(f\"Board Uptime: {time.monotonic()}\")\n        print(f\"Next Update: {time_calc(SLEEP_TIME)}\")\n        print(\"===============================\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_discord.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_discord.py",
      "chunk_type": "function",
      "function_name": "time_calc"
    }
  },
  {
    "content": "import time\nimport adafruit_imageload\nimport board\nimport displayio\nimport adafruit_monsterm4sk\n\nimport adafruit_monsterm4sk\nSCREEN_SIZE = 240\nIMAGE_SIZE = 64 * 3\ni2c_bus = board.I2C()  # uses board.SCL and board.SDA\n# i2c_bus = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmask = adafruit_monsterm4sk.MonsterM4sk(i2c=i2c_bus)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/monsterm4sk/examples/monsterm4sk_rainbow_stars.py",
      "library": "monsterm4sk",
      "type": "example",
      "file_name": "monsterm4sk_rainbow_stars.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_imageload\nimport board\nimport displayio\nimport adafruit_monsterm4sk\n\nIMAGE_SIZE = 64 * 3\ni2c_bus = board.I2C()  # uses board.SCL and board.SDA\n# i2c_bus = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmask = adafruit_monsterm4sk.MonsterM4sk(i2c=i2c_bus)\nleft_group = displayio.Group(scale=3)\nmask.left_display.root_group = left_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/monsterm4sk/examples/monsterm4sk_rainbow_stars.py",
      "library": "monsterm4sk",
      "type": "example",
      "file_name": "monsterm4sk_rainbow_stars.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_imageload\nimport board\nimport displayio\nimport adafruit_monsterm4sk\n\nstar_bitmap, star_palette = adafruit_imageload.load('/rainbow_star.bmp', bitmap=displayio.Bitmap, palette=displayio.Palette)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/monsterm4sk/examples/monsterm4sk_rainbow_stars.py",
      "library": "monsterm4sk",
      "type": "example",
      "file_name": "monsterm4sk_rainbow_stars.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_s35710\n\nimport board\nimport adafruit_s35710\ni2c = board.I2C()\ntimer = adafruit_s35710.Adafruit_S35710(i2c)\ntimer.alarm = 5",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/s35710/examples/s35710_simpletest.py",
      "library": "s35710",
      "type": "example",
      "file_name": "s35710_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_s35710\n\nimport adafruit_s35710\ni2c = board.I2C()\ntimer = adafruit_s35710.Adafruit_S35710(i2c)\ntimer.alarm = 5",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/s35710/examples/s35710_simpletest.py",
      "library": "s35710",
      "type": "example",
      "file_name": "s35710_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2024 Liz Clark for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_s35710\n\ni2c = board.I2C()\n\ntimer = adafruit_s35710.Adafruit_S35710(i2c)\n\ntimer.alarm = 5\nprint(f\"The S-35710 alarm is set for {timer.alarm} seconds\")\n\ncountdown = timer.alarm - timer.clock\n\nwhile True:\n    print(f\"The S-35710 clock is {timer.clock}\")\n    countdown = timer.alarm - timer.clock\n    if countdown == 0:\n        timer.alarm = 5\n        print(\"Alarm reached! Resetting..\")\n    else:\n        print(f\"The alarm will expire in {countdown} seconds\")\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/s35710/examples/s35710_simpletest.py",
      "library": "s35710",
      "type": "example",
      "file_name": "s35710_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lis331\n\nimport board\nimport adafruit_lis331\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nlis = adafruit_lis331.LIS331HH(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis331/examples/lis331_simpletest.py",
      "library": "lis331",
      "type": "example",
      "file_name": "lis331_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lis331\n\nimport adafruit_lis331\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nlis = adafruit_lis331.LIS331HH(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis331/examples/lis331_simpletest.py",
      "library": "lis331",
      "type": "example",
      "file_name": "lis331_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_lis331\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nlis = adafruit_lis331.LIS331HH(i2c)\n\nwhile True:\n    print(\n        f\"Acceleration : X: {lis.acceleration[0]:.2f}, Y:{lis.acceleration[1]:.2f}, Z:{lis.acceleration[2]:.2f} ms^2\"\n    )\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis331/examples/lis331_simpletest.py",
      "library": "lis331",
      "type": "example",
      "file_name": "lis331_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport displayio\nfrom adafruit_rgb_display import color565, ili9341\nimport adafruit_stmpe610\n\n# Release any resources currently in use for the display\n# Instantiate the 2.4\" 320x240 TFT FeatherWing Display(#3315).\ncs_pin = digitalio.DigitalInOut(board.D9)\ndc_pin = digitalio.DigitalInOut(board.D10)\ndisplay = ili9341.ILI9341(board.SPI(), cs=cs_pin, dc=dc_pin)\n# Fill the screen with black!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/stmpe610/examples/stmpe610_touch_point_paint_demo.py",
      "library": "stmpe610",
      "type": "example",
      "file_name": "stmpe610_touch_point_paint_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport displayio\nfrom adafruit_rgb_display import color565, ili9341\nimport adafruit_stmpe610\n\n# Release any resources currently in use for the display\n# Instantiate the 2.4\" 320x240 TFT FeatherWing Display(#3315).\ncs_pin = digitalio.DigitalInOut(board.D9)\ndc_pin = digitalio.DigitalInOut(board.D10)\ndisplay = ili9341.ILI9341(board.SPI(), cs=cs_pin, dc=dc_pin)\n# Fill the screen with black!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/stmpe610/examples/stmpe610_touch_point_paint_demo.py",
      "library": "stmpe610",
      "type": "example",
      "file_name": "stmpe610_touch_point_paint_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport displayio\nfrom adafruit_rgb_display import color565, ili9341\nimport adafruit_stmpe610\n\n# Instantiate the 2.4\" 320x240 TFT FeatherWing Display(#3315).\ncs_pin = digitalio.DigitalInOut(board.D9)\ndc_pin = digitalio.DigitalInOut(board.D10)\ndisplay = ili9341.ILI9341(board.SPI(), cs=cs_pin, dc=dc_pin)\n# Fill the screen with black!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/stmpe610/examples/stmpe610_touch_point_paint_demo.py",
      "library": "stmpe610",
      "type": "example",
      "file_name": "stmpe610_touch_point_paint_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport displayio\nfrom adafruit_rgb_display import color565, ili9341\nimport adafruit_stmpe610\n\n# Fill the screen with black!\n# Instantiate the touchpad\nts_cs_pin = digitalio.DigitalInOut(board.D6)\nts = adafruit_stmpe610.Adafruit_STMPE610_SPI(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/stmpe610/examples/stmpe610_touch_point_paint_demo.py",
      "library": "stmpe610",
      "type": "example",
      "file_name": "stmpe610_touch_point_paint_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport displayio\nfrom adafruit_rgb_display import color565, ili9341\nimport adafruit_stmpe610\n\nts = adafruit_stmpe610.Adafruit_STMPE610_SPI(board.SPI(), ts_cs_pin, calibration=((350, 3500), (350, 3500)), size=(display.width, display.height), disp_rotation=90, touch_flip=(True, True))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/stmpe610/examples/stmpe610_touch_point_paint_demo.py",
      "library": "stmpe610",
      "type": "example",
      "file_name": "stmpe610_touch_point_paint_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_oauth2 import OAuth2\n\nssid = getenv(\"CIRCUITPY_WIFI_SSID\")\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\ngoogle_client_id = getenv(\"google_client_id\")\ngoogle_client_secret = getenv(\"google_client_secret\")\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/oauth_2/examples/oauth2_simpletest_esp32spi.py",
      "library": "oauth_2",
      "type": "example",
      "file_name": "oauth2_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_oauth2 import OAuth2\n\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\ngoogle_client_id = getenv(\"google_client_id\")\ngoogle_client_secret = getenv(\"google_client_secret\")\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/oauth_2/examples/oauth2_simpletest_esp32spi.py",
      "library": "oauth_2",
      "type": "example",
      "file_name": "oauth2_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_oauth2 import OAuth2\n\ngoogle_client_id = getenv(\"google_client_id\")\ngoogle_client_secret = getenv(\"google_client_secret\")\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/oauth_2/examples/oauth2_simpletest_esp32spi.py",
      "library": "oauth_2",
      "type": "example",
      "file_name": "oauth2_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_oauth2 import OAuth2\n\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/oauth_2/examples/oauth2_simpletest_esp32spi.py",
      "library": "oauth_2",
      "type": "example",
      "file_name": "oauth2_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_oauth2 import OAuth2\n\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/oauth_2/examples/oauth2_simpletest_esp32spi.py",
      "library": "oauth_2",
      "type": "example",
      "file_name": "oauth2_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_oauth2 import OAuth2\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Set scope(s) of access required by the API you're using",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/oauth_2/examples/oauth2_simpletest_esp32spi.py",
      "library": "oauth_2",
      "type": "example",
      "file_name": "oauth2_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_oauth2 import OAuth2\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Set scope(s) of access required by the API you're using\nscopes = [\"email\"]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/oauth_2/examples/oauth2_simpletest_esp32spi.py",
      "library": "oauth_2",
      "type": "example",
      "file_name": "oauth2_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_oauth2 import OAuth2\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Set scope(s) of access required by the API you're using\nscopes = [\"email\"]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/oauth_2/examples/oauth2_simpletest_esp32spi.py",
      "library": "oauth_2",
      "type": "example",
      "file_name": "oauth2_simpletest_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_vcnl4200 import ALS_PERS, PS_INT, PS_PERS, Adafruit_VCNL4200\n\nimport board\nimport digitalio\ni2c = board.I2C()\nsensor = Adafruit_VCNL4200(i2c)\ninterrupt_pin = digitalio.DigitalInOut(board.D5)\ninterrupt_pin.direction = digitalio.Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4200/examples/vcnl4200_interrupts.py",
      "library": "vcnl4200",
      "type": "example",
      "file_name": "vcnl4200_interrupts.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_vcnl4200 import ALS_PERS, PS_INT, PS_PERS, Adafruit_VCNL4200\n\ni2c = board.I2C()\nsensor = Adafruit_VCNL4200(i2c)\ninterrupt_pin = digitalio.DigitalInOut(board.D5)\ninterrupt_pin.direction = digitalio.Direction.INPUT\ninterrupt_pin.pull = digitalio.Pull.UP\nsensor.als_threshold_low = 500",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4200/examples/vcnl4200_interrupts.py",
      "library": "vcnl4200",
      "type": "example",
      "file_name": "vcnl4200_interrupts.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_vcnl4200 import ALS_PERS, PS_INT, PS_PERS, Adafruit_VCNL4200\n\ni2c = board.I2C()\nsensor = Adafruit_VCNL4200(i2c)\ninterrupt_pin = digitalio.DigitalInOut(board.D5)\ninterrupt_pin.direction = digitalio.Direction.INPUT\ninterrupt_pin.pull = digitalio.Pull.UP\nsensor.als_threshold_low = 500\nsensor.als_threshold_high = 1000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4200/examples/vcnl4200_interrupts.py",
      "library": "vcnl4200",
      "type": "example",
      "file_name": "vcnl4200_interrupts.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_vcnl4200 import ALS_PERS, PS_INT, PS_PERS, Adafruit_VCNL4200\n\ni2c = board.I2C()\nsensor = Adafruit_VCNL4200(i2c)\ninterrupt_pin = digitalio.DigitalInOut(board.D5)\ninterrupt_pin.direction = digitalio.Direction.INPUT\ninterrupt_pin.pull = digitalio.Pull.UP\nsensor.als_threshold_low = 500\nsensor.als_threshold_high = 1000\nsensor.prox_int_threshold_low = 200",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4200/examples/vcnl4200_interrupts.py",
      "library": "vcnl4200",
      "type": "example",
      "file_name": "vcnl4200_interrupts.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import turtle\n\ndef f(side_length, depth, generation):\n    if depth == 0:\n        turtle.forward(side_length)\n        return\n    side = lambda: f(side_length / 3, depth - 1, generation + 1)\n    side()\n    turtle.left(60)\n    side()\n    turtle.right(120)\n    side()\n    turtle.left(60)\n    side()\n\n# Usage example:\n# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_koch.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_koch.py",
      "chunk_type": "function",
      "function_name": "f"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import turtle\n\nturtle = turtle(board.DISPLAY)\nunit = min(board.DISPLAY.width / 3, board.DISPLAY.height / 4)\ntop_len = unit * 3",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_koch.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_koch.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import turtle\n\nturtle = turtle(board.DISPLAY)\nunit = min(board.DISPLAY.width / 3, board.DISPLAY.height / 4)\ntop_len = unit * 3",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_koch.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_koch.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\n\nfrom adafruit_turtle import turtle\n\n\ndef f(side_length, depth, generation):\n    if depth == 0:\n        turtle.forward(side_length)\n        return\n    side = lambda: f(side_length / 3, depth - 1, generation + 1)\n    side()\n    turtle.left(60)\n    side()\n    turtle.right(120)\n    side()\n    turtle.left(60)\n    side()\n\n\nturtle = turtle(board.DISPLAY)\n\nunit = min(board.DISPLAY.width / 3, board.DISPLAY.height / 4)\ntop_len = unit * 3\nturtle.penup()\nturtle.goto(-1.5 * unit, unit)\nturtle.pendown()\n\nnum_generations = 3\ntop_side = lambda: f(top_len, num_generations, 0)\n\ntop_side()\nturtle.right(120)\ntop_side()\nturtle.right(120)\ntop_side()\n\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_koch.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_koch.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nfrom audiocore import WaveFile\nfrom audioio import AudioOut\nfrom audiomixer import Mixer\nimport adafruit_trellism4\n\nimport adafruit_trellism4\n# trellis helper object\ntrellis = adafruit_trellism4.TrellisM4Express()\n# low brightness on the neopixles\ntrellis.pixels.brightness = 0.05\n# each musical note letter\nnote_letters = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/trellism4/examples/trellism4_wavefile_synth/trellism4_wavefile_synth.py",
      "library": "trellism4",
      "type": "example",
      "file_name": "trellism4_wavefile_synth.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom audiocore import WaveFile\nfrom audioio import AudioOut\nfrom audiomixer import Mixer\nimport adafruit_trellism4\n\n            # add wave file to dictionary\n            key = f\"{wave_type}{cur_note}\"\n            notes[key] = WaveFile(open(f\"notes/{wave_type}/{cur_note}.wav\", \"rb\"))\n# main audio object\naudio = AudioOut(left_channel=board.A0, right_channel=board.A1)\n# mixer to allow pylyphonic playback\nmixer = Mixer(\n    voice_count=8,\n    sample_rate=8000,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/trellism4/examples/trellism4_wavefile_synth/trellism4_wavefile_synth.py",
      "library": "trellism4",
      "type": "example",
      "file_name": "trellism4_wavefile_synth.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\nimport digitalio\nimport adafruit_rfm69\n# Button A\nbtnA = digitalio.DigitalInOut(board.D5)\nbtnA.direction = digitalio.Direction.INPUT\nbtnA.pull = digitalio.Pull.UP\n# Button B",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1_bonnet.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\nimport adafruit_rfm69\n# Button A\nbtnA = digitalio.DigitalInOut(board.D5)\nbtnA.direction = digitalio.Direction.INPUT\nbtnA.pull = digitalio.Pull.UP\n# Button B\nbtnB = digitalio.DigitalInOut(board.D6)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1_bonnet.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\nimport adafruit_rfm69\n# Button A\nbtnA = digitalio.DigitalInOut(board.D5)\nbtnA.direction = digitalio.Direction.INPUT\nbtnA.pull = digitalio.Pull.UP\n# Button B\nbtnB = digitalio.DigitalInOut(board.D6)\nbtnB.direction = digitalio.Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1_bonnet.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\nbtnA = digitalio.DigitalInOut(board.D5)\nbtnA.direction = digitalio.Direction.INPUT\nbtnA.pull = digitalio.Pull.UP\n# Button B\nbtnB = digitalio.DigitalInOut(board.D6)\nbtnB.direction = digitalio.Direction.INPUT\nbtnB.pull = digitalio.Pull.UP\n# Button C",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1_bonnet.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\nbtnA.direction = digitalio.Direction.INPUT\nbtnA.pull = digitalio.Pull.UP\n# Button B\nbtnB = digitalio.DigitalInOut(board.D6)\nbtnB.direction = digitalio.Direction.INPUT\nbtnB.pull = digitalio.Pull.UP\n# Button C\nbtnC = digitalio.DigitalInOut(board.D12)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1_bonnet.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\nbtnA.pull = digitalio.Pull.UP\n# Button B\nbtnB = digitalio.DigitalInOut(board.D6)\nbtnB.direction = digitalio.Direction.INPUT\nbtnB.pull = digitalio.Pull.UP\n# Button C\nbtnC = digitalio.DigitalInOut(board.D12)\nbtnC.direction = digitalio.Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1_bonnet.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\nbtnB = digitalio.DigitalInOut(board.D6)\nbtnB.direction = digitalio.Direction.INPUT\nbtnB.pull = digitalio.Pull.UP\n# Button C\nbtnC = digitalio.DigitalInOut(board.D12)\nbtnC.direction = digitalio.Direction.INPUT\nbtnC.pull = digitalio.Pull.UP\n# Create the I2C interface.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1_bonnet.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\nbtnB.direction = digitalio.Direction.INPUT\nbtnB.pull = digitalio.Pull.UP\n# Button C\nbtnC = digitalio.DigitalInOut(board.D12)\nbtnC.direction = digitalio.Direction.INPUT\nbtnC.pull = digitalio.Pull.UP\n# Create the I2C interface.\ni2c = busio.I2C(board.SCL, board.SDA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1_bonnet.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\nbtnB.pull = digitalio.Pull.UP\n# Button C\nbtnC = digitalio.DigitalInOut(board.D12)\nbtnC.direction = digitalio.Direction.INPUT\nbtnC.pull = digitalio.Pull.UP\n# Create the I2C interface.\ni2c = busio.I2C(board.SCL, board.SDA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1_bonnet.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\nbtnC = digitalio.DigitalInOut(board.D12)\nbtnC.direction = digitalio.Direction.INPUT\nbtnC.pull = digitalio.Pull.UP\n# Create the I2C interface.\ni2c = busio.I2C(board.SCL, board.SDA)\n# 128x32 OLED Display\nreset_pin = digitalio.DigitalInOut(board.D4)\ndisplay = adafruit_ssd1306.SSD1306_I2C(128, 32, i2c, reset=reset_pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1_bonnet.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# Create the I2C interface.\ni2c = busio.I2C(board.SCL, board.SDA)\n# 128x32 OLED Display\nreset_pin = digitalio.DigitalInOut(board.D4)\ndisplay = adafruit_ssd1306.SSD1306_I2C(128, 32, i2c, reset=reset_pin)\n# Clear the display.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1_bonnet.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# Create the I2C interface.\ni2c = busio.I2C(board.SCL, board.SDA)\n# 128x32 OLED Display\nreset_pin = digitalio.DigitalInOut(board.D4)\ndisplay = adafruit_ssd1306.SSD1306_I2C(128, 32, i2c, reset=reset_pin)\n# Clear the display.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1_bonnet.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1_bonnet.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1_bonnet.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ssd1306\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\n# Attempt to set up the RFM69 Module",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1_bonnet.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import sys\nimport adafruit_json_stream as json_stream\n\nclass FakeResponse:\n\n    def __init__(self, file):\n        self.file = file\n\n    def iter_content(self, chunk_size):\n        while True:\n            yield self.file.read(chunk_size)\n\n# Usage example:\n\n\nclass FakeResponse:\n    def __init__(self, file):\n        self.file = file",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/json_stream/examples/json_stream_local_file.py",
      "library": "json_stream",
      "type": "example",
      "file_name": "json_stream_local_file.py",
      "chunk_type": "function",
      "function_name": "FakeResponse"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2023 Scott Shawcroft for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport sys\n\nimport adafruit_json_stream as json_stream\n\n# import json_stream\n\n\nclass FakeResponse:\n    def __init__(self, file):\n        self.file = file\n\n    def iter_content(self, chunk_size):\n        while True:\n            yield self.file.read(chunk_size)\n\n\nf = open(sys.argv[1], \"rb\")\nobj = json_stream.load(FakeResponse(f).iter_content(32))\n\ncurrently = obj[\"currently\"]\nprint(currently)\nprint(currently[\"time\"])\nprint(currently[\"icon\"])\n\nfor i, day in enumerate(obj[\"daily\"][\"data\"]):\n    print(day[\"time\"], day[\"summary\"], day[\"temperatureHigh\"])\n    if i > 6:\n        break\n\nfor source in obj[\"flags\"][\"sources\"]:\n    print(source)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/json_stream/examples/json_stream_local_file.py",
      "library": "json_stream",
      "type": "example",
      "file_name": "json_stream_local_file.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nfrom adafruit_seesaw import digitalio, neopixel, rotaryio, seesaw\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nqt_enc1 = seesaw.Seesaw(i2c, addr=0x36)\nqt_enc2 = seesaw.Seesaw(i2c, addr=0x37)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_rotary_multiples.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_rotary_multiples.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_seesaw import digitalio, neopixel, rotaryio, seesaw\n\nqt_enc1 = seesaw.Seesaw(i2c, addr=0x36)\nqt_enc2 = seesaw.Seesaw(i2c, addr=0x37)\nbutton1 = digitalio.DigitalIO(qt_enc1, 24)\nbutton_held1 = False",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_rotary_multiples.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_rotary_multiples.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_seesaw import digitalio, neopixel, rotaryio, seesaw\n\nbutton1 = digitalio.DigitalIO(qt_enc1, 24)\nbutton_held1 = False\nbutton2 = digitalio.DigitalIO(qt_enc2, 24)\nbutton_held2 = False\nencoder1 = rotaryio.IncrementalEncoder(qt_enc1)\nlast_position1 = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_rotary_multiples.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_rotary_multiples.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_seesaw import digitalio, neopixel, rotaryio, seesaw\n\nlast_position1 = None\nencoder2 = rotaryio.IncrementalEncoder(qt_enc2)\nlast_position2 = None\npixel1 = neopixel.NeoPixel(qt_enc1, 6, 1)\npixel1.brightness = 0.2",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_rotary_multiples.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_rotary_multiples.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_seesaw import digitalio, neopixel, rotaryio, seesaw\n\npixel1 = neopixel.NeoPixel(qt_enc1, 6, 1)\npixel1.brightness = 0.2\npixel2 = neopixel.NeoPixel(qt_enc2, 6, 1)\npixel2.brightness = 0.2",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_rotary_multiples.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_rotary_multiples.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_focaltouch\n\nimport board\nimport adafruit_focaltouch\nIRQ_pin = board.IO39  # select a pin to connect to the display's interrupt pin (\"IRQ\")\ni2c = board.I2C()\n# Setup the interrupt (IRQ) pin for input\nirq = DigitalInOut(IRQ_pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/focaltouch/examples/focaltouch_print_touches_with_irq.py",
      "library": "focaltouch",
      "type": "example",
      "file_name": "focaltouch_print_touches_with_irq.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_focaltouch\n\nimport adafruit_focaltouch\nIRQ_pin = board.IO39  # select a pin to connect to the display's interrupt pin (\"IRQ\")\ni2c = board.I2C()\n# Setup the interrupt (IRQ) pin for input\nirq = DigitalInOut(IRQ_pin)\nirq.direction = Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/focaltouch/examples/focaltouch_print_touches_with_irq.py",
      "library": "focaltouch",
      "type": "example",
      "file_name": "focaltouch_print_touches_with_irq.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_focaltouch\n\n# Setup the interrupt (IRQ) pin for input\nirq = DigitalInOut(IRQ_pin)\nirq.direction = Direction.INPUT\n# Create library object (named \"ft\") using a Bus I2C port and using an interrupt pin (IRQ)\nft = adafruit_focaltouch.Adafruit_FocalTouch(i2c, debug=False, irq_pin=irq)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/focaltouch/examples/focaltouch_print_touches_with_irq.py",
      "library": "focaltouch",
      "type": "example",
      "file_name": "focaltouch_print_touches_with_irq.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nExample for getting touch data from an FT6206 or FT6236 capacitive\ntouch driver, over I2C.  This version uses an interrupt to prevent\nread errors from the FocalTouch chip.\n\"\"\"\n\nimport time\n\nimport board\nfrom digitalio import DigitalInOut, Direction\n\nimport adafruit_focaltouch\n\nIRQ_pin = board.IO39  # select a pin to connect to the display's interrupt pin (\"IRQ\")\ni2c = board.I2C()\n\n# Setup the interrupt (IRQ) pin for input\nirq = DigitalInOut(IRQ_pin)\nirq.direction = Direction.INPUT\n\n# Create library object (named \"ft\") using a Bus I2C port and using an interrupt pin (IRQ)\nft = adafruit_focaltouch.Adafruit_FocalTouch(i2c, debug=False, irq_pin=irq)\n\n\nprint(\"\\n\\nReady for touches...\")\n\nwhile True:\n    # if the screen is being touched print the touches\n    if ft.touched:\n        print(ft.touches)\n    else:\n        print(\"no touch\")\n\n    time.sleep(0.05)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/focaltouch/examples/focaltouch_print_touches_with_irq.py",
      "library": "focaltouch",
      "type": "example",
      "file_name": "focaltouch_print_touches_with_irq.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a Feather RP2040 EPD and may need to be altered for other\n# boards. The newer SSD1680 version with FPC on the ribbon cable 2.13\" dual color\n# is connected directly via the ribbon cable.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_four_corners.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_four_corners.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a Feather RP2040 EPD and may need to be altered for other\n# boards. The newer SSD1680 version with FPC on the ribbon cable 2.13\" dual color\n# is connected directly via the ribbon cable.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_four_corners.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_four_corners.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a Feather RP2040 EPD and may need to be altered for other\n# boards. The newer SSD1680 version with FPC on the ribbon cable 2.13\" dual color\n# is connected directly via the ribbon cable.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_four_corners.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_four_corners.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# boards. The newer SSD1680 version with FPC on the ribbon cable 2.13\" dual color\n# is connected directly via the ribbon cable.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)\ndisplay = adafruit_ssd1680.SSD1680(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_four_corners.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_four_corners.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# is connected directly via the ribbon cable.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)\ndisplay = adafruit_ssd1680.SSD1680(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_four_corners.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_four_corners.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport terminalio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\ndisplay = adafruit_ssd1680.SSD1680(display_bus, width=250, height=122, busy_pin=epd_busy, highlight_color=16777215, rotation=270, seconds_per_frame=10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_four_corners.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_four_corners.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_vcnl4010\n\nimport board\nimport adafruit_vcnl4010\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_vcnl4010.VCNL4010(i2c)\n# You can optionally adjust the sensor LED current.  The default is 200mA",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4010/examples/vcnl4010_simpletest.py",
      "library": "vcnl4010",
      "type": "example",
      "file_name": "vcnl4010_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_vcnl4010\n\nimport adafruit_vcnl4010\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_vcnl4010.VCNL4010(i2c)\n# You can optionally adjust the sensor LED current.  The default is 200mA\n# which is the maximum value.  Note this is only set in 10mA increments.\n# sensor.led_current_mA = 120  # Set 120 mA LED current",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4010/examples/vcnl4010_simpletest.py",
      "library": "vcnl4010",
      "type": "example",
      "file_name": "vcnl4010_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_rsa\n\npublic_key, private_key = adafruit_rsa.newkeys(496)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rsa/examples/rsa_sign_verify.py",
      "library": "rsa",
      "type": "example",
      "file_name": "rsa_sign_verify.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_rsa\n\n# Create a new secret message\nmessage = \"Meet me at 6pm\"\n# Hash the message using SHA-224\nhash_method = \"SHA-256\"\nsignature = adafruit_rsa.sign(message, private_key, hash_method)\n# Verify Message Signature\nif adafruit_rsa.verify(message, signature, public_key) != hash_method:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rsa/examples/rsa_sign_verify.py",
      "library": "rsa",
      "type": "example",
      "file_name": "rsa_sign_verify.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport adafruit_rsa\n\n# Generate a keypair\n#\n# Supported Hash method   Suggested minimum key size (bits)\n# SHA-256                 496\n# SHA-384                 624\n# SHA-512                 752\n#\n(public_key, private_key) = adafruit_rsa.newkeys(496)\n\n# Create a new secret message\nmessage = \"Meet me at 6pm\"\n\n# Hash the message using SHA-224\nhash_method = \"SHA-256\"\nsignature = adafruit_rsa.sign(message, private_key, hash_method)\n\n# Verify Message Signature\nif adafruit_rsa.verify(message, signature, public_key) != hash_method:\n    raise ValueError(\"Verification failed - signature does not match secret message sent!\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rsa/examples/rsa_sign_verify.py",
      "library": "rsa",
      "type": "example",
      "file_name": "rsa_sign_verify.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_pcm51xx\n\nimport busio\nimport adafruit_pcm51xx\n# Initialize I2C\ni2c = board.I2C()\n# Initialize PCM5122",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcm51xx/examples/pcm51xx_simpletest.py",
      "library": "pcm51xx",
      "type": "example",
      "file_name": "pcm51xx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_pcm51xx\n\n# Initialize I2C\ni2c = board.I2C()\n# Initialize PCM5122\npcm = adafruit_pcm51xx.PCM51XX(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcm51xx/examples/pcm51xx_simpletest.py",
      "library": "pcm51xx",
      "type": "example",
      "file_name": "pcm51xx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2025 Liz Clark for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nSimple test for the PCM5122 I2S DAC.\n\"\"\"\n\nimport board\nimport busio\n\nimport adafruit_pcm51xx\n\n# Initialize I2C\ni2c = board.I2C()\n\n# Initialize PCM5122\nprint(\"Initializing PCM5122...\")\npcm = adafruit_pcm51xx.PCM51XX(i2c)\nprint(\"Found PCM5122!\")\n\n# Set volume to -10dB on both channels\nprint(\"\\nSetting volume to 0dB\")\npcm.volume_db = (0.0, 0.0)\nleft_db, right_db = pcm.volume_db\nprint(f\"Volume set to: L={left_db}dB, R={right_db}dB\")\n\n# Unmute the DAC\nprint(\"\\nUnmuting DAC\")\npcm.mute = False\nprint(f\"Muted: {pcm.mute}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcm51xx/examples/pcm51xx_simpletest.py",
      "library": "pcm51xx",
      "type": "example",
      "file_name": "pcm51xx_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_mcp3xxx.mcp3008 as MCP\nfrom adafruit_mcp3xxx.analog_in import AnalogIn\n\nimport adafruit_mcp3xxx.mcp3008 as MCP\n# create the spi bus\nspi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)\n# create the cs (chip select)\ncs = digitalio.DigitalInOut(board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp3xxx/examples/mcp3xxx_mcp3008_single_ended_simpletest.py",
      "library": "mcp3xxx",
      "type": "example",
      "file_name": "mcp3xxx_mcp3008_single_ended_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_mcp3xxx.mcp3008 as MCP\nfrom adafruit_mcp3xxx.analog_in import AnalogIn\n\n# create the spi bus\nspi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)\n# create the cs (chip select)\ncs = digitalio.DigitalInOut(board.D5)\n# create the mcp object\nmcp = MCP.MCP3008(spi, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp3xxx/examples/mcp3xxx_mcp3008_single_ended_simpletest.py",
      "library": "mcp3xxx",
      "type": "example",
      "file_name": "mcp3xxx_mcp3008_single_ended_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport busio\nimport digitalio\n\nimport adafruit_mcp3xxx.mcp3008 as MCP\nfrom adafruit_mcp3xxx.analog_in import AnalogIn\n\n# create the spi bus\nspi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)\n\n# create the cs (chip select)\ncs = digitalio.DigitalInOut(board.D5)\n\n# create the mcp object\nmcp = MCP.MCP3008(spi, cs)\n\n# create an analog input channel on pin 0\nchan = AnalogIn(mcp, MCP.P0)\n\nprint(\"Raw ADC Value: \", chan.value)\nprint(\"ADC Voltage: \" + str(chan.voltage) + \"V\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp3xxx/examples/mcp3xxx_mcp3008_single_ended_simpletest.py",
      "library": "mcp3xxx",
      "type": "example",
      "file_name": "mcp3xxx_mcp3008_single_ended_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport RPi.GPIO as io\nimport adafruit_rfm69\n\ndef rfm69_callback(rfm69_irq):\n    global packet_received\n    print(f'IRQ detected on pin {rfm69_irq} payload_ready {rfm69.payload_ready} ')\n    if rfm69.payload_ready:\n        packet = rfm69.receive(timeout=None)\n        if packet is not None:\n            packet_received = True\n            print(f'Received (raw bytes): {packet}')\n            print([hex(x) for x in packet])\n            print(f'RSSI: {rfm69.last_rssi}')\n\n# Usage example:\nio.setup(RFM69_G0, io.IN, pull_up_down=io.PUD_DOWN)  # activate input\nio.add_event_detect(RFM69_G0, io.RISING)\nio.add_event_callback(RFM69_G0, rfm69_callback)\npacket_received = False\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_rpi_interrupt.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_rpi_interrupt.py",
      "chunk_type": "function",
      "function_name": "rfm69_callback"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport RPi.GPIO as io\nimport adafruit_rfm69\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_rpi_interrupt.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_rpi_interrupt.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport RPi.GPIO as io\nimport adafruit_rfm69\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_rpi_interrupt.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_rpi_interrupt.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport RPi.GPIO as io\nimport adafruit_rfm69\n\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm69 = adafruit_rfm69.RFM69(spi, CS, RESET, RADIO_FREQ_MHZ)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_rpi_interrupt.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_rpi_interrupt.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport RPi.GPIO as io\nimport adafruit_rfm69\n\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm69 = adafruit_rfm69.RFM69(spi, CS, RESET, RADIO_FREQ_MHZ)\n# Optionally set an encryption key (16 byte AES key). MUST match both\n# on the transmitter and receiver (or be set to None to disable/the default).\nrfm69.encryption_key = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_rpi_interrupt.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_rpi_interrupt.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tlc59711\n\nimport adafruit_tlc59711\n##########################################\nPIXEL_COUNT = 16 * 1\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\npixels = adafruit_tlc59711.TLC59711(spi, pixel_count=PIXEL_COUNT)\n##########################################",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_dev.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_dev.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tlc59711\n\n##########################################\nPIXEL_COUNT = 16 * 1\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\npixels = adafruit_tlc59711.TLC59711(spi, pixel_count=PIXEL_COUNT)\n##########################################\n# test function",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_dev.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_dev.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tlc59711\n\n# Channel check pixel.\ndef channelcheck_update_pixel(offset):\n    \"\"\"Channel check pixel.\"\"\"\n    pixels.set_pixel_16bit_value(offset, VALUE_HIGH, 0, 0)\n    last = offset - 1\n    if last < 0:\n        last = PIXEL_COUNT - 1\n    pixels.set_pixel_16bit_value(last, 0, 0, 1)\n    pixels.show()\n    offset += 1\n    if offset >= PIXEL_COUNT:\n        time.sleep(0.2)\n        offset = 0\n        print('clear')\n        pixels.set_pixel_all((0, 1, 0))\n        pixels.show()\n    return offset",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_dev.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_dev.py",
      "chunk_type": "function",
      "function_name": "channelcheck_update_pixel"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tlc59711\n\n# Channel check.\ndef channelcheck_update(offset):\n    \"\"\"Channel check.\"\"\"\n    pixels.set_channel(offset, VALUE_HIGH)\n    last = offset - 1\n    if last < 0:\n        last = pixels.channel_count - 1\n    pixels.set_channel(last, 0)\n    pixels.show()\n    offset += 1\n    if offset >= pixels.channel_count:\n        offset = 0\n        print('offset overflow. start from 0')\n    return offset\n\n# Usage example:\n    print(\"loop:\")\n    while True:\n        offset = channelcheck_update(offset)\n        time.sleep(0.5)\n        print(offset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_dev.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_dev.py",
      "chunk_type": "function",
      "function_name": "channelcheck_update"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tlc59711\n\n# Measure timing.\ndef timeit_call(message, test_function, loop_count=1000):\n    \"\"\"Measure timing.\"\"\"\n    duration = 0\n    start_time = time.monotonic()\n    for _index in range(loop_count):\n        start_time = time.monotonic()\n        test_function()\n        end_time = time.monotonic()\n        duration += end_time - start_time\n    print(f'{duration / loop_count * 1000:>10.4f}ms\\t{message}')\n\n# Usage example:\n        pixels.show()\n\n    timeit_call(\"'pixels.show()'\", _test, loop_count)\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_dev.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_dev.py",
      "chunk_type": "function",
      "function_name": "timeit_call"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tlc59711\n\n# Measure timing.\ndef timeit_pixels_show():\n    \"\"\"Measure timing.\"\"\"\n    print('*** pixels show:')\n    loop_count = 1000\n\n    def _test():\n        pixels.show()\n    timeit_call(\"'pixels.show()'\", _test, loop_count)\n\n# Usage example:\n    \"\"\"Measure timing.\"\"\"\n    print(\"meassure timing:\")\n    timeit_pixels_show()\n    timeit_pixels_set_single()\n    timeit_pixels_set_loop()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_dev.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_dev.py",
      "chunk_type": "function",
      "function_name": "timeit_pixels_show"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tlc59711\n\n# Measure timing pixels set.\ndef timeit_pixels_set_single():\n    \"\"\"Measure timing pixels set.\"\"\"\n    print('*** pixels set single:')\n    loop_count = 1000\n\n    def _test():\n        pixels[3] = (500, 40500, 1000)\n    timeit_call(\"'pixels[3] = (500, 40500, 1000)'\", _test, loop_count)\n\n    def _test():\n        pixels[3] = (0.1, 0.5, 0.9)\n    timeit_call(\"'pixels[3] = (0.1, 0.5, 0.9)'\", _test, loop_count)\n\n    def _test():\n        pixels.set_pixel(3, (500, 40500, 1000))\n    timeit_call(\"'pixels.set_pixel(3, (500, 40500, 1000))'\", _test, loop_count)\n\n    def _test():\n        pixels.set_pixel(3, (0.1, 0.5, 0.9))\n    timeit_call(\"'pixels.set_pixel(3, (0.1, 0.5, 0.9))'\", _test, loop_count)\n\n# Usage example:\n    print(\"meassure timing:\")\n    timeit_pixels_show()\n    timeit_pixels_set_single()\n    timeit_pixels_set_loop()\n    timeit_pixels_set_all()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_dev.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_dev.py",
      "chunk_type": "function",
      "function_name": "timeit_pixels_set_single"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tlc59711\n\n# Measure timing pixels set.\ndef timeit_pixels_set_loop():\n    \"\"\"Measure timing pixels set.\"\"\"\n    print('*** pixels set loop:')\n    loop_count = 10\n\n    def _test():\n        for i in range(PIXEL_COUNT):\n            pixels[i] = (500, 40500, 1000)\n    timeit_call(f\"'pixels[0..{PIXEL_COUNT}] = (500, 40500, 1000)'\", _test, loop_count)\n\n    def _test():\n        for i in range(PIXEL_COUNT):\n            pixels[i] = (0.1, 0.5, 0.9)\n    timeit_call(f\"'pixels[0..{PIXEL_COUNT}] = (0.1, 0.5, 0.9)'\", _test, loop_count)\n\n    def _test():\n        for i in range(PIXEL_COUNT):\n            pixels.set_pixel(i, (500, 40500, 1000))\n    timeit_call(f\"'pixels.set_pixel(0..{PIXEL_COUNT}, (500, 40500, 1000))'\", _test, loop_count)\n\n    def _test():\n        for i in range(PIXEL_COUNT):\n            pixels.set_pixel(i, (0.1, 0.5, 0.9))\n    timeit_call(f\"'pixels.set_pixel(0..{PIXEL_COUNT}, (0.1, 0.5, 0.9))'\", _test, loop_count)\n\n# Usage example:\n    timeit_pixels_show()\n    timeit_pixels_set_single()\n    timeit_pixels_set_loop()\n    timeit_pixels_set_all()\n    timeit_pixels_set_16bit()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_dev.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_dev.py",
      "chunk_type": "function",
      "function_name": "timeit_pixels_set_loop"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tlc59711\n\n# Measure timing pixels set.\ndef timeit_pixels_set_all():\n    \"\"\"Measure timing pixels set.\"\"\"\n    print('*** pixels set all:')\n    loop_count = 10\n\n    def _test():\n        pixels.set_pixel_all((500, 40500, 1000))\n    timeit_call(\"'pixels.set_pixel_all((500, 40500, 1000))'\", _test, loop_count)\n\n    def _test():\n        pixels.set_pixel_all((0.1, 0.5, 0.9))\n    timeit_call(\"'pixels.set_pixel_all((0.1, 0.5, 0.9))'\", _test, loop_count)\n\n    def _test():\n        pixels.set_pixel_all_16bit_value(500, 40500, 1000)\n    timeit_call(\"'pixels.set_pixel_all_16bit_value(500, 40500, 1000)'\", _test, loop_count)\n\n    def _test():\n        pixels.set_all_black()\n    timeit_call(\"'pixels.set_all_black()'\", _test, loop_count)\n\n# Usage example:\n    timeit_pixels_set_single()\n    timeit_pixels_set_loop()\n    timeit_pixels_set_all()\n    timeit_pixels_set_16bit()\n    timeit_pixels_set_float()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_dev.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_dev.py",
      "chunk_type": "function",
      "function_name": "timeit_pixels_set_all"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tlc59711\n\n# Measure timing pixels set.\ndef timeit_pixels_set_16bit():\n    \"\"\"Measure timing pixels set.\"\"\"\n    print('*** pixels set 16bit:')\n    loop_count = 1000\n\n    def _test():\n        pixels.set_pixel_16bit_value(3, 500, 40500, 1000)\n    timeit_call(\"'pixels.set_pixel_16bit_value(3, 500, 40500, 1000)'\", _test, loop_count)\n\n    def _test():\n        pixels.set_pixel_16bit_color(3, (500, 40500, 1000))\n    timeit_call(\"'pixels.set_pixel_16bit_color(3, (500, 40500, 1000))'\", _test, loop_count)\n\n    def _test():\n        for i in range(PIXEL_COUNT):\n            pixels.set_pixel_16bit_value(i, 500, 40500, 1000)\n    timeit_call(f\"'pixels.set_pixel_16bit_value(0..{PIXEL_COUNT}, 500, 40500, 1000)'\", _test, 10)\n\n    def _test():\n        for i in range(PIXEL_COUNT):\n            pixels.set_pixel_16bit_color(i, (500, 40500, 1000))\n    timeit_call(f\"'pixels.set_pixel_16bit_color(0..{PIXEL_COUNT}, (500, 40500, 1000))'\", _test, 10)\n\n# Usage example:\n    timeit_pixels_set_loop()\n    timeit_pixels_set_all()\n    timeit_pixels_set_16bit()\n    timeit_pixels_set_float()\n    timeit_channel_set()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_dev.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_dev.py",
      "chunk_type": "function",
      "function_name": "timeit_pixels_set_16bit"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tlc59711\n\n# Measure timing pixels set.\ndef timeit_pixels_set_float():\n    \"\"\"Measure timing pixels set.\"\"\"\n    print('*** pixels set float:')\n    loop_count = 1000\n\n    def _test():\n        pixels.set_pixel_float_value(3, 0.1, 0.5, 0.9)\n    timeit_call(\"'pixels.set_pixel_float_value(3, 0.1, 0.5, 0.9)'\", _test, loop_count)\n\n    def _test():\n        pixels.set_pixel_float_color(3, (0.1, 0.5, 0.9))\n    timeit_call(\"'pixels.set_pixel_float_color(3, (0.1, 0.5, 0.9))'\", _test, loop_count)\n\n    def _test():\n        for i in range(PIXEL_COUNT):\n            pixels.set_pixel_float_value(i, 0.1, 0.5, 0.9)\n    timeit_call(f\"'pixels.set_pixel_float_value(0..{PIXEL_COUNT}, 0.1, 0.5, 0.9)'\", _test, 10)\n\n    def _test():\n        for i in range(PIXEL_COUNT):\n            pixels.set_pixel_float_color(i, (0.1, 0.5, 0.9))\n    timeit_call(f\"'pixels.set_pixel_float_color(0..{PIXEL_COUNT}, (0.1, 0.5, 0.9))'\", _test, 10)\n\n    def _test():\n        for i in range(PIXEL_COUNT):\n            pixels.set_pixel_16bit_value(i, int(0.1 * 65535), int(0.5 * 65535), int(0.9 * 65535))\n    timeit_call(f\"'pixels.set_pixel_16bit_value(0..{PIXEL_COUNT}, f2i 0.1, f2i 0.5, f2i 0.9)'\", _test, 10)\n\n# Usage example:\n    timeit_pixels_set_all()\n    timeit_pixels_set_16bit()\n    timeit_pixels_set_float()\n    timeit_channel_set()\n    timeit_channel_set_internal()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_dev.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_dev.py",
      "chunk_type": "function",
      "function_name": "timeit_pixels_set_float"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tlc59711\n\n# Measure timing channel set.\ndef timeit_channel_set():\n    \"\"\"Measure timing channel set.\"\"\"\n    print('*** channel set:')\n    loop_count = 1000\n\n    def _test():\n        pixels.set_channel(0, 10000)\n    timeit_call(\"'set_channel(0, 10000)'\", _test, loop_count)\n\n    def _test():\n        pixels.set_channel(0, 10000)\n        pixels.set_channel(1, 10000)\n        pixels.set_channel(2, 10000)\n    timeit_call(\"'set_channel(0..2, 10000)'\", _test, loop_count)\n    channel_count = PIXEL_COUNT * 3\n\n    def _test():\n        for i in range(channel_count):\n            pixels.set_channel(i, 500)\n    timeit_call(f\"'set_channel(for 0..{channel_count}, 10000)'\", _test, 10)\n\n# Usage example:\n    timeit_pixels_set_16bit()\n    timeit_pixels_set_float()\n    timeit_channel_set()\n    timeit_channel_set_internal()\n    timeit_pixels_get()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_dev.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_dev.py",
      "chunk_type": "function",
      "function_name": "timeit_channel_set"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tlc59711\n\n# Measure timing channel set internal.\ndef timeit_channel_set_internal():\n    \"\"\"Measure timing channel set internal.\"\"\"\n    print('*** channel set internal:')\n    print('    must be uncommented in code to work..')\n\n# Usage example:\n    timeit_pixels_set_float()\n    timeit_channel_set()\n    timeit_channel_set_internal()\n    timeit_pixels_get()\n    pixels.set_pixel_all((0, 1, 1))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_dev.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_dev.py",
      "chunk_type": "function",
      "function_name": "timeit_channel_set_internal"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tlc59711\n\n# Measure timing pixels get.\ndef timeit_pixels_get():\n    \"\"\"Measure timing pixels get.\"\"\"\n    print('*** pixels get:')\n    pixels.set_pixel_all((1, 11, 111))\n\n    def _test():\n        print('[', end='')\n        for i in range(PIXEL_COUNT):\n            print(f'{i}:{pixels[i]}, ', end='')\n        print(']')\n    timeit_call(\"'print('{}:{}, '.format(i, pixels[i]), end='')'\", _test, 1)\n\n# Usage example:\n    timeit_channel_set()\n    timeit_channel_set_internal()\n    timeit_pixels_get()\n    pixels.set_pixel_all((0, 1, 1))\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_dev.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_dev.py",
      "chunk_type": "function",
      "function_name": "timeit_pixels_get"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tlc59711\n\n# Measure timing.\ndef time_measurement():\n    \"\"\"Measure timing.\"\"\"\n    print('meassure timing:')\n    timeit_pixels_show()\n    timeit_pixels_set_single()\n    timeit_pixels_set_loop()\n    timeit_pixels_set_all()\n    timeit_pixels_set_16bit()\n    timeit_pixels_set_float()\n    timeit_channel_set()\n    timeit_channel_set_internal()\n    timeit_pixels_get()\n    pixels.set_pixel_all((0, 1, 1))\n\n# Usage example:\n    print(42 * \"*\")\n\n    time_measurement()\n    time.sleep(0.5)\n    print(42 * \"*\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_dev.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_dev.py",
      "chunk_type": "function",
      "function_name": "time_measurement"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tlc59711\n\n# Test BC-Data setting.\ndef test_bcdata():\n    \"\"\"Test BC-Data setting.\"\"\"\n    print('test BC-Data setting:')\n    print('set pixel all to 100, 100, 100')\n    pixels.set_pixel_all((100, 100, 100))\n    pixels.show()\n    time.sleep(2)\n    print(f'bcr: {pixels.bcr:>3}\\nbcg: {pixels.bcg:>3}\\nbcb: {pixels.bcb:>3}\\n')\n    Ioclmax = adafruit_tlc59711.TLC59711.calculate_Ioclmax(Riref=2.7)\n    print(f'Ioclmax = {Ioclmax}')\n    Riref = adafruit_tlc59711.TLC59711.calculate_Riref(Ioclmax=Ioclmax)\n    print(f'Riref = {Riref}')\n    BCValues = adafruit_tlc59711.TLC59711.calculate_BCData(Ioclmax=Ioclmax, IoutR=18, IoutG=11, IoutB=13)\n    print(f'BCValues = {BCValues}')\n    print('set bcX')\n    pixels.bcr = BCValues[0]\n    pixels.bcg = BCValues[1]\n    pixels.bcb = BCValues[2]\n    pixels.update_BCData()\n    pixels.show()\n    print(f'bcr: {pixels.bcr:>3}\\nbcg: {pixels.bcg:>3}\\nbcb: {pixels.bcb:>3}\\n')\n    time.sleep(2)\n\n# Usage example:\n    time.sleep(0.5)\n\n    test_bcdata()\n    time.sleep(0.5)\n    print(42 * \"*\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_dev.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_dev.py",
      "chunk_type": "function",
      "function_name": "test_bcdata"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tlc59711\n\n# Test Main.\ndef test_main():\n    \"\"\"Test Main.\"\"\"\n    print(42 * '*', end='')\n    print(__doc__, end='')\n    print(42 * '*')\n    pixels.set_pixel_all_16bit_value(1, 10, 100)\n    pixels.show()\n    time.sleep(0.5)\n    test_bcdata()\n    time.sleep(0.5)\n    print(42 * '*')\n    time_measurement()\n    time.sleep(0.5)\n    print(42 * '*')\n    offset = 0\n    print('loop:')\n    while True:\n        offset = channelcheck_update(offset)\n        time.sleep(0.5)\n        print(offset)\n\n# Usage example:\n\nif __name__ == \"__main__\":\n    test_main()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc59711/examples/tlc59711_dev.py",
      "library": "tlc59711",
      "type": "example",
      "file_name": "tlc59711_dev.py",
      "chunk_type": "function",
      "function_name": "test_main"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_text.bitmap_label import Label\nfrom adafruit_displayio_layout.layouts.page_layout import PageLayout\n\n# built-in display\ndisplay = board.DISPLAY\n# create and show main_group\nmain_group = displayio.Group()\ndisplay.root_group = main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_page_layout_simpletest.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_page_layout_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bh1750\n\nimport board\nimport adafruit_bh1750\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_bh1750.BH1750(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bh1750/examples/bh1750_simpletest.py",
      "library": "bh1750",
      "type": "example",
      "file_name": "bh1750_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bh1750\n\nimport adafruit_bh1750\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_bh1750.BH1750(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bh1750/examples/bh1750_simpletest.py",
      "library": "bh1750",
      "type": "example",
      "file_name": "bh1750_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 Bryan Siepert, written for Adafruit Industries\n\n# SPDX-License-Identifier: Unlicense\nimport time\n\nimport board\n\nimport adafruit_bh1750\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_bh1750.BH1750(i2c)\n\nwhile True:\n    print(\"%.2f Lux\" % sensor.lux)\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bh1750/examples/bh1750_simpletest.py",
      "library": "bh1750",
      "type": "example",
      "file_name": "bh1750_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport pwmio\nfrom adafruit_motor import motor\n\nimport board\nimport pwmio\nPWM_PIN_A = board.GP28  # pick any pwm pins on their own channels\nPWM_PIN_B = board.GP27\n# DC motor setup\n# DC Motors generate electrical noise when running that can reset the microcontroller in extreme",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/motor/examples/motor_h-bridge_dc_motor.py",
      "library": "motor",
      "type": "example",
      "file_name": "motor_h-bridge_dc_motor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport pwmio\nfrom adafruit_motor import motor\n\nimport pwmio\nPWM_PIN_A = board.GP28  # pick any pwm pins on their own channels\nPWM_PIN_B = board.GP27\n# DC motor setup\n# DC Motors generate electrical noise when running that can reset the microcontroller in extreme\n# cases. A capacitor can be used to help prevent this.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/motor/examples/motor_h-bridge_dc_motor.py",
      "library": "motor",
      "type": "example",
      "file_name": "motor_h-bridge_dc_motor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport pwmio\nfrom adafruit_motor import motor\n\nPWM_PIN_B = board.GP27\n# DC motor setup\n# DC Motors generate electrical noise when running that can reset the microcontroller in extreme\n# cases. A capacitor can be used to help prevent this.\npwm_a = pwmio.PWMOut(PWM_PIN_A, frequency=50)\npwm_b = pwmio.PWMOut(PWM_PIN_B, frequency=50)\nmotor1 = motor.DCMotor(pwm_a, pwm_b)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/motor/examples/motor_h-bridge_dc_motor.py",
      "library": "motor",
      "type": "example",
      "file_name": "motor_h-bridge_dc_motor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport pwmio\nfrom adafruit_motor import motor\n\n# DC motor setup\n# DC Motors generate electrical noise when running that can reset the microcontroller in extreme\n# cases. A capacitor can be used to help prevent this.\npwm_a = pwmio.PWMOut(PWM_PIN_A, frequency=50)\npwm_b = pwmio.PWMOut(PWM_PIN_B, frequency=50)\nmotor1 = motor.DCMotor(pwm_a, pwm_b)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/motor/examples/motor_h-bridge_dc_motor.py",
      "library": "motor",
      "type": "example",
      "file_name": "motor_h-bridge_dc_motor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_ltr390\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nltr = adafruit_ltr390.LTR390(i2c)\n# Create Label(s) to show the readings. If you have a very small",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ltr390/examples/ltr390_displayio_simpletest.py",
      "library": "ltr390",
      "type": "example",
      "file_name": "ltr390_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_ltr390\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nltr = adafruit_ltr390.LTR390(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ltr390/examples/ltr390_displayio_simpletest.py",
      "library": "ltr390",
      "type": "example",
      "file_name": "ltr390_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_ltr390\n\ndisplay_output_light.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ltr390/examples/ltr390_displayio_simpletest.py",
      "library": "ltr390",
      "type": "example",
      "file_name": "ltr390_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_ltr390\n\ndisplay_output_lux.anchored_position = (4, board.DISPLAY.height // 2 - 40)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ltr390/examples/ltr390_displayio_simpletest.py",
      "library": "ltr390",
      "type": "example",
      "file_name": "ltr390_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_ltr390\n\n# add the label(s) to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ltr390/examples/ltr390_displayio_simpletest.py",
      "library": "ltr390",
      "type": "example",
      "file_name": "ltr390_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nimport board\nimport digitalio\nimport neopixel\nfrom adafruit_ble.advertising.standard import SolicitServicesAdvertisement\nimport adafruit_ble_apple_notification_center as ancs\n\nimport adafruit_ble_apple_notification_center as ancs\n# Circuit Playground Bluefruit buttons and LED setup\nbutA = digitalio.DigitalInOut(board.D4)  # CPB \"A\" button\nbutB = digitalio.DigitalInOut(board.D5)  # CPB \"B\" button",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_apple_notification_center/examples/ble_apple_notification_center_callhandler.py",
      "library": "ble_apple_notification_center",
      "type": "example",
      "file_name": "ble_apple_notification_center_callhandler.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nimport board\nimport digitalio\nimport neopixel\nfrom adafruit_ble.advertising.standard import SolicitServicesAdvertisement\nimport adafruit_ble_apple_notification_center as ancs\n\nimport adafruit_ble_apple_notification_center as ancs\n# Circuit Playground Bluefruit buttons and LED setup\nbutA = digitalio.DigitalInOut(board.D4)  # CPB \"A\" button\nbutB = digitalio.DigitalInOut(board.D5)  # CPB \"B\" button",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_apple_notification_center/examples/ble_apple_notification_center_callhandler.py",
      "library": "ble_apple_notification_center",
      "type": "example",
      "file_name": "ble_apple_notification_center_callhandler.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nimport board\nimport digitalio\nimport neopixel\nfrom adafruit_ble.advertising.standard import SolicitServicesAdvertisement\nimport adafruit_ble_apple_notification_center as ancs\n\nbutA = digitalio.DigitalInOut(board.D4)  # CPB \"A\" button\nbutB = digitalio.DigitalInOut(board.D5)  # CPB \"B\" button\nleds = neopixel.NeoPixel(board.D8, 10, brightness=0.1)\n(coff, cred, cgrn, cblu, cgra) = (0x000000, 0xFF0000, 0x00FF00, 0x0000FF, 0x111111)\nleds_off = (coff, coff, coff, coff, coff, coff, coff, coff, coff, coff)\nleds_idle = (cgra, cgra, cgra, cgra, cgra, cgra, cgra, cgra, cgra, cgra)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_apple_notification_center/examples/ble_apple_notification_center_callhandler.py",
      "library": "ble_apple_notification_center",
      "type": "example",
      "file_name": "ble_apple_notification_center_callhandler.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nimport board\nimport digitalio\nimport neopixel\nfrom adafruit_ble.advertising.standard import SolicitServicesAdvertisement\nimport adafruit_ble_apple_notification_center as ancs\n\nleds_idle = (cgra, cgra, cgra, cgra, cgra, cgra, cgra, cgra, cgra, cgra)\nleds_incoming_call = (coff, cgrn, cgrn, cgrn, coff, coff, cred, cred, cred, coff)\nleds_active_call = (cgrn, coff, coff, coff, cgrn, cgrn, cred, cred, cred, cgrn)\nradio = adafruit_ble.BLERadio()\na = SolicitServicesAdvertisement()\n# a.complete_name = \"CIRPYCALLHANDLER\" # this crashes things?",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_apple_notification_center/examples/ble_apple_notification_center_callhandler.py",
      "library": "ble_apple_notification_center",
      "type": "example",
      "file_name": "ble_apple_notification_center_callhandler.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\nimport adafruit_il0373\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_flexible_2.13_monochrome.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_flexible_2.13_monochrome.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_flexible_2.13_monochrome.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_flexible_2.13_monochrome.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = fourwire.FourWire(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_flexible_2.13_monochrome.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_flexible_2.13_monochrome.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = fourwire.FourWire(\n    spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_flexible_2.13_monochrome.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_flexible_2.13_monochrome.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = fourwire.FourWire(\n    spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_flexible_2.13_monochrome.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_flexible_2.13_monochrome.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\ndisplay = adafruit_il0373.IL0373(display_bus, width=212, height=104, rotation=90, busy_pin=epd_busy, swap_rams=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_flexible_2.13_monochrome.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_flexible_2.13_monochrome.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_framebuf\nimport board\nimport busio\nfrom adafruit_is31fl3731.charlie_bonnet import CharlieBonnet as Display\n\n# from adafruit_is31fl3731.matrix_11x7 import Matrix11x7 as Display\n# uncomment this line if you use a Pico, here with SCL=GP21 and SDA=GP20.\n# i2c = busio.I2C(board.GP21, board.GP20)\ni2c = busio.I2C(board.SCL, board.SDA)\ndisplay = Display(i2c)\ntext_to_show = \"Adafruit!!\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3731/examples/is31fl3731_text_example.py",
      "library": "is31fl3731",
      "type": "example",
      "file_name": "is31fl3731_text_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_framebuf\nimport board\nimport busio\nfrom adafruit_is31fl3731.charlie_bonnet import CharlieBonnet as Display\n\ntext_to_show = \"Adafruit!!\"\n# Create a framebuffer for our display\nbuf = bytearray(32)  # 2 bytes tall x 16 wide = 32 bytes (9 bits is 2 bytes)\nfb = adafruit_framebuf.FrameBuffer(buf, display.width, display.height, adafruit_framebuf.MVLSB)\nframe = 0  # start with frame 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3731/examples/is31fl3731_text_example.py",
      "library": "is31fl3731",
      "type": "example",
      "file_name": "is31fl3731_text_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_si7021\nimport board\nimport busio\nimport digitalio\nfrom adafruit_tinylora.adafruit_tinylora import TTN, TinyLoRa\n\n    bytearray16: TypeAlias = Annotated[bytearray, 16]\n# Board LED\nled = digitalio.DigitalInOut(board.D13)\nled.direction = digitalio.Direction.OUTPUT\n# Create library object using our bus i2c port for si7021\ni2c = busio.I2C(board.SCL, board.SDA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/tinylora/examples/tinylora_simpletest_si7021.py",
      "library": "tinylora",
      "type": "example",
      "file_name": "tinylora_simpletest_si7021.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_si7021\nimport board\nimport busio\nimport digitalio\nfrom adafruit_tinylora.adafruit_tinylora import TTN, TinyLoRa\n\n# Board LED\nled = digitalio.DigitalInOut(board.D13)\nled.direction = digitalio.Direction.OUTPUT\n# Create library object using our bus i2c port for si7021\ni2c = busio.I2C(board.SCL, board.SDA)\nsensor = adafruit_si7021.SI7021(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/tinylora/examples/tinylora_simpletest_si7021.py",
      "library": "tinylora",
      "type": "example",
      "file_name": "tinylora_simpletest_si7021.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_si7021\nimport board\nimport busio\nimport digitalio\nfrom adafruit_tinylora.adafruit_tinylora import TTN, TinyLoRa\n\n# Board LED\nled = digitalio.DigitalInOut(board.D13)\nled.direction = digitalio.Direction.OUTPUT\n# Create library object using our bus i2c port for si7021\ni2c = busio.I2C(board.SCL, board.SDA)\nsensor = adafruit_si7021.SI7021(i2c)\n# Create library object using our bus SPI port for radio\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/tinylora/examples/tinylora_simpletest_si7021.py",
      "library": "tinylora",
      "type": "example",
      "file_name": "tinylora_simpletest_si7021.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_si7021\nimport board\nimport busio\nimport digitalio\nfrom adafruit_tinylora.adafruit_tinylora import TTN, TinyLoRa\n\nled = digitalio.DigitalInOut(board.D13)\nled.direction = digitalio.Direction.OUTPUT\n# Create library object using our bus i2c port for si7021\ni2c = busio.I2C(board.SCL, board.SDA)\nsensor = adafruit_si7021.SI7021(i2c)\n# Create library object using our bus SPI port for radio\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/tinylora/examples/tinylora_simpletest_si7021.py",
      "library": "tinylora",
      "type": "example",
      "file_name": "tinylora_simpletest_si7021.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_si7021\nimport board\nimport busio\nimport digitalio\nfrom adafruit_tinylora.adafruit_tinylora import TTN, TinyLoRa\n\n# Create library object using our bus i2c port for si7021\ni2c = busio.I2C(board.SCL, board.SDA)\nsensor = adafruit_si7021.SI7021(i2c)\n# Create library object using our bus SPI port for radio\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# RFM9x Breakout Pinouts\ncs = digitalio.DigitalInOut(board.D5)\nirq = digitalio.DigitalInOut(board.D6)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/tinylora/examples/tinylora_simpletest_si7021.py",
      "library": "tinylora",
      "type": "example",
      "file_name": "tinylora_simpletest_si7021.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_si7021\nimport board\nimport busio\nimport digitalio\nfrom adafruit_tinylora.adafruit_tinylora import TTN, TinyLoRa\n\n# Create library object using our bus SPI port for radio\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# RFM9x Breakout Pinouts\ncs = digitalio.DigitalInOut(board.D5)\nirq = digitalio.DigitalInOut(board.D6)\nrst = digitalio.DigitalInOut(board.D4)\n# Feather M0 RFM9x Pinouts",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/tinylora/examples/tinylora_simpletest_si7021.py",
      "library": "tinylora",
      "type": "example",
      "file_name": "tinylora_simpletest_si7021.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_si7021\nimport board\nimport busio\nimport digitalio\nfrom adafruit_tinylora.adafruit_tinylora import TTN, TinyLoRa\n\n# Create library object using our bus SPI port for radio\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# RFM9x Breakout Pinouts\ncs = digitalio.DigitalInOut(board.D5)\nirq = digitalio.DigitalInOut(board.D6)\nrst = digitalio.DigitalInOut(board.D4)\n# Feather M0 RFM9x Pinouts\n# cs = digitalio.DigitalInOut(board.RFM9X_CS)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/tinylora/examples/tinylora_simpletest_si7021.py",
      "library": "tinylora",
      "type": "example",
      "file_name": "tinylora_simpletest_si7021.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_si7021\nimport board\nimport busio\nimport digitalio\nfrom adafruit_tinylora.adafruit_tinylora import TTN, TinyLoRa\n\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# RFM9x Breakout Pinouts\ncs = digitalio.DigitalInOut(board.D5)\nirq = digitalio.DigitalInOut(board.D6)\nrst = digitalio.DigitalInOut(board.D4)\n# Feather M0 RFM9x Pinouts\n# cs = digitalio.DigitalInOut(board.RFM9X_CS)\n# irq = digitalio.DigitalInOut(board.RFM9X_D0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/tinylora/examples/tinylora_simpletest_si7021.py",
      "library": "tinylora",
      "type": "example",
      "file_name": "tinylora_simpletest_si7021.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_tinylora.adafruit_tinylora import TTN, TinyLoRa\n\n    bytearray16: TypeAlias = Annotated[bytearray, 16]\n# Board LED\nled = digitalio.DigitalInOut(board.D13)\nled.direction = digitalio.Direction.OUTPUT\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/tinylora/examples/tinylora_simpletest.py",
      "library": "tinylora",
      "type": "example",
      "file_name": "tinylora_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_tinylora.adafruit_tinylora import TTN, TinyLoRa\n\n# Board LED\nled = digitalio.DigitalInOut(board.D13)\nled.direction = digitalio.Direction.OUTPUT\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# RFM9x Breakout Pinouts",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/tinylora/examples/tinylora_simpletest.py",
      "library": "tinylora",
      "type": "example",
      "file_name": "tinylora_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_tinylora.adafruit_tinylora import TTN, TinyLoRa\n\n# Board LED\nled = digitalio.DigitalInOut(board.D13)\nled.direction = digitalio.Direction.OUTPUT\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# RFM9x Breakout Pinouts\ncs = digitalio.DigitalInOut(board.D5)\nirq = digitalio.DigitalInOut(board.D6)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/tinylora/examples/tinylora_simpletest.py",
      "library": "tinylora",
      "type": "example",
      "file_name": "tinylora_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_tinylora.adafruit_tinylora import TTN, TinyLoRa\n\nled.direction = digitalio.Direction.OUTPUT\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# RFM9x Breakout Pinouts\ncs = digitalio.DigitalInOut(board.D5)\nirq = digitalio.DigitalInOut(board.D6)\nrst = digitalio.DigitalInOut(board.D4)\n# Feather M0 RFM9x Pinouts",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/tinylora/examples/tinylora_simpletest.py",
      "library": "tinylora",
      "type": "example",
      "file_name": "tinylora_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_tinylora.adafruit_tinylora import TTN, TinyLoRa\n\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# RFM9x Breakout Pinouts\ncs = digitalio.DigitalInOut(board.D5)\nirq = digitalio.DigitalInOut(board.D6)\nrst = digitalio.DigitalInOut(board.D4)\n# Feather M0 RFM9x Pinouts\n# cs = digitalio.DigitalInOut(board.RFM9X_CS)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/tinylora/examples/tinylora_simpletest.py",
      "library": "tinylora",
      "type": "example",
      "file_name": "tinylora_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_tinylora.adafruit_tinylora import TTN, TinyLoRa\n\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# RFM9x Breakout Pinouts\ncs = digitalio.DigitalInOut(board.D5)\nirq = digitalio.DigitalInOut(board.D6)\nrst = digitalio.DigitalInOut(board.D4)\n# Feather M0 RFM9x Pinouts\n# cs = digitalio.DigitalInOut(board.RFM9X_CS)\n# irq = digitalio.DigitalInOut(board.RFM9X_D0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/tinylora/examples/tinylora_simpletest.py",
      "library": "tinylora",
      "type": "example",
      "file_name": "tinylora_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_ssd1306\n\nimport busio\nimport adafruit_ssd1306\n# Create the I2C interface.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create the SSD1306 OLED class.\n# The first two parameters are the pixel width and pixel height.  Change these\n# to the right size for your display!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_bouncing_ball.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_bouncing_ball.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_ssd1306\n\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create the SSD1306 OLED class.\n# The first two parameters are the pixel width and pixel height.  Change these\n# to the right size for your display!\noled = adafruit_ssd1306.SSD1306_I2C(128, 32, i2c)\n# Helper function to draw a circle from a given position with a given radius\n# This is an implementation of the midpoint circle algorithm,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_bouncing_ball.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_bouncing_ball.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_ssd1306\n\ndef draw_circle(xpos0, ypos0, rad, col=1):\n    x = rad - 1\n    y = 0\n    dx = 1\n    dy = 1\n    err = dx - (rad << 1)\n    while x >= y:\n        oled.pixel(xpos0 + x, ypos0 + y, col)\n        oled.pixel(xpos0 + y, ypos0 + x, col)\n        oled.pixel(xpos0 - y, ypos0 + x, col)\n        oled.pixel(xpos0 - x, ypos0 + y, col)\n        oled.pixel(xpos0 - x, ypos0 - y, col)\n        oled.pixel(xpos0 - y, ypos0 - x, col)\n        oled.pixel(xpos0 + y, ypos0 - x, col)\n        oled.pixel(xpos0 + x, ypos0 - y, col)\n        if err <= 0:\n            y += 1\n            err += dy\n            dy += 2\n        if err > 0:\n            x -= 1\n            dx += 2\n            err += dx - (rad << 1)\n\n# Usage example:\nwhile True:\n    # undraw the previous circle\n    draw_circle(center_x, center_y, radius, col=0)\n\n    # if bouncing off right",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_bouncing_ball.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_bouncing_ball.py",
      "chunk_type": "function",
      "function_name": "draw_circle"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import Color, turtle\n\nimport board\nturtle = turtle(board.DISPLAY)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_swirl.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_swirl.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\n\nfrom adafruit_turtle import Color, turtle\n\nturtle = turtle(board.DISPLAY)\n\n\nturtle.pendown()\n\ncolors = [Color.ORANGE, Color.PURPLE]\n\nfor x in range(400):\n    turtle.pencolor(colors[x % 2])\n    turtle.forward(x)\n    turtle.left(91)\n\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_swirl.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_swirl.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "from time import sleep\nimport board\nfrom adafruit_neokey.neokey1x4 import NeoKey1x4\n\nimport board\n# use default I2C bus\ni2c_bus = board.I2C()\n# Create a NeoKey object\nneokey = NeoKey1x4(i2c_bus, addr=0x30)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/neokey/examples/neokey1x4_allkeys.py",
      "library": "neokey",
      "type": "example",
      "file_name": "neokey1x4_allkeys.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8151d\n\nimport adafruit_uc8151d\n# Pinout intended for use with a Raspberry Pi Pico\nclk = board.GP10\nsi = board.GP11\ndc = board.GP8\ncs = board.GP9\nrst = board.GP12",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8151d/examples/uc8151d_1.54_grayscale.py",
      "library": "uc8151d",
      "type": "example",
      "file_name": "uc8151d_1.54_grayscale.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8151d\n\n# Pinout intended for use with a Raspberry Pi Pico\nclk = board.GP10\nsi = board.GP11\ndc = board.GP8\ncs = board.GP9\nrst = board.GP12\nbusy = board.GP13",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8151d/examples/uc8151d_1.54_grayscale.py",
      "library": "uc8151d",
      "type": "example",
      "file_name": "uc8151d_1.54_grayscale.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8151d\n\n# Pinout intended for use with a Raspberry Pi Pico\nclk = board.GP10\nsi = board.GP11\ndc = board.GP8\ncs = board.GP9\nrst = board.GP12\nbusy = board.GP13",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8151d/examples/uc8151d_1.54_grayscale.py",
      "library": "uc8151d",
      "type": "example",
      "file_name": "uc8151d_1.54_grayscale.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8151d\n\n# Pinout intended for use with a Raspberry Pi Pico\nclk = board.GP10\nsi = board.GP11\ndc = board.GP8\ncs = board.GP9\nrst = board.GP12\nbusy = board.GP13\ndisplay_bus = FourWire(busio.SPI(clk, si), command=dc, chip_select=cs, reset=rst, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8151d/examples/uc8151d_1.54_grayscale.py",
      "library": "uc8151d",
      "type": "example",
      "file_name": "uc8151d_1.54_grayscale.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8151d\n\n# Pinout intended for use with a Raspberry Pi Pico\nclk = board.GP10\nsi = board.GP11\ndc = board.GP8\ncs = board.GP9\nrst = board.GP12\nbusy = board.GP13\ndisplay_bus = FourWire(busio.SPI(clk, si), command=dc, chip_select=cs, reset=rst, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8151d/examples/uc8151d_1.54_grayscale.py",
      "library": "uc8151d",
      "type": "example",
      "file_name": "uc8151d_1.54_grayscale.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8151d\n\nclk = board.GP10\nsi = board.GP11\ndc = board.GP8\ncs = board.GP9\nrst = board.GP12\nbusy = board.GP13\ndisplay_bus = FourWire(busio.SPI(clk, si), command=dc, chip_select=cs, reset=rst, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8151d/examples/uc8151d_1.54_grayscale.py",
      "library": "uc8151d",
      "type": "example",
      "file_name": "uc8151d_1.54_grayscale.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8151d\n\ndc = board.GP8\ncs = board.GP9\nrst = board.GP12\nbusy = board.GP13\ndisplay_bus = FourWire(busio.SPI(clk, si), command=dc, chip_select=cs, reset=rst, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8151d/examples/uc8151d_1.54_grayscale.py",
      "library": "uc8151d",
      "type": "example",
      "file_name": "uc8151d_1.54_grayscale.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8151d\n\ndisplay = adafruit_uc8151d.UC8151D(display_bus, width=152, height=152, busy_pin=busy, rotation=180, grayscale=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8151d/examples/uc8151d_1.54_grayscale.py",
      "library": "uc8151d",
      "type": "example",
      "file_name": "uc8151d_1.54_grayscale.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_st7565\n\nimport digitalio\nimport adafruit_st7565\n# Initialize SPI bus and control pins\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\ndc = digitalio.DigitalInOut(board.D5)  # data/command\ncs = digitalio.DigitalInOut(board.D6)  # Chip select\nreset = digitalio.DigitalInOut(board.D9)  # reset",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7565/examples/st7565_simpletest.py",
      "library": "st7565",
      "type": "example",
      "file_name": "st7565_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_st7565\n\nimport adafruit_st7565\n# Initialize SPI bus and control pins\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\ndc = digitalio.DigitalInOut(board.D5)  # data/command\ncs = digitalio.DigitalInOut(board.D6)  # Chip select\nreset = digitalio.DigitalInOut(board.D9)  # reset\ndisplay = adafruit_st7565.ST7565(spi, dc, cs, reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7565/examples/st7565_simpletest.py",
      "library": "st7565",
      "type": "example",
      "file_name": "st7565_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_st7565\n\nimport adafruit_st7565\n# Initialize SPI bus and control pins\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\ndc = digitalio.DigitalInOut(board.D5)  # data/command\ncs = digitalio.DigitalInOut(board.D6)  # Chip select\nreset = digitalio.DigitalInOut(board.D9)  # reset\ndisplay = adafruit_st7565.ST7565(spi, dc, cs, reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7565/examples/st7565_simpletest.py",
      "library": "st7565",
      "type": "example",
      "file_name": "st7565_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_st7565\n\n# Initialize SPI bus and control pins\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\ndc = digitalio.DigitalInOut(board.D5)  # data/command\ncs = digitalio.DigitalInOut(board.D6)  # Chip select\nreset = digitalio.DigitalInOut(board.D9)  # reset\ndisplay = adafruit_st7565.ST7565(spi, dc, cs, reset)\ndisplay.contrast = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7565/examples/st7565_simpletest.py",
      "library": "st7565",
      "type": "example",
      "file_name": "st7565_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_st7565\n\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\ndc = digitalio.DigitalInOut(board.D5)  # data/command\ncs = digitalio.DigitalInOut(board.D6)  # Chip select\nreset = digitalio.DigitalInOut(board.D9)  # reset\ndisplay = adafruit_st7565.ST7565(spi, dc, cs, reset)\ndisplay.contrast = 0\n# Turn on the Backlight LED",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7565/examples/st7565_simpletest.py",
      "library": "st7565",
      "type": "example",
      "file_name": "st7565_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_st7565\n\ndisplay = adafruit_st7565.ST7565(spi, dc, cs, reset)\ndisplay.contrast = 0\n# Turn on the Backlight LED\nbacklight = digitalio.DigitalInOut(board.D10)  # backlight",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7565/examples/st7565_simpletest.py",
      "library": "st7565",
      "type": "example",
      "file_name": "st7565_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_max9744\n\nimport busio\nimport adafruit_max9744\n# Initialize I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Initialize amplifier.\namp = adafruit_max9744.MAX9744(i2c)\n# Optionally you can specify a different addres if you override the AD1, AD2",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max9744/examples/max9744_simpletest.py",
      "library": "max9744",
      "type": "example",
      "file_name": "max9744_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_max9744\n\n# Initialize I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Initialize amplifier.\namp = adafruit_max9744.MAX9744(i2c)\n# Optionally you can specify a different addres if you override the AD1, AD2\n# pins to change the address.\n# amp = adafruit_max9744.MAX9744(i2c, address=0x49)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max9744/examples/max9744_simpletest.py",
      "library": "max9744",
      "type": "example",
      "file_name": "max9744_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_lsm6ds.lsm6ds3 import LSM6DS3\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = LSM6DS3(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm6ds/examples/lsm6ds_lsm6ds3_simpletest.py",
      "library": "lsm6ds",
      "type": "example",
      "file_name": "lsm6ds_lsm6ds3_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2022 Edrig\n#\n# SPDX-License-Identifier: MIT\nimport time\n\nimport board\n\nfrom adafruit_lsm6ds.lsm6ds3 import LSM6DS3\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = LSM6DS3(i2c)\n\nwhile True:\n    accel_x, accel_y, accel_z = sensor.acceleration\n    print(f\"Acceleration: X:{accel_x:.2f}, Y: {accel_y:.2f}, Z: {accel_z:.2f} m/s^2\")\n    gyro_x, gyro_y, gyro_z = sensor.gyro\n    print(f\"Gyro X:{gyro_x:.2f}, Y: {gyro_y:.2f}, Z: {gyro_z:.2f} radians/s\")\n    print(\"\")\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm6ds/examples/lsm6ds_lsm6ds3_simpletest.py",
      "library": "lsm6ds",
      "type": "example",
      "file_name": "lsm6ds_lsm6ds3_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_is31fl3731.charlie_bonnet import CharlieBonnet as Display\n\n# from adafruit_is31fl3731.scroll_phat_hd import ScrollPhatHD as Display\nSCROLLING_TEXT = \"You can display a personal message here...\"\nBRIGHTNESS = 64  # Brightness can be between 0-255\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndisplay = Display(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3731/examples/is31fl3731_pillow_marquee.py",
      "library": "is31fl3731",
      "type": "example",
      "file_name": "is31fl3731_pillow_marquee.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\nbroker_port = int(getenv(\"broker_port\", \"8883\"))  # Port 1883 insecure, 8883 secure\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)  # Uncomment for Most Boards",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# from adafruit_esp32spi import PWMOut\n# RED_LED = PWMOut.PWMOut(esp, 26)\n# GREEN_LED = PWMOut.PWMOut(esp, 27)\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password, status_pixel=status_pixel)\n### Code ###",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef connected(client, userdata, flags, rc):\n    print('Connected to MQTT Broker!')\n\n# Usage example:\nesp32_reset = DigitalInOut(board.ESP_RESET)\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "chunk_type": "function",
      "function_name": "connected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef disconnected(client, userdata, rc):\n    print('Disconnected from MQTT Broker!')\n\n# Usage example:\n\ndef disconnected(client, userdata, rc):\n    # This method is called when the client is disconnected\n    print(\"Disconnected from MQTT Broker!\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "chunk_type": "function",
      "function_name": "disconnected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef subscribe(client, userdata, topic, granted_qos):\n    print(f'Subscribed to {topic} with QOS level {granted_qos}')\n\n# Usage example:\n\ndef subscribe(client, userdata, topic, granted_qos):\n    # This method is called when the client subscribes to a new feed.\n    print(f\"Subscribed to {topic} with QOS level {granted_qos}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "chunk_type": "function",
      "function_name": "subscribe"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef unsubscribe(client, userdata, topic, pid):\n    print(f'Unsubscribed from {topic} with PID {pid}')\n\n# Usage example:\n\ndef unsubscribe(client, userdata, topic, pid):\n    # This method is called when the client unsubscribes from a feed.\n    print(f\"Unsubscribed from {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "chunk_type": "function",
      "function_name": "unsubscribe"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef on_battery_msg(client, topic, message):\n    print(f'Battery level: {message}v')\n\n# Usage example:\nclient.on_unsubscribe = unsubscribe\nclient.on_message = on_message\nclient.add_topic_callback(f\"{aio_username}/feeds/device.batterylevel\", on_battery_msg)\n\n# Connect the client to the MQTT broker.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "chunk_type": "function",
      "function_name": "on_battery_msg"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef on_message(client, topic, message):\n    print(f'New message on topic {topic}: {message}')\n\n# Usage example:\nclient.on_subscribe = subscribe\nclient.on_unsubscribe = unsubscribe\nclient.on_message = on_message\nclient.add_topic_callback(f\"{aio_username}/feeds/device.batterylevel\", on_battery_msg)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "chunk_type": "function",
      "function_name": "on_message"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# Connect to WiFi\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Set up a MiniMQTT Client\nclient = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Set up a MiniMQTT Client\nclient = MQTT.MQTT(\n    broker=broker,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/esp32spi/minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_topic_callbacks_esp32spi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_scd30\n\nimport adafruit_scd30\n# SCD-30 has tempremental I2C with clock stretching, and delays\n# It's best to start using I2C clock slower and then you can increase it\n# until the sensor stops responding (NAK fails, etc)\ni2c = busio.I2C(board.SCL, board.SDA, frequency=1000)  # for FT232H, use 1KHz\nscd = adafruit_scd30.SCD30(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/scd30/examples/scd30_ft232htest.py",
      "library": "scd30",
      "type": "example",
      "file_name": "scd30_ft232htest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_scd30\n\n# SCD-30 has tempremental I2C with clock stretching, and delays\n# It's best to start using I2C clock slower and then you can increase it\n# until the sensor stops responding (NAK fails, etc)\ni2c = busio.I2C(board.SCL, board.SDA, frequency=1000)  # for FT232H, use 1KHz\nscd = adafruit_scd30.SCD30(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/scd30/examples/scd30_ft232htest.py",
      "library": "scd30",
      "type": "example",
      "file_name": "scd30_ft232htest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 by Bryan Siepert, written for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\nimport time\n\nimport board\nimport busio\n\nimport adafruit_scd30\n\n# SCD-30 has tempremental I2C with clock stretching, and delays\n# It's best to start using I2C clock slower and then you can increase it\n# until the sensor stops responding (NAK fails, etc)\ni2c = busio.I2C(board.SCL, board.SDA, frequency=1000)  # for FT232H, use 1KHz\nscd = adafruit_scd30.SCD30(i2c)\n\nwhile True:\n    # since the measurement interval is long (2+ seconds) we check for new data before reading\n    # the values, to ensure current readings.\n    if scd.data_available:\n        print(\"Data Available!\")\n        print(\"CO2: %d PPM\" % scd.CO2)\n        print(\"Temperature: %0.2f degrees C\" % scd.temperature)\n        print(\"Humidity: %0.2f %% rH\" % scd.relative_humidity)\n        print(\"\")\n        print(\"Waiting for new data...\")\n        print(\"\")\n\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/scd30/examples/scd30_ft232htest.py",
      "library": "scd30",
      "type": "example",
      "file_name": "scd30_ft232htest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2017 Scott Shawcroft, written for Adafruit Industries\n# SPDX-FileCopyrightText: Copyright (c) 2023 Scott Shawcroft for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\n# This example works over the second CDC and supports history.\n\nimport usb_cdc\n\n# Rename import to make the rest of the code compatible with CPython's prompt_toolkit library.\nimport adafruit_prompt_toolkit as prompt_toolkit\n\n# If the second CDC is available, then use it instead.\nserial = usb_cdc.console\nif usb_cdc.data:\n    serial = usb_cdc.data\n\nsession = prompt_toolkit.PromptSession(input=serial, output=serial)\n\nwhile True:\n    response = prompt_toolkit.prompt(\"$ \")\n    print(\"->\", response, file=serial)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/prompt_toolkit/examples/prompt_toolkit_second_cdc.py",
      "library": "prompt_toolkit",
      "type": "example",
      "file_name": "prompt_toolkit_second_cdc.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_feed_callback.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feed_callback.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_feed_callback.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feed_callback.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_feed_callback.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feed_callback.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_feed_callback.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feed_callback.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_feed_callback.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feed_callback.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)  # Uncomment for Most Boards",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_feed_callback.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feed_callback.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n# from adafruit_esp32spi import PWMOut\n# RED_LED = PWMOut.PWMOut(esp, 26)\n# GREEN_LED = PWMOut.PWMOut(esp, 27)\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password, status_pixel=status_pixel)\n# Define callback functions which will be called when certain events happen.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_feed_callback.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feed_callback.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef connected(client):\n    print('Connected to Adafruit IO!  Listening for DemoFeed changes...')\n\n# Usage example:\nesp32_reset = DigitalInOut(board.ESP_RESET)\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_feed_callback.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feed_callback.py",
      "chunk_type": "function",
      "function_name": "connected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef subscribe(client, userdata, topic, granted_qos):\n    print(f'Subscribed to {topic} with QOS level {granted_qos}')\n\n# Usage example:\ndef connected(client):\n    # Connected function will be called when the client is connected to Adafruit IO.\n    # This is a good place to subscribe to feed changes.  The client parameter\n    # passed to this function is the Adafruit IO MQTT client so you can make\n    # calls against it easily.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_feed_callback.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feed_callback.py",
      "chunk_type": "function",
      "function_name": "subscribe"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef unsubscribe(client, userdata, topic, pid):\n    print(f'Unsubscribed from {topic} with PID {pid}')\n\n# Usage example:\n\ndef unsubscribe(client, userdata, topic, pid):\n    # This method is called when the client unsubscribes from a feed.\n    print(f\"Unsubscribed from {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_feed_callback.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feed_callback.py",
      "chunk_type": "function",
      "function_name": "unsubscribe"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef disconnected(client):\n    print('Disconnected from Adafruit IO!')\n\n# Usage example:\n# Connect the callback methods defined above to Adafruit IO\nio.on_connect = connected\nio.on_disconnect = disconnected\nio.on_subscribe = subscribe\nio.on_unsubscribe = unsubscribe",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_feed_callback.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feed_callback.py",
      "chunk_type": "function",
      "function_name": "disconnected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef publish(client, userdata, topic, pid):\n    print(f'Published to {topic} with PID {pid}')\n    if userdata is not None:\n        print('Published User data: ', end='')\n        print(userdata)\n\n# Usage example:\n\ndef publish(client, userdata, topic, pid):\n    # This method is called when the client publishes data to a feed.\n    print(f\"Published to {topic} with PID {pid}\")\n    if userdata is not None:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_feed_callback.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feed_callback.py",
      "chunk_type": "function",
      "function_name": "publish"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef on_message(client, feed_id, payload):\n    print(f'Feed {feed_id} received new value: {payload}')\n\n# Usage example:\nio.on_subscribe = subscribe\nio.on_unsubscribe = unsubscribe\nio.on_message = on_message\nio.on_publish = publish\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_feed_callback.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feed_callback.py",
      "chunk_type": "function",
      "function_name": "on_message"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef on_battery_msg(client, topic, message):\n    print(f'Battery level: {message}v')\n\n# Usage example:\n\n# Set up a message handler for the battery feed\nio.add_feed_callback(\"battery\", on_battery_msg)\n\n# Subscribe to all messages on the battery feed",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_feed_callback.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feed_callback.py",
      "chunk_type": "function",
      "function_name": "on_battery_msg"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n# Connect to WiFi\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_feed_callback.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feed_callback.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(\n    broker=\"io.adafruit.com\",",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_feed_callback.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_feed_callback.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_tlv493d\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\ntlv = adafruit_tlv493d.TLV493D(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlv493d/examples/tlv493d_displayio_simpletest.py",
      "library": "tlv493d",
      "type": "example",
      "file_name": "tlv493d_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_tlv493d\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\ntlv = adafruit_tlv493d.TLV493D(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlv493d/examples/tlv493d_displayio_simpletest.py",
      "library": "tlv493d",
      "type": "example",
      "file_name": "tlv493d_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_tlv493d\n\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlv493d/examples/tlv493d_displayio_simpletest.py",
      "library": "tlv493d",
      "type": "example",
      "file_name": "tlv493d_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_tlv493d\n\n# add the label(s) to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlv493d/examples/tlv493d_displayio_simpletest.py",
      "library": "tlv493d",
      "type": "example",
      "file_name": "tlv493d_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_pca9685\nimport board\nimport busio\nfrom rainbowio import colorwheel\nimport adafruit_rgbled\n\nimport adafruit_rgbled\n# PCA9685 Initialization\ni2c = busio.I2C(board.SCL, board.SDA)\npca = adafruit_pca9685.PCA9685(i2c)\npca.frequency = 60\n# PCA9685 LED Channels",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rgbled/examples/rgbled_pca9685.py",
      "library": "rgbled",
      "type": "example",
      "file_name": "rgbled_pca9685.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_pca9685\nimport board\nimport busio\nfrom rainbowio import colorwheel\nimport adafruit_rgbled\n\nimport adafruit_rgbled\n# PCA9685 Initialization\ni2c = busio.I2C(board.SCL, board.SDA)\npca = adafruit_pca9685.PCA9685(i2c)\npca.frequency = 60\n# PCA9685 LED Channels\nRED_LED = pca.channels[0]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rgbled/examples/rgbled_pca9685.py",
      "library": "rgbled",
      "type": "example",
      "file_name": "rgbled_pca9685.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_pca9685\nimport board\nimport busio\nfrom rainbowio import colorwheel\nimport adafruit_rgbled\n\nRED_LED = pca.channels[0]\nGREEN_LED = pca.channels[1]\nBLUE_LED = pca.channels[2]\n# Create the RGB LED object\nled = adafruit_rgbled.RGBLED(RED_LED, GREEN_LED, BLUE_LED, invert_pwm=True)\n# Optionally, you can also create the RGB LED object with inverted PWM\n# led = adafruit_rgbled.RGBLED(RED_LED, GREEN_LED, BLUE_LED, invert_pwm=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rgbled/examples/rgbled_pca9685.py",
      "library": "rgbled",
      "type": "example",
      "file_name": "rgbled_pca9685.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_pca9685\nimport board\nimport busio\nfrom rainbowio import colorwheel\nimport adafruit_rgbled\n\ndef rainbow_cycle(wait):\n    for i in range(255):\n        i = (i + 1) % 256\n        led.color = colorwheel(i)\n        time.sleep(wait)\n\n# Usage example:\n\n    # rainbow cycle the RGB LED\n    rainbow_cycle(0.01)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rgbled/examples/rgbled_pca9685.py",
      "library": "rgbled",
      "type": "example",
      "file_name": "rgbled_pca9685.py",
      "chunk_type": "function",
      "function_name": "rainbow_cycle"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pwmio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\n# Modify this if you have a different sized character LCD\nlcd_columns = 16\nlcd_rows = 2\n# Metro M0/M4 Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rgb_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rgb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pwmio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_columns = 16\nlcd_rows = 2\n# Metro M0/M4 Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rgb_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rgb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pwmio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_rows = 2\n# Metro M0/M4 Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nred = pwmio.PWMOut(board.D3)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rgb_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rgb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pwmio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\n# Metro M0/M4 Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nred = pwmio.PWMOut(board.D3)\ngreen = pwmio.PWMOut(board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rgb_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rgb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pwmio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\n# Metro M0/M4 Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nred = pwmio.PWMOut(board.D3)\ngreen = pwmio.PWMOut(board.D5)\nblue = pwmio.PWMOut(board.D6)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rgb_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rgb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pwmio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_rs = digitalio.DigitalInOut(board.D7)\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nred = pwmio.PWMOut(board.D3)\ngreen = pwmio.PWMOut(board.D5)\nblue = pwmio.PWMOut(board.D6)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rgb_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rgb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pwmio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_en = digitalio.DigitalInOut(board.D8)\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nred = pwmio.PWMOut(board.D3)\ngreen = pwmio.PWMOut(board.D5)\nblue = pwmio.PWMOut(board.D6)\n# Initialise the LCD class",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rgb_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rgb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pwmio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_d7 = digitalio.DigitalInOut(board.D12)\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nred = pwmio.PWMOut(board.D3)\ngreen = pwmio.PWMOut(board.D5)\nblue = pwmio.PWMOut(board.D6)\n# Initialise the LCD class\nlcd = characterlcd.Character_LCD_RGB(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rgb_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rgb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pwmio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_d6 = digitalio.DigitalInOut(board.D11)\nlcd_d5 = digitalio.DigitalInOut(board.D10)\nlcd_d4 = digitalio.DigitalInOut(board.D9)\nred = pwmio.PWMOut(board.D3)\ngreen = pwmio.PWMOut(board.D5)\nblue = pwmio.PWMOut(board.D6)\n# Initialise the LCD class\nlcd = characterlcd.Character_LCD_RGB(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rgb_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rgb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_mcp230xx.mcp23008 import MCP23008\n\n# from adafruit_mcp230xx.mcp23017 import MCP23017\n# Initialize the I2C bus:\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create an instance of either the MCP23008 or MCP23017 class depending on\n# which chip you're using:\nmcp = MCP23008(i2c)  # MCP23008",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp230xx/examples/mcp230xx_simpletest.py",
      "library": "mcp230xx",
      "type": "example",
      "file_name": "mcp230xx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_mcp230xx.mcp23008 import MCP23008\n\n# Setup pin0 as an output that's at a high logic level.\npin0.switch_to_output(value=True)\n# Setup pin1 as an input with a pull-up resistor enabled.  Notice you can also\n# use properties to change this state.\npin1.direction = digitalio.Direction.INPUT\npin1.pull = digitalio.Pull.UP\n# Now loop blinking the pin 0 output and reading the state of pin 1 input.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp230xx/examples/mcp230xx_simpletest.py",
      "library": "mcp230xx",
      "type": "example",
      "file_name": "mcp230xx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_mcp230xx.mcp23008 import MCP23008\n\npin0.switch_to_output(value=True)\n# Setup pin1 as an input with a pull-up resistor enabled.  Notice you can also\n# use properties to change this state.\npin1.direction = digitalio.Direction.INPUT\npin1.pull = digitalio.Pull.UP\n# Now loop blinking the pin 0 output and reading the state of pin 1 input.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp230xx/examples/mcp230xx_simpletest.py",
      "library": "mcp230xx",
      "type": "example",
      "file_name": "mcp230xx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nfrom adafruit_as7341 import AS7341\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = AS7341(i2c)\nsensor.flicker_detection_enabled = True",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/as7341/examples/as7341_flicker_detection.py",
      "library": "as7341",
      "type": "example",
      "file_name": "as7341_flicker_detection.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 Bryan Siepert, written for Adafruit Industries\n# SPDX-License-Identifier: MIT\nfrom time import sleep\n\nimport board\n\nfrom adafruit_as7341 import AS7341\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = AS7341(i2c)\nsensor.flicker_detection_enabled = True\n\nwhile True:\n    flicker_detected = sensor.flicker_detected\n    if flicker_detected:\n        print(\"Detected a %d Hz flicker\" % flicker_detected)\n\n    sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/as7341/examples/as7341_flicker_detection.py",
      "library": "as7341",
      "type": "example",
      "file_name": "as7341_flicker_detection.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport digitalio\nimport adafruit_midi_parser\n\nimport digitalio\nimport adafruit_midi_parser\n# Setup the built-in LED\nled = digitalio.DigitalInOut(board.LED)\nled.direction = digitalio.Direction.OUTPUT\n# Path to your MIDI file\nmidi_file = \"/song.mid\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/midi_parser/examples/midi_parser_player_example.py",
      "library": "midi_parser",
      "type": "example",
      "file_name": "midi_parser_player_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport digitalio\nimport adafruit_midi_parser\n\nimport adafruit_midi_parser\n# Setup the built-in LED\nled = digitalio.DigitalInOut(board.LED)\nled.direction = digitalio.Direction.OUTPUT\n# Path to your MIDI file\nmidi_file = \"/song.mid\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/midi_parser/examples/midi_parser_player_example.py",
      "library": "midi_parser",
      "type": "example",
      "file_name": "midi_parser_player_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport digitalio\nimport adafruit_midi_parser\n\nclass Custom_Player(adafruit_midi_parser.MIDIPlayer):\n\n    def on_note_on(self, note, velocity, channel):\n        print(f'Note On: {note}, velocity: {velocity}')\n        led.value = True\n\n    def on_note_off(self, note, velocity, channel):\n        print(f'Note Off: {note}')\n        led.value = False\n\n    def on_end_of_track(self, track):\n        print(f'End of track {track}')\n        time.sleep(5)\n\n    def on_playback_complete(self):\n        print('Playback complete, restarting...')\n        for _ in range(3):\n            led.value = True\n            time.sleep(0.05)\n            led.value = False\n            time.sleep(0.05)\n\n# Usage example:\n\n# Create a custom player class\nclass Custom_Player(adafruit_midi_parser.MIDIPlayer):\n    def on_note_on(self, note, velocity, channel):  # noqa: PLR6301\n        print(f\"Note On: {note}, velocity: {velocity}\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/midi_parser/examples/midi_parser_player_example.py",
      "library": "midi_parser",
      "type": "example",
      "file_name": "midi_parser_player_example.py",
      "chunk_type": "function",
      "function_name": "Custom_Player"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\nimport adafruit_ssd1680\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D8  # Set to None for FeatherWing\nepd_busy = board.D7  # Set to None for FeatherWing",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_simpletest.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D8  # Set to None for FeatherWing\nepd_busy = board.D7  # Set to None for FeatherWing",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_simpletest.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D8  # Set to None for FeatherWing\nepd_busy = board.D7  # Set to None for FeatherWing\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_simpletest.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D8  # Set to None for FeatherWing\nepd_busy = board.D7  # Set to None for FeatherWing\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_simpletest.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D8  # Set to None for FeatherWing\nepd_busy = board.D7  # Set to None for FeatherWing\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_simpletest.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\ndisplay = adafruit_ssd1680.SSD1680(display_bus, width=250, height=122, busy_pin=epd_busy, highlight_color=16711680, rotation=270, colstart=-8)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_simpletest.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\n# First define some constants to allow easy resizing of shapes.\nBORDER = 20\nFONTSIZE = 24\n# Configuration for CS and DC pins (these are PiTFT defaults):\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)\nreset_pin = digitalio.DigitalInOut(board.D24)\n# Config for display baudrate (default max is 24mhz):",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_demo.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\nBORDER = 20\nFONTSIZE = 24\n# Configuration for CS and DC pins (these are PiTFT defaults):\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)\nreset_pin = digitalio.DigitalInOut(board.D24)\n# Config for display baudrate (default max is 24mhz):\nBAUDRATE = 24000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_demo.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\nFONTSIZE = 24\n# Configuration for CS and DC pins (these are PiTFT defaults):\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)\nreset_pin = digitalio.DigitalInOut(board.D24)\n# Config for display baudrate (default max is 24mhz):\nBAUDRATE = 24000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_demo.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\n# Config for display baudrate (default max is 24mhz):\nBAUDRATE = 24000000\n# Setup SPI bus using hardware SPI:\nspi = board.SPI()\n# Create the display:\n# disp = st7789.ST7789(spi, rotation=90,                            # 2.0\" ST7789\n# disp = st7789.ST7789(spi, height=240, y_offset=80, rotation=180,  # 1.3\", 1.54\" ST7789",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_demo.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport adafruit_imageload\n\nimport board\nimport displayio\nimport adafruit_imageload\ndisplay = board.DISPLAY\nbitmap, palette = adafruit_imageload.load(\n    \"images/color_wheel.bmp\", bitmap=displayio.Bitmap, palette=displayio.Palette",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_colorwheel.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_colorwheel.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport adafruit_imageload\n\nbitmap, palette = adafruit_imageload.load('images/color_wheel.bmp', bitmap=displayio.Bitmap, palette=displayio.Palette)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_colorwheel.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_colorwheel.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport displayio\n\nimport adafruit_imageload\n\ndisplay = board.DISPLAY\n\nbitmap, palette = adafruit_imageload.load(\n    \"images/color_wheel.bmp\", bitmap=displayio.Bitmap, palette=displayio.Palette\n)\n\ntile_grid = displayio.TileGrid(bitmap, pixel_shader=palette)\n\ngroup = displayio.Group()\ngroup.append(tile_grid)\ndisplay.root_group = group\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_colorwheel.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_colorwheel.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom adafruit_display_shapes.arc import Arc\nfrom adafruit_display_shapes.circle import Circle\n\n# use built in display (PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\nw2 = int(display.width / 2)\nh2 = int(display.height / 2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-shapes/examples/display_shapes_arc_dynamic.py",
      "library": "display-shapes",
      "type": "example",
      "file_name": "display_shapes_arc_dynamic.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport time\nimport board\nfrom adafruit_rockblock import RockBlock\n\nimport time\n# CircuitPython / Blinka\nimport board\nuart = board.UART()\nuart.baudrate = 19200\n# via USB cable\n# import serial",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rockblock/examples/rockblock_send_data.py",
      "library": "rockblock",
      "type": "example",
      "file_name": "rockblock_send_data.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport struct\nimport time\n\n# CircuitPython / Blinka\nimport board\n\nuart = board.UART()\nuart.baudrate = 19200\n\n# via USB cable\n# import serial\n# uart = serial.Serial(\"/dev/ttyUSB0\", 19200)\n\nfrom adafruit_rockblock import RockBlock\n\nrb = RockBlock(uart)\n\n# create some data\nsome_int = 2112\nsome_float = 42.123456789\nsome_text = \"hello world\"\ntext_len = len(some_text)\n\n# create binary data\ndata = struct.pack(\"i\", some_int)\ndata += struct.pack(\"f\", some_float)\ndata += struct.pack(\"i\", len(some_text))\ndata += struct.pack(f\"{text_len}s\", some_text.encode())\n\n# put data in outbound buffer\nrb.data_out = data\n\n# try a satellite Short Burst Data transfer\nprint(\"Talking to satellite...\")\nstatus = rb.satellite_transfer()\n# loop as needed\nretry = 0\nwhile status[0] > 8:\n    time.sleep(10)\n    status = rb.satellite_transfer()\n    print(retry, status)\n    retry += 1\n\nprint(\"\\nDONE.\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rockblock/examples/rockblock_send_data.py",
      "library": "rockblock",
      "type": "example",
      "file_name": "rockblock_send_data.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tmp007\n\ndef c_to_f(c):\n    return c * 9.0 / 5.0 + 32.0\n\n# Usage example:\nwhile True:\n    die_temp = sensor.die_temperature\n    print(f\"   Die temperature: {die_temp:0.3F}*C / {c_to_f(die_temp):0.3F}*F\")\n    obj_temp = sensor.temperature\n    print(f\"Object temperature: {obj_temp:0.3F}*C / {c_to_f(obj_temp):0.3F}*F\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tmp007/examples/tmp007_simpletest.py",
      "library": "tmp007",
      "type": "example",
      "file_name": "tmp007_simpletest.py",
      "chunk_type": "function",
      "function_name": "c_to_f"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tmp007\n\n# Create library object using our Bus I2C port\ni2c = busio.I2C(board.SCL, board.SDA)\nsensor = adafruit_tmp007.TMP007(i2c)\n# Initialize communication with the sensor, using the default 16 samples per conversion.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tmp007/examples/tmp007_simpletest.py",
      "library": "tmp007",
      "type": "example",
      "file_name": "tmp007_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tmp007\n\n# Create library object using our Bus I2C port\ni2c = busio.I2C(board.SCL, board.SDA)\nsensor = adafruit_tmp007.TMP007(i2c)\n# Initialize communication with the sensor, using the default 16 samples per conversion.\n# This is the best accuracy but a little slower at reacting to changes.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tmp007/examples/tmp007_simpletest.py",
      "library": "tmp007",
      "type": "example",
      "file_name": "tmp007_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n#!/usr/bin/python\n# Author: Adapted to CircuitPython by Jerry Needell\n#     Adafruit_Python_TMP example by Tony DiCola\n#\n\nimport time\n\nimport board\nimport busio\n\nimport adafruit_tmp007\n\n\n# Define a function to convert celsius to fahrenheit.\ndef c_to_f(c):\n    return c * 9.0 / 5.0 + 32.0\n\n\n# Create library object using our Bus I2C port\ni2c = busio.I2C(board.SCL, board.SDA)\nsensor = adafruit_tmp007.TMP007(i2c)\n\n\n# Initialize communication with the sensor, using the default 16 samples per conversion.\n# This is the best accuracy but a little slower at reacting to changes.\n# The first sample will be meaningless\nwhile True:\n    die_temp = sensor.die_temperature\n    print(f\"   Die temperature: {die_temp:0.3F}*C / {c_to_f(die_temp):0.3F}*F\")\n    obj_temp = sensor.temperature\n    print(f\"Object temperature: {obj_temp:0.3F}*C / {c_to_f(obj_temp):0.3F}*F\")\n    time.sleep(5.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tmp007/examples/tmp007_simpletest.py",
      "library": "tmp007",
      "type": "example",
      "file_name": "tmp007_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import Color, turtle\n\ndef f(side_length, depth, generation):\n    if depth == 0:\n        turtle.forward(side_length)\n        return\n    side = lambda: f(side_length / 3, depth - 1, generation + 1)\n    side()\n    turtle.left(60)\n    side()\n    turtle.right(120)\n    side()\n    turtle.left(60)\n    side()\n\n# Usage example:\n# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_overlayed_koch.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_overlayed_koch.py",
      "chunk_type": "function",
      "function_name": "f"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import Color, turtle\n\ndef snowflake(num_generations, generation_color):\n    top_side = lambda: f(top_len, num_generations, 0)\n    turtle.pencolor(generation_color)\n    top_side()\n    turtle.right(120)\n    top_side()\n    turtle.right(120)\n    top_side()\n\n# Usage example:\n\nfor generations in range(4):\n    snowflake(generations, generation_colors[generations])\n    turtle.right(120)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_overlayed_koch.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_overlayed_koch.py",
      "chunk_type": "function",
      "function_name": "snowflake"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import Color, turtle\n\nturtle = turtle(board.DISPLAY)\nunit = min(board.DISPLAY.width / 3, board.DISPLAY.height / 4)\ntop_len = unit * 3",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_overlayed_koch.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_overlayed_koch.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import Color, turtle\n\nturtle = turtle(board.DISPLAY)\nunit = min(board.DISPLAY.width / 3, board.DISPLAY.height / 4)\ntop_len = unit * 3",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_overlayed_koch.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_overlayed_koch.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adt7410\nimport board\n\nimport time\nimport adt7410\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\nadt = adt7410.ADT7410(i2c)\nadt.low_temperature = 18\nadt.high_temperature = 29",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adt7410/examples/adt7410_temp_limits.py",
      "library": "adt7410",
      "type": "example",
      "file_name": "adt7410_temp_limits.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport adt7410\nimport board\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\nadt = adt7410.ADT7410(i2c)\n\nadt.low_temperature = 18\nadt.high_temperature = 29\nadt.critical_temperature = 35\nadt.hysteresis_temperature = 2\n\nprint(f\"High limit: {adt.high_temperature}C\")\nprint(f\"Low limit: {adt.low_temperature}C\")\nprint(f\"Critical limit: {adt.critical_temperature}C\")\n\nadt.comparator_mode = adt7410.COMP_ENABLED\n\nwhile True:\n    print(f\"Temperature: {adt.temperature:.2f}C\")\n    alert_status = adt.alert_status\n    if alert_status.high_alert:\n        print(\"Temperature above high set limit!\")\n    if alert_status.low_alert:\n        print(\"Temperature below low set limit!\")\n    if alert_status.critical_alert:\n        print(\"Temperature above critical set limit!\")\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adt7410/examples/adt7410_temp_limits.py",
      "library": "adt7410",
      "type": "example",
      "file_name": "adt7410_temp_limits.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport terminalio\nfrom adafruit_display_text import label, wrap_text_to_lines\n\n# use built in display (PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\ntext = (",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-text/examples/display_text_wraptest.py",
      "library": "display-text",
      "type": "example",
      "file_name": "display_text_wraptest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport adafruit_ble\nimport adafruit_midi\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_midi.control_change import ControlChange\nfrom adafruit_midi.note_off import NoteOff\nfrom adafruit_midi.note_on import NoteOn\nfrom adafruit_midi.pitch_bend import PitchBend\nimport adafruit_ble_midi\n\nimport adafruit_ble_midi\n# Use default HID descriptor\nmidi_service = adafruit_ble_midi.MIDIService()\nadvertisement = ProvideServicesAdvertisement(midi_service)\n# advertisement.appearance = 961\nble = adafruit_ble.BLERadio()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_midi/examples/ble_midi_simpletest.py",
      "library": "ble_midi",
      "type": "example",
      "file_name": "ble_midi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport adafruit_ble\nimport adafruit_midi\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_midi.control_change import ControlChange\nfrom adafruit_midi.note_off import NoteOff\nfrom adafruit_midi.note_on import NoteOn\nfrom adafruit_midi.pitch_bend import PitchBend\nimport adafruit_ble_midi\n\n# Use default HID descriptor\nmidi_service = adafruit_ble_midi.MIDIService()\nadvertisement = ProvideServicesAdvertisement(midi_service)\n# advertisement.appearance = 961\nble = adafruit_ble.BLERadio()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_midi/examples/ble_midi_simpletest.py",
      "library": "ble_midi",
      "type": "example",
      "file_name": "ble_midi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport adafruit_ble\nimport adafruit_midi\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_midi.control_change import ControlChange\nfrom adafruit_midi.note_off import NoteOff\nfrom adafruit_midi.note_on import NoteOn\nfrom adafruit_midi.pitch_bend import PitchBend\nimport adafruit_ble_midi\n\nble = adafruit_ble.BLERadio()\nmidi = adafruit_midi.MIDI(midi_out=midi_service, out_channel=0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_midi/examples/ble_midi_simpletest.py",
      "library": "ble_midi",
      "type": "example",
      "file_name": "ble_midi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport fourwire\nfrom adafruit_hx8357 import HX8357\nimport adafruit_ft5336\n\nimport adafruit_ft5336\nspi = board.SPI()\n# for eyespi bff\n# tft_cs = board.TX\n# tft_dc = board.RX\n# else:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ft5336/examples/touchpaint_example.py",
      "library": "ft5336",
      "type": "example",
      "file_name": "touchpaint_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport fourwire\nfrom adafruit_hx8357 import HX8357\nimport adafruit_ft5336\n\nspi = board.SPI()\n# for eyespi bff\n# tft_cs = board.TX\n# tft_dc = board.RX\n# else:\ntft_cs = board.D9\ntft_dc = board.D10\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs)\n# display is rotated to align x, y with touch screen x, y",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ft5336/examples/touchpaint_example.py",
      "library": "ft5336",
      "type": "example",
      "file_name": "touchpaint_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport fourwire\nfrom adafruit_hx8357 import HX8357\nimport adafruit_ft5336\n\n# for eyespi bff\n# tft_cs = board.TX\n# tft_dc = board.RX\n# else:\ntft_cs = board.D9\ntft_dc = board.D10\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs)\n# display is rotated to align x, y with touch screen x, y\ndisplay = HX8357(display_bus, width=320, height=480, rotation=90)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ft5336/examples/touchpaint_example.py",
      "library": "ft5336",
      "type": "example",
      "file_name": "touchpaint_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport fourwire\nfrom adafruit_hx8357 import HX8357\nimport adafruit_ft5336\n\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs)\n# display is rotated to align x, y with touch screen x, y\ndisplay = HX8357(display_bus, width=320, height=480, rotation=90)\ni2c = board.I2C()  # uses board.SCL and board.SDA\ntouch = adafruit_ft5336.Adafruit_FT5336(i2c)\npixel_size = 10\npalette_width = 45",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ft5336/examples/touchpaint_example.py",
      "library": "ft5336",
      "type": "example",
      "file_name": "touchpaint_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport fourwire\nfrom adafruit_hx8357 import HX8357\nimport adafruit_ft5336\n\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs)\n# display is rotated to align x, y with touch screen x, y\ndisplay = HX8357(display_bus, width=320, height=480, rotation=90)\ni2c = board.I2C()  # uses board.SCL and board.SDA\ntouch = adafruit_ft5336.Adafruit_FT5336(i2c)\npixel_size = 10\npalette_width = 45\npalette_height = 320 // 8",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ft5336/examples/touchpaint_example.py",
      "library": "ft5336",
      "type": "example",
      "file_name": "touchpaint_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_header.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_header.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_header.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_header.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm69 = adafruit_rfm69.RFM69(spi, CS, RESET, RADIO_FREQ_MHZ)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_header.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_header.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm69 = adafruit_rfm69.RFM69(spi, CS, RESET, RADIO_FREQ_MHZ)\n# Optionally set an encryption key (16 byte AES key). MUST match both\n# on the transmitter and receiver (or be set to None to disable/the default).\nrfm69.encryption_key = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_header.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_header.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_vl6180x\n\nimport busio\nimport adafruit_vl6180x\n# Create I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create sensor instance.\nsensor = adafruit_vl6180x.VL6180X(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl6180x/examples/vl6180x_performancetest.py",
      "library": "vl6180x",
      "type": "example",
      "file_name": "vl6180x_performancetest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_vl6180x\n\n# Create I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create sensor instance.\nsensor = adafruit_vl6180x.VL6180X(i2c)\n# Define the number of measurements\n# n_measurements = 1000 will run for about 2 minutes\nn_measurements: int = 100",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl6180x/examples/vl6180x_performancetest.py",
      "library": "vl6180x",
      "type": "example",
      "file_name": "vl6180x_performancetest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\n\npool = adafruit_connection_manager.get_radio_socketpool(radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(radio)\nconnection_manager = adafruit_connection_manager.get_connection_manager(pool)\nwifi_ssid = os.getenv(\"CIRCUITPY_WIFI_SSID\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/connection_manager/examples/connectionmanager_ssltest.py",
      "library": "connection_manager",
      "type": "example",
      "file_name": "connectionmanager_ssltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\n\npool = adafruit_connection_manager.get_radio_socketpool(radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(radio)\nconnection_manager = adafruit_connection_manager.get_connection_manager(pool)\nwifi_ssid = os.getenv(\"CIRCUITPY_WIFI_SSID\")\nwifi_password = os.getenv(\"CIRCUITPY_WIFI_PASSWORD\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/connection_manager/examples/connectionmanager_ssltest.py",
      "library": "connection_manager",
      "type": "example",
      "file_name": "connectionmanager_ssltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\n\npool = adafruit_connection_manager.get_radio_socketpool(radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(radio)\nconnection_manager = adafruit_connection_manager.get_connection_manager(pool)\nwifi_ssid = os.getenv(\"CIRCUITPY_WIFI_SSID\")\nwifi_password = os.getenv(\"CIRCUITPY_WIFI_PASSWORD\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/connection_manager/examples/connectionmanager_ssltest.py",
      "library": "connection_manager",
      "type": "example",
      "file_name": "connectionmanager_ssltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\n\ndef common_failure(exc):\n    text_value = str(exc)\n    for common_failures_code in COMMON_FAILURE_CODES:\n        if common_failures_code in text_value:\n            return True\n    return False\n\n# Usage example:\ndef common_failure(exc):\n    text_value = str(exc)\n    for common_failures_code in COMMON_FAILURE_CODES:\n        if common_failures_code in text_value:\n            return True",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/connection_manager/examples/connectionmanager_ssltest.py",
      "library": "connection_manager",
      "type": "example",
      "file_name": "connectionmanager_ssltest.py",
      "chunk_type": "function",
      "function_name": "common_failure"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\n\ndef check_group(groups, group_name):\n    print(f'\\nRunning {group_name}')\n    for group in groups:\n        print(f'\\n - {group['heading']}')\n        success = group['success']\n        fail = group['fail']\n        for subdomain in group['subdomains']:\n            if 'host' in subdomain:\n                host = subdomain['host']\n            else:\n                host = f'{subdomain['subdomain']}.badssl.com'\n            port = subdomain.get('port', 443)\n            exc = None\n            start_time = time.monotonic()\n            try:\n                socket = connection_manager.get_socket(host, port, 'https:', is_ssl=True, ssl_context=ssl_context, timeout=10)\n                connection_manager.close_socket(socket)\n            except RuntimeError as e:\n                exc = e\n            duration = time.monotonic() - start_time\n            if fail == 'yes' and exc and common_failure(exc):\n                result = 'passed'\n            elif success == 'yes' and exc is None:\n                result = 'passed'\n            else:\n                result = f'error - success:{success}, fail:{fail}, exc:{exc}'\n            print(f'   - {host}:{port} took {duration:.2f} seconds | {result}')\n\n# Usage example:\n\n\ncheck_group(ADAFRUIT_GROUPS, \"Adafruit\")\ncheck_group(BADSSL_GROUPS, \"BadSSL\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/connection_manager/examples/connectionmanager_ssltest.py",
      "library": "connection_manager",
      "type": "example",
      "file_name": "connectionmanager_ssltest.py",
      "chunk_type": "function",
      "function_name": "check_group"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8179\n\nimport adafruit_uc8179\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8179/examples/uc8179_ThinkInk_750_Tricolor_AABMFGNR.py",
      "library": "uc8179",
      "type": "example",
      "file_name": "uc8179_ThinkInk_750_Tricolor_AABMFGNR.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8179\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8179/examples/uc8179_ThinkInk_750_Tricolor_AABMFGNR.py",
      "library": "uc8179",
      "type": "example",
      "file_name": "uc8179_ThinkInk_750_Tricolor_AABMFGNR.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8179\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8179/examples/uc8179_ThinkInk_750_Tricolor_AABMFGNR.py",
      "library": "uc8179",
      "type": "example",
      "file_name": "uc8179_ThinkInk_750_Tricolor_AABMFGNR.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8179\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8179/examples/uc8179_ThinkInk_750_Tricolor_AABMFGNR.py",
      "library": "uc8179",
      "type": "example",
      "file_name": "uc8179_ThinkInk_750_Tricolor_AABMFGNR.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8179\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8179/examples/uc8179_ThinkInk_750_Tricolor_AABMFGNR.py",
      "library": "uc8179",
      "type": "example",
      "file_name": "uc8179_ThinkInk_750_Tricolor_AABMFGNR.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8179\n\ndisplay = adafruit_uc8179.UC8179(display_bus, width=800, height=480, busy_pin=epd_busy, rotation=180, black_bits_inverted=True, highlight_color=16711680, colstart=0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8179/examples/uc8179_ThinkInk_750_Tricolor_AABMFGNR.py",
      "library": "uc8179",
      "type": "example",
      "file_name": "uc8179_ThinkInk_750_Tricolor_AABMFGNR.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport adafruit_json_stream as json_stream\nimport wifi\nimport adafruit_requests\n\n# API Polling Rate\n# 900 = 15 mins, 1800 = 30 mins, 3600 = 1 hour\nSLEEP_TIME = 900\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Publicly available data no header required",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_premiereleague.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_premiereleague.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport adafruit_json_stream as json_stream\nimport wifi\nimport adafruit_requests\n\n# 900 = 15 mins, 1800 = 30 mins, 3600 = 1 hour\nSLEEP_TIME = 900\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Publicly available data no header required\nPREMIERE_LEAGUE_SOURCE = \"https://fantasy.premierleague.com/api/bootstrap-static/\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_premiereleague.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_premiereleague.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport adafruit_json_stream as json_stream\nimport wifi\nimport adafruit_requests\n\nSLEEP_TIME = 900\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Publicly available data no header required\nPREMIERE_LEAGUE_SOURCE = \"https://fantasy.premierleague.com/api/bootstrap-static/\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_premiereleague.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_premiereleague.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport adafruit_json_stream as json_stream\nimport wifi\nimport adafruit_requests\n\n# Converts seconds to minutes/hours/days\ndef time_calc(input_time):\n    \"\"\"Converts seconds to minutes/hours/days\"\"\"\n    if input_time < 60:\n        return f'{input_time:.0f} seconds'\n    if input_time < 3600:\n        return f'{input_time / 60:.0f} minutes'\n    if input_time < 86400:\n        return f'{input_time / 60 / 60:.0f} hours'\n    return f'{input_time / 60 / 60 / 24:.1f} days'\n\n# Usage example:\n        print(\"\\nFinished!\")\n        print(f\"Board Uptime: {time.monotonic()}\")\n        print(f\"Next Update: {time_calc(SLEEP_TIME)}\")\n        print(\"===============================\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_premiereleague.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_premiereleague.py",
      "chunk_type": "function",
      "function_name": "time_calc"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom adafruit_ht16k33 import segments\n\n# Import the HT16K33 LED segment module.\n# Create the I2C interface.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create the LED segment class.\n# This creates a 7 segment 4 character display:\ndisplay = segments.Seg7x4(i2c, address=(0x70, 0x71))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ht16k33/examples/ht16k33_segments_multi_display.py",
      "library": "ht16k33",
      "type": "example",
      "file_name": "ht16k33_segments_multi_display.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom adafruit_ht16k33 import segments\n\ncustom_chars[\"i\"] = 0b00010000\ncustom_chars[\"n\"] = 0b01010100\ncustom_chars[\"g\"] = 0b01101111\n# Create the I2C interface.\ni2c = busio.I2C(board.SCL, board.SDA)\ndisplay = segments.Seg7x4(i2c, char_dict=custom_chars)\n# Clear the display.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ht16k33/examples/ht16k33_segments_7x4customchars.py",
      "library": "ht16k33",
      "type": "example",
      "file_name": "ht16k33_segments_7x4customchars.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_ble\nimport adafruit_connection_manager\nimport adafruit_requests as requests\nimport board\nimport wifi\nfrom adafruit_ble.advertising.standard import ManufacturerDataField\nimport adafruit_ble_broadcastnet\n\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = requests.Session(pool, ssl_context)\nstatus_pixel = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_bridge.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_bridge.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_ble\nimport adafruit_connection_manager\nimport adafruit_requests as requests\nimport board\nimport wifi\nfrom adafruit_ble.advertising.standard import ManufacturerDataField\nimport adafruit_ble_broadcastnet\n\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = requests.Session(pool, ssl_context)\nstatus_pixel = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_bridge.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_bridge.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_ble\nimport adafruit_connection_manager\nimport adafruit_requests as requests\nimport board\nimport wifi\nfrom adafruit_ble.advertising.standard import ManufacturerDataField\nimport adafruit_ble_broadcastnet\n\ndef aio_post(path, **kwargs):\n    kwargs['headers'] = aio_auth_header\n    return requests.post(aio_base_url + path, **kwargs)\n\n# Usage example:\n\ndef create_group(name):\n    response = aio_post(\"/groups\", json={\"name\": name})\n    if response.status_code != 201:\n        print(name)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_bridge.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_bridge.py",
      "chunk_type": "function",
      "function_name": "aio_post"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_ble\nimport adafruit_connection_manager\nimport adafruit_requests as requests\nimport board\nimport wifi\nfrom adafruit_ble.advertising.standard import ManufacturerDataField\nimport adafruit_ble_broadcastnet\n\ndef aio_get(path, **kwargs):\n    kwargs['headers'] = aio_auth_header\n    return requests.get(aio_base_url + path, **kwargs)\n\n# Usage example:\n\nexisting_feeds = {}\nresponse = aio_get(\"/groups\")\nfor group in response.json():\n    if \"-\" not in group[\"key\"]:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_bridge.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_bridge.py",
      "chunk_type": "function",
      "function_name": "aio_get"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_ble\nimport adafruit_connection_manager\nimport adafruit_requests as requests\nimport board\nimport wifi\nfrom adafruit_ble.advertising.standard import ManufacturerDataField\nimport adafruit_ble_broadcastnet\n\ndef create_group(name):\n    response = aio_post('/groups', json={'name': name})\n    if response.status_code != 201:\n        print(name)\n        print(response.content)\n        print(response.status_code)\n        raise RuntimeError('unable to create new group')\n    return response.json()['key']\n\n# Usage example:\n    group_key = f\"bridge-{bridge_address}-sensor-{sensor_address}\"\n    if sensor_address not in existing_feeds:\n        create_group(f\"Bridge {bridge_address} Sensor {sensor_address}\")\n        create_feed(group_key, \"Missed Message Count\")\n        existing_feeds[sensor_address] = [\"missed-message-count\"]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_bridge.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_bridge.py",
      "chunk_type": "function",
      "function_name": "create_group"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_ble\nimport adafruit_connection_manager\nimport adafruit_requests as requests\nimport board\nimport wifi\nfrom adafruit_ble.advertising.standard import ManufacturerDataField\nimport adafruit_ble_broadcastnet\n\ndef create_feed(group_key, name):\n    response = aio_post(f'/groups/{group_key}/feeds', json={'feed': {'name': name}})\n    if response.status_code != 201:\n        print(name)\n        print(response.content)\n        print(response.status_code)\n        raise RuntimeError('unable to create new feed')\n    return response.json()['key']\n\n# Usage example:\n    if sensor_address not in existing_feeds:\n        create_group(f\"Bridge {bridge_address} Sensor {sensor_address}\")\n        create_feed(group_key, \"Missed Message Count\")\n        existing_feeds[sensor_address] = [\"missed-message-count\"]\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_bridge.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_bridge.py",
      "chunk_type": "function",
      "function_name": "create_feed"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_ble\nimport adafruit_connection_manager\nimport adafruit_requests as requests\nimport board\nimport wifi\nfrom adafruit_ble.advertising.standard import ManufacturerDataField\nimport adafruit_ble_broadcastnet\n\ndef create_data(group_key, data):\n    response = aio_post(f'/groups/{group_key}/data', json={'feeds': data})\n    if response.status_code == 429:\n        print('Throttled!')\n        return False\n    if response.status_code != 200:\n        print(response.status_code, response.json())\n        raise RuntimeError('unable to create new data')\n    response.close()\n    return True\n\n# Usage example:\n    print(group_key, data)\n    # Only update the previous sequence if we logged successfully.\n    if create_data(group_key, data):\n        sequence_numbers[sensor_address] = measurement.sequence_number\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_bridge.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_bridge.py",
      "chunk_type": "function",
      "function_name": "create_data"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_ble\nimport adafruit_connection_manager\nimport adafruit_requests as requests\nimport board\nimport wifi\nfrom adafruit_ble.advertising.standard import ManufacturerDataField\nimport adafruit_ble_broadcastnet\n\ndef convert_to_feed_data(values, attribute_name, attribute_instance):\n    feed_data = []\n    if not isinstance(values, tuple) or (attribute_instance.element_count > 1 and (not isinstance(values[0], tuple))):\n        values = (values,)\n    for i, value in enumerate(values):\n        key = attribute_name.replace('_', '-') + '-' + str(i)\n        if isinstance(value, tuple):\n            for j in range(attribute_instance.element_count):\n                feed_data.append({'key': key + '-' + attribute_instance.field_names[j], 'value': value[j]})\n        else:\n            feed_data.append({'key': key, 'value': value})\n    return feed_data\n\n# Usage example:\n                values = getattr(measurement, attribute)\n                if values is not None:\n                    data.extend(convert_to_feed_data(values, attribute, attribute_instance))\n\n    for feed_data in data:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_bridge.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_bridge.py",
      "chunk_type": "function",
      "function_name": "convert_to_feed_data"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_ble\nimport adafruit_connection_manager\nimport adafruit_requests as requests\nimport board\nimport wifi\nfrom adafruit_ble.advertising.standard import ManufacturerDataField\nimport adafruit_ble_broadcastnet\n\nble = adafruit_ble.BLERadio()\nbridge_address = adafruit_ble_broadcastnet.device_address",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_bridge.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_bridge.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_ble\nimport adafruit_connection_manager\nimport adafruit_requests as requests\nimport board\nimport wifi\nfrom adafruit_ble.advertising.standard import ManufacturerDataField\nimport adafruit_ble_broadcastnet\n\nble = adafruit_ble.BLERadio()\nbridge_address = adafruit_ble_broadcastnet.device_address",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_bridge.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_bridge.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\nTEXT_COLOR = 0xFFFF00\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.CE0\ntft_dc = board.D25\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x135_pitft_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x135_pitft_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.CE0\ntft_dc = board.D25\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = ST7789(display_bus, rotation=90, width=240, height=135, rowstart=40, colstart=53)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x135_pitft_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x135_pitft_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.CE0\ntft_dc = board.D25\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = ST7789(display_bus, rotation=90, width=240, height=135, rowstart=40, colstart=53)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x135_pitft_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x135_pitft_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom adafruit_pn532.adafruit_pn532 import MIFARE_CMD_AUTH_B\nfrom adafruit_pn532.i2c import PN532_I2C\n\n# from adafruit_pn532.spi import PN532_SPI\n# from adafruit_pn532.uart import PN532_UART\n# I2C connection:\ni2c = busio.I2C(board.SCL, board.SDA)\n# Non-hardware reset/request with I2C\npn532 = PN532_I2C(i2c, debug=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pn532/examples/pn532_value_block_mifare.py",
      "library": "pn532",
      "type": "example",
      "file_name": "pn532_value_block_mifare.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_seesaw.seesaw import Seesaw\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\n# Release any resources currently in use for the displays\nreset_pin = 8\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nss = Seesaw(i2c, 0x5E)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_minitft_featherwing_simpletest.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_minitft_featherwing_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_seesaw.seesaw import Seesaw\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nss = Seesaw(i2c, 0x5E)\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_minitft_featherwing_simpletest.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_minitft_featherwing_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_seesaw.seesaw import Seesaw\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nss = Seesaw(i2c, 0x5E)\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_minitft_featherwing_simpletest.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_minitft_featherwing_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_seesaw.seesaw import Seesaw\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\nss = Seesaw(i2c, 0x5E)\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_minitft_featherwing_simpletest.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_minitft_featherwing_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_ili9341\n\n# Release any resources currently in use for the displays\n# Use Hardware SPI\nspi = board.SPI()\n# Use Software SPI if you have a shield with pins 11-13 jumpered\n# import busio\n# spi = busio.SPI(board.D11, board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ili9341/examples/ili9341_shield_simpletest.py",
      "library": "ili9341",
      "type": "example",
      "file_name": "ili9341_shield_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_ili9341\n\n# Use Software SPI if you have a shield with pins 11-13 jumpered\n# import busio\n# spi = busio.SPI(board.D11, board.D13)\ntft_cs = board.D10\ntft_dc = board.D9\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = adafruit_ili9341.ILI9341(display_bus, width=320, height=240)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ili9341/examples/ili9341_shield_simpletest.py",
      "library": "ili9341",
      "type": "example",
      "file_name": "ili9341_shield_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_ili9341\n\n# Use Software SPI if you have a shield with pins 11-13 jumpered\n# import busio\n# spi = busio.SPI(board.D11, board.D13)\ntft_cs = board.D10\ntft_dc = board.D9\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = adafruit_ili9341.ILI9341(display_bus, width=320, height=240)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ili9341/examples/ili9341_shield_simpletest.py",
      "library": "ili9341",
      "type": "example",
      "file_name": "ili9341_shield_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_ili9341\n\ntft_cs = board.D10\ntft_dc = board.D9\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = adafruit_ili9341.ILI9341(display_bus, width=320, height=240)\n# Make the display context\nsplash = displayio.Group()\ndisplay.root_group = splash",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ili9341/examples/ili9341_shield_simpletest.py",
      "library": "ili9341",
      "type": "example",
      "file_name": "ili9341_shield_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_lsm6ds.lsm6dsox import LSM6DSOX as LSM6DS\nfrom adafruit_lis3mdl import LIS3MDL\n\n# To use LSM6DS3TR-C, comment out the LSM6DSOX import line\n# and uncomment the next line\n# from adafruit_lsm6ds.lsm6ds3 import LSM6DS3 as LSM6DS\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\naccel_gyro = LSM6DS(i2c)\nmag = LIS3MDL(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3mdl/examples/lis3mdl_lsm6ds_test.py",
      "library": "lis3mdl",
      "type": "example",
      "file_name": "lis3mdl_lsm6ds_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_ble_ibbq import IBBQService\n\n# Initialize BLERadio\nble = adafruit_ble.BLERadio()\nibbq_connection = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_ibbq/examples/ble_ibbq_simpletest.py",
      "library": "ble_ibbq",
      "type": "example",
      "file_name": "ble_ibbq_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_shadows.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_shadows.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_shadows.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_shadows.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_shadows.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_shadows.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\n# Verify nina-fw version >= 1.4.0\nassert int(bytes(esp.firmware_version).decode(\"utf-8\")[2]) >= 4, \"Please update nina-fw to >=1.4.0.\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_shadows.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_shadows.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\n# Verify nina-fw version >= 1.4.0\nassert int(bytes(esp.firmware_version).decode(\"utf-8\")[2]) >= 4, \"Please update nina-fw to >=1.4.0.\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_shadows.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_shadows.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\n# Verify nina-fw version >= 1.4.0\nassert int(bytes(esp.firmware_version).decode(\"utf-8\")[2]) >= 4, \"Please update nina-fw to >=1.4.0.\"\n# Use below for Most Boards\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)  # Uncomment for Most Boards\n# Uncomment below for ItsyBitsy M4\n# status_pixel = dotstar.DotStar(board.APA102_SCK, board.APA102_MOSI, 1, brightness=0.2)\n# Uncomment below for an externally defined RGB LED\n# import adafruit_rgbled",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_shadows.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_shadows.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\n# from adafruit_esp32spi import PWMOut\n# RED_LED = PWMOut.PWMOut(esp, 26)\n# GREEN_LED = PWMOut.PWMOut(esp, 27)\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password, status_pixel=status_pixel)\n### Code ###",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_shadows.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_shadows.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\ndef connect(client, userdata, flags, rc):\n    print('Connected to MQTT Broker!')\n    print(f'Flags: {flags}\\n RC: {rc}')\n    print('Subscribing to shadow updates...')\n    aws_iot.shadow_subscribe()\n\n# Usage example:\nfrom os import getenv\n\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_shadows.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_shadows.py",
      "chunk_type": "function",
      "function_name": "connect"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\ndef disconnect(client, userdata, rc):\n    print('Disconnected from MQTT Broker!')\n\n# Usage example:\n\ndef disconnect(client, userdata, rc):\n    # This method is called when the client disconnects\n    # from the broker.\n    print(\"Disconnected from MQTT Broker!\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_shadows.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_shadows.py",
      "chunk_type": "function",
      "function_name": "disconnect"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\ndef subscribe(client, userdata, topic, granted_qos):\n    print(f'Subscribed to {topic} with QOS level {granted_qos}')\n    payload = {'state': {'reported': {'moisture': 50, 'temp': 30}}}\n    aws_iot.shadow_update(json.dumps(payload))\n\n# Usage example:\n    # Subscribe client to all shadow updates\n    print(\"Subscribing to shadow updates...\")\n    aws_iot.shadow_subscribe()\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_shadows.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_shadows.py",
      "chunk_type": "function",
      "function_name": "subscribe"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\ndef unsubscribe(client, userdata, topic, pid):\n    print(f'Unsubscribed from {topic} with PID {pid}')\n\n# Usage example:\n\ndef unsubscribe(client, userdata, topic, pid):\n    # This method is called when the client unsubscribes from a topic.\n    print(f\"Unsubscribed from {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_shadows.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_shadows.py",
      "chunk_type": "function",
      "function_name": "unsubscribe"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\ndef publish(client, userdata, topic, pid):\n    print(f'Published to {topic} with PID {pid}')\n\n# Usage example:\n\ndef publish(client, userdata, topic, pid):\n    # This method is called when the client publishes data to a topic.\n    print(f\"Published to {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_shadows.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_shadows.py",
      "chunk_type": "function",
      "function_name": "publish"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\ndef message(client, topic, msg):\n    print(f'Message from {topic}: {msg}')\n\n# Usage example:\naws_iot.on_unsubscribe = unsubscribe\naws_iot.on_publish = publish\naws_iot.on_message = message\n\nprint(f\"Attempting to connect to {client.broker}\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_shadows.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_shadows.py",
      "chunk_type": "function",
      "function_name": "message"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\n# Connect to WiFi\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Set up a new MiniMQTT Client\nclient = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_shadows.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_shadows.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_aws_iot import MQTT_CLIENT\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Set up a new MiniMQTT Client\nclient = MQTT.MQTT(\n    broker=broker,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/AWS_IOT/examples/aws_iot_shadows.py",
      "library": "AWS_IOT",
      "type": "example",
      "file_name": "aws_iot_shadows.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.CE0\ntft_dc = board.D25\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x240_pitft_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x240_pitft_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.CE0\ntft_dc = board.D25\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x240_pitft_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x240_pitft_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.CE0\ntft_dc = board.D25\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = ST7789(display_bus, width=240, height=240, rowstart=80, rotation=180)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x240_pitft_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x240_pitft_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport socketpool\nimport wifi\nimport adafruit_ntp\n\npool = socketpool.SocketPool(wifi.radio)\nntp = adafruit_ntp.NTP(pool, tz_offset=0, cache_seconds=3600)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ntp/examples/ntp_simpletest.py",
      "library": "ntp",
      "type": "example",
      "file_name": "ntp_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2022 Scott Shawcroft for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Print out time based on NTP.\"\"\"\n\nimport os\nimport time\n\nimport socketpool\nimport wifi\n\nimport adafruit_ntp\n\n# Get wifi AP credentials from a settings.toml file\nwifi_ssid = os.getenv(\"CIRCUITPY_WIFI_SSID\")\nwifi_password = os.getenv(\"CIRCUITPY_WIFI_PASSWORD\")\nif wifi_ssid is None:\n    print(\"WiFi credentials are kept in settings.toml, please add them there!\")\n    raise ValueError(\"SSID not found in environment variables\")\n\ntry:\n    wifi.radio.connect(wifi_ssid, wifi_password)\nexcept ConnectionError:\n    print(\"Failed to connect to WiFi with provided credentials\")\n    raise\n\npool = socketpool.SocketPool(wifi.radio)\nntp = adafruit_ntp.NTP(pool, tz_offset=0, cache_seconds=3600)\n\nwhile True:\n    print(ntp.datetime)\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ntp/examples/ntp_simpletest.py",
      "library": "ntp",
      "type": "example",
      "file_name": "ntp_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nfrom adafruit_extended_bus import ExtendedI2C as I2C\nimport adafruit_bno055\n\n# Then reboot the pi\n# Create library object using our Extended Bus I2C port\n# Use `ls /dev/i2c*` to find out what i2c devices are connected\ni2c = I2C(1)  # Device is /dev/i2c-1\nsensor = adafruit_bno055.BNO055_I2C(i2c)\nlast_val = 0xFFFF",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno055/examples/bno055_i2c-gpio_simpletest.py",
      "library": "bno055",
      "type": "example",
      "file_name": "bno055_i2c-gpio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom adafruit_extended_bus import ExtendedI2C as I2C\nimport adafruit_bno055\n\ndef temperature():\n    global last_val\n    result = sensor.temperature\n    if abs(result - last_val) == 128:\n        result = sensor.temperature\n        if abs(result - last_val) == 128:\n            return 63 & result\n    last_val = result\n    return result\n\n# Usage example:\ndef temperature():\n    global last_val  # noqa: PLW0603\n    result = sensor.temperature\n    if abs(result - last_val) == 128:\n        result = sensor.temperature",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno055/examples/bno055_i2c-gpio_simpletest.py",
      "library": "bno055",
      "type": "example",
      "file_name": "bno055_i2c-gpio_simpletest.py",
      "chunk_type": "function",
      "function_name": "temperature"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Converts seconds to minutes/hours/days\ndef time_calc(input_time):\n    \"\"\"Converts seconds to minutes/hours/days\"\"\"\n    if input_time < 60:\n        return f'{input_time:.0f} seconds'\n    if input_time < 3600:\n        return f'{input_time / 60:.0f} minutes'\n    if input_time < 86400:\n        return f'{input_time / 60 / 60:.0f} hours'\n    return f'{input_time / 60 / 60 / 24:.1f} days'\n\n# Usage example:\n\n        print(\"\\nFinished!\")\n        print(f\"Board Uptime: {time_calc(time.monotonic())}\")\n        print(f\"Next Update: {time_calc(SLEEP_TIME)}\")\n        print(\"===============================\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_rocketlaunch_live.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_rocketlaunch_live.py",
      "chunk_type": "function",
      "function_name": "time_calc"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Publicly available data no header required\n# The number at the end is the amount of launches (max 5 free api)\nROCKETLAUNCH_SOURCE = \"https://fdo.rocketlaunch.live/json/launches/next/1\"\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_rocketlaunch_live.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_rocketlaunch_live.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# The number at the end is the amount of launches (max 5 free api)\nROCKETLAUNCH_SOURCE = \"https://fdo.rocketlaunch.live/json/launches/next/1\"\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_rocketlaunch_live.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_rocketlaunch_live.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nROCKETLAUNCH_SOURCE = \"https://fdo.rocketlaunch.live/json/launches/next/1\"\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_rocketlaunch_live.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_rocketlaunch_live.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_seesaw import digitalio, rotaryio, seesaw\n\n# For use with the STEMMA connector on QT Py RP2040\n# import busio\n# i2c = busio.I2C(board.SCL1, board.SDA1)\n# seesaw = seesaw.Seesaw(i2c, 0x36)\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nseesaw = seesaw.Seesaw(i2c, addr=0x36)\nseesaw_product = (seesaw.get_version() >> 16) & 0xFFFF",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_rotary_simpletest.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_rotary_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_seesaw import digitalio, rotaryio, seesaw\n\n# Configure seesaw pin used to read knob button presses\n# The internal pull up is enabled to prevent floating input\nbutton = digitalio.DigitalIO(seesaw, 24)\nbutton_held = False\nencoder = rotaryio.IncrementalEncoder(seesaw)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_rotary_simpletest.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_rotary_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_mcp3xxx.mcp3008 as MCP\nfrom adafruit_mcp3xxx.analog_in import AnalogIn\n\nimport adafruit_mcp3xxx.mcp3008 as MCP\n# create the spi bus\nspi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)\n# create the cs (chip select)\ncs = digitalio.DigitalInOut(board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp3xxx/examples/mcp3xxx_mcp3008_differential_simpletest.py",
      "library": "mcp3xxx",
      "type": "example",
      "file_name": "mcp3xxx_mcp3008_differential_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_mcp3xxx.mcp3008 as MCP\nfrom adafruit_mcp3xxx.analog_in import AnalogIn\n\n# create the spi bus\nspi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)\n# create the cs (chip select)\ncs = digitalio.DigitalInOut(board.D5)\n# create the mcp object\nmcp = MCP.MCP3008(spi, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp3xxx/examples/mcp3xxx_mcp3008_differential_simpletest.py",
      "library": "mcp3xxx",
      "type": "example",
      "file_name": "mcp3xxx_mcp3008_differential_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport busio\nimport digitalio\n\nimport adafruit_mcp3xxx.mcp3008 as MCP\nfrom adafruit_mcp3xxx.analog_in import AnalogIn\n\n# create the spi bus\nspi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)\n\n# create the cs (chip select)\ncs = digitalio.DigitalInOut(board.D5)\n\n# create the mcp object\nmcp = MCP.MCP3008(spi, cs)\n\n# create a differential ADC channel between Pin 0 and Pin 1\nchan = AnalogIn(mcp, MCP.P0, MCP.P1)\n\nprint(\"Differential ADC Value: \", chan.value)\nprint(\"Differential ADC Voltage: \" + str(chan.voltage) + \"V\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp3xxx/examples/mcp3xxx_mcp3008_differential_simpletest.py",
      "library": "mcp3xxx",
      "type": "example",
      "file_name": "mcp3xxx_mcp3008_differential_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lps28\n\nimport board\nimport adafruit_lps28\ni2c = board.I2C()\nsensor = adafruit_lps28.LPS28(i2c)\n# Data Rate in hz\n# 1, 4, 10, 25, 50, 75, 100 or 200 (default)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps28/examples/lps28_simpletest.py",
      "library": "lps28",
      "type": "example",
      "file_name": "lps28_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lps28\n\nimport board\nimport adafruit_lps28\ni2c = board.I2C()\nsensor = adafruit_lps28.LPS28(i2c)\n# Data Rate in hz\n# 1, 4, 10, 25, 50, 75, 100 or 200 (default)\n# sensor.data_rate = 200",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps28/examples/lps28_simpletest.py",
      "library": "lps28",
      "type": "example",
      "file_name": "lps28_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bme280.advanced as adafruit_bme280\n\nimport board\nimport adafruit_bme280.advanced as adafruit_bme280\n# Create sensor object, using the board's default I2C bus.\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nbme280 = adafruit_bme280.Adafruit_BME280_I2C(i2c)\n# OR create sensor object, using the board's default SPI bus.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme280/examples/bme280_normal_mode.py",
      "library": "bme280",
      "type": "example",
      "file_name": "bme280_normal_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bme280.advanced as adafruit_bme280\n\nimport adafruit_bme280.advanced as adafruit_bme280\n# Create sensor object, using the board's default I2C bus.\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nbme280 = adafruit_bme280.Adafruit_BME280_I2C(i2c)\n# OR create sensor object, using the board's default SPI bus.\n# SPI setup\n# import digitalio",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme280/examples/bme280_normal_mode.py",
      "library": "bme280",
      "type": "example",
      "file_name": "bme280_normal_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bme280.advanced as adafruit_bme280\n\n# bme_cs = digitalio.DigitalInOut(board.D10)\n# bme280 = adafruit_bme280.Adafruit_BME280_SPI(spi, bme_cs)\n# Change this to match the location's pressure (hPa) at sea level\nbme280.sea_level_pressure = 1013.25\nbme280.mode = adafruit_bme280.MODE_NORMAL\nbme280.standby_period = adafruit_bme280.STANDBY_TC_500\nbme280.iir_filter = adafruit_bme280.IIR_FILTER_X16\nbme280.overscan_pressure = adafruit_bme280.OVERSCAN_X16\nbme280.overscan_humidity = adafruit_bme280.OVERSCAN_X1",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme280/examples/bme280_normal_mode.py",
      "library": "bme280",
      "type": "example",
      "file_name": "bme280_normal_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bme280.advanced as adafruit_bme280\n\n# bme280 = adafruit_bme280.Adafruit_BME280_SPI(spi, bme_cs)\n# Change this to match the location's pressure (hPa) at sea level\nbme280.sea_level_pressure = 1013.25\nbme280.mode = adafruit_bme280.MODE_NORMAL\nbme280.standby_period = adafruit_bme280.STANDBY_TC_500\nbme280.iir_filter = adafruit_bme280.IIR_FILTER_X16\nbme280.overscan_pressure = adafruit_bme280.OVERSCAN_X16\nbme280.overscan_humidity = adafruit_bme280.OVERSCAN_X1\nbme280.overscan_temperature = adafruit_bme280.OVERSCAN_X2",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme280/examples/bme280_normal_mode.py",
      "library": "bme280",
      "type": "example",
      "file_name": "bme280_normal_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bme280.advanced as adafruit_bme280\n\n# Change this to match the location's pressure (hPa) at sea level\nbme280.sea_level_pressure = 1013.25\nbme280.mode = adafruit_bme280.MODE_NORMAL\nbme280.standby_period = adafruit_bme280.STANDBY_TC_500\nbme280.iir_filter = adafruit_bme280.IIR_FILTER_X16\nbme280.overscan_pressure = adafruit_bme280.OVERSCAN_X16\nbme280.overscan_humidity = adafruit_bme280.OVERSCAN_X1\nbme280.overscan_temperature = adafruit_bme280.OVERSCAN_X2\n# The sensor will need a moment to gather initial readings",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme280/examples/bme280_normal_mode.py",
      "library": "bme280",
      "type": "example",
      "file_name": "bme280_normal_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bme280.advanced as adafruit_bme280\n\n# Change this to match the location's pressure (hPa) at sea level\nbme280.sea_level_pressure = 1013.25\nbme280.mode = adafruit_bme280.MODE_NORMAL\nbme280.standby_period = adafruit_bme280.STANDBY_TC_500\nbme280.iir_filter = adafruit_bme280.IIR_FILTER_X16\nbme280.overscan_pressure = adafruit_bme280.OVERSCAN_X16\nbme280.overscan_humidity = adafruit_bme280.OVERSCAN_X1\nbme280.overscan_temperature = adafruit_bme280.OVERSCAN_X2\n# The sensor will need a moment to gather initial readings",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme280/examples/bme280_normal_mode.py",
      "library": "bme280",
      "type": "example",
      "file_name": "bme280_normal_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bme280.advanced as adafruit_bme280\n\nbme280.sea_level_pressure = 1013.25\nbme280.mode = adafruit_bme280.MODE_NORMAL\nbme280.standby_period = adafruit_bme280.STANDBY_TC_500\nbme280.iir_filter = adafruit_bme280.IIR_FILTER_X16\nbme280.overscan_pressure = adafruit_bme280.OVERSCAN_X16\nbme280.overscan_humidity = adafruit_bme280.OVERSCAN_X1\nbme280.overscan_temperature = adafruit_bme280.OVERSCAN_X2\n# The sensor will need a moment to gather initial readings",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme280/examples/bme280_normal_mode.py",
      "library": "bme280",
      "type": "example",
      "file_name": "bme280_normal_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bme280.advanced as adafruit_bme280\n\nbme280.mode = adafruit_bme280.MODE_NORMAL\nbme280.standby_period = adafruit_bme280.STANDBY_TC_500\nbme280.iir_filter = adafruit_bme280.IIR_FILTER_X16\nbme280.overscan_pressure = adafruit_bme280.OVERSCAN_X16\nbme280.overscan_humidity = adafruit_bme280.OVERSCAN_X1\nbme280.overscan_temperature = adafruit_bme280.OVERSCAN_X2\n# The sensor will need a moment to gather initial readings",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme280/examples/bme280_normal_mode.py",
      "library": "bme280",
      "type": "example",
      "file_name": "bme280_normal_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9xfsk\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_fsk_node1.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_fsk_node1.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9xfsk\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_fsk_node1.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_fsk_node1.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9xfsk\n\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\n# uncommnet the desired import and rfm initialization depending on the radio boards being used",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_fsk_node1.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_fsk_node1.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_lc709203f import LC709203F\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = LC709203F(i2c)\n# check your NTC thermistor datasheet for the appropriate B-Constant",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lc709203f/examples/lc709203f_thermistortest.py",
      "library": "lc709203f",
      "type": "example",
      "file_name": "lc709203f_thermistortest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 Daniel Griswold\n#\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nfrom adafruit_lc709203f import LC709203F\n\nprint(\"LC709203F thermistor test\")\nprint(\"Make sure a thermistor is connected to the board!\")\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = LC709203F(i2c)\n\n# check your NTC thermistor datasheet for the appropriate B-Constant\nsensor.thermistor_bconstant = 3950\nsensor.thermistor_enable = True\n\nprint(\"IC version:\", hex(sensor.ic_version))\nwhile True:\n    print(\"Cell Temperature: %0.2f C\" % (sensor.cell_temperature))\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lc709203f/examples/lc709203f_thermistortest.py",
      "library": "lc709203f",
      "type": "example",
      "file_name": "lc709203f_thermistortest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2022 Alec Delaney for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport socket\nimport ssl\nfrom os import getenv\n\nimport adafruit_requests as requests\n\nfrom adafruit_pastebin.adafruit_io import AIOPastebin\n\n# Get PasteBin keys, ensure these are setup in your environment\nauth_key = getenv(\"auth_key\")\n\nsession = requests.Session(socket, ssl_context=ssl.create_default_context())\n\npastebin = AIOPastebin(session, auth_key, username=\"username\", feed_key=\"existing_feedkey\")\npaste_url = pastebin.paste(\n    \"This is a test paste!\",\n)\nprint(paste_url)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pastebin/examples/pastebin_aio_cpython.py",
      "library": "pastebin",
      "type": "example",
      "file_name": "pastebin_aio_cpython.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import os\nimport adafruit_aw9523\nimport board\nimport sdcardio\nimport storage\nimport usb_cdc\nimport adafruit_floppy\n\nimport storage\nimport usb_cdc\nimport adafruit_floppy\ni2c = board.I2C()  # uses board.SCL and board.SDA\naw = adafruit_aw9523.AW9523(i2c)\naw.directions = 0\nKEY_BITS = 0xF",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/floppy/examples/dos_archiver.py",
      "library": "floppy",
      "type": "example",
      "file_name": "dos_archiver.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_aw9523\nimport board\nimport sdcardio\nimport storage\nimport usb_cdc\nimport adafruit_floppy\n\nimport usb_cdc\nimport adafruit_floppy\ni2c = board.I2C()  # uses board.SCL and board.SDA\naw = adafruit_aw9523.AW9523(i2c)\naw.directions = 0\nKEY_BITS = 0xF\nfloppy = adafruit_floppy.Floppy(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/floppy/examples/dos_archiver.py",
      "library": "floppy",
      "type": "example",
      "file_name": "dos_archiver.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_aw9523\nimport board\nimport sdcardio\nimport storage\nimport usb_cdc\nimport adafruit_floppy\n\nfloppy = adafruit_floppy.Floppy(densitypin=board.DENSITY, indexpin=board.INDEX, selectpin=board.SELECT, motorpin=board.MOTOR, directionpin=board.DIRECTION, steppin=board.STEP, track0pin=board.TRACK0, protectpin=board.WRPROT, rddatapin=board.RDDATA, sidepin=board.SIDE, readypin=board.READY, wrdatapin=board.WRDATA, wrgatepin=board.WRGATE, floppydirectionpin=board.FLOPPY_DIRECTION, floppyenablepin=board.FLOPPY_ENABLE)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/floppy/examples/dos_archiver.py",
      "library": "floppy",
      "type": "example",
      "file_name": "dos_archiver.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_aw9523\nimport board\nimport sdcardio\nimport storage\nimport usb_cdc\nimport adafruit_floppy\n\n# Return an opened numbered file on the sdcard, such as \"img01234.jpg\".\ndef open_next_image(extension='img'):\n    \"\"\"Return an opened numbered file on the sdcard, such as \"img01234.jpg\".\"\"\"\n    global _image_counter, last_filename\n    try:\n        os.stat('/sd')\n    except OSError as exc:\n        raise RuntimeError('No SD card mounted') from exc\n    while True:\n        filename = '/sd/dsk%04d.%s' % (_image_counter, extension)\n        _image_counter += 1\n        try:\n            os.stat(filename)\n        except OSError:\n            break\n    print('Writing to', filename)\n    last_filename = filename\n    return open(filename, 'wb')\n\n# Usage example:\n    total_blocks = dev.count()\n    pertrack = dev.sectors * dev.heads\n    with open_next_image() as f:\n        for i in range(total_blocks):\n            if i % pertrack == 0:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/floppy/examples/dos_archiver.py",
      "library": "floppy",
      "type": "example",
      "file_name": "dos_archiver.py",
      "chunk_type": "function",
      "function_name": "open_next_image"
    }
  },
  {
    "content": "import os\nimport adafruit_aw9523\nimport board\nimport sdcardio\nimport storage\nimport usb_cdc\nimport adafruit_floppy\n\ndef smart_input(prompt):\n    print(end=prompt)\n    console = usb_cdc.console\n    serial_connected = console.connected\n    console.flush()\n    keys = aw.inputs & KEY_BITS\n    while True:\n        new_connected = console.connected\n        if new_connected and (not serial_connected):\n            print(end='\\r')\n            print(end=prompt)\n        serial_connected = new_connected\n        if (n := console.in_waiting):\n            console.read(n)\n            break\n        new_keys = aw.inputs & KEY_BITS\n        if ~new_keys & keys:\n            break\n        keys = new_keys\n    print()\n\n# Usage example:\n    avail = vfsstat[0] * vfsstat[4] / 1024 / 1024\n    print(f\"/sd: {avail:.1f}MiB available\")\n    smart_input(\"Insert disk and press any key\")\n\n    try:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/floppy/examples/dos_archiver.py",
      "library": "floppy",
      "type": "example",
      "file_name": "dos_archiver.py",
      "chunk_type": "function",
      "function_name": "smart_input"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mpl3115a2\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = adafruit_mpl3115a2.MPL3115A2(i2c)\n# Create Label(s) to show the readings. If you have a very small",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpl3115a2/examples/mpl3115a2_displayio_simpletest.py",
      "library": "mpl3115a2",
      "type": "example",
      "file_name": "mpl3115a2_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mpl3115a2\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = adafruit_mpl3115a2.MPL3115A2(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpl3115a2/examples/mpl3115a2_displayio_simpletest.py",
      "library": "mpl3115a2",
      "type": "example",
      "file_name": "mpl3115a2_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mpl3115a2\n\ndisplay_output_pressure.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpl3115a2/examples/mpl3115a2_displayio_simpletest.py",
      "library": "mpl3115a2",
      "type": "example",
      "file_name": "mpl3115a2_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mpl3115a2\n\ndisplay_output_altitude.anchored_position = (4, board.DISPLAY.height // 2 - 40)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpl3115a2/examples/mpl3115a2_displayio_simpletest.py",
      "library": "mpl3115a2",
      "type": "example",
      "file_name": "mpl3115a2_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mpl3115a2\n\ndisplay_output_temperature.anchored_position = (4, board.DISPLAY.height // 2 - 20)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpl3115a2/examples/mpl3115a2_displayio_simpletest.py",
      "library": "mpl3115a2",
      "type": "example",
      "file_name": "mpl3115a2_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mpl3115a2\n\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpl3115a2/examples/mpl3115a2_displayio_simpletest.py",
      "library": "mpl3115a2",
      "type": "example",
      "file_name": "mpl3115a2_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport rotaryio\nimport usb_hid\nfrom adafruit_debouncer import Debouncer\nimport adafruit_radial_controller\n\nimport usb_hid\nimport adafruit_radial_controller\nswitch = digitalio.DigitalInOut(board.SWITCH)\nswitch.pull = digitalio.Pull.DOWN\ndebounced_switch = Debouncer(switch)\nencoder = rotaryio.IncrementalEncoder(board.ROTA, board.ROTB)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/radial_controller/examples/radial_controller_rotary_trinkey.py",
      "library": "radial_controller",
      "type": "example",
      "file_name": "radial_controller_rotary_trinkey.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport rotaryio\nimport usb_hid\nfrom adafruit_debouncer import Debouncer\nimport adafruit_radial_controller\n\nimport adafruit_radial_controller\nswitch = digitalio.DigitalInOut(board.SWITCH)\nswitch.pull = digitalio.Pull.DOWN\ndebounced_switch = Debouncer(switch)\nencoder = rotaryio.IncrementalEncoder(board.ROTA, board.ROTB)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/radial_controller/examples/radial_controller_rotary_trinkey.py",
      "library": "radial_controller",
      "type": "example",
      "file_name": "radial_controller_rotary_trinkey.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport rotaryio\nimport usb_hid\nfrom adafruit_debouncer import Debouncer\nimport adafruit_radial_controller\n\nswitch = digitalio.DigitalInOut(board.SWITCH)\nswitch.pull = digitalio.Pull.DOWN\ndebounced_switch = Debouncer(switch)\nencoder = rotaryio.IncrementalEncoder(board.ROTA, board.ROTB)\nradial_controller = adafruit_radial_controller.RadialController(usb_hid.devices)\nlast_position = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/radial_controller/examples/radial_controller_rotary_trinkey.py",
      "library": "radial_controller",
      "type": "example",
      "file_name": "radial_controller_rotary_trinkey.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport rotaryio\nimport usb_hid\nfrom adafruit_debouncer import Debouncer\nimport adafruit_radial_controller\n\nswitch.pull = digitalio.Pull.DOWN\ndebounced_switch = Debouncer(switch)\nencoder = rotaryio.IncrementalEncoder(board.ROTA, board.ROTB)\nradial_controller = adafruit_radial_controller.RadialController(usb_hid.devices)\nlast_position = 0\nDEGREE_TENTHS_MULTIPLIER = 100",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/radial_controller/examples/radial_controller_rotary_trinkey.py",
      "library": "radial_controller",
      "type": "example",
      "file_name": "radial_controller_rotary_trinkey.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2021 Dan Halbert for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport board\nimport digitalio\nimport rotaryio\nimport usb_hid\nfrom adafruit_debouncer import Debouncer\n\nimport adafruit_radial_controller\n\nswitch = digitalio.DigitalInOut(board.SWITCH)\nswitch.pull = digitalio.Pull.DOWN\ndebounced_switch = Debouncer(switch)\n\nencoder = rotaryio.IncrementalEncoder(board.ROTA, board.ROTB)\n\nradial_controller = adafruit_radial_controller.RadialController(usb_hid.devices)\n\nlast_position = 0\nDEGREE_TENTHS_MULTIPLIER = 100\n\nwhile True:\n    debounced_switch.update()\n    if debounced_switch.rose:\n        radial_controller.press()\n    if debounced_switch.fell:\n        radial_controller.release()\n\n    position = encoder.position\n    delta = position - last_position\n    if delta != 0:\n        radial_controller.rotate(delta * DEGREE_TENTHS_MULTIPLIER)\n        last_position = position\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/radial_controller/examples/radial_controller_rotary_trinkey.py",
      "library": "radial_controller",
      "type": "example",
      "file_name": "radial_controller_rotary_trinkey.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport displayio\nimport adafruit_imageload\n\nimage, palette = adafruit_imageload.load('images/4bit.bmp')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_simpletest.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport adafruit_imageload\n\ntile_grid = displayio.TileGrid(image, pixel_shader=palette)\ngroup = displayio.Group()\nboard.DISPLAY.root_group = group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_simpletest.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport displayio\n\nimport adafruit_imageload\n\nimage, palette = adafruit_imageload.load(\"images/4bit.bmp\")\n\ntile_grid = displayio.TileGrid(image, pixel_shader=palette)\n\ngroup = displayio.Group()\ngroup.append(tile_grid)\nboard.DISPLAY.root_group = group\n\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_simpletest.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_aw9523\n\nimport board\nimport digitalio\nimport adafruit_aw9523\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\naw = adafruit_aw9523.AW9523(i2c)\nled_pin = aw.get_pin(0)  # LED on AW9523 io 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/aw9523/examples/aw9523_simpletest.py",
      "library": "aw9523",
      "type": "example",
      "file_name": "aw9523_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_aw9523\n\nimport adafruit_aw9523\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\naw = adafruit_aw9523.AW9523(i2c)\nled_pin = aw.get_pin(0)  # LED on AW9523 io 0\nbutton_pin = aw.get_pin(1)  # Button on AW io 1",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/aw9523/examples/aw9523_simpletest.py",
      "library": "aw9523",
      "type": "example",
      "file_name": "aw9523_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_aw9523\n\nbutton_pin = aw.get_pin(1)  # Button on AW io 1\n# LED is an output, initialize to high\nled_pin.switch_to_output(value=True)\n# Button is an input, note pull-ups are not supported!\nbutton_pin.direction = digitalio.Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/aw9523/examples/aw9523_simpletest.py",
      "library": "aw9523",
      "type": "example",
      "file_name": "aw9523_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2020 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nimport board\nimport digitalio\n\nimport adafruit_aw9523\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\naw = adafruit_aw9523.AW9523(i2c)\n\nled_pin = aw.get_pin(0)  # LED on AW9523 io 0\nbutton_pin = aw.get_pin(1)  # Button on AW io 1\n\n# LED is an output, initialize to high\nled_pin.switch_to_output(value=True)\n# Button is an input, note pull-ups are not supported!\nbutton_pin.direction = digitalio.Direction.INPUT\n\nwhile True:\n    # LED mirrors button pin\n    led_pin.value = button_pin.value\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/aw9523/examples/aw9523_simpletest.py",
      "library": "aw9523",
      "type": "example",
      "file_name": "aw9523_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_shtc3\n\nimport adafruit_shtc3\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsht = adafruit_shtc3.SHTC3(i2c)\n# Create a Label to show the readings. If you have a very small",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/shtc3/examples/shtc3_displayio_simpletest.py",
      "library": "shtc3",
      "type": "example",
      "file_name": "shtc3_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_shtc3\n\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsht = adafruit_shtc3.SHTC3(i2c)\n# Create a Label to show the readings. If you have a very small\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/shtc3/examples/shtc3_displayio_simpletest.py",
      "library": "shtc3",
      "type": "example",
      "file_name": "shtc3_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_shtc3\n\n# add the label to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/shtc3/examples/shtc3_displayio_simpletest.py",
      "library": "shtc3",
      "type": "example",
      "file_name": "shtc3_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adt7410\nimport board\n\nimport time\nimport adt7410\nimport board\ni2c = board.I2C()\nadt = adt7410.ADT7410(i2c)\nadt.operation_mode = adt7410.SPS",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adt7410/examples/adt7410_operation_mode.py",
      "library": "adt7410",
      "type": "example",
      "file_name": "adt7410_operation_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2023 Jose D. Montoya\n#\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport adt7410\nimport board\n\ni2c = board.I2C()\nadt = adt7410.ADT7410(i2c)\n\nadt.operation_mode = adt7410.SPS\n\nwhile True:\n    for operation_mode in adt7410.operation_mode_values:\n        print(\"Current Operation mode setting: \", adt.operation_mode)\n        for _ in range(10):\n            print(f\"Temperature: {adt.temperature:.2f}C\")\n            time.sleep(0.5)\n        adt.operation_mode = operation_mode\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adt7410/examples/adt7410_operation_mode.py",
      "library": "adt7410",
      "type": "example",
      "file_name": "adt7410_operation_mode.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_vcnl4040\n\nimport adafruit_vcnl4040\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector\nvcnl4040 = adafruit_vcnl4040.VCNL4040(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4040/examples/vcnl4040_displayio_simpletest.py",
      "library": "vcnl4040",
      "type": "example",
      "file_name": "vcnl4040_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_vcnl4040\n\nimport adafruit_vcnl4040\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector\nvcnl4040 = adafruit_vcnl4040.VCNL4040(i2c)\n# Example written for boards with built-in displays\ndisplay = board.DISPLAY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4040/examples/vcnl4040_displayio_simpletest.py",
      "library": "vcnl4040",
      "type": "example",
      "file_name": "vcnl4040_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_vcnl4040\n\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector\nvcnl4040 = adafruit_vcnl4040.VCNL4040(i2c)\n# Example written for boards with built-in displays\ndisplay = board.DISPLAY\n# Create a main_group to hold anything we want to show on the display.\nmain_group = Group()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4040/examples/vcnl4040_displayio_simpletest.py",
      "library": "vcnl4040",
      "type": "example",
      "file_name": "vcnl4040_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from board import D5 as CS_PIN\nfrom board import SPI\nfrom digitalio import DigitalInOut\nfrom adafruit_mcp2515 import MCP2515 as CAN\nfrom adafruit_mcp2515.canio import Message, RemoteTransmissionRequest, Timer\n\ndef bus():\n    cs = DigitalInOut(CS_PIN)\n    cs.switch_to_output()\n    return CAN(SPI(), cs, loopback=True, silent=True)\n\n# Usage example:\n\n# import board\n# import busio\n# import digitalio\n# import adafruit_mcp2515",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp2515/examples/mcp2515_loopback_test.py",
      "library": "mcp2515",
      "type": "example",
      "file_name": "mcp2515_loopback_test.py",
      "chunk_type": "function",
      "function_name": "bus"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_mpl115a2\n\nimport board\nimport busio\nimport adafruit_mpl115a2\ni2c = busio.I2C(board.SCL, board.SDA)\nmpl = adafruit_mpl115a2.MPL115A2(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpl115a2/examples/mpl115a2_simpletest.py",
      "library": "mpl115a2",
      "type": "example",
      "file_name": "mpl115a2_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_mpl115a2\n\nimport adafruit_mpl115a2\ni2c = busio.I2C(board.SCL, board.SDA)\nmpl = adafruit_mpl115a2.MPL115A2(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpl115a2/examples/mpl115a2_simpletest.py",
      "library": "mpl115a2",
      "type": "example",
      "file_name": "mpl115a2_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport busio\n\nimport adafruit_mpl115a2\n\ni2c = busio.I2C(board.SCL, board.SDA)\n\nmpl = adafruit_mpl115a2.MPL115A2(i2c)\n\nwhile True:\n    print(f\"Pressure: {mpl.pressure}   Temperature: {mpl.temperature}\")\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpl115a2/examples/mpl115a2_simpletest.py",
      "library": "mpl115a2",
      "type": "example",
      "file_name": "mpl115a2_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import adafruit_ble\nfrom adafruit_ble.advertising.standard import SolicitServicesAdvertisement\nimport adafruit_ble_apple_notification_center as ancs\n\nimport adafruit_ble\nimport adafruit_ble_apple_notification_center as ancs\nradio = adafruit_ble.BLERadio()\na = SolicitServicesAdvertisement()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_apple_notification_center/examples/ble_apple_notification_center_simpletest.py",
      "library": "ble_apple_notification_center",
      "type": "example",
      "file_name": "ble_apple_notification_center_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom microcontroller import cpu\nfrom adafruit_io.adafruit_io import IO_MQTT\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n### WiFi ###\n# Raspberry Pi RP2040\nesp32_cs = DigitalInOut(board.GP13)\nesp32_ready = DigitalInOut(board.GP14)\nesp32_reset = DigitalInOut(board.GP15)\nspi = busio.SPI(board.GP10, board.GP11, board.GP12)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_pubsub_rp2040.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_pubsub_rp2040.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom microcontroller import cpu\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n### WiFi ###\n# Raspberry Pi RP2040\nesp32_cs = DigitalInOut(board.GP13)\nesp32_ready = DigitalInOut(board.GP14)\nesp32_reset = DigitalInOut(board.GP15)\nspi = busio.SPI(board.GP10, board.GP11, board.GP12)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_pubsub_rp2040.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_pubsub_rp2040.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom microcontroller import cpu\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n### WiFi ###\n# Raspberry Pi RP2040\nesp32_cs = DigitalInOut(board.GP13)\nesp32_ready = DigitalInOut(board.GP14)\nesp32_reset = DigitalInOut(board.GP15)\nspi = busio.SPI(board.GP10, board.GP11, board.GP12)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_pubsub_rp2040.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_pubsub_rp2040.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom microcontroller import cpu\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n# Raspberry Pi RP2040\nesp32_cs = DigitalInOut(board.GP13)\nesp32_ready = DigitalInOut(board.GP14)\nesp32_reset = DigitalInOut(board.GP15)\nspi = busio.SPI(board.GP10, board.GP11, board.GP12)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_pubsub_rp2040.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_pubsub_rp2040.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom microcontroller import cpu\nfrom adafruit_io.adafruit_io import IO_MQTT\n\nesp32_cs = DigitalInOut(board.GP13)\nesp32_ready = DigitalInOut(board.GP14)\nesp32_reset = DigitalInOut(board.GP15)\nspi = busio.SPI(board.GP10, board.GP11, board.GP12)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password)\n# Configure the RP2040 Pico LED Pin as an output",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_pubsub_rp2040.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_pubsub_rp2040.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom microcontroller import cpu\nfrom adafruit_io.adafruit_io import IO_MQTT\n\nesp32_reset = DigitalInOut(board.GP15)\nspi = busio.SPI(board.GP10, board.GP11, board.GP12)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password)\n# Configure the RP2040 Pico LED Pin as an output\nled_pin = DigitalInOut(board.LED)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_pubsub_rp2040.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_pubsub_rp2040.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom microcontroller import cpu\nfrom adafruit_io.adafruit_io import IO_MQTT\n\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password)\n# Configure the RP2040 Pico LED Pin as an output\nled_pin = DigitalInOut(board.LED)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_pubsub_rp2040.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_pubsub_rp2040.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom microcontroller import cpu\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef connected(client):\n    print('Connected to Adafruit IO! ')\n\n# Usage example:\n# Define callback functions which will be called when certain events happen.\ndef connected(client):\n    # Connected function will be called when the client is connected to Adafruit IO.\n    print(\"Connected to Adafruit IO! \")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_pubsub_rp2040.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_pubsub_rp2040.py",
      "chunk_type": "function",
      "function_name": "connected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom microcontroller import cpu\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef subscribe(client, userdata, topic, granted_qos):\n    print(f'Subscribed to {topic} with QOS level {granted_qos}')\n\n# Usage example:\n\ndef subscribe(client, userdata, topic, granted_qos):\n    # This method is called when the client subscribes to a new feed.\n    print(f\"Subscribed to {topic} with QOS level {granted_qos}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_pubsub_rp2040.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_pubsub_rp2040.py",
      "chunk_type": "function",
      "function_name": "subscribe"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom microcontroller import cpu\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef publish(client, userdata, topic, pid):\n    print(f'Published to {topic} with PID {pid}')\n    if userdata is not None:\n        print('Published User data: ', end='')\n        print(userdata)\n\n# Usage example:\n\ndef publish(client, userdata, topic, pid):\n    # This method is called when the client publishes data to a feed.\n    print(f\"Published to {topic} with PID {pid}\")\n    if userdata is not None:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_pubsub_rp2040.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_pubsub_rp2040.py",
      "chunk_type": "function",
      "function_name": "publish"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom microcontroller import cpu\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef disconnected(client):\n    print('Disconnected from Adafruit IO!')\n\n# Usage example:\n# Connect the callback methods defined above to Adafruit IO\nio.on_connect = connected\nio.on_disconnect = disconnected\nio.on_subscribe = subscribe\nio.on_publish = publish",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_pubsub_rp2040.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_pubsub_rp2040.py",
      "chunk_type": "function",
      "function_name": "disconnected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom microcontroller import cpu\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef on_led_msg(client, topic, message):\n    print(f'New message on topic {topic}: {message} ')\n    if message == 'ON':\n        led_pin.value = True\n    elif message == 'OFF':\n        led_pin.value = False\n    else:\n        print('Unexpected message on LED feed.')\n\n# Usage example:\n\n# Set up a callback for the led feed\nio.add_feed_callback(\"led\", on_led_msg)\n\n# Connect to Adafruit IO",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_pubsub_rp2040.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_pubsub_rp2040.py",
      "chunk_type": "function",
      "function_name": "on_led_msg"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom microcontroller import cpu\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n# Connect to WiFi\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_pubsub_rp2040.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_pubsub_rp2040.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom microcontroller import cpu\nfrom adafruit_io.adafruit_io import IO_MQTT\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(\n    broker=\"io.adafruit.com\",",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_pubsub_rp2040.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_pubsub_rp2040.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_touchscreen\nimport board\nimport displayio\nfrom adafruit_displayio_layout.widgets.switch_round import SwitchRound as Switch\n\nimport board\nimport displayio\ndisplay = board.DISPLAY\n# setup the touch screen\nts = adafruit_touchscreen.Touchscreen(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_switch_multiple.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_switch_multiple.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_touchscreen\nimport board\nimport displayio\nfrom adafruit_displayio_layout.widgets.switch_round import SwitchRound as Switch\n\nts = adafruit_touchscreen.Touchscreen(board.TOUCH_XL, board.TOUCH_XR, board.TOUCH_YD, board.TOUCH_YU, calibration=((5200, 59000), (5800, 57000)), size=(display.width, display.height))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_switch_multiple.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_switch_multiple.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport busio\nfrom board import SCL, SDA\nfrom adafruit_trellis import Trellis\n\n# Create the I2C interface\ni2c = busio.I2C(SCL, SDA)\n# Create a Trellis object\ntrellis = Trellis(i2c)  # 0x70 when no I2C address is supplied",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/trellis/examples/trellis_simpletest.py",
      "library": "trellis",
      "type": "example",
      "file_name": "trellis_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_gps\n\nimport adafruit_gps\n# import busio\n# uart = busio.UART(board.TX, board.RX, baudrate=9600, timeout=10)\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector\n# Create a GPS module instance.\n# gps = adafruit_gps.GPS(uart, debug=False)  # Use UART",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/gps/examples/gps_displayio_simpletest.py",
      "library": "gps",
      "type": "example",
      "file_name": "gps_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_gps\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector\n# Create a GPS module instance.\n# gps = adafruit_gps.GPS(uart, debug=False)  # Use UART\ngps = adafruit_gps.GPS_GtopI2C(i2c, debug=False)  # Use I2C interface\n# Turn on the basic GGA and RMC info (what you typically want)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/gps/examples/gps_displayio_simpletest.py",
      "library": "gps",
      "type": "example",
      "file_name": "gps_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_gps\n\n# Set update rate to once a second 1hz (what you typically want)\n# Example written for boards with built-in displays\ndisplay = board.DISPLAY\n# Create a main_group to hold anything we want to show on the display.\nmain_group = Group()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/gps/examples/gps_displayio_simpletest.py",
      "library": "gps",
      "type": "example",
      "file_name": "gps_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport board\nimport busio\nimport digitalio\nimport storage\nimport adafruit_sdcard\n\n#     The Adalogger Featherwing with ESP8266 Feather, the SD CS pin is on board.D15\n#     The Adalogger Featherwing with Atmel M0 Feather, it's on board.D10\n#     The Adafruit Feather M0 Adalogger use board.SD_CS\n#     For the breakout boards use any pin that is not taken by SPI\nSD_CS = board.SD_CS  # setup for M0 Adalogger; change as needed\n# Connect to the card and mount the filesystem.\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\ncs = digitalio.DigitalInOut(SD_CS)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sdcard/examples/sd_read_simpletest.py",
      "library": "sdcard",
      "type": "example",
      "file_name": "sd_read_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport board\nimport busio\nimport digitalio\nimport storage\nimport adafruit_sdcard\n\n#     For the breakout boards use any pin that is not taken by SPI\nSD_CS = board.SD_CS  # setup for M0 Adalogger; change as needed\n# Connect to the card and mount the filesystem.\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\ncs = digitalio.DigitalInOut(SD_CS)\nsdcard = adafruit_sdcard.SDCard(spi, cs)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sdcard/examples/sd_read_simpletest.py",
      "library": "sdcard",
      "type": "example",
      "file_name": "sd_read_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport board\nimport busio\nimport digitalio\nimport storage\nimport adafruit_sdcard\n\nSD_CS = board.SD_CS  # setup for M0 Adalogger; change as needed\n# Connect to the card and mount the filesystem.\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\ncs = digitalio.DigitalInOut(SD_CS)\nsdcard = adafruit_sdcard.SDCard(spi, cs)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sdcard/examples/sd_read_simpletest.py",
      "library": "sdcard",
      "type": "example",
      "file_name": "sd_read_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport board\nimport busio\nimport digitalio\nimport storage\nimport adafruit_sdcard\n\nSD_CS = board.SD_CS  # setup for M0 Adalogger; change as needed\n# Connect to the card and mount the filesystem.\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\ncs = digitalio.DigitalInOut(SD_CS)\nsdcard = adafruit_sdcard.SDCard(spi, cs)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sdcard/examples/sd_read_simpletest.py",
      "library": "sdcard",
      "type": "example",
      "file_name": "sd_read_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport board\nimport busio\nimport digitalio\nimport storage\nimport adafruit_sdcard\n\ndef print_directory(path, tabs=0):\n    for file in os.listdir(path):\n        stats = os.stat(path + '/' + file)\n        filesize = stats[6]\n        isdir = stats[0] & 16384\n        if filesize < 1000:\n            sizestr = str(filesize) + ' bytes'\n        elif filesize < 1000000:\n            sizestr = '%0.1f KB' % (filesize / 1000)\n        else:\n            sizestr = '%0.1f MB' % (filesize / 1000000)\n        prettyprintname = ''\n        for _ in range(tabs):\n            prettyprintname += '   '\n        prettyprintname += file\n        if isdir:\n            prettyprintname += '/'\n        print(f'{prettyprintname:<40} Size: {sizestr:>10}')\n        if isdir:\n            print_directory(path + '/' + file, tabs + 1)\n\n# Usage example:\n        # recursively print directory contents\n        if isdir:\n            print_directory(path + \"/\" + file, tabs + 1)\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sdcard/examples/sd_read_simpletest.py",
      "library": "sdcard",
      "type": "example",
      "file_name": "sd_read_simpletest.py",
      "chunk_type": "function",
      "function_name": "print_directory"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_lsm6ds.lsm6ds3trc import LSM6DS3TRC\n\n# On the Seeed XIAO nRF52840 Sense the LSM6DS3TR-C IMU is connected on a separate\n# I2C bus and it has its own power pin that we need to enable.\nimupwr = digitalio.DigitalInOut(board.IMU_PWR)\nimupwr.direction = digitalio.Direction.OUTPUT\nimupwr.value = True",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm6ds/examples/lsm6ds_lsm6ds3trc_simpletest.py",
      "library": "lsm6ds",
      "type": "example",
      "file_name": "lsm6ds_lsm6ds3trc_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_lsm6ds.lsm6ds3trc import LSM6DS3TRC\n\n# On the Seeed XIAO nRF52840 Sense the LSM6DS3TR-C IMU is connected on a separate\n# I2C bus and it has its own power pin that we need to enable.\nimupwr = digitalio.DigitalInOut(board.IMU_PWR)\nimupwr.direction = digitalio.Direction.OUTPUT\nimupwr.value = True",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm6ds/examples/lsm6ds_lsm6ds3trc_simpletest.py",
      "library": "lsm6ds",
      "type": "example",
      "file_name": "lsm6ds_lsm6ds3trc_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_lsm6ds.lsm6ds3trc import LSM6DS3TRC\n\nimupwr = digitalio.DigitalInOut(board.IMU_PWR)\nimupwr.direction = digitalio.Direction.OUTPUT\nimupwr.value = True\nimu_i2c = busio.I2C(board.IMU_SCL, board.IMU_SDA)\nsensor = LSM6DS3TRC(imu_i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm6ds/examples/lsm6ds_lsm6ds3trc_simpletest.py",
      "library": "lsm6ds",
      "type": "example",
      "file_name": "lsm6ds_lsm6ds3trc_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2020 Bryan Siepert for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\nimport time\n\nimport board\nimport busio\nimport digitalio\n\nfrom adafruit_lsm6ds.lsm6ds3trc import LSM6DS3TRC\n\n# On the Seeed XIAO nRF52840 Sense the LSM6DS3TR-C IMU is connected on a separate\n# I2C bus and it has its own power pin that we need to enable.\nimupwr = digitalio.DigitalInOut(board.IMU_PWR)\nimupwr.direction = digitalio.Direction.OUTPUT\nimupwr.value = True\ntime.sleep(0.1)\n\nimu_i2c = busio.I2C(board.IMU_SCL, board.IMU_SDA)\nsensor = LSM6DS3TRC(imu_i2c)\n\nwhile True:\n    accel_x, accel_y, accel_z = sensor.acceleration\n    print(f\"Acceleration: X:{accel_x:.2f}, Y: {accel_y:.2f}, Z: {accel_z:.2f} m/s^2\")\n    gyro_x, gyro_y, gyro_z = sensor.gyro\n    print(f\"Gyro X:{gyro_x:.2f}, Y: {gyro_y:.2f}, Z: {gyro_z:.2f} radians/s\")\n    print(\"\")\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm6ds/examples/lsm6ds_lsm6ds3trc_simpletest.py",
      "library": "lsm6ds",
      "type": "example",
      "file_name": "lsm6ds_lsm6ds3trc_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_rockblock import RockBlock\n\nimport time\n# CircuitPython / Blinka\nimport board\nuart = board.UART()\nuart.baudrate = 19200\n# via USB cable\n# import serial",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rockblock/examples/rockblock_send_text.py",
      "library": "rockblock",
      "type": "example",
      "file_name": "rockblock_send_text.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\n# CircuitPython / Blinka\nimport board\n\nuart = board.UART()\nuart.baudrate = 19200\n\n# via USB cable\n# import serial\n# uart = serial.Serial(\"/dev/ttyUSB0\", 19200)\n\nfrom adafruit_rockblock import RockBlock\n\nrb = RockBlock(uart)\n\n# set the text\nrb.text_out = \"hello world\"\n\n# try a satellite Short Burst Data transfer\nprint(\"Talking to satellite...\")\nstatus = rb.satellite_transfer()\n# loop as needed\nretry = 0\nwhile status[0] > 8:\n    time.sleep(10)\n    status = rb.satellite_transfer()\n    print(retry, status)\n    retry += 1\n\nprint(\"\\nDONE.\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rockblock/examples/rockblock_send_text.py",
      "library": "rockblock",
      "type": "example",
      "file_name": "rockblock_send_text.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_gps\n\n# for a computer, use the pyserial library for uart access\n# import serial\n# uart = serial.Serial(\"/dev/ttyUSB0\", baudrate=9600, timeout=10)\n# If using I2C, we'll create an I2C interface to talk to using default pins\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Create a GPS module instance.\n# gps = adafruit_gps.GPS(uart, debug=False)  # Use UART/pyserial",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/gps/examples/gps_satellitefix.py",
      "library": "gps",
      "type": "example",
      "file_name": "gps_satellitefix.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_gps\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Create a GPS module instance.\n# gps = adafruit_gps.GPS(uart, debug=False)  # Use UART/pyserial\ngps = adafruit_gps.GPS_GtopI2C(i2c, debug=False)  # Use I2C interface\n# Initialize the GPS module by changing what data it sends and at what rate.\n# These are NMEA extensions for PMTK_314_SET_NMEA_OUTPUT and\n# PMTK_220_SET_NMEA_UPDATERATE but you can send anything from here to adjust",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/gps/examples/gps_satellitefix.py",
      "library": "gps",
      "type": "example",
      "file_name": "gps_satellitefix.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_gps\n\ndef format_dop(dop):\n    if dop > 20:\n        msg = 'Poor'\n    elif dop > 10:\n        msg = 'Fair'\n    elif dop > 5:\n        msg = 'Moderate'\n    elif dop > 2:\n        msg = 'Good'\n    elif dop > 1:\n        msg = 'Excellent'\n    else:\n        msg = 'Ideal'\n    return f'{dop} - {msg}'\n\n# Usage example:\n        print(f\"{gps.latitude:.6f}, {gps.longitude:.6f} {gps.altitude_m}m\")\n        print(f\"2D Fix: {gps.has_fix}  3D Fix: {gps.has_3d_fix}\")\n        print(f\"  PDOP (Position Dilution of Precision): {format_dop(gps.pdop)}\")\n        print(f\"  HDOP (Horizontal Dilution of Precision): {format_dop(gps.hdop)}\")\n        print(f\"  VDOP (Vertical Dilution of Precision): {format_dop(gps.vdop)}\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/gps/examples/gps_satellitefix.py",
      "library": "gps",
      "type": "example",
      "file_name": "gps_satellitefix.py",
      "chunk_type": "function",
      "function_name": "format_dop"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2021 Kattni Rembor for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\"\"\"Display the microcontroller CPU temperature in C and F on a display.\"\"\"\n\nimport microcontroller\n\nfrom adafruit_simple_text_display import SimpleTextDisplay\n\ntemperature_data = SimpleTextDisplay(title=\"Temperature Data!\", title_scale=2)\n\nwhile True:\n    temperature_data[0].text = f\"Temperature: {microcontroller.cpu.temperature:.2f} degrees C\"\n    temperature_data[\n        1\n    ].text = f\"Temperature: {microcontroller.cpu.temperature * (9 / 5) + 32:.2f} degrees F\"\n    temperature_data.show()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/simple-text-display/examples/simple_text_display_simpletest.py",
      "library": "simple-text-display",
      "type": "example",
      "file_name": "simple_text_display_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_spd1656\n\nimport adafruit_spd1656\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_simpletest.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_spd1656\n\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_simpletest.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_spd1656\n\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12\ndisplay_bus = fourwire.FourWire(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_simpletest.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_spd1656\n\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12\ndisplay_bus = fourwire.FourWire(\n    spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_simpletest.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_spd1656\n\n# This pinout works on a Feather RP2040 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D11\nepd_busy = board.D12\ndisplay_bus = fourwire.FourWire(\n    spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_simpletest.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_spd1656\n\ndisplay_bus = fourwire.FourWire(\n    spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000\ndisplay = adafruit_spd1656.SPD1656(display_bus, width=600, height=448, busy_pin=epd_busy)\ng = displayio.Group()\npic = displayio.OnDiskBitmap(\"/display-ruler-720p.bmp\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spd1656/examples/spd1656_simpletest.py",
      "library": "spd1656",
      "type": "example",
      "file_name": "spd1656_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\nx = 50 if rotation in {0, 180} else 37\ny = 140 if rotation in {0, 180} else 120\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D20\ntft_dc = board.D21\nbacklight = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_280x240_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_280x240_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\ny = 140 if rotation in {0, 180} else 120\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D20\ntft_dc = board.D21\nbacklight = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D5)\ndisplay = ST7789(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_280x240_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_280x240_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D20\ntft_dc = board.D21\nbacklight = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D5)\ndisplay = ST7789(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_280x240_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_280x240_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D20\ntft_dc = board.D21\nbacklight = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D5)\ndisplay = ST7789(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_280x240_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_280x240_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\nspi = board.SPI()\ntft_cs = board.D20\ntft_dc = board.D21\nbacklight = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D5)\ndisplay = ST7789(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_280x240_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_280x240_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_ov7670 import OV7670, OV7670_SIZE_DIV1, OV7670_SIZE_DIV16\nfrom adafruit_st7789 import ST7789\nfrom displayio import Bitmap, ColorConverter, Colorspace, FourWire, Group, TileGrid, release_displays\n\n# Set up the display (You must customize this block for your display!)\nspi = busio.SPI(clock=board.GP2, MOSI=board.GP3)\ndisplay_bus = FourWire(spi, command=board.GP0, chip_select=board.GP1, reset=None)\ndisplay = ST7789(display_bus, width=240, height=240, rowstart=80, rotation=270)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_pico_st7789.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_pico_st7789.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_ov7670 import OV7670, OV7670_SIZE_DIV1, OV7670_SIZE_DIV16\nfrom adafruit_st7789 import ST7789\nfrom displayio import Bitmap, ColorConverter, Colorspace, FourWire, Group, TileGrid, release_displays\n\n# Set up the display (You must customize this block for your display!)\nspi = busio.SPI(clock=board.GP2, MOSI=board.GP3)\ndisplay_bus = FourWire(spi, command=board.GP0, chip_select=board.GP1, reset=None)\ndisplay = ST7789(display_bus, width=240, height=240, rowstart=80, rotation=270)\n# Ensure the camera is shut down, so that it releases the SDA/SCL lines,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_pico_st7789.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_pico_st7789.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_ov7670 import OV7670, OV7670_SIZE_DIV1, OV7670_SIZE_DIV16\nfrom adafruit_st7789 import ST7789\nfrom displayio import Bitmap, ColorConverter, Colorspace, FourWire, Group, TileGrid, release_displays\n\ncam = OV7670(bus, data0=board.GP12, clock=board.GP11, vsync=board.GP7, href=board.GP21, mclk=board.GP20, shutdown=None, reset=board.GP10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_pico_st7789.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_pico_st7789.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\nimport adafruit_requests\n\napn = os.getenv(\"APN\")\napn_username = os.getenv(\"APN_USERNAME\")\napn_password = os.getenv(\"APN_PASSWORD\")\n# Create a serial connection for the FONA connection\nuart = busio.UART(board.TX, board.RX)\nrst = digitalio.DigitalInOut(board.D4)\n# Use this for FONA800 and FONA808\nradio = FONA(uart, rst)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/fona/requests_fona_simpletest.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_fona_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\nimport adafruit_requests\n\napn_username = os.getenv(\"APN_USERNAME\")\napn_password = os.getenv(\"APN_PASSWORD\")\n# Create a serial connection for the FONA connection\nuart = busio.UART(board.TX, board.RX)\nrst = digitalio.DigitalInOut(board.D4)\n# Use this for FONA800 and FONA808\nradio = FONA(uart, rst)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/fona/requests_fona_simpletest.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_fona_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\nimport adafruit_requests\n\n# Initialize a requests session\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nTEXT_URL = \"http://wifitest.adafruit.com/testwifi/index.html\"\nJSON_GET_URL = \"http://httpbin.org/get\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/fona/requests_fona_simpletest.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_fona_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\nimport adafruit_requests\n\n# Initialize a requests session\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nTEXT_URL = \"http://wifitest.adafruit.com/testwifi/index.html\"\nJSON_GET_URL = \"http://httpbin.org/get\"\nJSON_POST_URL = \"http://httpbin.org/post\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/fona/requests_fona_simpletest.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_fona_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport busio\nimport digitalio\nimport neopixel\nfrom micropython import const\nimport adafruit_lis3dh\n\nimport adafruit_lis3dh\n# Configuration:\nACCEL_RANGE = adafruit_lis3dh.RANGE_16_G  # Accelerometer range.\nTAP_THRESHOLD = 20  # Accelerometer tap threshold.  Higher values\n# mean you need to tap harder to start a spin.\nSPINNER_DECAY = 0.5  # Decay rate for the spinner.  Set to a value\n# from 0 to 1.0 where lower values mean the",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3dh/examples/lis3dh_spinner_advanced.py",
      "library": "lis3dh",
      "type": "example",
      "file_name": "lis3dh_spinner_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport busio\nimport digitalio\nimport neopixel\nfrom micropython import const\nimport adafruit_lis3dh\n\n# Linearly interpolate a value y given range y0...y1 that is proportional\nto x in range x0...x1 .\ndef lerp(x, x0, x1, y0, y1):\n    \"\"\"Linearly interpolate a value y given range y0...y1 that is proportional\n    to x in range x0...x1 .\n    \"\"\"\n    return y0 + (x - x0) * ((y1 - y0) / (x1 - x0))\n\n# Usage example:\n    r1, g1, b1 = c1\n    return (\n        int(lerp(x, x0, x1, r0, r1)),\n        int(lerp(x, x0, x1, g0, g1)),\n        int(lerp(x, x0, x1, b0, b1)),",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3dh/examples/lis3dh_spinner_advanced.py",
      "library": "lis3dh",
      "type": "example",
      "file_name": "lis3dh_spinner_advanced.py",
      "chunk_type": "function",
      "function_name": "lerp"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport busio\nimport digitalio\nimport neopixel\nfrom micropython import const\nimport adafruit_lis3dh\n\n# Linearly interpolate RGB colors (3-tuples of byte values) given x\nin range x0...x1.\ndef color_lerp(x, x0, x1, c0, c1):\n    \"\"\"Linearly interpolate RGB colors (3-tuples of byte values) given x\n    in range x0...x1.\n    \"\"\"\n    r0, g0, b0 = c0\n    r1, g1, b1 = c1\n    return (int(lerp(x, x0, x1, r0, r1)), int(lerp(x, x0, x1, g0, g1)), int(lerp(x, x0, x1, b0, b1)))\n\n# Usage example:\n        for i in range(self._pixels.n):\n            x = math.sin(self._sin_scale * i - phase)\n            self._pixels[i] = color_lerp(x, -1.0, 1.0, primary, secondary)\n        self._pixels.show()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3dh/examples/lis3dh_spinner_advanced.py",
      "library": "lis3dh",
      "type": "example",
      "file_name": "lis3dh_spinner_advanced.py",
      "chunk_type": "function",
      "function_name": "color_lerp"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport busio\nimport digitalio\nimport neopixel\nfrom micropython import const\nimport adafruit_lis3dh\n\nclass FidgetSpinner:\n\n    def __init__(self, decay=0.5):\n        \"\"\"Create an instance of the fidget spinner.  Specify the decay rate\n        as a value from 0 to 1 (continuous, floating point)--lower decay rate\n        values will cause the spinner to slow down faster.\n        \"\"\"\n        self._decay = decay\n        self._velocity = 0.0\n        self._elapsed = 0.0\n        self._position = 0.0\n\n    def spin(self, velocity):\n        \"\"\"Start the spinner moving at the specified initial velocity (in\n        positions/second).\n        \"\"\"\n        self._velocity = velocity\n        self._elapsed = 0.0\n\n    def get_position(self, delta):\n        \"\"\"Update the spinner position after the specified delta (in seconds)\n        has elapsed.  Will return the new spinner position, a continuous value\n        from 0...<10.\n        \"\"\"\n        self._elapsed += delta\n        current_velocity = self._velocity * math.pow(self._decay, self._elapsed)\n        self._position += current_velocity * delta\n        self._position = math.fmod(self._position, 10.0)\n        if self._position < 0.0:\n            self._position += 10.0\n        return self._position\n\n# Usage example:\n# position.  Since the position moves between values 0 to 10 it can easily map\n# to pixel positions around the Circuit Playground Express board.\nclass FidgetSpinner:\n    def __init__(self, decay=0.5):\n        \"\"\"Create an instance of the fidget spinner.  Specify the decay rate",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3dh/examples/lis3dh_spinner_advanced.py",
      "library": "lis3dh",
      "type": "example",
      "file_name": "lis3dh_spinner_advanced.py",
      "chunk_type": "function",
      "function_name": "FidgetSpinner"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport busio\nimport digitalio\nimport neopixel\nfrom micropython import const\nimport adafruit_lis3dh\n\nclass DiscreteDotAnimation:\n\n    def __init__(self, pixels, dots=2):\n        \"\"\"Create an instance of a simple discrete dot animation.  The dots\n        parameter controls how many dots are rendered on the display (each\n        evenly spaced apart).\n        \"\"\"\n        self._pixels = pixels\n        self._dots = dots\n        self._dot_offset = pixels.n / self._dots\n\n    def update(self, position, primary, secondary):\n        \"\"\"Update the animation given the current spinner position and\n        selected primary and secondary colors.\n        \"\"\"\n        self._pixels.fill(secondary)\n        for i in range(self._dots):\n            pos = int(position + i * self._dot_offset) % self._pixels.n\n            self._pixels[pos] = primary\n        self._pixels.show()\n\n# Usage example:\n# secondary color (3-tuple of RGB bytes) and will render a frame of spinner\n# animation.\nclass DiscreteDotAnimation:\n    def __init__(self, pixels, dots=2):\n        \"\"\"Create an instance of a simple discrete dot animation.  The dots",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3dh/examples/lis3dh_spinner_advanced.py",
      "library": "lis3dh",
      "type": "example",
      "file_name": "lis3dh_spinner_advanced.py",
      "chunk_type": "function",
      "function_name": "DiscreteDotAnimation"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport busio\nimport digitalio\nimport neopixel\nfrom micropython import const\nimport adafruit_lis3dh\n\nclass SmoothAnimation:\n\n    def __init__(self, pixels, frequency=2.0):\n        \"\"\"Create an instance of a smooth sine-wave based animation that sweeps\n        around the board based on spinner position.  Frequency specifies how\n        many primary to secondary color bumps are shown around the board.\n        \"\"\"\n        self._pixels = pixels\n        self._sin_scale = 2.0 * math.pi * frequency / pixels.n\n        self._phase_scale = 2.0 * math.pi / 10.0\n\n    def update(self, position, primary, secondary):\n        \"\"\"Update the animation given the current spinner position and\n        selected primary and secondary colors.\n        \"\"\"\n        phase = self._phase_scale * position\n        for i in range(self._pixels.n):\n            x = math.sin(self._sin_scale * i - phase)\n            self._pixels[i] = color_lerp(x, -1.0, 1.0, primary, secondary)\n        self._pixels.show()\n\n# Usage example:\n\n\nclass SmoothAnimation:\n    def __init__(self, pixels, frequency=2.0):\n        \"\"\"Create an instance of a smooth sine-wave based animation that sweeps",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3dh/examples/lis3dh_spinner_advanced.py",
      "library": "lis3dh",
      "type": "example",
      "file_name": "lis3dh_spinner_advanced.py",
      "chunk_type": "function",
      "function_name": "SmoothAnimation"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport busio\nimport digitalio\nimport neopixel\nfrom micropython import const\nimport adafruit_lis3dh\n\n            self._pixels[i] = color_lerp(x, -1.0, 1.0, primary, secondary)\n# Initialize and turn off NeoPixels.\npixels = neopixel.NeoPixel(board.NEOPIXEL, 10, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3dh/examples/lis3dh_spinner_advanced.py",
      "library": "lis3dh",
      "type": "example",
      "file_name": "lis3dh_spinner_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport busio\nimport digitalio\nimport neopixel\nfrom micropython import const\nimport adafruit_lis3dh\n\npixels = neopixel.NeoPixel(board.NEOPIXEL, 10, auto_write=False)\n# Initialize buttons.\nbutton_a = digitalio.DigitalInOut(board.BUTTON_A)\nbutton_a.switch_to_input(pull=digitalio.Pull.DOWN)\nbutton_b = digitalio.DigitalInOut(board.BUTTON_B)\nbutton_b.switch_to_input(pull=digitalio.Pull.DOWN)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3dh/examples/lis3dh_spinner_advanced.py",
      "library": "lis3dh",
      "type": "example",
      "file_name": "lis3dh_spinner_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport busio\nimport digitalio\nimport neopixel\nfrom micropython import const\nimport adafruit_lis3dh\n\n# Initialize buttons.\nbutton_a = digitalio.DigitalInOut(board.BUTTON_A)\nbutton_a.switch_to_input(pull=digitalio.Pull.DOWN)\nbutton_b = digitalio.DigitalInOut(board.BUTTON_B)\nbutton_b.switch_to_input(pull=digitalio.Pull.DOWN)\n# Initialize the LIS3DH accelerometer.\n# Note that this is specific to Circuit Playground Express boards.  For other",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3dh/examples/lis3dh_spinner_advanced.py",
      "library": "lis3dh",
      "type": "example",
      "file_name": "lis3dh_spinner_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport busio\nimport digitalio\nimport neopixel\nfrom micropython import const\nimport adafruit_lis3dh\n\n# Initialize the LIS3DH accelerometer.\n# Note that this is specific to Circuit Playground Express boards.  For other\n# uses change the SCL and SDA pins below, and optionally the address of the\n# device if needed.\ni2c = busio.I2C(board.ACCELEROMETER_SCL, board.ACCELEROMETER_SDA)\nlis3dh = adafruit_lis3dh.LIS3DH_I2C(i2c, address=25)\n# Set accelerometer range.\nlis3dh.range = ACCEL_RANGE",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3dh/examples/lis3dh_spinner_advanced.py",
      "library": "lis3dh",
      "type": "example",
      "file_name": "lis3dh_spinner_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport busio\nimport digitalio\nimport neopixel\nfrom micropython import const\nimport adafruit_lis3dh\n\n# Initialize the LIS3DH accelerometer.\n# Note that this is specific to Circuit Playground Express boards.  For other\n# uses change the SCL and SDA pins below, and optionally the address of the\n# device if needed.\ni2c = busio.I2C(board.ACCELEROMETER_SCL, board.ACCELEROMETER_SDA)\nlis3dh = adafruit_lis3dh.LIS3DH_I2C(i2c, address=25)\n# Set accelerometer range.\nlis3dh.range = ACCEL_RANGE\n# Enable single click detection, but use a custom CLICK_CFG register value",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3dh/examples/lis3dh_spinner_advanced.py",
      "library": "lis3dh",
      "type": "example",
      "file_name": "lis3dh_spinner_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import array\nimport math\nimport audiobusio\nimport board\nfrom adafruit_circuitplayground import cp\n\ndef constrain(value, floor, ceiling):\n    return max(floor, min(value, ceiling))\n\n# Usage example:\n\n    c = log_scale(\n        constrain(magnitude, input_floor, input_ceiling),\n        input_floor,\n        input_ceiling,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/circuitplayground/examples/circuitplayground_sound_meter.py",
      "library": "circuitplayground",
      "type": "example",
      "file_name": "circuitplayground_sound_meter.py",
      "chunk_type": "function",
      "function_name": "constrain"
    }
  },
  {
    "content": "import array\nimport math\nimport audiobusio\nimport board\nfrom adafruit_circuitplayground import cp\n\ndef log_scale(input_value, input_min, input_max, output_min, output_max):\n    normalized_input_value = (input_value - input_min) / (input_max - input_min)\n    return output_min + math.pow(normalized_input_value, 0.630957) * (output_max - output_min)\n\n# Usage example:\n    print((magnitude,))\n\n    c = log_scale(\n        constrain(magnitude, input_floor, input_ceiling),\n        input_floor,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/circuitplayground/examples/circuitplayground_sound_meter.py",
      "library": "circuitplayground",
      "type": "example",
      "file_name": "circuitplayground_sound_meter.py",
      "chunk_type": "function",
      "function_name": "log_scale"
    }
  },
  {
    "content": "import array\nimport math\nimport audiobusio\nimport board\nfrom adafruit_circuitplayground import cp\n\ndef normalized_rms(values):\n    minbuf = int(sum(values) / len(values))\n    return math.sqrt(sum((float(sample - minbuf) * (sample - minbuf) for sample in values)) / len(values))\n\n# Usage example:\nsamples = array.array(\"H\", [0] * 160)\nmic.record(samples, len(samples))\ninput_floor = normalized_rms(samples) + 10\n\n# Lower number means more sensitive - more LEDs will light up with less sound.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/circuitplayground/examples/circuitplayground_sound_meter.py",
      "library": "circuitplayground",
      "type": "example",
      "file_name": "circuitplayground_sound_meter.py",
      "chunk_type": "function",
      "function_name": "normalized_rms"
    }
  },
  {
    "content": "import array\nimport math\nimport audiobusio\nimport board\nfrom adafruit_circuitplayground import cp\n\nmic = audiobusio.PDMIn(board.MICROPHONE_CLOCK, board.MICROPHONE_DATA, sample_rate=16000, bit_depth=16)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/circuitplayground/examples/circuitplayground_sound_meter.py",
      "library": "circuitplayground",
      "type": "example",
      "file_name": "circuitplayground_sound_meter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import logging\nimport socket\nimport ssl\nimport sys\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# connect callback\ndef on_connect(mqtt_client, user_data, flags, ret_code):\n    \"\"\"\n    connect callback\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    logger.debug('Connected to MQTT Broker!')\n    logger.debug(f'Flags: {flags}\\n RC: {ret_code}')\n\n# Usage example:\n    )\n\n    mqtt.on_connect = on_connect\n    mqtt.on_subscribe = on_subscribe\n    mqtt.on_message = on_message",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cpython/user_data.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "user_data.py",
      "chunk_type": "function",
      "function_name": "on_connect"
    }
  },
  {
    "content": "import logging\nimport socket\nimport ssl\nimport sys\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# subscribe callback\ndef on_subscribe(mqtt_client, user_data, topic, granted_qos):\n    \"\"\"\n    subscribe callback\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    logger.debug(f'Subscribed to {topic} with QOS level {granted_qos}')\n\n# Usage example:\n\n    mqtt.on_connect = on_connect\n    mqtt.on_subscribe = on_subscribe\n    mqtt.on_message = on_message\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cpython/user_data.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "user_data.py",
      "chunk_type": "function",
      "function_name": "on_subscribe"
    }
  },
  {
    "content": "import logging\nimport socket\nimport ssl\nimport sys\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# received message callback\ndef on_message(client, topic, message):\n    \"\"\"\n    received message callback\n    \"\"\"\n    logger = logging.getLogger(__name__)\n    logger.debug(f'New message on topic {topic}: {message}')\n    messages = client.user_data\n    if not messages.get(topic):\n        messages[topic] = []\n    messages[topic].append(message)\n\n# Usage example:\n    mqtt.on_connect = on_connect\n    mqtt.on_subscribe = on_subscribe\n    mqtt.on_message = on_message\n\n    logger.info(\"Connecting to MQTT broker\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cpython/user_data.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "user_data.py",
      "chunk_type": "function",
      "function_name": "on_message"
    }
  },
  {
    "content": "import logging\nimport socket\nimport ssl\nimport sys\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# Main loop.\ndef main():\n    \"\"\"\n    Main loop.\n    \"\"\"\n    logging.basicConfig()\n    logger = logging.getLogger(__name__)\n    logger.setLevel(logging.DEBUG)\n    messages = {}\n    mqtt = MQTT.MQTT(broker='172.40.0.3', port=1883, socket_pool=socket, ssl_context=ssl.create_default_context(), user_data=messages)\n    mqtt.on_connect = on_connect\n    mqtt.on_subscribe = on_subscribe\n    mqtt.on_message = on_message\n    logger.info('Connecting to MQTT broker')\n    mqtt.connect()\n    logger.info('Subscribing')\n    mqtt.subscribe('foo/#', qos=0)\n    mqtt.add_topic_callback('foo/bar', on_message)\n    i = 0\n    while True:\n        i += 1\n        logger.debug(f'Loop {i}')\n        mqtt.loop(1)\n        for topic, msg_list in messages.items():\n            logger.info(f'Got {len(msg_list)} messages from topic {topic}')\n            for msg_cnt, msg in enumerate(msg_list):\n                logger.debug(f'#{msg_cnt}: {msg}')\n\n# Usage example:\n\n\nif __name__ == \"__main__\":\n    try:\n        main()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cpython/user_data.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "user_data.py",
      "chunk_type": "function",
      "function_name": "main"
    }
  },
  {
    "content": "import time\nimport board\nfrom digitalio import DigitalInOut\nfrom adafruit_vl53l0x import VL53L0X\n\n# declare the singleton variable for the default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# declare the digital output pins connected to the \"SHDN\" pin on each VL53L0X sensor\nxshut = [",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l0x/examples/vl53l0x_multiple_sensors.py",
      "library": "vl53l0x",
      "type": "example",
      "file_name": "vl53l0x_multiple_sensors.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom digitalio import DigitalInOut\nfrom adafruit_vl53l0x import VL53L0X\n\nxshut = [DigitalInOut(board.D7), DigitalInOut(board.D9)]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l0x/examples/vl53l0x_multiple_sensors.py",
      "library": "vl53l0x",
      "type": "example",
      "file_name": "vl53l0x_multiple_sensors.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom digitalio import DigitalInOut\nfrom adafruit_vl53l0x import VL53L0X\n\n# take count=5 samples\ndef detect_range(count=5):\n    \"\"\"take count=5 samples\"\"\"\n    while count:\n        for index, sensor in enumerate(vl53):\n            print(f'Sensor {index + 1} Range: {sensor.range}mm')\n        time.sleep(1.0)\n        count -= 1\n\n# Usage example:\nprint(\n    \"Multiple VL53L0X sensors' addresses are assigned properly\\n\"\n    \"execute detect_range() to read each sensors range readings\"\n)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l0x/examples/vl53l0x_multiple_sensors.py",
      "library": "vl53l0x",
      "type": "example",
      "file_name": "vl53l0x_multiple_sensors.py",
      "chunk_type": "function",
      "function_name": "detect_range"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_displayio_ssd1306\n\nimport adafruit_displayio_ssd1306\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndisplay_bus = I2CDisplayBus(i2c, device_address=0x3C)\ndisplay = adafruit_displayio_ssd1306.SSD1306(display_bus, width=64, height=32)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_ssd1306/examples/displayio_ssd1306_64x32_simpletest.py",
      "library": "displayio_ssd1306",
      "type": "example",
      "file_name": "displayio_ssd1306_64x32_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_displayio_ssd1306\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndisplay_bus = I2CDisplayBus(i2c, device_address=0x3C)\ndisplay = adafruit_displayio_ssd1306.SSD1306(display_bus, width=64, height=32)\n# Make the display context\nsplash = displayio.Group()\ndisplay.root_group = splash",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_ssd1306/examples/displayio_ssd1306_64x32_simpletest.py",
      "library": "displayio_ssd1306",
      "type": "example",
      "file_name": "displayio_ssd1306_64x32_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_tsc2007\n\nimport board\nimport adafruit_tsc2007\n# Use for I2C\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nirq_dio = None  # don't use an irq pin by default\n# uncomment for optional irq input pin so we don't continuously poll the I2C for touches",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tsc2007/examples/tsc2007_simpletest.py",
      "library": "tsc2007",
      "type": "example",
      "file_name": "tsc2007_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_tsc2007\n\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nirq_dio = None  # don't use an irq pin by default\n# uncomment for optional irq input pin so we don't continuously poll the I2C for touches\n# irq_dio = digitalio.DigitalInOut(board.A0)\ntsc = adafruit_tsc2007.TSC2007(i2c, irq=irq_dio)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tsc2007/examples/tsc2007_simpletest.py",
      "library": "tsc2007",
      "type": "example",
      "file_name": "tsc2007_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2022 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\n\nimport board\n\nimport adafruit_tsc2007\n\n# Use for I2C\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\nirq_dio = None  # don't use an irq pin by default\n# uncomment for optional irq input pin so we don't continuously poll the I2C for touches\n# irq_dio = digitalio.DigitalInOut(board.A0)\ntsc = adafruit_tsc2007.TSC2007(i2c, irq=irq_dio)\n\nwhile True:\n    if tsc.touched:\n        point = tsc.touch\n        if point[\"pressure\"] < 100:  # ignore touches with no 'pressure' as false\n            continue\n        print(\"Touchpoint: (%d, %d, %d)\" % (point[\"x\"], point[\"y\"], point[\"pressure\"]))\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tsc2007/examples/tsc2007_simpletest.py",
      "library": "tsc2007",
      "type": "example",
      "file_name": "tsc2007_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport busio\nfrom adafruit_mlx90395 import MLX90395, OSR, Gain, Resolution\n\nimport board\nimport busio\ni2c = busio.I2C(board.SCL, board.SDA)\nsensor = MLX90395(i2c)\nsensor.oversample_rate = OSR.RATE_1X\n# sensor.oversample_rate = OSR.RATE_2X",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90395/examples/mlx90395_tuning.py",
      "library": "mlx90395",
      "type": "example",
      "file_name": "mlx90395_tuning.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_miniesptool\n\nimport adafruit_miniesptool\n# With a Metro or Feather M4\nuart = busio.UART(board.TX, board.RX, baudrate=115200, timeout=1)\nresetpin = DigitalInOut(board.D5)\ngpio0pin = DigitalInOut(board.D6)\n# With a Particle Argon, we need to also turn off flow control",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniesptool/examples/miniesptool_esp32multifile.py",
      "library": "miniesptool",
      "type": "example",
      "file_name": "miniesptool_esp32multifile.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_miniesptool\n\n# With a Metro or Feather M4\nuart = busio.UART(board.TX, board.RX, baudrate=115200, timeout=1)\nresetpin = DigitalInOut(board.D5)\ngpio0pin = DigitalInOut(board.D6)\n# With a Particle Argon, we need to also turn off flow control",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniesptool/examples/miniesptool_esp32multifile.py",
      "library": "miniesptool",
      "type": "example",
      "file_name": "miniesptool_esp32multifile.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_miniesptool\n\n# With a Metro or Feather M4\nuart = busio.UART(board.TX, board.RX, baudrate=115200, timeout=1)\nresetpin = DigitalInOut(board.D5)\ngpio0pin = DigitalInOut(board.D6)\n# With a Particle Argon, we need to also turn off flow control",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniesptool/examples/miniesptool_esp32multifile.py",
      "library": "miniesptool",
      "type": "example",
      "file_name": "miniesptool_esp32multifile.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_miniesptool\n\nesp_cts = DigitalInOut(board.ESP_CTS)\nesp_cts.direction = Direction.OUTPUT\nesp_cts.value = False\nesptool = adafruit_miniesptool.miniesptool(uart, gpio0pin, resetpin, flashsize=4 * 1024 * 1024)\nesptool.debug = False",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniesptool/examples/miniesptool_esp32multifile.py",
      "library": "miniesptool",
      "type": "example",
      "file_name": "miniesptool_esp32multifile.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_fancyled.adafruit_fancyled as fancy\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nimport neopixel\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\n\napn = getenv(\"apn\")\napn_username = getenv(\"apn_username\")\napn_password = getenv(\"apn_password\")\n# Create a serial connection for the FONA\nuart = busio.UART(board.TX, board.RX)\nrst = digitalio.DigitalInOut(board.D4)\n# Use this for FONA800 and FONA808\nfona = FONA(uart, rst)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fona/examples/fona_cheerlights.py",
      "library": "fona",
      "type": "example",
      "file_name": "fona_cheerlights.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_fancyled.adafruit_fancyled as fancy\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nimport neopixel\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\n\napn_username = getenv(\"apn_username\")\napn_password = getenv(\"apn_password\")\n# Create a serial connection for the FONA\nuart = busio.UART(board.TX, board.RX)\nrst = digitalio.DigitalInOut(board.D4)\n# Use this for FONA800 and FONA808\nfona = FONA(uart, rst)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fona/examples/fona_cheerlights.py",
      "library": "fona",
      "type": "example",
      "file_name": "fona_cheerlights.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_fancyled.adafruit_fancyled as fancy\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nimport neopixel\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\n\n# create requests session\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, fona)\nrequests = adafruit_requests.Session(pool, ssl_context)\nDATA_SOURCE = \"http://api.thingspeak.com/channels/1417/feeds.json?results=1\"\nDATA_LOCATION = [\"feeds\", 0, \"field2\"]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fona/examples/fona_cheerlights.py",
      "library": "fona",
      "type": "example",
      "file_name": "fona_cheerlights.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_fancyled.adafruit_fancyled as fancy\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nimport neopixel\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\n\n# create requests session\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, fona)\nrequests = adafruit_requests.Session(pool, ssl_context)\nDATA_SOURCE = \"http://api.thingspeak.com/channels/1417/feeds.json?results=1\"\nDATA_LOCATION = [\"feeds\", 0, \"field2\"]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fona/examples/fona_cheerlights.py",
      "library": "fona",
      "type": "example",
      "file_name": "fona_cheerlights.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_fancyled.adafruit_fancyled as fancy\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nimport neopixel\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\n\nDATA_SOURCE = \"http://api.thingspeak.com/channels/1417/feeds.json?results=1\"\nDATA_LOCATION = [\"feeds\", 0, \"field2\"]\n# neopixels\npixels = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.3)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fona/examples/fona_cheerlights.py",
      "library": "fona",
      "type": "example",
      "file_name": "fona_cheerlights.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel\n\nimport board\nimport neopixel\n# Configure the setup\nPIXEL_PIN = board.D1  # pin that the NeoPixel is connected to\nORDER = neopixel.RGB  # pixel color channel order\nCOLOR = (100, 50, 150)  # color to blink\nCLEAR = (0, 0, 0)  # clear (or second color)\nDELAY = 0.25  # blink rate in seconds",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopixel/examples/neopixel_pixel.py",
      "library": "neopixel",
      "type": "example",
      "file_name": "neopixel_pixel.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel\n\nimport neopixel\n# Configure the setup\nPIXEL_PIN = board.D1  # pin that the NeoPixel is connected to\nORDER = neopixel.RGB  # pixel color channel order\nCOLOR = (100, 50, 150)  # color to blink\nCLEAR = (0, 0, 0)  # clear (or second color)\nDELAY = 0.25  # blink rate in seconds",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopixel/examples/neopixel_pixel.py",
      "library": "neopixel",
      "type": "example",
      "file_name": "neopixel_pixel.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel\n\nCOLOR = (100, 50, 150)  # color to blink\nCLEAR = (0, 0, 0)  # clear (or second color)\nDELAY = 0.25  # blink rate in seconds\n# Create the NeoPixel object\npixel = neopixel.NeoPixel(PIXEL_PIN, 1, pixel_order=ORDER)\n# Loop forever and blink the color",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopixel/examples/neopixel_pixel.py",
      "library": "neopixel",
      "type": "example",
      "file_name": "neopixel_pixel.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# This example shows how to create a single pixel with a specific color channel\n# order and blink it.\n# Most NeoPixels = neopixel.GRB or neopixel.GRBW\n# The 8mm Diffused NeoPixel (PID 1734) = neopixel.RGB\nimport time\n\nimport board\n\nimport neopixel\n\n# Configure the setup\nPIXEL_PIN = board.D1  # pin that the NeoPixel is connected to\nORDER = neopixel.RGB  # pixel color channel order\nCOLOR = (100, 50, 150)  # color to blink\nCLEAR = (0, 0, 0)  # clear (or second color)\nDELAY = 0.25  # blink rate in seconds\n\n# Create the NeoPixel object\npixel = neopixel.NeoPixel(PIXEL_PIN, 1, pixel_order=ORDER)\n\n# Loop forever and blink the color\nwhile True:\n    pixel[0] = COLOR\n    time.sleep(DELAY)\n    pixel[0] = CLEAR\n    time.sleep(DELAY)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopixel/examples/neopixel_pixel.py",
      "library": "neopixel",
      "type": "example",
      "file_name": "neopixel_pixel.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_l3gd20\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = adafruit_l3gd20.L3GD20_I2C(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/l3gd20/examples/l3gd20_displayio_simpletest.py",
      "library": "l3gd20",
      "type": "example",
      "file_name": "l3gd20_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_l3gd20\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = adafruit_l3gd20.L3GD20_I2C(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/l3gd20/examples/l3gd20_displayio_simpletest.py",
      "library": "l3gd20",
      "type": "example",
      "file_name": "l3gd20_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_l3gd20\n\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/l3gd20/examples/l3gd20_displayio_simpletest.py",
      "library": "l3gd20",
      "type": "example",
      "file_name": "l3gd20_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_l3gd20\n\n# add the label(s) to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/l3gd20/examples/l3gd20_displayio_simpletest.py",
      "library": "l3gd20",
      "type": "example",
      "file_name": "l3gd20_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.CE0\ntft_dc = board.D25\ntft_lite = board.D26",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x240_bonnet_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x240_bonnet_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.CE0\ntft_dc = board.D25\ntft_lite = board.D26\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x240_bonnet_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x240_bonnet_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.CE0\ntft_dc = board.D25\ntft_lite = board.D26\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x240_bonnet_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x240_bonnet_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\nspi = board.SPI()\ntft_cs = board.CE0\ntft_dc = board.D25\ntft_lite = board.D26\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = ST7789(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x240_bonnet_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x240_bonnet_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport busio\nfrom adafruit_pca9685 import PCA9685\nfrom board import SCL, SDA\nfrom adafruit_motor import motor\n\ni2c = busio.I2C(SCL, SDA)\n# Create a simple PCA9685 class instance for the Motor FeatherWing's default address.\npca = PCA9685(i2c, address=0x60)\npca.frequency = 100",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/motor/examples/motor_pca9685_dc_motor.py",
      "library": "motor",
      "type": "example",
      "file_name": "motor_pca9685_dc_motor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_led_animation.animation.rainbowchase import RainbowChase\nfrom adafruit_led_animation.sequence import AnimationSequence\nfrom adafruit_is31fl3741 import PREFER_BUFFER\nfrom adafruit_is31fl3741.adafruit_rgbmatrixqt import Adafruit_RGBMatrixQT\nfrom adafruit_is31fl3741.is31fl3741_pixelbuf import IS31FL3741_PixelBuf\n\n# Initialize I2C Bus\ni2c = board.STEMMA_I2C()\n# i2c = board.I2C()  # uses board.SCL and board.SDA\n# Initialize each 13x9 Matrix\nMatrix30 = Adafruit_RGBMatrixQT(i2c, address=0x30, allocate=PREFER_BUFFER)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3741/examples/is31fl3741_13x9_sequential_chain.py",
      "library": "is31fl3741",
      "type": "example",
      "file_name": "is31fl3741_13x9_sequential_chain.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_sdcard\nimport board\nimport busio\nimport storage\nfrom digitalio import DigitalInOut\nimport adafruit_logging as logging\nfrom adafruit_logging import FileHandler\n\nimport adafruit_logging as logging\n# Get chip select pin depending on the board, this one is for the Feather M4 Express\nsd_cs = board.D10\n# Set up an SD card to write to\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\ncs = DigitalInOut(sd_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/logging/examples/logging_filehandler.py",
      "library": "logging",
      "type": "example",
      "file_name": "logging_filehandler.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_sdcard\nimport board\nimport busio\nimport storage\nfrom digitalio import DigitalInOut\nimport adafruit_logging as logging\nfrom adafruit_logging import FileHandler\n\n# Get chip select pin depending on the board, this one is for the Feather M4 Express\nsd_cs = board.D10\n# Set up an SD card to write to\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\ncs = DigitalInOut(sd_cs)\nsdcard = adafruit_sdcard.SDCard(spi, cs)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/logging/examples/logging_filehandler.py",
      "library": "logging",
      "type": "example",
      "file_name": "logging_filehandler.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_sdcard\nimport board\nimport busio\nimport storage\nfrom digitalio import DigitalInOut\nimport adafruit_logging as logging\nfrom adafruit_logging import FileHandler\n\nsd_cs = board.D10\n# Set up an SD card to write to\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\ncs = DigitalInOut(sd_cs)\nsdcard = adafruit_sdcard.SDCard(spi, cs)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/logging/examples/logging_filehandler.py",
      "library": "logging",
      "type": "example",
      "file_name": "logging_filehandler.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 Alec Delaney\n# SPDX-License-Identifier: MIT\n\nimport adafruit_sdcard\nimport board\nimport busio\nimport storage\nfrom digitalio import DigitalInOut\n\nimport adafruit_logging as logging\nfrom adafruit_logging import FileHandler\n\n# Get chip select pin depending on the board, this one is for the Feather M4 Express\nsd_cs = board.D10\n\n# Set up an SD card to write to\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\ncs = DigitalInOut(sd_cs)\nsdcard = adafruit_sdcard.SDCard(spi, cs)\nvfs = storage.VfsFat(sdcard)\nstorage.mount(vfs, \"/sd\")\n\n# Initialize log functionality\nlog_filepath = \"/sd/testlog.log\"\nlogger = logging.getLogger(\"testlog\")\nfile_handler = FileHandler(log_filepath)\nlogger.addHandler(file_handler)\nlogger.setLevel(logging.INFO)\n\nlogger.info(\"Logger initialized!\")\nlogger.debug(\"You can even add debug statements to the log!\")\n\n# If you're done with the FileHandler, close it\nfile_handler.close()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/logging/examples/logging_filehandler.py",
      "library": "logging",
      "type": "example",
      "file_name": "logging_filehandler.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport terminalio\nfrom adafruit_display_text import bitmap_label\n\ntext = \"Hello world\"\ntext_area = bitmap_label.Label(terminalio.FONT, text=text)\ntext_area.x = 10\ntext_area.y = 10\nboard.DISPLAY.root_group = text_area",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-text/examples/display_text_bitmap_label_simpletest.py",
      "library": "display-text",
      "type": "example",
      "file_name": "display_text_bitmap_label_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport terminalio\n\nfrom adafruit_display_text import bitmap_label\n\ntext = \"Hello world\"\ntext_area = bitmap_label.Label(terminalio.FONT, text=text)\ntext_area.x = 10\ntext_area.y = 10\nboard.DISPLAY.root_group = text_area\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-text/examples/display_text_bitmap_label_simpletest.py",
      "library": "display-text",
      "type": "example",
      "file_name": "display_text_bitmap_label_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport terminalio\nfrom adafruit_matrixportal.matrixportal import MatrixPortal\n\ndef text_transform(val):\n    if CURRENCY == 'USD':\n        return '$%d' % val\n    if CURRENCY == 'EUR':\n        return '\\u200e\u20ac%d' % val\n    if CURRENCY == 'GBP':\n        return '\u00a3%d' % val\n    return '%d' % val\n\n# Usage example:\n    text_position=(16, 16),\n    text_color=0xFFFFFF,\n    text_transform=text_transform,\n    scrolling=True,\n)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/matrixportal/examples/matrixportal_scrolling_bitcoin.py",
      "library": "matrixportal",
      "type": "example",
      "file_name": "matrixportal_scrolling_bitcoin.py",
      "chunk_type": "function",
      "function_name": "text_transform"
    }
  },
  {
    "content": "import time\nimport board\nimport terminalio\nfrom adafruit_matrixportal.matrixportal import MatrixPortal\n\nmatrixportal = MatrixPortal(url=DATA_SOURCE, json_path=DATA_LOCATION, status_neopixel=board.NEOPIXEL)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/matrixportal/examples/matrixportal_scrolling_bitcoin.py",
      "library": "matrixportal",
      "type": "example",
      "file_name": "matrixportal_scrolling_bitcoin.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\n\n# Create a serial connection for the FONA connection\nuart = busio.UART(board.TX, board.RX)\nrst = digitalio.DigitalInOut(board.D4)\n# Ring Indicator (RI) interrupt pin\nri = digitalio.DigitalInOut(board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fona/examples/fona_sms_response.py",
      "library": "fona",
      "type": "example",
      "file_name": "fona_sms_response.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\n\n# Create a serial connection for the FONA connection\nuart = busio.UART(board.TX, board.RX)\nrst = digitalio.DigitalInOut(board.D4)\n# Ring Indicator (RI) interrupt pin\nri = digitalio.DigitalInOut(board.D5)\n# Use this for FONA800 and FONA808",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fona/examples/fona_sms_response.py",
      "library": "fona",
      "type": "example",
      "file_name": "fona_sms_response.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\n\n# Create a serial connection for the FONA connection\nuart = busio.UART(board.TX, board.RX)\nrst = digitalio.DigitalInOut(board.D4)\n# Ring Indicator (RI) interrupt pin\nri = digitalio.DigitalInOut(board.D5)\n# Use this for FONA800 and FONA808\nfona = FONA(uart, rst, ri)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fona/examples/fona_sms_response.py",
      "library": "fona",
      "type": "example",
      "file_name": "fona_sms_response.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_onewire.bus import OneWireBus\nimport adafruit_ds2413\n\nimport adafruit_ds2413\n# Create OneWire bus\now_bus = OneWireBus(board.D2)\n# Create the DS2413 object from the first one found on the bus\nds = adafruit_ds2413.DS2413(ow_bus, ow_bus.scan()[0])",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds2413/examples/ds2413_direct_access.py",
      "library": "ds2413",
      "type": "example",
      "file_name": "ds2413_direct_access.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_onewire.bus import OneWireBus\nimport adafruit_ds2413\n\n# Create OneWire bus\now_bus = OneWireBus(board.D2)\n# Create the DS2413 object from the first one found on the bus\nds = adafruit_ds2413.DS2413(ow_bus, ow_bus.scan()[0])\n# Get the PIO logical status and report it together with the state of the\n# PIO Output Latch",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds2413/examples/ds2413_direct_access.py",
      "library": "ds2413",
      "type": "example",
      "file_name": "ds2413_direct_access.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# This example shows how to directly access the DS2413. See the datasheet\n# for details. This approach is only recommended for advanced use. For typical\n# use, it is suggested to access the pins via the DS2413Pin objects. See the\n# simple.py example.\nimport board\nfrom adafruit_onewire.bus import OneWireBus\n\nimport adafruit_ds2413\n\n# Create OneWire bus\now_bus = OneWireBus(board.D2)\n\n# Create the DS2413 object from the first one found on the bus\nds = adafruit_ds2413.DS2413(ow_bus, ow_bus.scan()[0])\n\n# Get the PIO logical status and report it together with the state of the\n# PIO Output Latch\nprint(f\"0b{ds.pio_state:08b}\")\n\n# Control the output transistors. (ON = 0, OFF = 1)\n# Turn off both transisotrs\nds.pio_state = 0x03\n# Turn on both transisotrs\nds.pio_state = 0x00\n# PIOA = on, PIOB = off\nds.pio_state = 0x02\n# PIOA = off, PIOB = on\nds.pio_state = 0x01\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds2413/examples/ds2413_direct_access.py",
      "library": "ds2413",
      "type": "example",
      "file_name": "ds2413_direct_access.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nfrom adafruit_cap1188.i2c import CAP1188_I2C\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ncap = CAP1188_I2C(i2c)\n# SPI setup",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/cap1188/examples/cap1188_simpletest.py",
      "library": "cap1188",
      "type": "example",
      "file_name": "cap1188_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\n\nfrom adafruit_cap1188.i2c import CAP1188_I2C\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ncap = CAP1188_I2C(i2c)\n\n# SPI setup\n# from digitalio import DigitalInOut, Direction\n# from adafruit_cap1188.spi import CAP1188_SPI\n# spi = board.SPI()\n# cs = DigitalInOut(board.D5)\n# cap = CAP1188_SPI(spi, cs)\n\nwhile True:\n    for i in range(1, 9):\n        if cap[i].value:\n            print(f\"Pin {i} touched!\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/cap1188/examples/cap1188_simpletest.py",
      "library": "cap1188",
      "type": "example",
      "file_name": "cap1188_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nfrom math import atan2, degrees\nimport board\nimport adafruit_lsm303dlh_mag\n\nimport board\nimport adafruit_lsm303dlh_mag\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lsm303dlh_mag.LSM303DLH_Mag(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303dlh-mag/examples/lsm303dlh_mag_compass.py",
      "library": "lsm303dlh-mag",
      "type": "example",
      "file_name": "lsm303dlh_mag_compass.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom math import atan2, degrees\nimport board\nimport adafruit_lsm303dlh_mag\n\nimport adafruit_lsm303dlh_mag\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lsm303dlh_mag.LSM303DLH_Mag(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303dlh-mag/examples/lsm303dlh_mag_compass.py",
      "library": "lsm303dlh-mag",
      "type": "example",
      "file_name": "lsm303dlh_mag_compass.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom math import atan2, degrees\nimport board\nimport adafruit_lsm303dlh_mag\n\ndef vector_2_degrees(x, y):\n    angle = degrees(atan2(y, x))\n    if angle < 0:\n        angle += 360\n    return angle\n\n# Usage example:\ndef get_heading(_sensor):\n    magnet_x, magnet_y, _ = _sensor.magnetic\n    return vector_2_degrees(magnet_x, magnet_y)\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303dlh-mag/examples/lsm303dlh_mag_compass.py",
      "library": "lsm303dlh-mag",
      "type": "example",
      "file_name": "lsm303dlh_mag_compass.py",
      "chunk_type": "function",
      "function_name": "vector_2_degrees"
    }
  },
  {
    "content": "import time\nfrom math import atan2, degrees\nimport board\nimport adafruit_lsm303dlh_mag\n\ndef get_heading(_sensor):\n    magnet_x, magnet_y, _ = _sensor.magnetic\n    return vector_2_degrees(magnet_x, magnet_y)\n\n# Usage example:\n\nwhile True:\n    print(f\"heading: {get_heading(sensor):.2f} degrees\")\n    time.sleep(0.2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303dlh-mag/examples/lsm303dlh_mag_compass.py",
      "library": "lsm303dlh-mag",
      "type": "example",
      "file_name": "lsm303dlh_mag_compass.py",
      "chunk_type": "function",
      "function_name": "get_heading"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Display compass heading data five times per second\"\"\"\n\nimport time\nfrom math import atan2, degrees\n\nimport board\n\nimport adafruit_lsm303dlh_mag\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lsm303dlh_mag.LSM303DLH_Mag(i2c)\n\n\ndef vector_2_degrees(x, y):\n    angle = degrees(atan2(y, x))\n    if angle < 0:\n        angle += 360\n    return angle\n\n\ndef get_heading(_sensor):\n    magnet_x, magnet_y, _ = _sensor.magnetic\n    return vector_2_degrees(magnet_x, magnet_y)\n\n\nwhile True:\n    print(f\"heading: {get_heading(sensor):.2f} degrees\")\n    time.sleep(0.2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm303dlh-mag/examples/lsm303dlh_mag_compass.py",
      "library": "lsm303dlh-mag",
      "type": "example",
      "file_name": "lsm303dlh_mag_compass.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import struct\nimport time\nimport board\nfrom adafruit_rockblock import RockBlock\n\nimport time\n# CircuitPython / Blinka\nimport board\nuart = board.UART()\nuart.baudrate = 19200\n# via USB cable\n# import serial",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rockblock/examples/rockblock_recv_data.py",
      "library": "rockblock",
      "type": "example",
      "file_name": "rockblock_recv_data.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport board\nimport busio\nimport adafruit_ad569x\n\ni2c = busio.I2C(board.SCL, board.SDA, frequency=400000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ad569x/examples/ad569x_simpletest.py",
      "library": "ad569x",
      "type": "example",
      "file_name": "ad569x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport board\nimport busio\nimport adafruit_ad569x\n\nimport adafruit_ad569x\ni2c = busio.I2C(board.SCL, board.SDA, frequency=400_000)\n# Initialize AD569x\ndac = adafruit_ad569x.Adafruit_AD569x(i2c)\n# length of the sine wave\nLENGTH = 100\n# sine wave values written to the DAC",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ad569x/examples/ad569x_simpletest.py",
      "library": "ad569x",
      "type": "example",
      "file_name": "ad569x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2023 Liz Clark for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Simple demo of writing a sine wave to the AD569x DAC.\"\"\"\n\nimport math\n\nimport board\nimport busio\n\nimport adafruit_ad569x\n\ni2c = busio.I2C(board.SCL, board.SDA, frequency=400_000)\n\n# Initialize AD569x\ndac = adafruit_ad569x.Adafruit_AD569x(i2c)\n\n# length of the sine wave\nLENGTH = 100\n# sine wave values written to the DAC\nvalue = [int(math.sin(math.pi * 2 * i / LENGTH) * ((2**15) - 1) + 2**15) for i in range(LENGTH)]\n\nwhile True:\n    for v in value:\n        dac.value = v\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ad569x/examples/ad569x_simpletest.py",
      "library": "ad569x",
      "type": "example",
      "file_name": "ad569x_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom adafruit_bno08x_rvc import BNO08x_RVC\n\nimport board\nimport busio\nuart = busio.UART(board.TX, board.RX, baudrate=115200, receiver_buffer_size=2048)\n# uncomment and comment out the above for use with Raspberry Pi\n# import serial\n# uart = serial.Serial(\"/dev/serial0\", 115200)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno08x_rvc/examples/bno08x_rvc_simpletest.py",
      "library": "bno08x_rvc",
      "type": "example",
      "file_name": "bno08x_rvc_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 Bryan Siepert, written for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\nimport time\n\nimport board\nimport busio\n\nfrom adafruit_bno08x_rvc import BNO08x_RVC\n\nuart = busio.UART(board.TX, board.RX, baudrate=115200, receiver_buffer_size=2048)\n\n# uncomment and comment out the above for use with Raspberry Pi\n# import serial\n# uart = serial.Serial(\"/dev/serial0\", 115200)\n\n# for a USB Serial cable:\n# import serial\n# uart = serial.Serial(\"/dev/ttyUSB0\", baudrate=115200)\n\nrvc = BNO08x_RVC(uart)\n\nwhile True:\n    yaw, pitch, roll, x_accel, y_accel, z_accel = rvc.heading\n    print(f\"Yaw: {yaw:.2f} Pitch: {pitch:.2f} Roll: {roll:.2f} Degrees\")\n    print(f\"Acceleration X: {x_accel:.2f} Y: {y_accel:.2f} Z: {z_accel:.2f} m/s^2\")\n    print(\"\")\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno08x_rvc/examples/bno08x_rvc_simpletest.py",
      "library": "bno08x_rvc",
      "type": "example",
      "file_name": "bno08x_rvc_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_lsm9ds0\n\n# import digitalio # Used with SPI\nimport adafruit_lsm9ds0\n# I2C connection:\ni2c = busio.I2C(board.SCL, board.SDA)\nsensor = adafruit_lsm9ds0.LSM9DS0_I2C(i2c)\n# SPI connection:\n# from digitalio import DigitalInOut, Direction",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm9ds0/examples/lsm9ds0_simpletest.py",
      "library": "lsm9ds0",
      "type": "example",
      "file_name": "lsm9ds0_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_lsm9ds0\n\n# import digitalio # Used with SPI\nimport adafruit_lsm9ds0\n# I2C connection:\ni2c = busio.I2C(board.SCL, board.SDA)\nsensor = adafruit_lsm9ds0.LSM9DS0_I2C(i2c)\n# SPI connection:\n# from digitalio import DigitalInOut, Direction\n# spi = busio.SPI(board.SCK, board.MOSI, board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm9ds0/examples/lsm9ds0_simpletest.py",
      "library": "lsm9ds0",
      "type": "example",
      "file_name": "lsm9ds0_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport displayio\nimport terminalio\nimport touchio\nimport wifi\nfrom adafruit_display_text.label import Label\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_dash_display import Hub\n\nup = DigitalInOut(board.BUTTON_UP)\nup.direction = Direction.INPUT\nup.pull = Pull.DOWN\nselect = DigitalInOut(board.BUTTON_SELECT)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_advancedtest.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "dash_display_advancedtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport displayio\nimport terminalio\nimport touchio\nimport wifi\nfrom adafruit_display_text.label import Label\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_dash_display import Hub\n\nup = DigitalInOut(board.BUTTON_UP)\nup.direction = Direction.INPUT\nup.pull = Pull.DOWN\nselect = DigitalInOut(board.BUTTON_SELECT)\nselect.direction = Direction.INPUT\nselect.pull = Pull.DOWN\ndown = DigitalInOut(board.BUTTON_DOWN)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_advancedtest.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "dash_display_advancedtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport displayio\nimport terminalio\nimport touchio\nimport wifi\nfrom adafruit_display_text.label import Label\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_dash_display import Hub\n\nselect = DigitalInOut(board.BUTTON_SELECT)\nselect.direction = Direction.INPUT\nselect.pull = Pull.DOWN\ndown = DigitalInOut(board.BUTTON_DOWN)\ndown.direction = Direction.INPUT\ndown.pull = Pull.DOWN\nback = touchio.TouchIn(board.CAP7)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_advancedtest.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "dash_display_advancedtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport displayio\nimport terminalio\nimport touchio\nimport wifi\nfrom adafruit_display_text.label import Label\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_dash_display import Hub\n\ndown = DigitalInOut(board.BUTTON_DOWN)\ndown.direction = Direction.INPUT\ndown.pull = Pull.DOWN\nback = touchio.TouchIn(board.CAP7)\nsubmit = touchio.TouchIn(board.CAP8)\n# Get WiFi details and Adafruit IO keys, ensure these are setup in settings.toml\n# (visit io.adafruit.com if you need to create an account, or if you need your Adafruit IO key.)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_advancedtest.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "dash_display_advancedtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport displayio\nimport terminalio\nimport touchio\nimport wifi\nfrom adafruit_display_text.label import Label\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_dash_display import Hub\n\ndown = DigitalInOut(board.BUTTON_DOWN)\ndown.direction = Direction.INPUT\ndown.pull = Pull.DOWN\nback = touchio.TouchIn(board.CAP7)\nsubmit = touchio.TouchIn(board.CAP8)\n# Get WiFi details and Adafruit IO keys, ensure these are setup in settings.toml\n# (visit io.adafruit.com if you need to create an account, or if you need your Adafruit IO key.)\nssid = getenv(\"CIRCUITPY_WIFI_SSID\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_advancedtest.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "dash_display_advancedtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport displayio\nimport terminalio\nimport touchio\nimport wifi\nfrom adafruit_display_text.label import Label\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_dash_display import Hub\n\ndef rgb(last):\n    display.root_group = None\n    rgb_group[3].text = '00'\n    rgb_group[4].text = '00'\n    rgb_group[5].text = '00'\n    display.root_group = rgb_group\n    time.sleep(0.2)\n    index = 0\n    colors = [0, 0, 0]\n    while True:\n        if select.value:\n            index += 1\n            if index == 3:\n                index = 0\n            time.sleep(0.3)\n            continue\n        if up.value:\n            colors[index] += 1\n            if colors[index] == 256:\n                colors[index] = 0\n            rgb_group[index + 3].text = hex(colors[index])[2:]\n            time.sleep(0.01)\n            continue\n        if down.value:\n            colors[index] -= 1\n            if colors[index] == -1:\n                colors[index] = 255\n            rgb_group[index + 3].text = hex(colors[index])[2:]\n            time.sleep(0.01)\n            continue\n        if submit.value:\n            color = [f'{colors[i]:02x}' for i in range(len(colors))]\n            color = '#' + ''.join(color)\n            iot.publish('neopixel', color)\n            break\n        if back.value:\n            break\n        time.sleep(0.1)\n    display.root_group = None\n    time.sleep(0.1)\n\n# Usage example:\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n\nrgb_group = displayio.Group()\nR_label = Label(\n    terminalio.FONT,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_advancedtest.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "dash_display_advancedtest.py",
      "chunk_type": "function",
      "function_name": "rgb"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport displayio\nimport terminalio\nimport touchio\nimport wifi\nfrom adafruit_display_text.label import Label\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_dash_display import Hub\n\ndef rgb_set_color(message):\n    return int(message[1:], 16)\n\n# Usage example:\n    default_text=\"LED: \",\n    formatted_text=\"LED: {}\",\n    color_callback=rgb_set_color,\n    pub_method=rgb,\n)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_advancedtest.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "dash_display_advancedtest.py",
      "chunk_type": "function",
      "function_name": "rgb_set_color"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport displayio\nimport terminalio\nimport touchio\nimport wifi\nfrom adafruit_display_text.label import Label\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_dash_display import Hub\n\ndef door_color(message):\n    door = bool(int(message))\n    if door:\n        return 65280\n    return 16711680\n\n# Usage example:\n    default_text=\"Door: \",\n    formatted_text=\"Door: {}\",\n    color_callback=door_color,\n    callback=on_door,\n)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_advancedtest.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "dash_display_advancedtest.py",
      "chunk_type": "function",
      "function_name": "door_color"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport displayio\nimport terminalio\nimport touchio\nimport wifi\nfrom adafruit_display_text.label import Label\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_dash_display import Hub\n\ndef on_door(client, feed_id, message):\n    door = bool(int(message))\n    if door:\n        return 'Door: Closed'\n    return 'Door: Open'\n\n# Usage example:\n    formatted_text=\"Door: {}\",\n    color_callback=door_color,\n    callback=on_door,\n)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_advancedtest.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "dash_display_advancedtest.py",
      "chunk_type": "function",
      "function_name": "on_door"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport displayio\nimport terminalio\nimport touchio\nimport wifi\nfrom adafruit_display_text.label import Label\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_dash_display import Hub\n\ndef pub_lamp(lamp):\n    if isinstance(lamp, str):\n        lamp = eval(lamp)\n    iot.publish('lamp', str(not lamp))\n    time.sleep(0.3)\n\n# Usage example:\n    default_text=\"Lamp: \",\n    formatted_text=\"Lamp: {}\",\n    pub_method=pub_lamp,\n)\niot.add_device(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_advancedtest.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "dash_display_advancedtest.py",
      "chunk_type": "function",
      "function_name": "pub_lamp"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport displayio\nimport terminalio\nimport touchio\nimport wifi\nfrom adafruit_display_text.label import Label\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_dash_display import Hub\n\n    # funhouse.set_text(f\"Lamp: {not lamp}\", 0)\ndisplay = board.DISPLAY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_advancedtest.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "dash_display_advancedtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport displayio\nimport terminalio\nimport touchio\nimport wifi\nfrom adafruit_display_text.label import Label\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_dash_display import Hub\n\n# Create a socket pool and ssl_context\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_advancedtest.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "dash_display_advancedtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport displayio\nimport terminalio\nimport touchio\nimport wifi\nfrom adafruit_display_text.label import Label\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_dash_display import Hub\n\n# Create a socket pool and ssl_context\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(\n    broker=\"io.adafruit.com\",",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_advancedtest.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "dash_display_advancedtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_lis3mdl import LIS3MDL, Range\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = LIS3MDL(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3mdl/examples/lis3mdl_range_test.py",
      "library": "lis3mdl",
      "type": "example",
      "file_name": "lis3mdl_range_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Test Each range\"\"\"\n\nimport time\n\nimport board\n\nfrom adafruit_lis3mdl import LIS3MDL, Range\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = LIS3MDL(i2c)\n\nwhile True:\n    for mag_range in [\n        Range.RANGE_4_GAUSS,\n        Range.RANGE_8_GAUSS,\n        Range.RANGE_12_GAUSS,\n        Range.RANGE_16_GAUSS,\n    ]:\n        sensor.range = mag_range\n        print(\"Range: %d Gauss\" % Range.string[sensor.range])\n        mag_x, mag_y, mag_z = sensor.magnetic\n\n        print(f\"X:{mag_x:10.2f}, Y:{mag_y:10.2f}, Z:{mag_z:10.2f} uT\")\n        print(\"\")\n        time.sleep(0.3)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3mdl/examples/lis3mdl_range_test.py",
      "library": "lis3mdl",
      "type": "example",
      "file_name": "lis3mdl_range_test.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import json\nimport threading\nimport time\nimport board\nimport busio\nimport flask\nimport adafruit_bno055\n\nimport busio\nimport flask\nimport adafruit_bno055\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create the BNO sensor connection.\nbno = adafruit_bno055.BNO055_I2C(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno055/examples/bno055_webgl_demo/server.py",
      "library": "bno055",
      "type": "example",
      "file_name": "server.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport threading\nimport time\nimport board\nimport busio\nimport flask\nimport adafruit_bno055\n\nimport adafruit_bno055\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create the BNO sensor connection.\nbno = adafruit_bno055.BNO055_I2C(i2c)\n# Application configuration below.  You probably don't need to change these values.\n# How often to update the BNO sensor data (in hertz).",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno055/examples/bno055_webgl_demo/server.py",
      "library": "bno055",
      "type": "example",
      "file_name": "server.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport threading\nimport time\nimport board\nimport busio\nimport flask\nimport adafruit_bno055\n\n# Function to read the BNO sensor and update the bno_data object with the\nlatest BNO orientation, etc. state.  Must be run in its own thread because\nit will never return!\ndef read_bno():\n    \"\"\"Function to read the BNO sensor and update the bno_data object with the\n    latest BNO orientation, etc. state.  Must be run in its own thread because\n    it will never return!\n    \"\"\"\n    while True:\n        with bno_changed:\n            bno_data['euler'] = bno.euler\n            bno_data['temp'] = bno.temperature\n            bno_data['quaternion'] = bno.quaternion\n            bno_data['calibration'] = bno.calibration_status\n            bno_changed.notify_all()\n        time.sleep(1.0 / BNO_UPDATE_FREQUENCY_HZ)\n\n# Usage example:\n    global bno_thread  # noqa: PLW0603\n    # Kick off BNO055 reading thread.\n    bno_thread = threading.Thread(target=read_bno)\n    bno_thread.daemon = True  # Don't let the BNO reading thread block exiting.\n    bno_thread.start()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno055/examples/bno055_webgl_demo/server.py",
      "library": "bno055",
      "type": "example",
      "file_name": "server.py",
      "chunk_type": "function",
      "function_name": "read_bno"
    }
  },
  {
    "content": "import json\nimport threading\nimport time\nimport board\nimport busio\nimport flask\nimport adafruit_bno055\n\n# Function to handle sending BNO055 sensor data to the client web browser\nusing HTML5 server sent events (aka server push).  This is a generator function\nthat flask will run in a thread and call to get new data that is pushed to\nthe client web page.\ndef bno_sse():\n    \"\"\"Function to handle sending BNO055 sensor data to the client web browser\n    using HTML5 server sent events (aka server push).  This is a generator function\n    that flask will run in a thread and call to get new data that is pushed to\n    the client web page.\n    \"\"\"\n    while True:\n        with bno_changed:\n            bno_changed.wait()\n            heading, roll, pitch = bno_data['euler']\n            temp = bno_data['temp']\n            x, y, z, w = bno_data['quaternion']\n            sys, gyro, accel, mag = bno_data['calibration']\n        data = {'heading': heading, 'roll': roll, 'pitch': pitch, 'temp': temp, 'quatX': x, 'quatY': y, 'quatZ': z, 'quatW': w, 'calSys': sys, 'calGyro': gyro, 'calAccel': accel, 'calMag': mag}\n        yield f'data: {json.dumps(data)}\\n\\n'\n\n# Usage example:\n@app.route(\"/bno\")\ndef bno_path():\n    # Return SSE response and call bno_sse function to stream sensor data to\n    # the webpage.\n    return flask.Response(bno_sse(), mimetype=\"text/event-stream\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno055/examples/bno055_webgl_demo/server.py",
      "library": "bno055",
      "type": "example",
      "file_name": "server.py",
      "chunk_type": "function",
      "function_name": "bno_sse"
    }
  },
  {
    "content": "import json\nimport threading\nimport time\nimport board\nimport busio\nimport flask\nimport adafruit_bno055\n\n@app.before_first_request\ndef start_bno_thread():\n    global bno_thread\n    bno_thread = threading.Thread(target=read_bno)\n    bno_thread.daemon = True\n    bno_thread.start()\n\n# Usage example:\n\n# Background thread to read BNO sensor data.  Will be created right before\n# the first request is served (see start_bno_thread below).\nbno_thread = None\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno055/examples/bno055_webgl_demo/server.py",
      "library": "bno055",
      "type": "example",
      "file_name": "server.py",
      "chunk_type": "function",
      "function_name": "start_bno_thread"
    }
  },
  {
    "content": "import json\nimport threading\nimport time\nimport board\nimport busio\nimport flask\nimport adafruit_bno055\n\n@app.route('/bno')\ndef bno_path():\n    return flask.Response(bno_sse(), mimetype='text/event-stream')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno055/examples/bno055_webgl_demo/server.py",
      "library": "bno055",
      "type": "example",
      "file_name": "server.py",
      "chunk_type": "function",
      "function_name": "bno_path"
    }
  },
  {
    "content": "import json\nimport threading\nimport time\nimport board\nimport busio\nimport flask\nimport adafruit_bno055\n\n@app.route('/save_calibration', methods=['POST'])\ndef save_calibration():\n    return 'OK'\n\n# Usage example:\n\n\n@app.route(\"/save_calibration\", methods=[\"POST\"])\ndef save_calibration():\n    # Save calibration data to disk.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno055/examples/bno055_webgl_demo/server.py",
      "library": "bno055",
      "type": "example",
      "file_name": "server.py",
      "chunk_type": "function",
      "function_name": "save_calibration"
    }
  },
  {
    "content": "import json\nimport threading\nimport time\nimport board\nimport busio\nimport flask\nimport adafruit_bno055\n\n@app.route('/load_calibration', methods=['POST'])\ndef load_calibration():\n    return 'OK'\n\n# Usage example:\n\n\n@app.route(\"/load_calibration\", methods=[\"POST\"])\ndef load_calibration():\n    # Load calibration from disk.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno055/examples/bno055_webgl_demo/server.py",
      "library": "bno055",
      "type": "example",
      "file_name": "server.py",
      "chunk_type": "function",
      "function_name": "load_calibration"
    }
  },
  {
    "content": "import json\nimport threading\nimport time\nimport board\nimport busio\nimport flask\nimport adafruit_bno055\n\n@app.route('/')\ndef root():\n    return flask.render_template('index.html')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno055/examples/bno055_webgl_demo/server.py",
      "library": "bno055",
      "type": "example",
      "file_name": "server.py",
      "chunk_type": "function",
      "function_name": "root"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_amg88xx\n\nimport board\nimport busio\nimport adafruit_amg88xx\ni2c = busio.I2C(board.SCL, board.SDA)\namg = adafruit_amg88xx.AMG88XX(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/amg88xx/examples/amg88xx_simpletest.py",
      "library": "amg88xx",
      "type": "example",
      "file_name": "amg88xx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_amg88xx\n\nimport busio\nimport adafruit_amg88xx\ni2c = busio.I2C(board.SCL, board.SDA)\namg = adafruit_amg88xx.AMG88XX(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/amg88xx/examples/amg88xx_simpletest.py",
      "library": "amg88xx",
      "type": "example",
      "file_name": "amg88xx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport busio\n\nimport adafruit_amg88xx\n\ni2c = busio.I2C(board.SCL, board.SDA)\namg = adafruit_amg88xx.AMG88XX(i2c)\n\nwhile True:\n    for row in amg.pixels:\n        # Pad to 1 decimal place\n        print([f\"{temp:.1f}\" for temp in row])\n        print(\"\")\n    print(\"\\n\")\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/amg88xx/examples/amg88xx_simpletest.py",
      "library": "amg88xx",
      "type": "example",
      "file_name": "amg88xx_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_adxl37x\n\nimport board\nimport adafruit_adxl37x\ni2c = board.STEMMA_I2C()  # uses board.SCL and board.SDA\naccelerometer = adafruit_adxl37x.ADXL375(i2c)\naccelerometer.offset = 0, 0, 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl37x/examples/adxl37x_offset_calibration.py",
      "library": "adxl37x",
      "type": "example",
      "file_name": "adxl37x_offset_calibration.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_adxl37x\n\nimport board\nimport adafruit_adxl37x\ni2c = board.STEMMA_I2C()  # uses board.SCL and board.SDA\naccelerometer = adafruit_adxl37x.ADXL375(i2c)\naccelerometer.offset = 0, 0, 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl37x/examples/adxl37x_offset_calibration.py",
      "library": "adxl37x",
      "type": "example",
      "file_name": "adxl37x_offset_calibration.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2022 Kattni Rembor for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_adxl37x\n\ni2c = board.STEMMA_I2C()  # uses board.SCL and board.SDA\naccelerometer = adafruit_adxl37x.ADXL375(i2c)\n\naccelerometer.offset = 0, 0, 0\n\nprint(\"Hold accelerometer flat to set offsets to 0, 0, and -1g...\")\ntime.sleep(1)\nx = accelerometer.raw_x\ny = accelerometer.raw_y\nz = accelerometer.raw_z\nprint(\"Raw x: \", x)\nprint(\"Raw y: \", y)\nprint(\"Raw z: \", z)\n\naccelerometer.offset = (\n    round(-x / 4),\n    round(-y / 4),\n    round(-(z - 20) / 4),  # Z should be '20' at 1g (49mg per bit)\n)\nprint(\"Calibrated offsets: \", accelerometer.offset)\n\nwhile True:\n    print(\n        f\"{accelerometer.acceleration[0]} {accelerometer.acceleration[1]} {accelerometer.acceleration[2]} m/s^2\"  # noqa: E501\n    )\n    time.sleep(0.2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl37x/examples/adxl37x_offset_calibration.py",
      "library": "adxl37x",
      "type": "example",
      "file_name": "adxl37x_offset_calibration.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nfrom adafruit_ble.advertising.standard import SolicitServicesAdvertisement\nimport adafruit_ble_apple_notification_center as ancs\n\nimport adafruit_ble\nimport adafruit_ble_apple_notification_center as ancs\nradio = adafruit_ble.BLERadio()\na = SolicitServicesAdvertisement()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_apple_notification_center/examples/ble_apple_notification_center_new.py",
      "library": "ble_apple_notification_center",
      "type": "example",
      "file_name": "ble_apple_notification_center_new.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_imageload\nimport board\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_clock import FlipClock\n\nMEDIUM_LEVEL = 0.9\n# == END configuration variables ==\n# access built-in display\ndisplay = board.DISPLAY\n# load the static sprite sheet\nstatic_spritesheet, static_palette = adafruit_imageload.load(\"static_sheet.bmp\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipclock_simpletest.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipclock_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_imageload\nimport board\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_clock import FlipClock\n\nstatic_spritesheet, static_palette = adafruit_imageload.load('static_sheet.bmp')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipclock_simpletest.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipclock_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_imageload\nimport board\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_clock import FlipClock\n\ntop_animation_spritesheet, top_animation_palette = adafruit_imageload.load('grey_top_animation_sheet.bmp')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipclock_simpletest.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipclock_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_imageload\nimport board\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_clock import FlipClock\n\nbottom_animation_spritesheet, bottom_animation_palette = adafruit_imageload.load('grey_bottom_animation_sheet.bmp')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipclock_simpletest.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipclock_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_imageload\nimport board\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_clock import FlipClock\n\n# append the clock to the group\n# show the group on the display\nboard.DISPLAY.root_group = main_group\n# set a value to start with in the first pair\nclock.first_pair = \"13\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipclock_simpletest.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipclock_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_vc0706\n\n# Raspberry Pi configuration:\n# IMAGE_FILE = '/home/pi/image.jpg'  # Full path to file name to save image. Will overwrite!\n# Create a serial connection for the VC0706 connection.\nuart = busio.UART(board.TX, board.RX, baudrate=115200, timeout=0.25)\n# Update the serial port name to match the serial connection for the camera!\n# For use with USB to serial adapter:\n# import serial\n# uart = serial.Serial(\"/dev/ttyUSB0\", baudrate=115200, timeout=0.25)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vc0706/examples/vc0706_snapshot_filesystem.py",
      "library": "vc0706",
      "type": "example",
      "file_name": "vc0706_snapshot_filesystem.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_vc0706\n\n# For use with Raspberry Pi:\n# import serial\n# uart = serial.Serial(\"/dev/ttyS0\", baudrate=115200, timeout=0.25)\n# Setup VC0706 camera\nvc0706 = adafruit_vc0706.VC0706(uart)\n# Print the version string from the camera.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vc0706/examples/vc0706_snapshot_filesystem.py",
      "library": "vc0706",
      "type": "example",
      "file_name": "vc0706_snapshot_filesystem.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_vc0706\n\n# Print the version string from the camera.\n# Set the image size.\nvc0706.image_size = adafruit_vc0706.IMAGE_SIZE_640x480\n# Or set IMAGE_SIZE_320x240 or IMAGE_SIZE_160x120\n# Note you can also read the property and compare against those values to\n# see the current size:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vc0706/examples/vc0706_snapshot_filesystem.py",
      "library": "vc0706",
      "type": "example",
      "file_name": "vc0706_snapshot_filesystem.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1675\n\nimport adafruit_ssd1675\nepd_cs = board.D9\nepd_dc = board.D10\ndisplay_bus = FourWire(board.SPI(), command=epd_dc, chip_select=epd_cs, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1675/examples/ssd1675_simpletest.py",
      "library": "ssd1675",
      "type": "example",
      "file_name": "ssd1675_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1675\n\nimport adafruit_ssd1675\nepd_cs = board.D9\nepd_dc = board.D10\ndisplay_bus = FourWire(board.SPI(), command=epd_dc, chip_select=epd_cs, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1675/examples/ssd1675_simpletest.py",
      "library": "ssd1675",
      "type": "example",
      "file_name": "ssd1675_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1675\n\nepd_cs = board.D9\nepd_dc = board.D10\ndisplay_bus = FourWire(board.SPI(), command=epd_dc, chip_select=epd_cs, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1675/examples/ssd1675_simpletest.py",
      "library": "ssd1675",
      "type": "example",
      "file_name": "ssd1675_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1675\n\nepd_dc = board.D10\ndisplay_bus = FourWire(board.SPI(), command=epd_dc, chip_select=epd_cs, baudrate=1000000)\ndisplay = adafruit_ssd1675.SSD1675(display_bus, width=250, height=122, rotation=270)\ng = displayio.Group()\npic = displayio.OnDiskBitmap(\"/display-ruler.bmp\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1675/examples/ssd1675_simpletest.py",
      "library": "ssd1675",
      "type": "example",
      "file_name": "ssd1675_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Simple test script for 2.13\" 250x122 black and white featherwing.\n\nSupported products:\n  * Adafruit 2.13\" Black and White FeatherWing\n    * https://www.adafruit.com/product/4195\n\"\"\"\n\nimport time\n\nimport board\nimport displayio\nfrom fourwire import FourWire\n\nimport adafruit_ssd1675\n\ndisplayio.release_displays()\n\nepd_cs = board.D9\nepd_dc = board.D10\n\ndisplay_bus = FourWire(board.SPI(), command=epd_dc, chip_select=epd_cs, baudrate=1000000)\ntime.sleep(1)\n\ndisplay = adafruit_ssd1675.SSD1675(display_bus, width=250, height=122, rotation=270)\n\ng = displayio.Group()\n\npic = displayio.OnDiskBitmap(\"/display-ruler.bmp\")\nt = displayio.TileGrid(pic, pixel_shader=pic.pixel_shader)\ng.append(t)\n\ndisplay.root_group = g\n\ndisplay.refresh()\n\nprint(\"refreshed\")\n\ntime.sleep(120)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1675/examples/ssd1675_simpletest.py",
      "library": "ssd1675",
      "type": "example",
      "file_name": "ssd1675_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_tlc5947\n\nimport digitalio\nimport adafruit_tlc5947\n# Initialize SPI bus.\nspi = busio.SPI(clock=board.SCK, MOSI=board.MOSI)\n# Initialize TLC5947\nDRIVER_COUNT = 2  # change this to the number of drivers you have chained\nLATCH = digitalio.DigitalInOut(board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc5947/examples/tlc5947_chain.py",
      "library": "tlc5947",
      "type": "example",
      "file_name": "tlc5947_chain.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_tlc5947\n\n# Initialize SPI bus.\nspi = busio.SPI(clock=board.SCK, MOSI=board.MOSI)\n# Initialize TLC5947\nDRIVER_COUNT = 2  # change this to the number of drivers you have chained\nLATCH = digitalio.DigitalInOut(board.D5)\ntlc5947 = adafruit_tlc5947.TLC5947(spi, LATCH, num_drivers=DRIVER_COUNT)\n# You can optionally disable auto_write which allows you to control when\n# channel state is written to the chip.  Normally auto_write is true and",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc5947/examples/tlc5947_chain.py",
      "library": "tlc5947",
      "type": "example",
      "file_name": "tlc5947_chain.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_tlc5947\n\nspi = busio.SPI(clock=board.SCK, MOSI=board.MOSI)\n# Initialize TLC5947\nDRIVER_COUNT = 2  # change this to the number of drivers you have chained\nLATCH = digitalio.DigitalInOut(board.D5)\ntlc5947 = adafruit_tlc5947.TLC5947(spi, LATCH, num_drivers=DRIVER_COUNT)\n# You can optionally disable auto_write which allows you to control when\n# channel state is written to the chip.  Normally auto_write is true and\n# will automatically write out changes as soon as they happen to a channel, but",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc5947/examples/tlc5947_chain.py",
      "library": "tlc5947",
      "type": "example",
      "file_name": "tlc5947_chain.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_tlc5947\n\n# Cycles the red pin of LED one up, then the other LED; now dims the LEDs\nboth down. Repeats with green and blue pins. Then starts all over again.\n\nHook up one RGB LED to pins 0 (red), 1 (green), and 2 (blue), AND connect\nanother RGB LED to pins 21, 22 and 23 of the last chained driver, respectively.\ndef first_last():\n    \"\"\"Cycles the red pin of LED one up, then the other LED; now dims the LEDs\n    both down. Repeats with green and blue pins. Then starts all over again.\n\n    Hook up one RGB LED to pins 0 (red), 1 (green), and 2 (blue), AND connect\n    another RGB LED to pins 21, 22 and 23 of the last chained driver, respectively.\n    \"\"\"\n    redA = tlc5947.create_pwm_out(0)\n    greenA = tlc5947.create_pwm_out(1)\n    blueA = tlc5947.create_pwm_out(2)\n    redZ = tlc5947.create_pwm_out(DRIVER_COUNT * 24 - 3)\n    greenZ = tlc5947.create_pwm_out(DRIVER_COUNT * 24 - 2)\n    blueZ = tlc5947.create_pwm_out(DRIVER_COUNT * 24 - 1)\n    step = 10\n    start_pwm = 0\n    end_pwm = 32767\n    while True:\n        for pinA, pinZ in ((redA, redZ), (greenA, greenZ), (blueA, blueZ)):\n            print('LED A up')\n            for pwm in range(start_pwm, end_pwm, step):\n                pinA.duty_cycle = pwm\n            print('LED Z up')\n            for pwm in range(start_pwm, end_pwm, step):\n                pinZ.duty_cycle = pwm\n            print('LED A and LED Z down')\n            for pwm in range(end_pwm, start_pwm, 0 - step):\n                pinA.duty_cycle = pwm\n                pinZ.duty_cycle = pwm\n\n# Usage example:\n# ----------\n# Choose here which function to try:\n# first_last()\ntest_all_channels(16)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc5947/examples/tlc5947_chain.py",
      "library": "tlc5947",
      "type": "example",
      "file_name": "tlc5947_chain.py",
      "chunk_type": "function",
      "function_name": "first_last"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_tlc5947\n\n# Loops over all available channels of all connected driver boards,\nbrightening and dimming all LEDs one after the other. With RGB LEDs,\nall each component is cycled. Repeats forever.\n\n:param step: the PWM increment in each cycle. Higher values makes cycling quicker.\ndef test_all_channels(step):\n    \"\"\"Loops over all available channels of all connected driver boards,\n    brightening and dimming all LEDs one after the other. With RGB LEDs,\n    all each component is cycled. Repeats forever.\n\n    :param step: the PWM increment in each cycle. Higher values makes cycling quicker.\n    \"\"\"\n    start_pwm = 0\n    end_pwm = 3072\n    while True:\n        for pin in range(DRIVER_COUNT * 24):\n            for pwm in range(start_pwm, end_pwm, step):\n                tlc5947[pin] = pwm\n            for pwm in range(end_pwm, start_pwm, 0 - step):\n                tlc5947[pin] = pwm\n\n# Usage example:\n# Choose here which function to try:\n# first_last()\ntest_all_channels(16)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlc5947/examples/tlc5947_chain.py",
      "library": "tlc5947",
      "type": "example",
      "file_name": "tlc5947_chain.py",
      "chunk_type": "function",
      "function_name": "test_all_channels"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_displayio_layout.widgets.cartesian import Cartesian\n\n# Fonts used for the Dial tick labels\ntick_font = terminalio.FONT\ndisplay = board.DISPLAY  # create the display on the PyPortal or Clue (for example)\n# otherwise change this to setup the display\n# for display chip driver and pinout you have (e.g. ILI9341)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_cartesian_advanced_test.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_cartesian_advanced_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_us100\n\nimport board\nimport busio\nimport adafruit_us100\nuart = busio.UART(board.TX, board.RX, baudrate=9600)\n# For use with USB-to-serial cable:\n# import serial\n# import adafruit_us100",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/us100/examples/us100_simpletest.py",
      "library": "us100",
      "type": "example",
      "file_name": "us100_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_us100\n\n# For use with Raspberry Pi/Linux:\n# import serial\n# import adafruit_us100\n# uart = serial.Serial(\"/dev/ttyS0\", baudrate=9600, timeout=1)\nus100 = adafruit_us100.US100(uart)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/us100/examples/us100_simpletest.py",
      "library": "us100",
      "type": "example",
      "file_name": "us100_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\n# For use with a microcontroller:\nimport board\nimport busio\n\nimport adafruit_us100\n\nuart = busio.UART(board.TX, board.RX, baudrate=9600)\n\n# For use with USB-to-serial cable:\n# import serial\n# import adafruit_us100\n# uart = serial.Serial(\"/dev/ttyUSB0\", baudrate=9600, timeout=1)\n\n# For use with Raspberry Pi/Linux:\n# import serial\n# import adafruit_us100\n# uart = serial.Serial(\"/dev/ttyS0\", baudrate=9600, timeout=1)\n\nus100 = adafruit_us100.US100(uart)\n\nwhile True:\n    print(\"-----\")\n    print(f\"Temperature: {us100.temperature}\u00b0C\")\n    time.sleep(0.5)\n    print(f\"Distance: {us100.distance} cm\")\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/us100/examples/us100_simpletest.py",
      "library": "us100",
      "type": "example",
      "file_name": "us100_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_lis3dh\n\n# cs = digitalio.DigitalInOut(board.D5)  # Set to correct CS pin!\n# int1 = digitalio.DigitalInOut(board.D6)  # Set to correct pin for interrupt!\n# lis3dh = adafruit_lis3dh.LIS3DH_SPI(spi, cs, int1=int1)\n# Set range of accelerometer (can be RANGE_2_G, RANGE_4_G, RANGE_8_G or RANGE_16_G).\nlis3dh.range = adafruit_lis3dh.RANGE_8_G\n# Set tap detection to double taps.  The first parameter is a value:\n#  - 0 = Disable tap detection.\n#  - 1 = Detect single taps.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3dh/examples/lis3dh_tap.py",
      "library": "lis3dh",
      "type": "example",
      "file_name": "lis3dh_tap.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_imageload\nimport board\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_digit import FlipDigit\n\nMEDIUM_LEVEL = 0.9\n# == END configuration variables ==\n# access built-in display\ndisplay = board.DISPLAY\n# group to hold our flip digit\nmain_group = Group()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipclock_flipdigit_test.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipclock_flipdigit_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_imageload\nimport board\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_digit import FlipDigit\n\nstatic_spritesheet, static_palette = adafruit_imageload.load('static_sheet.bmp')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipclock_flipdigit_test.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipclock_flipdigit_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_imageload\nimport board\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_digit import FlipDigit\n\ntop_animation_spritesheet, top_animation_palette = adafruit_imageload.load('grey_top_animation_sheet.bmp')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipclock_flipdigit_test.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipclock_flipdigit_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_imageload\nimport board\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_digit import FlipDigit\n\nbottom_animation_spritesheet, bottom_animation_palette = adafruit_imageload.load('grey_bottom_animation_sheet.bmp')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipclock_flipdigit_test.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipclock_flipdigit_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_il91874\n\n# Used to ensure the display is free in CircuitPython\n# Define the pins needed for display use on the Metro\nspi = board.SPI()\nepd_cs = board.D10\nepd_dc = board.D9\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il91874/examples/il91874_simpletest.py",
      "library": "il91874",
      "type": "example",
      "file_name": "il91874_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_il91874\n\n# Used to ensure the display is free in CircuitPython\n# Define the pins needed for display use on the Metro\nspi = board.SPI()\nepd_cs = board.D10\nepd_dc = board.D9\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il91874/examples/il91874_simpletest.py",
      "library": "il91874",
      "type": "example",
      "file_name": "il91874_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_il91874\n\n# Define the pins needed for display use on the Metro\nspi = board.SPI()\nepd_cs = board.D10\nepd_dc = board.D9\nepd_reset = board.D5\nepd_busy = board.D6\n# Create the displayio connection to the display pins",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il91874/examples/il91874_simpletest.py",
      "library": "il91874",
      "type": "example",
      "file_name": "il91874_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_il91874\n\n# Define the pins needed for display use on the Metro\nspi = board.SPI()\nepd_cs = board.D10\nepd_dc = board.D9\nepd_reset = board.D5\nepd_busy = board.D6\n# Create the displayio connection to the display pins\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il91874/examples/il91874_simpletest.py",
      "library": "il91874",
      "type": "example",
      "file_name": "il91874_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_il91874\n\n# Define the pins needed for display use on the Metro\nspi = board.SPI()\nepd_cs = board.D10\nepd_dc = board.D9\nepd_reset = board.D5\nepd_busy = board.D6\n# Create the displayio connection to the display pins\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il91874/examples/il91874_simpletest.py",
      "library": "il91874",
      "type": "example",
      "file_name": "il91874_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_il91874\n\ndisplay = adafruit_il91874.IL91874(display_bus, width=264, height=176, busy_pin=epd_busy, highlight_color=16711680, rotation=90)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il91874/examples/il91874_simpletest.py",
      "library": "il91874",
      "type": "example",
      "file_name": "il91874_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel_spi as neopixel\n\nimport board\nimport neopixel_spi as neopixel\nNUM_PIXELS = 12\nPIXEL_ORDER = neopixel.GRB\nCOLORS = (0xFF0000, 0x00FF00, 0x0000FF)\nDELAY = 0.1\nspi = board.SPI()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopixel_spi/examples/neopixel_spi_simpletest.py",
      "library": "neopixel_spi",
      "type": "example",
      "file_name": "neopixel_spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel_spi as neopixel\n\nNUM_PIXELS = 12\nPIXEL_ORDER = neopixel.GRB\nCOLORS = (0xFF0000, 0x00FF00, 0x0000FF)\nDELAY = 0.1\nspi = board.SPI()\npixels = neopixel.NeoPixel_SPI(spi, NUM_PIXELS, pixel_order=PIXEL_ORDER, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopixel_spi/examples/neopixel_spi_simpletest.py",
      "library": "neopixel_spi",
      "type": "example",
      "file_name": "neopixel_spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel_spi as neopixel\n\nCOLORS = (0xFF0000, 0x00FF00, 0x0000FF)\nDELAY = 0.1\nspi = board.SPI()\npixels = neopixel.NeoPixel_SPI(spi, NUM_PIXELS, pixel_order=PIXEL_ORDER, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopixel_spi/examples/neopixel_spi_simpletest.py",
      "library": "neopixel_spi",
      "type": "example",
      "file_name": "neopixel_spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport neopixel_spi as neopixel\n\nNUM_PIXELS = 12\nPIXEL_ORDER = neopixel.GRB\nCOLORS = (0xFF0000, 0x00FF00, 0x0000FF)\nDELAY = 0.1\n\nspi = board.SPI()\n\npixels = neopixel.NeoPixel_SPI(spi, NUM_PIXELS, pixel_order=PIXEL_ORDER, auto_write=False)\n\nwhile True:\n    for color in COLORS:\n        for i in range(NUM_PIXELS):\n            pixels[i] = color\n            pixels.show()\n            time.sleep(DELAY)\n            pixels.fill(0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopixel_spi/examples/neopixel_spi_simpletest.py",
      "library": "neopixel_spi",
      "type": "example",
      "file_name": "neopixel_spi_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom adafruit_vcnl4200 import LED_I, PS_INT, Adafruit_VCNL4200\n\nimport board\nimport busio\ni2c = board.I2C()\nsensor = Adafruit_VCNL4200(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4200/examples/vcnl4200_fulltest.py",
      "library": "vcnl4200",
      "type": "example",
      "file_name": "vcnl4200_fulltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_sht31d\n\nimport board\nimport adafruit_sht31d\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_sht31d.SHT31D(i2c)\nloopcount = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sht31/examples/sht31d_simpletest.py",
      "library": "sht31",
      "type": "example",
      "file_name": "sht31d_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_sht31d\n\nimport adafruit_sht31d\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_sht31d.SHT31D(i2c)\nloopcount = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sht31/examples/sht31d_simpletest.py",
      "library": "sht31",
      "type": "example",
      "file_name": "sht31d_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_sht31d\n\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_sht31d.SHT31D(i2c)\n\nloopcount = 0\nwhile True:\n    print(\"\\nTemperature: %0.1f C\" % sensor.temperature)\n    print(\"Humidity: %0.1f %%\" % sensor.relative_humidity)\n    loopcount += 1\n    time.sleep(2)\n    # every 10 passes turn on the heater for 1 second\n    if loopcount == 10:\n        loopcount = 0\n        sensor.heater = True\n        print(\"Sensor Heater status =\", sensor.heater)\n        time.sleep(1)\n        sensor.heater = False\n        print(\"Sensor Heater status =\", sensor.heater)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sht31/examples/sht31d_simpletest.py",
      "library": "sht31",
      "type": "example",
      "file_name": "sht31d_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_bluefruitspi import BluefruitSPI\n\nADVERT_NAME = b\"BlinkaNeoLamp\"\n# 16 neopixels on a digital pin, adjust as necessary!\npixels = neopixel.NeoPixel(board.D5, 16)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bluefruitspi/examples/bluefruitspi_neocolorpicker.py",
      "library": "bluefruitspi",
      "type": "example",
      "file_name": "bluefruitspi_neocolorpicker.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_bluefruitspi import BluefruitSPI\n\n# 16 neopixels on a digital pin, adjust as necessary!\npixels = neopixel.NeoPixel(board.D5, 16)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\ncs = DigitalInOut(board.D8)\nirq = DigitalInOut(board.D7)\nrst = DigitalInOut(board.D4)\nbluefruit = BluefruitSPI(spi_bus, cs, irq, rst, debug=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bluefruitspi/examples/bluefruitspi_neocolorpicker.py",
      "library": "bluefruitspi",
      "type": "example",
      "file_name": "bluefruitspi_neocolorpicker.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_bluefruitspi import BluefruitSPI\n\n# 16 neopixels on a digital pin, adjust as necessary!\npixels = neopixel.NeoPixel(board.D5, 16)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\ncs = DigitalInOut(board.D8)\nirq = DigitalInOut(board.D7)\nrst = DigitalInOut(board.D4)\nbluefruit = BluefruitSPI(spi_bus, cs, irq, rst, debug=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bluefruitspi/examples/bluefruitspi_neocolorpicker.py",
      "library": "bluefruitspi",
      "type": "example",
      "file_name": "bluefruitspi_neocolorpicker.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_bluefruitspi import BluefruitSPI\n\npixels = neopixel.NeoPixel(board.D5, 16)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\ncs = DigitalInOut(board.D8)\nirq = DigitalInOut(board.D7)\nrst = DigitalInOut(board.D4)\nbluefruit = BluefruitSPI(spi_bus, cs, irq, rst, debug=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bluefruitspi/examples/bluefruitspi_neocolorpicker.py",
      "library": "bluefruitspi",
      "type": "example",
      "file_name": "bluefruitspi_neocolorpicker.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_bluefruitspi import BluefruitSPI\n\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\ncs = DigitalInOut(board.D8)\nirq = DigitalInOut(board.D7)\nrst = DigitalInOut(board.D4)\nbluefruit = BluefruitSPI(spi_bus, cs, irq, rst, debug=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bluefruitspi/examples/bluefruitspi_neocolorpicker.py",
      "library": "bluefruitspi",
      "type": "example",
      "file_name": "bluefruitspi_neocolorpicker.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_bluefruitspi import BluefruitSPI\n\ndef init_bluefruit():\n    print('Initializing the Bluefruit LE SPI Friend module')\n    bluefruit.init()\n    bluefruit.command_check_OK(b'AT+FACTORYRESET', delay=1)\n    print(str(bluefruit.command_check_OK(b'ATI'), 'utf-8'))\n    bluefruit.command_check_OK(b'AT+GAPDEVNAME=' + ADVERT_NAME)\n\n# Usage example:\n    try:  # Wireless connections can have corrupt data or other runtime failures\n        # This try block will reset the module if that happens\n        init_bluefruit()\n        wait_for_connection()\n        print(\"\\n *Connected!*\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bluefruitspi/examples/bluefruitspi_neocolorpicker.py",
      "library": "bluefruitspi",
      "type": "example",
      "file_name": "bluefruitspi_neocolorpicker.py",
      "chunk_type": "function",
      "function_name": "init_bluefruit"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_bluefruitspi import BluefruitSPI\n\ndef wait_for_connection():\n    print('Waiting for a connection to Bluefruit LE Connect ...')\n    dotcount = 0\n    while not bluefruit.connected:\n        print('.', end='')\n        dotcount = (dotcount + 1) % 80\n        if dotcount == 79:\n            print('')\n        time.sleep(0.5)\n\n# Usage example:\n        # This try block will reset the module if that happens\n        init_bluefruit()\n        wait_for_connection()\n        print(\"\\n *Connected!*\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bluefruitspi/examples/bluefruitspi_neocolorpicker.py",
      "library": "bluefruitspi",
      "type": "example",
      "file_name": "bluefruitspi_neocolorpicker.py",
      "chunk_type": "function",
      "function_name": "wait_for_connection"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_bluefruitspi import BluefruitSPI\n\ndef check_connection(n_sec):\n    global connection_timestamp, is_connected\n    if not connection_timestamp or time.monotonic() - connection_timestamp > n_sec:\n        connection_timestamp = time.monotonic()\n        is_connected = bluefruit.connected\n    return is_connected\n\n# Usage example:\n\n        # Once connected, check for incoming BLE UART data\n        while check_connection(3):  # Check our connection status every 3 seconds\n            # OK we're still connected, see if we have any data waiting\n            resp = bluefruit.read_packet()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bluefruitspi/examples/bluefruitspi_neocolorpicker.py",
      "library": "bluefruitspi",
      "type": "example",
      "file_name": "bluefruitspi_neocolorpicker.py",
      "chunk_type": "function",
      "function_name": "check_connection"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_icm20x import ICM20948\n\nimport board\ncycles = 200\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nicm = ICM20948(i2c)\n# Cycle between two data rates",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/icm20x/examples/icm20x_icm20948_accel_data_rate_test.py",
      "library": "icm20x",
      "type": "example",
      "file_name": "icm20x_icm20948_accel_data_rate_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nfrom adafruit_icm20x import ICM20948\n\ncycles = 200\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nicm = ICM20948(i2c)\n\n# Cycle between two data rates\n# Best viewed in the Mu serial plotter where you can see how\n# the data rate affects the resolution of the data\nwhile True:\n    icm.accelerometer_data_rate_divisor = 0  # minimum\n    print(\"Data Rate:\", icm.accelerometer_data_rate)\n    time.sleep(2)\n    for i in range(cycles):\n        print(icm.acceleration)\n\n    icm.accelerometer_data_rate_divisor = 4095  # maximum\n    print(\"Data Rate:\", icm.accelerometer_data_rate)\n    time.sleep(2)\n    for i in range(cycles):\n        print(icm.acceleration)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/icm20x/examples/icm20x_icm20948_accel_data_rate_test.py",
      "library": "icm20x",
      "type": "example",
      "file_name": "icm20x_icm20948_accel_data_rate_test.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_tmp117\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\ntmp117 = adafruit_tmp117.TMP117(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tmp117/examples/tmp117_displayio_simpletest.py",
      "library": "tmp117",
      "type": "example",
      "file_name": "tmp117_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_tmp117\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\ntmp117 = adafruit_tmp117.TMP117(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tmp117/examples/tmp117_displayio_simpletest.py",
      "library": "tmp117",
      "type": "example",
      "file_name": "tmp117_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_tmp117\n\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tmp117/examples/tmp117_displayio_simpletest.py",
      "library": "tmp117",
      "type": "example",
      "file_name": "tmp117_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_tmp117\n\n# add the label(s) to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tmp117/examples/tmp117_displayio_simpletest.py",
      "library": "tmp117",
      "type": "example",
      "file_name": "tmp117_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble_adafruit.adafruit_service import AdafruitServerAdvertisement\nfrom adafruit_ble_adafruit.quaternion_service import QuaternionService\nfrom adafruit_bno08x import BNO08X\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nbno = BNO08X(i2c)\nquat_svc = QuaternionService()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno08x/examples/bno08x_quaternion_service.py",
      "library": "bno08x",
      "type": "example",
      "file_name": "bno08x_quaternion_service.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_header.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_header.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_header.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_header.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm9x = adafruit_rfm9x.RFM9x(spi, CS, RESET, RADIO_FREQ_MHZ)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_header.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_header.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm9x = adafruit_rfm9x.RFM9x(spi, CS, RESET, RADIO_FREQ_MHZ)\n# Wait to receive packets.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_header.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_header.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_max31856\n\nimport digitalio\nimport adafruit_max31856\n# Create sensor object, communicating over the board's default SPI bus\nspi = board.SPI()\n# allocate a CS pin and set the direction\ncs = digitalio.DigitalInOut(board.D0)\ncs.direction = digitalio.Direction.OUTPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max31856/examples/max31856_thresholds_and_faults.py",
      "library": "max31856",
      "type": "example",
      "file_name": "max31856_thresholds_and_faults.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_max31856\n\n# Create sensor object, communicating over the board's default SPI bus\nspi = board.SPI()\n# allocate a CS pin and set the direction\ncs = digitalio.DigitalInOut(board.D0)\ncs.direction = digitalio.Direction.OUTPUT\n# create a thermocouple object with the above\nthermocouple = adafruit_max31856.MAX31856(spi, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max31856/examples/max31856_thresholds_and_faults.py",
      "library": "max31856",
      "type": "example",
      "file_name": "max31856_thresholds_and_faults.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_max31856\n\n# Create sensor object, communicating over the board's default SPI bus\nspi = board.SPI()\n# allocate a CS pin and set the direction\ncs = digitalio.DigitalInOut(board.D0)\ncs.direction = digitalio.Direction.OUTPUT\n# create a thermocouple object with the above\nthermocouple = adafruit_max31856.MAX31856(spi, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max31856/examples/max31856_thresholds_and_faults.py",
      "library": "max31856",
      "type": "example",
      "file_name": "max31856_thresholds_and_faults.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_max31856\n\n# allocate a CS pin and set the direction\ncs = digitalio.DigitalInOut(board.D0)\ncs.direction = digitalio.Direction.OUTPUT\n# create a thermocouple object with the above\nthermocouple = adafruit_max31856.MAX31856(spi, cs)\n# set the temperature thresholds for the thermocouple and cold junction\nthermocouple.temperature_thresholds = (-1.5, 30.8)\nthermocouple.reference_temperature_thresholds = (-1.0, 30.5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max31856/examples/max31856_thresholds_and_faults.py",
      "library": "max31856",
      "type": "example",
      "file_name": "max31856_thresholds_and_faults.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport wifi\nfrom adafruit_io.adafruit_io import IO_HTTP\n\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_user_info.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_user_info.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport wifi\nfrom adafruit_io.adafruit_io import IO_HTTP\n\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_user_info.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_user_info.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport wifi\nfrom adafruit_io.adafruit_io import IO_HTTP\n\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)\nprint(\"===============\\nUser Rate info:\\n===============\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_user_info.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_user_info.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_bmp5xx import BMP5XX_I2C\n\nSEALEVELPRESSURE_HPA = 1013.25\n# I2C setup\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nbmp = BMP5XX_I2C(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp5xx/examples/bmp5xx_simpletest.py",
      "library": "bmp5xx",
      "type": "example",
      "file_name": "bmp5xx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2025 Tim Cocks for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\nimport time\n\nimport board\n\nfrom adafruit_bmp5xx import BMP5XX_I2C\n\nSEALEVELPRESSURE_HPA = 1013.25\n\n# I2C setup\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\nbmp = BMP5XX_I2C(i2c)\n\nbmp.sea_level_pressure = SEALEVELPRESSURE_HPA\n\nwhile True:\n    if bmp.data_ready:\n        print(\n            f\"temp F: {bmp.temperature * (9 / 5) + 32} \"\n            f\"pressure: {bmp.pressure} hPa \"\n            f\"Approx altitude: {bmp.altitude} m\"\n        )\n        time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp5xx/examples/bmp5xx_simpletest.py",
      "library": "bmp5xx",
      "type": "example",
      "file_name": "bmp5xx_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_seesaw.seesaw import Seesaw\n\nimport board\ni2c_bus = board.I2C()  # uses board.SCL and board.SDA\n# i2c_bus = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nss = Seesaw(i2c_bus, addr=0x36)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_soil_simpletest.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_soil_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nfrom adafruit_seesaw.seesaw import Seesaw\n\ni2c_bus = board.I2C()  # uses board.SCL and board.SDA\n# i2c_bus = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\nss = Seesaw(i2c_bus, addr=0x36)\n\nwhile True:\n    # read moisture level through capacitive touch pad\n    touch = ss.moisture_read()\n\n    # read temperature from the temperature sensor\n    temp = ss.get_temp()\n\n    print(\"temp: \" + str(temp) + \"  moisture: \" + str(touch))\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_soil_simpletest.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_soil_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom adafruit_progressbar.horizontalprogressbar import HorizontalFillDirection, HorizontalProgressBar\n\n# Make the display context\nsplash = displayio.Group()\nboard.DISPLAY.root_group = splash\n# set progress bar width and height relative to board's display\nwidth = board.DISPLAY.width - 40\nheight = 30",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/progressbar/examples/progressbar_simpletest.py",
      "library": "progressbar",
      "type": "example",
      "file_name": "progressbar_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom adafruit_progressbar.horizontalprogressbar import HorizontalFillDirection, HorizontalProgressBar\n\n# Make the display context\nsplash = displayio.Group()\nboard.DISPLAY.root_group = splash\n# set progress bar width and height relative to board's display\nwidth = board.DISPLAY.width - 40\nheight = 30\nx = board.DISPLAY.width // 2 - width // 2\ny = board.DISPLAY.height // 3",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/progressbar/examples/progressbar_simpletest.py",
      "library": "progressbar",
      "type": "example",
      "file_name": "progressbar_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom adafruit_progressbar.horizontalprogressbar import HorizontalFillDirection, HorizontalProgressBar\n\n# set progress bar width and height relative to board's display\nwidth = board.DISPLAY.width - 40\nheight = 30\nx = board.DISPLAY.width // 2 - width // 2\ny = board.DISPLAY.height // 3\n# Create a new progress_bar object at (x, y)\nprogress_bar = HorizontalProgressBar(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/progressbar/examples/progressbar_simpletest.py",
      "library": "progressbar",
      "type": "example",
      "file_name": "progressbar_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom adafruit_progressbar.horizontalprogressbar import HorizontalFillDirection, HorizontalProgressBar\n\n# set progress bar width and height relative to board's display\nwidth = board.DISPLAY.width - 40\nheight = 30\nx = board.DISPLAY.width // 2 - width // 2\ny = board.DISPLAY.height // 3\n# Create a new progress_bar object at (x, y)\nprogress_bar = HorizontalProgressBar(\n    (x, y), (width, height), direction=HorizontalFillDirection.LEFT_TO_RIGHT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/progressbar/examples/progressbar_simpletest.py",
      "library": "progressbar",
      "type": "example",
      "file_name": "progressbar_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mpu6050\n\nimport board\nimport adafruit_mpu6050\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmpu = adafruit_mpu6050.MPU6050(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpu6050/examples/mpu6050_simpletest.py",
      "library": "mpu6050",
      "type": "example",
      "file_name": "mpu6050_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mpu6050\n\nimport adafruit_mpu6050\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmpu = adafruit_mpu6050.MPU6050(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpu6050/examples/mpu6050_simpletest.py",
      "library": "mpu6050",
      "type": "example",
      "file_name": "mpu6050_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_mpu6050\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmpu = adafruit_mpu6050.MPU6050(i2c)\n\nwhile True:\n    print(\n        f\"Acceleration: X:{mpu.acceleration[0]:.2f}, Y: {mpu.acceleration[1]:.2f}, Z: {mpu.acceleration[2]:.2f} m/s^2\"  # noqa: E501\n    )\n    print(f\"Gyro X:{mpu.gyro[0]:.2f}, Y: {mpu.gyro[1]:.2f}, Z: {mpu.gyro[2]:.2f} rad/s\")\n    print(f\"Temperature: {mpu.temperature:.2f} C\")\n    print(\"\")\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpu6050/examples/mpu6050_simpletest.py",
      "library": "mpu6050",
      "type": "example",
      "file_name": "mpu6050_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import subprocess\nimport time\nimport busio\nfrom board import SCL, SDA\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1306\n\nimport adafruit_ssd1306\n# Create the I2C interface.\ni2c = busio.I2C(SCL, SDA)\n# Create the SSD1306 OLED class.\n# The first two parameters are the pixel width and pixel height.  Change these\n# to the right size for your display!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_stats.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_stats.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import subprocess\nimport time\nimport busio\nfrom board import SCL, SDA\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1306\n\ni2c = busio.I2C(SCL, SDA)\n# Create the SSD1306 OLED class.\n# The first two parameters are the pixel width and pixel height.  Change these\n# to the right size for your display!\ndisp = adafruit_ssd1306.SSD1306_I2C(128, 32, i2c)\n# Clear display.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1306/examples/ssd1306_stats.py",
      "library": "ssd1306",
      "type": "example",
      "file_name": "ssd1306_stats.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport board\nimport busdisplay\nimport busio\nimport digitalio\nimport displayio\nimport fourwire\nfrom adafruit_ticks import ticks_less, ticks_ms\nimport adafruit_ov5640\n\ntest_effects = False\n# Release any resources currently in use for the displays\nstate = digitalio.DigitalInOut(board.IO4)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_directio_kaluga1_3_ili9341.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_directio_kaluga1_3_ili9341.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport board\nimport busdisplay\nimport busio\nimport digitalio\nimport displayio\nimport fourwire\nfrom adafruit_ticks import ticks_less, ticks_ms\nimport adafruit_ov5640\n\nstate = digitalio.DigitalInOut(board.IO4)\nspi = busio.SPI(MOSI=board.LCD_MOSI, clock=board.LCD_CLK)\ndisplay_bus = fourwire.FourWire(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_directio_kaluga1_3_ili9341.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_directio_kaluga1_3_ili9341.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport board\nimport busdisplay\nimport busio\nimport digitalio\nimport displayio\nimport fourwire\nfrom adafruit_ticks import ticks_less, ticks_ms\nimport adafruit_ov5640\n\ndisplay_bus = fourwire.FourWire(spi, command=board.LCD_D_C, chip_select=board.LCD_CS, reset=board.LCD_RST, baudrate=80000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_directio_kaluga1_3_ili9341.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_directio_kaluga1_3_ili9341.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport board\nimport busdisplay\nimport busio\nimport digitalio\nimport displayio\nimport fourwire\nfrom adafruit_ticks import ticks_less, ticks_ms\nimport adafruit_ov5640\n\ndisplay = busdisplay.BusDisplay(display_bus, _INIT_SEQUENCE, width=320, height=240)\nbus = busio.I2C(scl=board.CAMERA_SIOC, sda=board.CAMERA_SIOD)\ncam = adafruit_ov5640.OV5640(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_directio_kaluga1_3_ili9341.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_directio_kaluga1_3_ili9341.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport board\nimport busdisplay\nimport busio\nimport digitalio\nimport displayio\nimport fourwire\nfrom adafruit_ticks import ticks_less, ticks_ms\nimport adafruit_ov5640\n\ncam = adafruit_ov5640.OV5640(bus, data_pins=board.CAMERA_DATA, clock=board.CAMERA_PCLK, vsync=board.CAMERA_VSYNC, href=board.CAMERA_HREF, mclk=board.CAMERA_XCLK, size=adafruit_ov5640.OV5640_SIZE_QVGA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_directio_kaluga1_3_ili9341.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_directio_kaluga1_3_ili9341.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport board\nimport busdisplay\nimport busio\nimport digitalio\nimport displayio\nimport fourwire\nfrom adafruit_ticks import ticks_less, ticks_ms\nimport adafruit_ov5640\n\ncam.flip_x = False\ncam.flip_y = False\nchip_id = cam.chip_id\ncam.test_pattern = False\ncam.effect = adafruit_ov5640.OV5640_SPECIAL_EFFECT_NONE\ncam.saturation = 3\nbitmap = displayio.Bitmap(cam.width, cam.height, 65536)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_directio_kaluga1_3_ili9341.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_directio_kaluga1_3_ili9341.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport board\nimport busdisplay\nimport busio\nimport digitalio\nimport displayio\nimport fourwire\nfrom adafruit_ticks import ticks_less, ticks_ms\nimport adafruit_ov5640\n\ndef special_modes(cam_obj):\n\n    def effect_modes(cam_obj):\n        for i in ['NONE', 'NEGATIVE', 'GRAYSCALE', 'RED_TINT', 'GREEN_TINT', 'BLUE_TINT', 'SEPIA']:\n            print(f'Effect {i}')\n            cam_obj.effect = getattr(adafruit_ov5640, f'OV5640_SPECIAL_EFFECT_{i}')\n            yield\n        cam_obj.effect = adafruit_ov5640.OV5640_SPECIAL_EFFECT_NONE\n\n    def saturation_modes(cam_obj):\n        for i in range(-4, 5):\n            print(f'Saturation {i}')\n            cam_obj.saturation = i\n            yield\n        cam_obj.saturation = 0\n\n    def brightness_modes(cam_obj):\n        for i in range(-4, 5):\n            print(f'Brightness {i}')\n            cam_obj.brightness = i\n            yield\n        cam_obj.brightness = 0\n\n    def contrast_modes(cam_obj):\n        for i in range(-3, 4):\n            print(f'Contrast {i}')\n            cam_obj.contrast = i\n            yield\n        cam_obj.contrast = 0\n\n    def white_balance_modes(cam_obj):\n        for i in ['AUTO', 'SUNNY', 'FLUORESCENT', 'CLOUDY', 'INCANDESCENT']:\n            print(f'White Balance {i}')\n            cam_obj.white_balance = getattr(adafruit_ov5640, f'OV5640_WHITE_BALANCE_{i}')\n            yield\n        cam_obj.white_balance = adafruit_ov5640.OV5640_WHITE_BALANCE_AUTO\n\n    def exposure_value_modes(cam_obj):\n        for i in range(-3, 4):\n            print(f'EV {i}')\n            cam_obj.exposure_value = i\n            yield\n        cam_obj.exposure_value = 0\n\n    def nite_modes(cam_obj):\n        print('Night Mode On')\n        cam_obj.night_mode = True\n        print(cam_obj.night_mode)\n        yield\n        print('Night Mode Off')\n        cam_obj.night_mode = False\n        print(cam_obj.night_mode)\n        yield\n\n    def test_modes(cam_obj):\n        print('Test pattern On')\n        cam_obj.test_pattern = True\n        yield\n        print('Test pattern Off')\n        cam_obj.test_pattern = False\n        yield\n    while True:\n        yield from test_modes(cam_obj)\n        yield from contrast_modes(cam_obj)\n        yield from effect_modes(cam_obj)\n        yield from saturation_modes(cam_obj)\n        yield from brightness_modes(cam_obj)\n\n# Usage example:\n        time_per_effect = 1500\n        deadline = ticks_ms() + time_per_effect\n        effects = special_modes(cam)\n\n    while True:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_directio_kaluga1_3_ili9341.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_directio_kaluga1_3_ili9341.py",
      "chunk_type": "function",
      "function_name": "special_modes"
    }
  },
  {
    "content": "import struct\nimport board\nimport busdisplay\nimport busio\nimport digitalio\nimport displayio\nimport fourwire\nfrom adafruit_ticks import ticks_less, ticks_ms\nimport adafruit_ov5640\n\ndef main():\n    deadline = 0\n    effects = iter((None,))\n    display.auto_refresh = False\n    display_bus.send(42, struct.pack('>hh', 0, bitmap.width - 1))\n    display_bus.send(43, struct.pack('>hh', 0, bitmap.height - 1))\n    if test_effects:\n        time_per_effect = 1500\n        deadline = ticks_ms() + time_per_effect\n        effects = special_modes(cam)\n    while True:\n        if test_effects:\n            now = ticks_ms()\n            if ticks_less(deadline, now):\n                deadline += time_per_effect\n                next(effects)\n        state.value = True\n        cam.capture(bitmap)\n        state.value = False\n        display_bus.send(44, bitmap)\n\n# Usage example:\n\n\nmain()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_directio_kaluga1_3_ili9341.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_directio_kaluga1_3_ili9341.py",
      "chunk_type": "function",
      "function_name": "main"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_fxos8700\n\nimport board\nimport adafruit_fxos8700\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_fxos8700.FXOS8700(i2c)\n# Optionally create the sensor with a different accelerometer range (the\n# default is 2G, but you can use 4G or 8G values):",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fxos8700/examples/fxos8700_simpletest.py",
      "library": "fxos8700",
      "type": "example",
      "file_name": "fxos8700_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_fxos8700\n\nimport adafruit_fxos8700\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_fxos8700.FXOS8700(i2c)\n# Optionally create the sensor with a different accelerometer range (the\n# default is 2G, but you can use 4G or 8G values):\n# sensor = adafruit_fxos8700.FXOS8700(i2c, accel_range=adafruit_fxos8700.ACCEL_RANGE_4G)\n# sensor = adafruit_fxos8700.FXOS8700(i2c, accel_range=adafruit_fxos8700.ACCEL_RANGE_8G)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fxos8700/examples/fxos8700_simpletest.py",
      "library": "fxos8700",
      "type": "example",
      "file_name": "fxos8700_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ntp\nimport rtc\nimport socketpool\nimport wifi\nimport adafruit_pycamera\n\nimport wifi\nimport adafruit_pycamera\npool = socketpool.SocketPool(wifi.radio)\nntp = adafruit_ntp.NTP(pool, tz_offset=0)\nrtc.RTC().datetime = ntp.datetime\npycam = adafruit_pycamera.PyCamera()\npycam.mode = 0  # only mode 0 (JPEG) will work in this example",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pycamera/examples/timestamp_filename/code.py",
      "library": "pycamera",
      "type": "example",
      "file_name": "code.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ntp\nimport rtc\nimport socketpool\nimport wifi\nimport adafruit_pycamera\n\npool = socketpool.SocketPool(wifi.radio)\nntp = adafruit_ntp.NTP(pool, tz_offset=0)\nrtc.RTC().datetime = ntp.datetime\npycam = adafruit_pycamera.PyCamera()\npycam.mode = 0  # only mode 0 (JPEG) will work in this example\n# User settings - try changing these:\npycam.resolution = 2  # 0-12 preset resolutions:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pycamera/examples/timestamp_filename/code.py",
      "library": "pycamera",
      "type": "example",
      "file_name": "code.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_tinylora.adafruit_tinylora import TTN, TinyLoRa\n\n# Board LED\nled = digitalio.DigitalInOut(board.D13)\nled.direction = digitalio.Direction.OUTPUT\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/tinylora/examples/tinylora_simpletest_single_channel.py",
      "library": "tinylora",
      "type": "example",
      "file_name": "tinylora_simpletest_single_channel.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_tinylora.adafruit_tinylora import TTN, TinyLoRa\n\n# Board LED\nled = digitalio.DigitalInOut(board.D13)\nled.direction = digitalio.Direction.OUTPUT\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# RFM9x Breakout Pinouts",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/tinylora/examples/tinylora_simpletest_single_channel.py",
      "library": "tinylora",
      "type": "example",
      "file_name": "tinylora_simpletest_single_channel.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_tinylora.adafruit_tinylora import TTN, TinyLoRa\n\n# Board LED\nled = digitalio.DigitalInOut(board.D13)\nled.direction = digitalio.Direction.OUTPUT\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# RFM9x Breakout Pinouts\ncs = digitalio.DigitalInOut(board.D5)\nirq = digitalio.DigitalInOut(board.D6)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/tinylora/examples/tinylora_simpletest_single_channel.py",
      "library": "tinylora",
      "type": "example",
      "file_name": "tinylora_simpletest_single_channel.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_tinylora.adafruit_tinylora import TTN, TinyLoRa\n\nled.direction = digitalio.Direction.OUTPUT\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# RFM9x Breakout Pinouts\ncs = digitalio.DigitalInOut(board.D5)\nirq = digitalio.DigitalInOut(board.D6)\nrst = digitalio.DigitalInOut(board.D4)\n# Feather M0 RFM9x Pinouts",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/tinylora/examples/tinylora_simpletest_single_channel.py",
      "library": "tinylora",
      "type": "example",
      "file_name": "tinylora_simpletest_single_channel.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_tinylora.adafruit_tinylora import TTN, TinyLoRa\n\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# RFM9x Breakout Pinouts\ncs = digitalio.DigitalInOut(board.D5)\nirq = digitalio.DigitalInOut(board.D6)\nrst = digitalio.DigitalInOut(board.D4)\n# Feather M0 RFM9x Pinouts\n# cs = digitalio.DigitalInOut(board.RFM9X_CS)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/tinylora/examples/tinylora_simpletest_single_channel.py",
      "library": "tinylora",
      "type": "example",
      "file_name": "tinylora_simpletest_single_channel.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_tinylora.adafruit_tinylora import TTN, TinyLoRa\n\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# RFM9x Breakout Pinouts\ncs = digitalio.DigitalInOut(board.D5)\nirq = digitalio.DigitalInOut(board.D6)\nrst = digitalio.DigitalInOut(board.D4)\n# Feather M0 RFM9x Pinouts\n# cs = digitalio.DigitalInOut(board.RFM9X_CS)\n# irq = digitalio.DigitalInOut(board.RFM9X_D0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/tinylora/examples/tinylora_simpletest_single_channel.py",
      "library": "tinylora",
      "type": "example",
      "file_name": "tinylora_simpletest_single_channel.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport usb_hid\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keycode import Keycode\n\nkbd = Keyboard(usb_hid.devices)\n# define buttons. these can be any physical switches/buttons, but the values\n# here work out-of-the-box with a CircuitPlayground Express' A and B buttons.\nswap = digitalio.DigitalInOut(board.D4)\nswap.direction = digitalio.Direction.INPUT\nswap.pull = digitalio.Pull.DOWN\nsearch = digitalio.DigitalInOut(board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_keyboard_shortcuts.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_keyboard_shortcuts.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport usb_hid\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keycode import Keycode\n\nkbd = Keyboard(usb_hid.devices)\n# define buttons. these can be any physical switches/buttons, but the values\n# here work out-of-the-box with a CircuitPlayground Express' A and B buttons.\nswap = digitalio.DigitalInOut(board.D4)\nswap.direction = digitalio.Direction.INPUT\nswap.pull = digitalio.Pull.DOWN\nsearch = digitalio.DigitalInOut(board.D5)\nsearch.direction = digitalio.Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_keyboard_shortcuts.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_keyboard_shortcuts.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport usb_hid\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keycode import Keycode\n\n# define buttons. these can be any physical switches/buttons, but the values\n# here work out-of-the-box with a CircuitPlayground Express' A and B buttons.\nswap = digitalio.DigitalInOut(board.D4)\nswap.direction = digitalio.Direction.INPUT\nswap.pull = digitalio.Pull.DOWN\nsearch = digitalio.DigitalInOut(board.D5)\nsearch.direction = digitalio.Direction.INPUT\nsearch.pull = digitalio.Pull.DOWN",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_keyboard_shortcuts.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_keyboard_shortcuts.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport usb_hid\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keycode import Keycode\n\n# here work out-of-the-box with a CircuitPlayground Express' A and B buttons.\nswap = digitalio.DigitalInOut(board.D4)\nswap.direction = digitalio.Direction.INPUT\nswap.pull = digitalio.Pull.DOWN\nsearch = digitalio.DigitalInOut(board.D5)\nsearch.direction = digitalio.Direction.INPUT\nsearch.pull = digitalio.Pull.DOWN",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_keyboard_shortcuts.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_keyboard_shortcuts.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport usb_hid\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keycode import Keycode\n\nswap = digitalio.DigitalInOut(board.D4)\nswap.direction = digitalio.Direction.INPUT\nswap.pull = digitalio.Pull.DOWN\nsearch = digitalio.DigitalInOut(board.D5)\nsearch.direction = digitalio.Direction.INPUT\nsearch.pull = digitalio.Pull.DOWN",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_keyboard_shortcuts.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_keyboard_shortcuts.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport usb_hid\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keycode import Keycode\n\nswap.direction = digitalio.Direction.INPUT\nswap.pull = digitalio.Pull.DOWN\nsearch = digitalio.DigitalInOut(board.D5)\nsearch.direction = digitalio.Direction.INPUT\nsearch.pull = digitalio.Pull.DOWN",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_keyboard_shortcuts.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_keyboard_shortcuts.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport digitalio\nimport usb_hid\n\nfrom adafruit_hid.keyboard import Keyboard\nfrom adafruit_hid.keycode import Keycode\n\nkbd = Keyboard(usb_hid.devices)\n\n# define buttons. these can be any physical switches/buttons, but the values\n# here work out-of-the-box with a CircuitPlayground Express' A and B buttons.\nswap = digitalio.DigitalInOut(board.D4)\nswap.direction = digitalio.Direction.INPUT\nswap.pull = digitalio.Pull.DOWN\n\nsearch = digitalio.DigitalInOut(board.D5)\nsearch.direction = digitalio.Direction.INPUT\nsearch.pull = digitalio.Pull.DOWN\n\nwhile True:\n    # press ALT+TAB to swap windows\n    if swap.value:\n        kbd.send(Keycode.ALT, Keycode.TAB)\n\n    # press CTRL+K, which in a web browser will open the search dialog\n    elif search.value:\n        kbd.send(Keycode.CONTROL, Keycode.K)\n\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_keyboard_shortcuts.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_keyboard_shortcuts.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\n\nTEXT_URL = \"http://wifitest.adafruit.com/testwifi/index.html\"\nJSON_URL = \"http://wifitest.adafruit.com/testwifi/sample.json\"\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an AirLift Shield:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_simpletest.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\n\nJSON_URL = \"http://wifitest.adafruit.com/testwifi/sample.json\"\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an AirLift Shield:\n# esp32_cs = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_simpletest.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an AirLift Shield:\n# esp32_cs = DigitalInOut(board.D10)\n# esp32_ready = DigitalInOut(board.D7)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_simpletest.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n# Secondary (SCK1) SPI used to connect to WiFi board on Arduino Nano Connect RP2040\n    spi = busio.SPI(board.SCK1, board.MOSI1, board.MISO1)\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_simpletest.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n    spi = busio.SPI(board.SCK1, board.MOSI1, board.MISO1)\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\nif esp.status == adafruit_esp32spi.WL_IDLE_STATUS:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_simpletest.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\nif esp.status == adafruit_esp32spi.WL_IDLE_STATUS:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_simpletest.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\nif esp.status == adafruit_esp32spi.WL_IDLE_STATUS:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_simpletest.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_pca9554\n\nimport digitalio\nimport adafruit_pca9554\ni2c = board.I2C()\ntft_io_expander = dict(board.TFT_IO_EXPANDER)\npcf = adafruit_pca9554.PCA9554(i2c, address=tft_io_expander[\"i2c_address\"])\nbutton_up = pcf.get_pin(board.BTN_UP)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pca9554/examples/pca9554_simpletest.py",
      "library": "pca9554",
      "type": "example",
      "file_name": "pca9554_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_pca9554\n\nimport adafruit_pca9554\ni2c = board.I2C()\ntft_io_expander = dict(board.TFT_IO_EXPANDER)\npcf = adafruit_pca9554.PCA9554(i2c, address=tft_io_expander[\"i2c_address\"])\nbutton_up = pcf.get_pin(board.BTN_UP)\nbutton_up.switch_to_input(pull=digitalio.Pull.UP)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pca9554/examples/pca9554_simpletest.py",
      "library": "pca9554",
      "type": "example",
      "file_name": "pca9554_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_pca9554\n\npcf = adafruit_pca9554.PCA9554(i2c, address=tft_io_expander['i2c_address'])",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pca9554/examples/pca9554_simpletest.py",
      "library": "pca9554",
      "type": "example",
      "file_name": "pca9554_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_pca9554\n\ni2c = board.I2C()\ntft_io_expander = dict(board.TFT_IO_EXPANDER)\npcf = adafruit_pca9554.PCA9554(i2c, address=tft_io_expander[\"i2c_address\"])\nbutton_up = pcf.get_pin(board.BTN_UP)\nbutton_up.switch_to_input(pull=digitalio.Pull.UP)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pca9554/examples/pca9554_simpletest.py",
      "library": "pca9554",
      "type": "example",
      "file_name": "pca9554_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2017 Scott Shawcroft, written for Adafruit Industries\n# SPDX-FileCopyrightText: Copyright (c) 2023 Melissa LeBlanc-Williams for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\nimport digitalio\n\nimport adafruit_pca9554\n\nboard.I2C().deinit()\ni2c = board.I2C()\ntft_io_expander = dict(board.TFT_IO_EXPANDER)\n\npcf = adafruit_pca9554.PCA9554(i2c, address=tft_io_expander[\"i2c_address\"])\nbutton_up = pcf.get_pin(board.BTN_UP)\nbutton_up.switch_to_input(pull=digitalio.Pull.UP)\n\nwhile True:\n    print(button_up.value)\n    time.sleep(0.01)  # debounce\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pca9554/examples/pca9554_simpletest.py",
      "library": "pca9554",
      "type": "example",
      "file_name": "pca9554_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nfrom adafruit_motor import stepper\nfrom adafruit_motorkit import MotorKit\n\nimport board\nkit = MotorKit(i2c=board.I2C())",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/motorkit/examples/motorkit_stepper_test.py",
      "library": "motorkit",
      "type": "example",
      "file_name": "motorkit_stepper_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_imageload\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_displayio_layout.layouts.linear_layout import LinearLayout\n\n# use built in display (PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\n# Make the display context\nmain_group = displayio.Group()\ndisplay.root_group = main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_linearlayout_simpletest.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_linearlayout_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_imageload\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_displayio_layout.layouts.linear_layout import LinearLayout\n\nicon, icon_palette = adafruit_imageload.load('icons/Play_48x48_small.bmp')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_linearlayout_simpletest.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_linearlayout_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import socket\nimport ssl\nfrom os import getenv\nfrom random import randint\nimport adafruit_requests\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\nssid = getenv(\"CIRCUITPY_WIFI_SSID\")\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\nrequests = adafruit_requests.Session(socket, ssl.create_default_context())\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_simpletest_cpython.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_cpython.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9xfsk\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_raw.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_raw.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9xfsk\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_raw.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_raw.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9xfsk\n\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\n# uncommnet the desired import and rfm initialization depending on the radio boards being used",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_raw.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_raw.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_led_animation.animation.blink import Blink\nfrom adafruit_led_animation.animation.colorcycle import ColorCycle\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_led_animation.color import JADE, PURPLE\nfrom adafruit_led_animation.sequence import AnimationSequence\nfrom adafruit_is31fl3741 import PREFER_BUFFER\nfrom adafruit_is31fl3741.adafruit_rgbmatrixqt import Adafruit_RGBMatrixQT\nfrom adafruit_is31fl3741.is31fl3741_pixelbuf import IS31FL3741_PixelBuf\n\n# i2c = board.I2C()\ni2c = board.STEMMA_I2C()\n########################################################################\n# Instantiate the nice IS31FL3741\n########################################################################",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3741/examples/is31fl3741_rgbmatrix_animation_sequence.py",
      "library": "is31fl3741",
      "type": "example",
      "file_name": "is31fl3741_rgbmatrix_animation_sequence.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport fourwire\nfrom adafruit_ili9341 import ILI9341\nimport adafruit_ov2640\n\n# Pylint is unable to see that the \"size\" property of OV2640_GrandCentral exists\n# Release any resources currently in use for the displays\nspi = busio.SPI(MOSI=board.LCD_MOSI, clock=board.LCD_CLK)\ndisplay_bus = fourwire.FourWire(\n    spi, command=board.LCD_D_C, chip_select=board.LCD_CS, reset=board.LCD_RST",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_displayio_kaluga1_3_ili9341.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_displayio_kaluga1_3_ili9341.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport fourwire\nfrom adafruit_ili9341 import ILI9341\nimport adafruit_ov2640\n\ndisplay_bus = fourwire.FourWire(spi, command=board.LCD_D_C, chip_select=board.LCD_CS, reset=board.LCD_RST)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_displayio_kaluga1_3_ili9341.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_displayio_kaluga1_3_ili9341.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport fourwire\nfrom adafruit_ili9341 import ILI9341\nimport adafruit_ov2640\n\ndisplay_bus = fourwire.FourWire(\n    spi, command=board.LCD_D_C, chip_select=board.LCD_CS, reset=board.LCD_RST\ndisplay = ILI9341(display_bus, width=320, height=240, rotation=90)\nbus = busio.I2C(scl=board.CAMERA_SIOC, sda=board.CAMERA_SIOD)\ncam = adafruit_ov2640.OV2640(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_displayio_kaluga1_3_ili9341.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_displayio_kaluga1_3_ili9341.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport fourwire\nfrom adafruit_ili9341 import ILI9341\nimport adafruit_ov2640\n\ncam = adafruit_ov2640.OV2640(bus, data_pins=board.CAMERA_DATA, clock=board.CAMERA_PCLK, vsync=board.CAMERA_VSYNC, href=board.CAMERA_HREF, mclk=board.CAMERA_XCLK, mclk_frequency=20000000, size=adafruit_ov2640.OV2640_SIZE_QVGA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_displayio_kaluga1_3_ili9341.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_displayio_kaluga1_3_ili9341.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport busio\nfrom analogio import AnalogIn\nimport adafruit_ds1841\n\n# 1 Wire connecting  VCC to RH to make a voltage divider using the\n#   internal resistor between RH and RW\n# 2 Wire connecting RW to A0\n# setup of the i2c bus giving the SCL (clock) and SDA (data) pins from the board\ni2c = busio.I2C(board.SCL, board.SDA)\n# create the ds1841 instance giving the I2C bus we just set up\nds1841 = adafruit_ds1841.DS1841(i2c)\n# set up an analog input, selecting the A0 pin",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds1841/examples/ds1841_simpletest.py",
      "library": "ds1841",
      "type": "example",
      "file_name": "ds1841_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport busio\nfrom analogio import AnalogIn\nimport adafruit_ds1841\n\n# 2 Wire connecting RW to A0\n# setup of the i2c bus giving the SCL (clock) and SDA (data) pins from the board\ni2c = busio.I2C(board.SCL, board.SDA)\n# create the ds1841 instance giving the I2C bus we just set up\nds1841 = adafruit_ds1841.DS1841(i2c)\n# set up an analog input, selecting the A0 pin\nwiper_output = AnalogIn(board.A0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds1841/examples/ds1841_simpletest.py",
      "library": "ds1841",
      "type": "example",
      "file_name": "ds1841_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport busio\nfrom analogio import AnalogIn\nimport adafruit_ds1841\n\ni2c = busio.I2C(board.SCL, board.SDA)\n# create the ds1841 instance giving the I2C bus we just set up\nds1841 = adafruit_ds1841.DS1841(i2c)\n# set up an analog input, selecting the A0 pin\nwiper_output = AnalogIn(board.A0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds1841/examples/ds1841_simpletest.py",
      "library": "ds1841",
      "type": "example",
      "file_name": "ds1841_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\nimport adafruit_il0373\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_flexible_2.9_monochrome.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_flexible_2.9_monochrome.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_flexible_2.9_monochrome.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_flexible_2.9_monochrome.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = fourwire.FourWire(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_flexible_2.9_monochrome.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_flexible_2.9_monochrome.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = fourwire.FourWire(\n    spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_flexible_2.9_monochrome.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_flexible_2.9_monochrome.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = fourwire.FourWire(\n    spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_flexible_2.9_monochrome.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_flexible_2.9_monochrome.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\ndisplay = adafruit_il0373.IL0373(display_bus, width=296, height=128, rotation=90, busy_pin=epd_busy, swap_rams=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_flexible_2.9_monochrome.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_flexible_2.9_monochrome.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_max31865\n\nimport digitalio\nimport adafruit_max31865\n# Create sensor object, communicating over the board's default SPI bus\nspi = board.SPI()\ncs = digitalio.DigitalInOut(board.D5)  # Chip select of the MAX31865 board.\nsensor = adafruit_max31865.MAX31865(spi, cs)\n# Note you can optionally provide the thermocouple RTD nominal, the reference\n# resistance, and the number of wires for the sensor (2 the default, 3, or 4)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max31865/examples/max31865_simpletest.py",
      "library": "max31865",
      "type": "example",
      "file_name": "max31865_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_max31865\n\nimport adafruit_max31865\n# Create sensor object, communicating over the board's default SPI bus\nspi = board.SPI()\ncs = digitalio.DigitalInOut(board.D5)  # Chip select of the MAX31865 board.\nsensor = adafruit_max31865.MAX31865(spi, cs)\n# Note you can optionally provide the thermocouple RTD nominal, the reference\n# resistance, and the number of wires for the sensor (2 the default, 3, or 4)\n# with keyword args:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max31865/examples/max31865_simpletest.py",
      "library": "max31865",
      "type": "example",
      "file_name": "max31865_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_max31865\n\nimport adafruit_max31865\n# Create sensor object, communicating over the board's default SPI bus\nspi = board.SPI()\ncs = digitalio.DigitalInOut(board.D5)  # Chip select of the MAX31865 board.\nsensor = adafruit_max31865.MAX31865(spi, cs)\n# Note you can optionally provide the thermocouple RTD nominal, the reference\n# resistance, and the number of wires for the sensor (2 the default, 3, or 4)\n# with keyword args:\n# sensor = adafruit_max31865.MAX31865(spi, cs, rtd_nominal=100, ref_resistor=430.0, wires=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max31865/examples/max31865_simpletest.py",
      "library": "max31865",
      "type": "example",
      "file_name": "max31865_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# Simple demo of the MAX31865 thermocouple amplifier.\n# Will print the temperature every second.\nimport time\n\nimport board\nimport digitalio\n\nimport adafruit_max31865\n\n# Create sensor object, communicating over the board's default SPI bus\nspi = board.SPI()\ncs = digitalio.DigitalInOut(board.D5)  # Chip select of the MAX31865 board.\nsensor = adafruit_max31865.MAX31865(spi, cs)\n# Note you can optionally provide the thermocouple RTD nominal, the reference\n# resistance, and the number of wires for the sensor (2 the default, 3, or 4)\n# with keyword args:\n# sensor = adafruit_max31865.MAX31865(spi, cs, rtd_nominal=100, ref_resistor=430.0, wires=2)\n\n# Main loop to print the temperature every second.\nwhile True:\n    # Read temperature.\n    temp = sensor.temperature\n    # Print the value.\n    print(f\"Temperature: {temp:0.3f}C\")\n    # Delay for a second.\n    time.sleep(1.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max31865/examples/max31865_simpletest.py",
      "library": "max31865",
      "type": "example",
      "file_name": "max31865_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport busio\nfrom adafruit_pca9685 import PCA9685\nfrom board import SCL, SDA\nfrom adafruit_motor import servo\n\ni2c = busio.I2C(SCL, SDA)\n# Create a simple PCA9685 class instance.\npca = PCA9685(i2c)\n# You can optionally provide a finer tuned reference clock speed to improve the accuracy of the",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/motor/examples/motor_pca9685_servo_sweep.py",
      "library": "motor",
      "type": "example",
      "file_name": "motor_pca9685_servo_sweep.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_seesaw import seesaw\n\nimport board\ni2c_bus = board.I2C()  # uses board.SCL and board.SDA\n# i2c_bus = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nss = seesaw.Seesaw(i2c_bus)\nvalue = ss.eeprom_read8(0x02)  # Read from address 2",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_eeprom_test.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_eeprom_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# Simple seesaw test reading and writing the internal EEPROM\n# The ATtiny8xx series has a true 128 byte EEPROM, the SAMD09 mimics it in flash with 64 bytes\n# THE LAST BYTE IS USED FOR I2C ADDRESS CHANGE!\n\nimport time\n\nimport board\n\nfrom adafruit_seesaw import seesaw\n\ni2c_bus = board.I2C()  # uses board.SCL and board.SDA\n# i2c_bus = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nss = seesaw.Seesaw(i2c_bus)\n\nvalue = ss.eeprom_read8(0x02)  # Read from address 2\nprint(\"Read 0x%02x from EEPROM address 0x02\" % value)\n\nprint(\"Incrementing value\")\nss.eeprom_write8(0x02, (value + 1) % 0xFF)\n\nvalue = ss.eeprom_read8(0x02)  # Read from address 2\nprint(\"Second read 0x%02x from EEPROM address 0x02\" % value)\n\nwhile True:\n    # Do not write EEPROM in a loop, it has 100k cycle life\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_eeprom_test.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_eeprom_test.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_pybadger import pybadger\n\n# Attempt to refresh the display. Catch 'refresh too soon' error\nand retry after waiting 10 seconds.\ndef try_refresh():\n    \"\"\"Attempt to refresh the display. Catch 'refresh too soon' error\n    and retry after waiting 10 seconds.\n    \"\"\"\n    try:\n        board.DISPLAY.refresh()\n    except RuntimeError as too_soon_error:\n        print(too_soon_error)\n        print('waiting before retry refresh()')\n        time.sleep(10)\n        board.DISPLAY.refresh()\n\n# Usage example:\npybadger.show_badge(name_string=\"Blinka\", hello_scale=2, my_name_is_scale=2, name_scale=3)\n\ntry_refresh()\n\nprint(\"after show, going to loop\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pybadger/examples/pybadger_magtag_simpletest.py",
      "library": "pybadger",
      "type": "example",
      "file_name": "pybadger_magtag_simpletest.py",
      "chunk_type": "function",
      "function_name": "try_refresh"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_pybadger import pybadger\n\nbtn_a = digitalio.DigitalInOut(board.BUTTON_A)\nbtn_a.direction = digitalio.Direction.INPUT\nbtn_a.pull = digitalio.Pull.UP\nbtn_b = digitalio.DigitalInOut(board.BUTTON_B)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pybadger/examples/pybadger_magtag_simpletest.py",
      "library": "pybadger",
      "type": "example",
      "file_name": "pybadger_magtag_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_pybadger import pybadger\n\nbtn_a = digitalio.DigitalInOut(board.BUTTON_A)\nbtn_a.direction = digitalio.Direction.INPUT\nbtn_a.pull = digitalio.Pull.UP\nbtn_b = digitalio.DigitalInOut(board.BUTTON_B)\nbtn_b.direction = digitalio.Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pybadger/examples/pybadger_magtag_simpletest.py",
      "library": "pybadger",
      "type": "example",
      "file_name": "pybadger_magtag_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_pybadger import pybadger\n\nbtn_a = digitalio.DigitalInOut(board.BUTTON_A)\nbtn_a.direction = digitalio.Direction.INPUT\nbtn_a.pull = digitalio.Pull.UP\nbtn_b = digitalio.DigitalInOut(board.BUTTON_B)\nbtn_b.direction = digitalio.Direction.INPUT\nbtn_b.pull = digitalio.Pull.UP",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pybadger/examples/pybadger_magtag_simpletest.py",
      "library": "pybadger",
      "type": "example",
      "file_name": "pybadger_magtag_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_pybadger import pybadger\n\nbtn_a = digitalio.DigitalInOut(board.BUTTON_A)\nbtn_a.direction = digitalio.Direction.INPUT\nbtn_a.pull = digitalio.Pull.UP\nbtn_b = digitalio.DigitalInOut(board.BUTTON_B)\nbtn_b.direction = digitalio.Direction.INPUT\nbtn_b.pull = digitalio.Pull.UP\nbtn_c = digitalio.DigitalInOut(board.BUTTON_C)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pybadger/examples/pybadger_magtag_simpletest.py",
      "library": "pybadger",
      "type": "example",
      "file_name": "pybadger_magtag_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_pybadger import pybadger\n\nbtn_a = digitalio.DigitalInOut(board.BUTTON_A)\nbtn_a.direction = digitalio.Direction.INPUT\nbtn_a.pull = digitalio.Pull.UP\nbtn_b = digitalio.DigitalInOut(board.BUTTON_B)\nbtn_b.direction = digitalio.Direction.INPUT\nbtn_b.pull = digitalio.Pull.UP\nbtn_c = digitalio.DigitalInOut(board.BUTTON_C)\nbtn_c.direction = digitalio.Direction.INPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pybadger/examples/pybadger_magtag_simpletest.py",
      "library": "pybadger",
      "type": "example",
      "file_name": "pybadger_magtag_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_pybadger import pybadger\n\nbtn_a.direction = digitalio.Direction.INPUT\nbtn_a.pull = digitalio.Pull.UP\nbtn_b = digitalio.DigitalInOut(board.BUTTON_B)\nbtn_b.direction = digitalio.Direction.INPUT\nbtn_b.pull = digitalio.Pull.UP\nbtn_c = digitalio.DigitalInOut(board.BUTTON_C)\nbtn_c.direction = digitalio.Direction.INPUT\nbtn_c.pull = digitalio.Pull.UP",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pybadger/examples/pybadger_magtag_simpletest.py",
      "library": "pybadger",
      "type": "example",
      "file_name": "pybadger_magtag_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_pybadger import pybadger\n\nbtn_b = digitalio.DigitalInOut(board.BUTTON_B)\nbtn_b.direction = digitalio.Direction.INPUT\nbtn_b.pull = digitalio.Pull.UP\nbtn_c = digitalio.DigitalInOut(board.BUTTON_C)\nbtn_c.direction = digitalio.Direction.INPUT\nbtn_c.pull = digitalio.Pull.UP\nprev_a = btn_a.value",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pybadger/examples/pybadger_magtag_simpletest.py",
      "library": "pybadger",
      "type": "example",
      "file_name": "pybadger_magtag_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_pybadger import pybadger\n\nbtn_b = digitalio.DigitalInOut(board.BUTTON_B)\nbtn_b.direction = digitalio.Direction.INPUT\nbtn_b.pull = digitalio.Pull.UP\nbtn_c = digitalio.DigitalInOut(board.BUTTON_C)\nbtn_c.direction = digitalio.Direction.INPUT\nbtn_c.pull = digitalio.Pull.UP\nprev_a = btn_a.value\nprev_b = btn_b.value",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pybadger/examples/pybadger_magtag_simpletest.py",
      "library": "pybadger",
      "type": "example",
      "file_name": "pybadger_magtag_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_pybadger import pybadger\n\nbtn_b.direction = digitalio.Direction.INPUT\nbtn_b.pull = digitalio.Pull.UP\nbtn_c = digitalio.DigitalInOut(board.BUTTON_C)\nbtn_c.direction = digitalio.Direction.INPUT\nbtn_c.pull = digitalio.Pull.UP\nprev_a = btn_a.value\nprev_b = btn_b.value\nprev_c = btn_c.value",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pybadger/examples/pybadger_magtag_simpletest.py",
      "library": "pybadger",
      "type": "example",
      "file_name": "pybadger_magtag_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_pcd8544\n\n# Parameters to Change\nBORDER = 5\nFONTSIZE = 10\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\ndc = digitalio.DigitalInOut(board.D6)  # data/command\ncs = digitalio.DigitalInOut(board.CE0)  # Chip select\nreset = digitalio.DigitalInOut(board.D5)  # reset",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcd8544/examples/pcd8544_pillow_demo.py",
      "library": "pcd8544",
      "type": "example",
      "file_name": "pcd8544_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_pcd8544\n\n# Parameters to Change\nBORDER = 5\nFONTSIZE = 10\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\ndc = digitalio.DigitalInOut(board.D6)  # data/command\ncs = digitalio.DigitalInOut(board.CE0)  # Chip select\nreset = digitalio.DigitalInOut(board.D5)  # reset\ndisplay = adafruit_pcd8544.PCD8544(spi, dc, cs, reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcd8544/examples/pcd8544_pillow_demo.py",
      "library": "pcd8544",
      "type": "example",
      "file_name": "pcd8544_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_pcd8544\n\nBORDER = 5\nFONTSIZE = 10\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\ndc = digitalio.DigitalInOut(board.D6)  # data/command\ncs = digitalio.DigitalInOut(board.CE0)  # Chip select\nreset = digitalio.DigitalInOut(board.D5)  # reset\ndisplay = adafruit_pcd8544.PCD8544(spi, dc, cs, reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcd8544/examples/pcd8544_pillow_demo.py",
      "library": "pcd8544",
      "type": "example",
      "file_name": "pcd8544_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_pcd8544\n\nFONTSIZE = 10\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\ndc = digitalio.DigitalInOut(board.D6)  # data/command\ncs = digitalio.DigitalInOut(board.CE0)  # Chip select\nreset = digitalio.DigitalInOut(board.D5)  # reset\ndisplay = adafruit_pcd8544.PCD8544(spi, dc, cs, reset)\n# Contrast and Brightness Settings",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcd8544/examples/pcd8544_pillow_demo.py",
      "library": "pcd8544",
      "type": "example",
      "file_name": "pcd8544_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_pcd8544\n\nspi = busio.SPI(board.SCK, MOSI=board.MOSI)\ndc = digitalio.DigitalInOut(board.D6)  # data/command\ncs = digitalio.DigitalInOut(board.CE0)  # Chip select\nreset = digitalio.DigitalInOut(board.D5)  # reset\ndisplay = adafruit_pcd8544.PCD8544(spi, dc, cs, reset)\n# Contrast and Brightness Settings\ndisplay.bias = 4\ndisplay.contrast = 60",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcd8544/examples/pcd8544_pillow_demo.py",
      "library": "pcd8544",
      "type": "example",
      "file_name": "pcd8544_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_pcd8544\n\n# Contrast and Brightness Settings\ndisplay.bias = 4\ndisplay.contrast = 60\n# Turn on the Backlight LED\nbacklight = digitalio.DigitalInOut(board.D13)  # backlight",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcd8544/examples/pcd8544_pillow_demo.py",
      "library": "pcd8544",
      "type": "example",
      "file_name": "pcd8544_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nfrom adafruit_pm25.i2c import PM25_I2C\n\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector\npm25 = PM25_I2C(i2c, reset_pin=None)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pm25/examples/pm25_displayio_simpletest.py",
      "library": "pm25",
      "type": "example",
      "file_name": "pm25_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nfrom adafruit_pm25.i2c import PM25_I2C\n\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector\npm25 = PM25_I2C(i2c, reset_pin=None)\n# Example written for boards with built-in displays\ndisplay = board.DISPLAY\n# Create a main_group to hold anything we want to show on the display.\nmain_group = Group()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pm25/examples/pm25_displayio_simpletest.py",
      "library": "pm25",
      "type": "example",
      "file_name": "pm25_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nfrom vectorio import Rectangle\nimport adafruit_imageload\n\nimport adafruit_imageload\n# built-in display\ndisplay = board.DISPLAY\n# load png image. Uncomment to try other supported formats.\nimage, palette = adafruit_imageload.load(\"images/test_image.png\")\n# image, palette = adafruit_imageload.load(\"images/test_image_grayscale.png\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_png_simpletest.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_png_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nfrom vectorio import Rectangle\nimport adafruit_imageload\n\nimage, palette = adafruit_imageload.load('images/test_image.png')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_png_simpletest.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_png_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nfrom vectorio import Rectangle\nimport adafruit_imageload\n\n# add loaded image tilegrid\n# show our group\nboard.DISPLAY.root_group = group\n# loop forever so it stays on the display",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/imageload/examples/imageload_png_simpletest.py",
      "library": "imageload",
      "type": "example",
      "file_name": "imageload_png_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport terminalio\nfrom adafruit_display_text import label\n\ntext = \"Hello world\"\ntext_area = label.Label(terminalio.FONT, text=text)\ntext_area.x = 10\ntext_area.y = 10\nboard.DISPLAY.root_group = text_area",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-text/examples/display_text_simpletest.py",
      "library": "display-text",
      "type": "example",
      "file_name": "display_text_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport terminalio\n\nfrom adafruit_display_text import label\n\ntext = \"Hello world\"\ntext_area = label.Label(terminalio.FONT, text=text)\ntext_area.x = 10\ntext_area.y = 10\nboard.DISPLAY.root_group = text_area\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-text/examples/display_text_simpletest.py",
      "library": "display-text",
      "type": "example",
      "file_name": "display_text_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_sen6x\n\nimport board\nimport adafruit_sen6x\n# Initialize I2C\ni2c = board.I2C()\n# Create SEN66 instance\nsensor = adafruit_sen6x.SEN66(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sen6x/examples/sen6x_simpletest.py",
      "library": "sen6x",
      "type": "example",
      "file_name": "sen6x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_sen6x\n\n# Initialize I2C\ni2c = board.I2C()\n# Create SEN66 instance\nsensor = adafruit_sen6x.SEN66(i2c)\n# Read sensor info",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sen6x/examples/sen6x_simpletest.py",
      "library": "sen6x",
      "type": "example",
      "file_name": "sen6x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import Color, turtle\n\nimport board\nturtle = turtle(board.DISPLAY)\nbenzsize = min(board.DISPLAY.width, board.DISPLAY.height) * 0.5",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_benzene.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_benzene.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import Color, turtle\n\nimport board\nturtle = turtle(board.DISPLAY)\nbenzsize = min(board.DISPLAY.width, board.DISPLAY.height) * 0.5",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_benzene.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_benzene.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\n\nfrom adafruit_turtle import Color, turtle\n\nturtle = turtle(board.DISPLAY)\nbenzsize = min(board.DISPLAY.width, board.DISPLAY.height) * 0.5\n\nprint(\"Turtle time! Lets draw a rainbow benzene\")\n\ncolors = (Color.RED, Color.ORANGE, Color.YELLOW, Color.GREEN, Color.BLUE, Color.PURPLE)\n\nturtle.pendown()\nstart = turtle.pos()\n\nfor x in range(benzsize):\n    turtle.pencolor(colors[x % 6])\n    turtle.forward(x)\n    turtle.left(59)\n\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_benzene.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_benzene.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8179\n\nimport adafruit_uc8179\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8179/examples/uc8179_simpletest.py",
      "library": "uc8179",
      "type": "example",
      "file_name": "uc8179_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8179\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8179/examples/uc8179_simpletest.py",
      "library": "uc8179",
      "type": "example",
      "file_name": "uc8179_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8179\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8179/examples/uc8179_simpletest.py",
      "library": "uc8179",
      "type": "example",
      "file_name": "uc8179_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8179\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8179/examples/uc8179_simpletest.py",
      "library": "uc8179",
      "type": "example",
      "file_name": "uc8179_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8179\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8179/examples/uc8179_simpletest.py",
      "library": "uc8179",
      "type": "example",
      "file_name": "uc8179_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8179\n\ndisplay = adafruit_uc8179.UC8179(display_bus, width=648, height=480, busy_pin=epd_busy, rotation=180, black_bits_inverted=True, colstart=0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8179/examples/uc8179_simpletest.py",
      "library": "uc8179",
      "type": "example",
      "file_name": "uc8179_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mpl3115a2\n\nimport board\nimport adafruit_mpl3115a2\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Initialize the MPL3115A2.\nsensor = adafruit_mpl3115a2.MPL3115A2(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpl3115a2/examples/mpl3115a2_simpletest.py",
      "library": "mpl3115a2",
      "type": "example",
      "file_name": "mpl3115a2_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mpl3115a2\n\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Initialize the MPL3115A2.\nsensor = adafruit_mpl3115a2.MPL3115A2(i2c)\n# Alternatively you can specify a different I2C address for the device:\n# sensor = adafruit_mpl3115a2.MPL3115A2(i2c, address=0x10)\n# You can configure the pressure at sealevel to get better altitude estimates.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpl3115a2/examples/mpl3115a2_simpletest.py",
      "library": "mpl3115a2",
      "type": "example",
      "file_name": "mpl3115a2_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_displayio_sh1107\n\n# oled_reset = board.D9\n# Use for I2C\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndisplay_bus = I2CDisplayBus(i2c, device_address=0x3C)\n# SH1107 is vertically oriented 64x128",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_sh1107/examples/displayio_sh1107_random_motion.py",
      "library": "displayio_sh1107",
      "type": "example",
      "file_name": "displayio_sh1107_random_motion.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_displayio_sh1107\n\n# SH1107 is vertically oriented 64x128\nWIDTH = 128\nHEIGHT = 64\nBORDER = 2\ndisplay = adafruit_displayio_sh1107.SH1107(display_bus, width=WIDTH, height=HEIGHT)\n# Make the display context\nsplash = displayio.Group()\ndisplay.root_group = splash",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_sh1107/examples/displayio_sh1107_random_motion.py",
      "library": "displayio_sh1107",
      "type": "example",
      "file_name": "displayio_sh1107_random_motion.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_tsl2591\nimport board\nimport adafruit_tca9548a\n\nimport board\nimport adafruit_tca9548a\n# Create I2C bus as normal\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Create the TCA9548A object and give it the I2C bus\ntca = adafruit_tca9548a.TCA9548A(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca9584a/examples/tca9548a_multisensor.py",
      "library": "tca9584a",
      "type": "example",
      "file_name": "tca9548a_multisensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_tsl2591\nimport board\nimport adafruit_tca9548a\n\n# Create I2C bus as normal\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Create the TCA9548A object and give it the I2C bus\ntca = adafruit_tca9548a.TCA9548A(i2c)\n# For each sensor, create it using the TCA9548A channel instead of the I2C object\ntsl1 = adafruit_tsl2591.TSL2591(tca[0])\ntsl2 = adafruit_tsl2591.TSL2591(tca[1])",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca9584a/examples/tca9548a_multisensor.py",
      "library": "tca9584a",
      "type": "example",
      "file_name": "tca9548a_multisensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_tsl2591\nimport board\nimport adafruit_tca9548a\n\n# Create the TCA9548A object and give it the I2C bus\ntca = adafruit_tca9548a.TCA9548A(i2c)\n# For each sensor, create it using the TCA9548A channel instead of the I2C object\ntsl1 = adafruit_tsl2591.TSL2591(tca[0])\ntsl2 = adafruit_tsl2591.TSL2591(tca[1])\n# After initial setup, can just use sensors as normal.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca9584a/examples/tca9548a_multisensor.py",
      "library": "tca9584a",
      "type": "example",
      "file_name": "tca9548a_multisensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_tsl2591\nimport board\nimport adafruit_tca9548a\n\n# Create the TCA9548A object and give it the I2C bus\ntca = adafruit_tca9548a.TCA9548A(i2c)\n# For each sensor, create it using the TCA9548A channel instead of the I2C object\ntsl1 = adafruit_tsl2591.TSL2591(tca[0])\ntsl2 = adafruit_tsl2591.TSL2591(tca[1])\n# After initial setup, can just use sensors as normal.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca9584a/examples/tca9548a_multisensor.py",
      "library": "tca9584a",
      "type": "example",
      "file_name": "tca9548a_multisensor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# This example shows using two TSL2491 light sensors attached to TCA9548A channels 0 and 1.\n# Use with other I2C sensors would be similar.\nimport time\n\nimport adafruit_tsl2591\nimport board\n\nimport adafruit_tca9548a\n\n# Create I2C bus as normal\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\n# Create the TCA9548A object and give it the I2C bus\ntca = adafruit_tca9548a.TCA9548A(i2c)\n\n# For each sensor, create it using the TCA9548A channel instead of the I2C object\ntsl1 = adafruit_tsl2591.TSL2591(tca[0])\ntsl2 = adafruit_tsl2591.TSL2591(tca[1])\n\n# After initial setup, can just use sensors as normal.\nwhile True:\n    print(tsl1.lux, tsl2.lux)\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca9584a/examples/tca9548a_multisensor.py",
      "library": "tca9584a",
      "type": "example",
      "file_name": "tca9548a_multisensor.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1325\n\nimport adafruit_ssd1325\nspi = board.SPI()\noled_cs = board.D5\noled_dc = board.D6\noled_reset = board.D9",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1325/examples/ssd1325_gamma.py",
      "library": "ssd1325",
      "type": "example",
      "file_name": "ssd1325_gamma.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1325\n\nimport adafruit_ssd1325\nspi = board.SPI()\noled_cs = board.D5\noled_dc = board.D6\noled_reset = board.D9\ndisplay_bus = FourWire(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1325/examples/ssd1325_gamma.py",
      "library": "ssd1325",
      "type": "example",
      "file_name": "ssd1325_gamma.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1325\n\nspi = board.SPI()\noled_cs = board.D5\noled_dc = board.D6\noled_reset = board.D9\ndisplay_bus = FourWire(\n    spi, command=oled_dc, chip_select=oled_cs, reset=oled_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1325/examples/ssd1325_gamma.py",
      "library": "ssd1325",
      "type": "example",
      "file_name": "ssd1325_gamma.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1325\n\nspi = board.SPI()\noled_cs = board.D5\noled_dc = board.D6\noled_reset = board.D9\ndisplay_bus = FourWire(\n    spi, command=oled_dc, chip_select=oled_cs, reset=oled_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1325/examples/ssd1325_gamma.py",
      "library": "ssd1325",
      "type": "example",
      "file_name": "ssd1325_gamma.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1325\n\ndisplay_bus = FourWire(\n    spi, command=oled_dc, chip_select=oled_cs, reset=oled_reset, baudrate=1000000\ndisplay = adafruit_ssd1325.SSD1325(display_bus, width=128, height=64)\ng = displayio.Group()\ndimension = min(display.width, display.height)\ncolor_count = 16",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1325/examples/ssd1325_gamma.py",
      "library": "ssd1325",
      "type": "example",
      "file_name": "ssd1325_gamma.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_adxl34x\n\nimport board\nimport adafruit_adxl34x\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# For ADXL343\naccelerometer = adafruit_adxl34x.ADXL343(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl34x/examples/adxl34x_freefall_detection_test.py",
      "library": "adxl34x",
      "type": "example",
      "file_name": "adxl34x_freefall_detection_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_adxl34x\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# For ADXL343\naccelerometer = adafruit_adxl34x.ADXL343(i2c)\n# For ADXL345\n# accelerometer = adafruit_adxl34x.ADXL345(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl34x/examples/adxl34x_freefall_detection_test.py",
      "library": "adxl34x",
      "type": "example",
      "file_name": "adxl34x_freefall_detection_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_adxl34x\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\n# For ADXL343\naccelerometer = adafruit_adxl34x.ADXL343(i2c)\n# For ADXL345\n# accelerometer = adafruit_adxl34x.ADXL345(i2c)\n\naccelerometer.enable_freefall_detection()\n# alternatively you can specify attributes when you enable freefall detection for more control:\n# accelerometer.enable_freefall_detection(threshold=10,time=25)\n\nwhile True:\n    print(\"{} {} {}\".format(*accelerometer.acceleration))\n\n    print(\"Dropped: {}\".format(accelerometer.events[\"freefall\"]))\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl34x/examples/adxl34x_freefall_detection_test.py",
      "library": "adxl34x",
      "type": "example",
      "file_name": "adxl34x_freefall_detection_test.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice\nfrom adafruit_azureiot.iot_mqtt import IoTResponse\n\n    esp32_cs = DigitalInOut(board.D13)\n    esp32_ready = DigitalInOut(board.D11)\n    esp32_reset = DigitalInOut(board.D12)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_commands.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_commands.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice\nfrom adafruit_azureiot.iot_mqtt import IoTResponse\n\n    esp32_cs = DigitalInOut(board.D13)\n    esp32_ready = DigitalInOut(board.D11)\n    esp32_reset = DigitalInOut(board.D12)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_commands.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_commands.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice\nfrom adafruit_azureiot.iot_mqtt import IoTResponse\n\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)  # Uncomment for Most Boards",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_commands.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_commands.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice\nfrom adafruit_azureiot.iot_mqtt import IoTResponse\n\n# from adafruit_esp32spi import PWMOut\n# RED_LED = PWMOut.PWMOut(esp, 26)\n# GREEN_LED = PWMOut.PWMOut(esp, 27)\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password, status_pixel=status_pixel)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_commands.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_commands.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice\nfrom adafruit_azureiot.iot_mqtt import IoTResponse\n\n# From the Adafruit CircuitPython Bundle https://github.com/adafruit/Adafruit_CircuitPython_Bundle:\n# * adafruit-circuitpython-minimqtt\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Create an IoT Hub device client and connect\ndevice = IoTCentralDevice(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_commands.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_commands.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice\nfrom adafruit_azureiot.iot_mqtt import IoTResponse\n\n# * adafruit-circuitpython-minimqtt\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Create an IoT Hub device client and connect\ndevice = IoTCentralDevice(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_commands.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_commands.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice\nfrom adafruit_azureiot.iot_mqtt import IoTResponse\n\ndef command_executed(command_name: str, payload) -> IoTResponse:\n    print('Command', command_name, 'executed with payload', str(payload))\n    return IoTResponse(200, 'OK')\n\n# Usage example:\n\n# Subscribe to the command execute event\ndevice.on_command_executed = command_executed\n\nprint(\"Connecting to Azure IoT Central...\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_commands.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_commands.py",
      "chunk_type": "function",
      "function_name": "command_executed"
    }
  },
  {
    "content": "import board\nfrom adafruit_led_animation.animation.blink import Blink\nfrom adafruit_led_animation.color import PINK\nfrom adafruit_is31fl3741 import PREFER_BUFFER\nfrom adafruit_is31fl3741.adafruit_rgbmatrixqt import Adafruit_RGBMatrixQT\nfrom adafruit_is31fl3741.is31fl3741_pixelbuf import IS31FL3741_PixelBuf\n\n# i2c = board.I2C()\ni2c = board.STEMMA_I2C()\n########################################################################\n# Instantiate the nice IS31FL3741\n########################################################################",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3741/examples/is31fl3741_rgbmatrix_led_animation.py",
      "library": "is31fl3741",
      "type": "example",
      "file_name": "is31fl3741_rgbmatrix_led_animation.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_rgb_display import st7789\nfrom adafruit_rgb_display.rgb import color565\n\n# Configuration for CS and DC pins for Raspberry Pi\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)\nreset_pin = None\nBAUDRATE = 64000000  # The pi can be very fast!\n# Create the ST7789 display:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_minipitfttest.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_minipitfttest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_rgb_display import st7789\nfrom adafruit_rgb_display.rgb import color565\n\n# Configuration for CS and DC pins for Raspberry Pi\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)\nreset_pin = None\nBAUDRATE = 64000000  # The pi can be very fast!\n# Create the ST7789 display:\ndisplay = st7789.ST7789(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_minipitfttest.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_minipitfttest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_rgb_display import st7789\nfrom adafruit_rgb_display.rgb import color565\n\ndisplay = st7789.ST7789(board.SPI(), cs=cs_pin, dc=dc_pin, rst=reset_pin, baudrate=BAUDRATE, width=135, height=240, x_offset=53, y_offset=40)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_minipitfttest.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_minipitfttest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_rgb_display import st7789\nfrom adafruit_rgb_display.rgb import color565\n\n    height=240,\n    x_offset=53,\n    y_offset=40,\nbacklight = digitalio.DigitalInOut(board.D22)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_minipitfttest.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_minipitfttest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_rgb_display import st7789\nfrom adafruit_rgb_display.rgb import color565\n\nbacklight = digitalio.DigitalInOut(board.D22)\nbacklight.value = True\nbuttonA = digitalio.DigitalInOut(board.D23)\nbuttonB = digitalio.DigitalInOut(board.D24)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_minipitfttest.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_minipitfttest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_rgb_display import st7789\nfrom adafruit_rgb_display.rgb import color565\n\nbacklight = digitalio.DigitalInOut(board.D22)\nbacklight.value = True\nbuttonA = digitalio.DigitalInOut(board.D23)\nbuttonB = digitalio.DigitalInOut(board.D24)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_minipitfttest.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_minipitfttest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nfrom adafruit_ble.advertising.standard import SolicitServicesAdvertisement\nfrom adafruit_ble_apple_media import AppleMediaService\n\n# PyLint can't find BLERadio for some reason so special case it here.\nradio = adafruit_ble.BLERadio()\na = SolicitServicesAdvertisement()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_apple_media/examples/ble_apple_media_simpletest.py",
      "library": "ble_apple_media",
      "type": "example",
      "file_name": "ble_apple_media_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_mlx90614\n\nimport adafruit_mlx90614\n# The MLX90614 only works at the default I2C bus speed of 100kHz.\n# A higher speed, such as 400kHz, will not work.\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmlx = adafruit_mlx90614.MLX90614(i2c)\n# temperature results in celsius",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90614/examples/mlx90614_simpletest.py",
      "library": "mlx90614",
      "type": "example",
      "file_name": "mlx90614_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_mlx90614\n\n# The MLX90614 only works at the default I2C bus speed of 100kHz.\n# A higher speed, such as 400kHz, will not work.\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmlx = adafruit_mlx90614.MLX90614(i2c)\n# temperature results in celsius",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90614/examples/mlx90614_simpletest.py",
      "library": "mlx90614",
      "type": "example",
      "file_name": "mlx90614_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n#  Designed specifically to work with the MLX90614 sensors in the\n#  adafruit shop\n#  ----> https://www.adafruit.com/product/1747\n#  ----> https://www.adafruit.com/product/1748\n#\n#  These sensors use I2C to communicate, 2 pins are required to\n#  interface Adafruit invests time and resources providing this open\n#  source code,\n#  please support Adafruit and open-source hardware by purchasing\n#  products from Adafruit!\n\nimport board\n\nimport adafruit_mlx90614\n\n# The MLX90614 only works at the default I2C bus speed of 100kHz.\n# A higher speed, such as 400kHz, will not work.\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmlx = adafruit_mlx90614.MLX90614(i2c)\n\n# temperature results in celsius\nprint(\"Ambent Temp: \", mlx.ambient_temperature)\nprint(\"Object Temp: \", mlx.object_temperature)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90614/examples/mlx90614_simpletest.py",
      "library": "mlx90614",
      "type": "example",
      "file_name": "mlx90614_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nfrom adafruit_pca9685 import PCA9685\n\nimport board\n# Create the I2C bus interface.\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = busio.I2C(board.GP1, board.GP0)    # Pi Pico RP2040\n# Create a simple PCA9685 class instance.\npca = PCA9685(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pca9685/examples/pca9685_simpletest.py",
      "library": "pca9685",
      "type": "example",
      "file_name": "pca9685_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# Outputs a 50% duty cycle PWM single on the 0th channel.\n# Connect an LED and resistor in series to the pin\n# to visualize duty cycle changes and its impact on brightness.\n\nimport board\n\nfrom adafruit_pca9685 import PCA9685\n\n# Create the I2C bus interface.\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = busio.I2C(board.GP1, board.GP0)    # Pi Pico RP2040\n\n# Create a simple PCA9685 class instance.\npca = PCA9685(i2c)\n\n# Set the PWM frequency to 60hz.\npca.frequency = 60\n\n# Set the PWM duty cycle for channel zero to 50%. duty_cycle is 16 bits to match other PWM objects\n# but the PCA9685 will only actually give 12 bits of resolution.\npca.channels[0].duty_cycle = 0x7FFF\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pca9685/examples/pca9685_simpletest.py",
      "library": "pca9685",
      "type": "example",
      "file_name": "pca9685_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA, FONA_3G_A, FONA_3G_E\nfrom adafruit_fona.fona_3g import FONA3G\n\n# Create a serial connection for the FONA connection\nuart = busio.UART(board.TX, board.RX)\nrst = digitalio.DigitalInOut(board.D4)\n# Use this for FONA800 and FONA808\nfona = FONA(uart, rst)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fona/examples/fona_sms.py",
      "library": "fona",
      "type": "example",
      "file_name": "fona_sms.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA, FONA_3G_A, FONA_3G_E\nfrom adafruit_fona.fona_3g import FONA3G\n\n# Create a serial connection for the FONA connection\nuart = busio.UART(board.TX, board.RX)\nrst = digitalio.DigitalInOut(board.D4)\n# Use this for FONA800 and FONA808\nfona = FONA(uart, rst)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fona/examples/fona_sms.py",
      "library": "fona",
      "type": "example",
      "file_name": "fona_sms.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport serial\nfrom PIL import Image\nimport adafruit_fingerprint\n\n# uart = serial.Serial(\"COM6\", baudrate=57600, timeout=1)\n# If using with Linux/Raspberry Pi and hardware UART:\nuart = serial.Serial(\"/dev/ttyUSB0\", baudrate=57600, timeout=1)\nfinger = adafruit_fingerprint.Adafruit_Fingerprint(uart)\n# Folder where fingerprint templates are stored\nFINGERPRINT_FOLDER = \"fingerprint/\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_template_folder_compare_with_file_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_template_folder_compare_with_file_rpi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport serial\nfrom PIL import Image\nimport adafruit_fingerprint\n\n# Prompts the user to enter a valid template number within the available range.\ndef get_num(max_num):\n    \"\"\"Prompts the user to enter a valid template number within the available range.\"\"\"\n    while True:\n        try:\n            num = int(input(f'Enter a template number (0-{max_num}): '))\n            if 0 <= num <= max_num:\n                return num\n            print(f'Please enter a number between 0 and {max_num}.')\n        except ValueError:\n            print('Invalid input. Please enter a valid number.')\n\n# Usage example:\n        match user_choice.lower():\n            case \"e\":\n                enroll_finger(get_num(finger.library_size))\n            case \"f\":\n                print_fingerprint()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_template_folder_compare_with_file_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_template_folder_compare_with_file_rpi.py",
      "chunk_type": "function",
      "function_name": "get_num"
    }
  },
  {
    "content": "import os\nimport time\nimport serial\nfrom PIL import Image\nimport adafruit_fingerprint\n\n# Get an image from the fingerprint sensor for search, process for a match.\ndef get_fingerprint():\n    \"\"\"Get an image from the fingerprint sensor for search, process for a match.\"\"\"\n    print('Waiting for finger...')\n    while finger.get_image() != adafruit_fingerprint.OK:\n        pass\n    print('Processing image...')\n    if finger.image_2_tz(1) != adafruit_fingerprint.OK:\n        print('Error processing image.')\n        return False\n    print('Searching for matches...')\n    return finger.finger_search() == adafruit_fingerprint.OK\n\n# Usage example:\ndef print_fingerprint():\n    \"\"\"Prints the fingerprint detection result.\"\"\"\n    if get_fingerprint():\n        output_finger_detected = f\"Fingerprint detected with ID #{finger.finger_id}\"\n        output_finger_confidence = f\"Confidence: {finger.confidence}\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_template_folder_compare_with_file_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_template_folder_compare_with_file_rpi.py",
      "chunk_type": "function",
      "function_name": "get_fingerprint"
    }
  },
  {
    "content": "import os\nimport time\nimport serial\nfrom PIL import Image\nimport adafruit_fingerprint\n\n# Enroll a fingerprint and store it in the specified location.\ndef enroll_finger(location):\n    \"\"\"Enroll a fingerprint and store it in the specified location.\"\"\"\n    for fingerimg in range(1, 3):\n        action = 'Place finger on sensor' if fingerimg == 1 else 'Same finger again'\n        print(action, end='')\n        while True:\n            if finger.get_image() == adafruit_fingerprint.OK:\n                print('Image captured')\n                break\n            print('.', end='')\n        print('Processing image...', end='')\n        if finger.image_2_tz(fingerimg) != adafruit_fingerprint.OK:\n            print('Error processing image.')\n            return False\n        if fingerimg == 1:\n            print('Remove finger')\n            time.sleep(1)\n            while finger.get_image() != adafruit_fingerprint.NOFINGER:\n                pass\n    print('Creating model...', end='')\n    if finger.create_model() != adafruit_fingerprint.OK:\n        print('Error creating model.')\n        return False\n    print(f'Storing model in location #{location}...', end='')\n    if finger.store_model(location) != adafruit_fingerprint.OK:\n        print('Error storing model.')\n        return False\n    print('Model stored.')\n    return True\n\n# Usage example:\n        match user_choice.lower():\n            case \"e\":\n                enroll_finger(get_num(finger.library_size))\n            case \"f\":\n                print_fingerprint()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_template_folder_compare_with_file_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_template_folder_compare_with_file_rpi.py",
      "chunk_type": "function",
      "function_name": "enroll_finger"
    }
  },
  {
    "content": "import os\nimport time\nimport serial\nfrom PIL import Image\nimport adafruit_fingerprint\n\n# Capture a fingerprint and save the image to a file.\ndef save_fingerprint_image(filename):\n    \"\"\"Capture a fingerprint and save the image to a file.\"\"\"\n    print('Waiting for finger...')\n    while finger.get_image() != adafruit_fingerprint.OK:\n        pass\n    img = Image.new('L', (256, 288), 'white')\n    pixeldata = img.load()\n    mask = 15\n    result = finger.get_fpdata(sensorbuffer='image')\n    coor_x, coor_y = (0, 0)\n    for i, value in enumerate(result):\n        if i % 100 == 0:\n            print('', end='')\n        pixeldata[coor_x, coor_y] = (int(value) >> 4) * 17\n        coor_x += 1\n        pixeldata[coor_x, coor_y] = (int(value) & mask) * 17\n        if coor_x == 255:\n            coor_x = 0\n            coor_y += 1\n        else:\n            coor_x += 1\n    img.save(filename)\n    print(f'\\nImage saved to {filename}')\n    return True\n\n# Usage example:\n                delete_fingerprint()\n            case \"s\":\n                save_fingerprint_image(f\"fingerprint_{int(time.time())}.png\")\n            case \"cf\":\n                fingerprint_check_folder()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_template_folder_compare_with_file_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_template_folder_compare_with_file_rpi.py",
      "chunk_type": "function",
      "function_name": "save_fingerprint_image"
    }
  },
  {
    "content": "import os\nimport time\nimport serial\nfrom PIL import Image\nimport adafruit_fingerprint\n\n# Capture a fingerprint, create a model, and save it to a file.\ndef enroll_save_to_file():\n    \"\"\"Capture a fingerprint, create a model, and save it to a file.\"\"\"\n    for fingerimg in range(1, 3):\n        action = 'Place finger on sensor' if fingerimg == 1 else 'Same finger again'\n        print(action, end='')\n        while True:\n            if finger.get_image() == adafruit_fingerprint.OK:\n                print('Image captured')\n                break\n            print('.', end='')\n        print('Processing image...', end='')\n        if finger.image_2_tz(fingerimg) != adafruit_fingerprint.OK:\n            print('Error processing image.')\n            return False\n        if fingerimg == 1:\n            print('Remove finger')\n            while finger.get_image() != adafruit_fingerprint.NOFINGER:\n                pass\n    print('Creating model...', end='')\n    if finger.create_model() != adafruit_fingerprint.OK:\n        print('Error creating model.')\n        return False\n    print('Storing template...')\n    data = finger.get_fpdata('char', 1)\n    filename = os.path.join(FINGERPRINT_FOLDER, f'template_{int(time.time())}.dat')\n    with open(filename, 'wb') as file:\n        file.write(bytearray(data))\n    print(f'Template saved to {filename}')\n    return True\n\n# Usage example:\n                fingerprint_check_folder()\n            case \"esf\":\n                enroll_save_to_file()\n            case \"r\":\n                reset_library()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_template_folder_compare_with_file_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_template_folder_compare_with_file_rpi.py",
      "chunk_type": "function",
      "function_name": "enroll_save_to_file"
    }
  },
  {
    "content": "import os\nimport time\nimport serial\nfrom PIL import Image\nimport adafruit_fingerprint\n\n# Compare a fingerprint with all files in the fingerprint folder.\ndef fingerprint_check_folder():\n    \"\"\"Compare a fingerprint with all files in the fingerprint folder.\"\"\"\n    print('Waiting for fingerprint...')\n    while finger.get_image() != adafruit_fingerprint.OK:\n        pass\n    print('Processing image...')\n    if finger.image_2_tz(1) != adafruit_fingerprint.OK:\n        print('Error processing image.')\n        return False\n    print('Searching for matches in the template folder...', end='')\n    found_match = False\n    matched_filename = None\n    for filename in os.listdir(FINGERPRINT_FOLDER):\n        if filename.endswith('.dat'):\n            file_path = os.path.join(FINGERPRINT_FOLDER, filename)\n            with open(file_path, 'rb') as file:\n                data = file.read()\n            finger.send_fpdata(list(data), 'char', 2)\n            if finger.compare_templates() == adafruit_fingerprint.OK:\n                matched_filename = filename\n                found_match = True\n                break\n    if found_match:\n        print(f'Fingerprint matches the template in the file {matched_filename}!')\n    else:\n        print('No match found.')\n    return found_match\n\n# Usage example:\n                save_fingerprint_image(f\"fingerprint_{int(time.time())}.png\")\n            case \"cf\":\n                fingerprint_check_folder()\n            case \"esf\":\n                enroll_save_to_file()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_template_folder_compare_with_file_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_template_folder_compare_with_file_rpi.py",
      "chunk_type": "function",
      "function_name": "fingerprint_check_folder"
    }
  },
  {
    "content": "import os\nimport time\nimport serial\nfrom PIL import Image\nimport adafruit_fingerprint\n\n# Main function to run the fingerprint enrollment and verification program.\nThis function provides a menu for the user to enroll fingerprints, search for\nfingerprints, delete templates, save fingerprint images, and reset the fingerprint library.\nIt interacts with the user via the console and performs the necessary actions based on\nuser input.\ndef main():\n    \"\"\"Main function to run the fingerprint enrollment and verification program.\n    This function provides a menu for the user to enroll fingerprints, search for\n    fingerprints, delete templates, save fingerprint images, and reset the fingerprint library.\n    It interacts with the user via the console and performs the necessary actions based on\n    user input.\n    \"\"\"\n    while True:\n        print('----------------')\n        if finger.read_templates() != adafruit_fingerprint.OK:\n            raise RuntimeError('Could not read templates.')\n        print('Stored fingerprint templates: ', finger.templates)\n        if finger.count_templates() != adafruit_fingerprint.OK:\n            raise RuntimeError('Could not count templates.')\n        print('Number of templates found: ', finger.template_count)\n        if finger.read_sysparam() != adafruit_fingerprint.OK:\n            raise RuntimeError('Could not retrieve system parameters.')\n        print('Template library size: ', finger.library_size)\n        print('Options:')\n        print('e) Enroll fingerprint')\n        print('f) Search fingerprint')\n        print('d) Delete fingerprint')\n        print('s) Save fingerprint image')\n        print('cf) Compare template with file')\n        print('esf) Enroll and save to file')\n        print('r) Reset library')\n        print('q) Exit')\n        print('----------------')\n        user_choice = input('> ')\n        match user_choice.lower():\n            case 'e':\n                enroll_finger(get_num(finger.library_size))\n            case 'f':\n                print_fingerprint()\n            case 'd':\n                delete_fingerprint()\n            case 's':\n                save_fingerprint_image(f'fingerprint_{int(time.time())}.png')\n            case 'cf':\n                fingerprint_check_folder()\n            case 'esf':\n                enroll_save_to_file()\n            case 'r':\n                reset_library()\n            case 'q':\n                exit_program()\n            case _:\n                print('Invalid option.')\n\n# Usage example:\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_template_folder_compare_with_file_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_template_folder_compare_with_file_rpi.py",
      "chunk_type": "function",
      "function_name": "main"
    }
  },
  {
    "content": "import os\nimport time\nimport serial\nfrom PIL import Image\nimport adafruit_fingerprint\n\n# Prints the fingerprint detection result.\ndef print_fingerprint():\n    \"\"\"Prints the fingerprint detection result.\"\"\"\n    if get_fingerprint():\n        output_finger_detected = f'Fingerprint detected with ID #{finger.finger_id}'\n        output_finger_confidence = f'Confidence: {finger.confidence}'\n        print(output_finger_detected)\n        print(output_finger_confidence)\n    else:\n        print('Fingerprint not found.')\n\n# Usage example:\n                enroll_finger(get_num(finger.library_size))\n            case \"f\":\n                print_fingerprint()\n            case \"d\":\n                delete_fingerprint()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_template_folder_compare_with_file_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_template_folder_compare_with_file_rpi.py",
      "chunk_type": "function",
      "function_name": "print_fingerprint"
    }
  },
  {
    "content": "import os\nimport time\nimport serial\nfrom PIL import Image\nimport adafruit_fingerprint\n\n# Deletes a fingerprint model based on user input.\ndef delete_fingerprint():\n    \"\"\"Deletes a fingerprint model based on user input.\"\"\"\n    if finger.delete_model(get_num(finger.library_size)) == adafruit_fingerprint.OK:\n        print('Deleted successfully!')\n    else:\n        print('Failed to delete.')\n\n# Usage example:\n                print_fingerprint()\n            case \"d\":\n                delete_fingerprint()\n            case \"s\":\n                save_fingerprint_image(f\"fingerprint_{int(time.time())}.png\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_template_folder_compare_with_file_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_template_folder_compare_with_file_rpi.py",
      "chunk_type": "function",
      "function_name": "delete_fingerprint"
    }
  },
  {
    "content": "import os\nimport time\nimport serial\nfrom PIL import Image\nimport adafruit_fingerprint\n\n# Resets the fingerprint library.\ndef reset_library():\n    \"\"\"Resets the fingerprint library.\"\"\"\n    if finger.empty_library() == adafruit_fingerprint.OK:\n        print('Library reset.')\n    else:\n        print('Failed to reset library.')\n\n# Usage example:\n                enroll_save_to_file()\n            case \"r\":\n                reset_library()\n            case \"q\":\n                exit_program()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_template_folder_compare_with_file_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_template_folder_compare_with_file_rpi.py",
      "chunk_type": "function",
      "function_name": "reset_library"
    }
  },
  {
    "content": "import os\nimport time\nimport serial\nfrom PIL import Image\nimport adafruit_fingerprint\n\n# Exits the program.\ndef exit_program():\n    \"\"\"Exits the program.\"\"\"\n    print('Exiting...')\n    raise SystemExit\n\n# Usage example:\n                reset_library()\n            case \"q\":\n                exit_program()\n            case _:\n                print(\"Invalid option.\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_template_folder_compare_with_file_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_template_folder_compare_with_file_rpi.py",
      "chunk_type": "function",
      "function_name": "exit_program"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_displayio_layout.layouts.grid_layout import GridLayout\n\n# use built in display (PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\n# Make the display context\nmain_group = displayio.Group()\ndisplay.root_group = main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_grid_layout_get_cell_test.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_grid_layout_get_cell_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom adafruit_ags02ma import AGS02MA\n\ni2c = busio.I2C(board.SCL, board.SDA, frequency=20000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ags02ma/examples/ags02ma_simpletest.py",
      "library": "ags02ma",
      "type": "example",
      "file_name": "ags02ma_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2017 Scott Shawcroft, written for Adafruit Industries\n# SPDX-FileCopyrightText: Copyright (c) 2022 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\nimport busio\n\nfrom adafruit_ags02ma import AGS02MA\n\n# MUST connect I2C at 20KHz! Note some processors, like SAMD21 and SAMD51\n# do not go that low...but RP2040, ESP32-S2 does\ni2c = busio.I2C(board.SCL, board.SDA, frequency=20_000)\n\nags = AGS02MA(i2c, address=0x1A)\n\n# It is possible to change the I2C address 'semi-permanently' but\n# note that you'll need to restart the script after adjusting the address!\n# ags.set_address(0x1A)\n\nwhile True:\n    try:\n        res = ags.gas_resistance\n        print(\"Gas resistance: %0.1f Kohms\" % (res / 1000))\n        tvoc = ags.TVOC\n        print(\"TVOC: %d ppb\" % tvoc)\n    except RuntimeError:\n        print(\"Retrying....\")\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ags02ma/examples/ags02ma_simpletest.py",
      "library": "ags02ma",
      "type": "example",
      "file_name": "ags02ma_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_ssd1351 import SSD1351\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = fourwire.FourWire(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1351/examples/ssd1351_simpletest.py",
      "library": "ssd1351",
      "type": "example",
      "file_name": "ssd1351_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_ssd1351 import SSD1351\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = fourwire.FourWire(\n    spi, command=tft_dc, chip_select=tft_cs, reset=board.D9, baudrate=16000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1351/examples/ssd1351_simpletest.py",
      "library": "ssd1351",
      "type": "example",
      "file_name": "ssd1351_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_ssd1351 import SSD1351\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = fourwire.FourWire(\n    spi, command=tft_dc, chip_select=tft_cs, reset=board.D9, baudrate=16000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1351/examples/ssd1351_simpletest.py",
      "library": "ssd1351",
      "type": "example",
      "file_name": "ssd1351_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_display_text import label\nfrom adafruit_ssd1351 import SSD1351\n\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9, baudrate=16000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1351/examples/ssd1351_simpletest.py",
      "library": "ssd1351",
      "type": "example",
      "file_name": "ssd1351_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_espatcontrol.adafruit_espatcontrol_socket as pool\nfrom adafruit_espatcontrol import adafruit_espatcontrol\n\nesp = adafruit_espatcontrol.ESP_ATcontrol(uart, 115200, reset_pin=resetpin, rts_pin=rtspin, debug=debugflag)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_webclient.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_webclient.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_espatcontrol.adafruit_espatcontrol_socket as pool\nfrom adafruit_espatcontrol import adafruit_espatcontrol\n\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, esp)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_webclient.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_webclient.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_espatcontrol.adafruit_espatcontrol_socket as pool\nfrom adafruit_espatcontrol import adafruit_espatcontrol\n\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, esp)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_webclient.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_webclient.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_icm20x\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nicm = adafruit_icm20x.ICM20948(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/icm20x/examples/icm20x_icm20948_displayio_simpletest.py",
      "library": "icm20x",
      "type": "example",
      "file_name": "icm20x_icm20948_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_icm20x\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nicm = adafruit_icm20x.ICM20948(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/icm20x/examples/icm20x_icm20948_displayio_simpletest.py",
      "library": "icm20x",
      "type": "example",
      "file_name": "icm20x_icm20948_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_icm20x\n\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/icm20x/examples/icm20x_icm20948_displayio_simpletest.py",
      "library": "icm20x",
      "type": "example",
      "file_name": "icm20x_icm20948_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_icm20x\n\n# add the label(s) to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/icm20x/examples/icm20x_icm20948_displayio_simpletest.py",
      "library": "icm20x",
      "type": "example",
      "file_name": "icm20x_icm20948_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom adafruit_pn532.adafruit_pn532 import MIFARE_CMD_AUTH_B\nfrom adafruit_pn532.i2c import PN532_I2C\n\n# from adafruit_pn532.spi import PN532_SPI\n# from adafruit_pn532.uart import PN532_UART\n# I2C connection:\ni2c = busio.I2C(board.SCL, board.SDA)\n# Non-hardware reset/request with I2C\npn532 = PN532_I2C(i2c, debug=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pn532/examples/pn532_readwrite_mifare.py",
      "library": "pn532",
      "type": "example",
      "file_name": "pn532_readwrite_mifare.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_pcm51xx\n\nimport adafruit_pcm51xx\n# Initialize I2C\ni2c = board.I2C()\n# Initialize PCM51xx (I2C mode only in CircuitPython)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcm51xx/examples/pcm51xx_fulltest.py",
      "library": "pcm51xx",
      "type": "example",
      "file_name": "pcm51xx_fulltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_pcm51xx\n\n# Set I2S format to I2S\npcm.i2s_format = adafruit_pcm51xx.I2S_FORMAT_I2S\n# Read and display current format\nformat_val = pcm.i2s_format\nprint(\"Current I2S format:\", end=\" \")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcm51xx/examples/pcm51xx_fulltest.py",
      "library": "pcm51xx",
      "type": "example",
      "file_name": "pcm51xx_fulltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_pcm51xx\n\n# Set I2S word length to 16-bit\npcm.i2s_size = adafruit_pcm51xx.I2S_SIZE_16BIT\n# Read and display current word length\nsize_val = pcm.i2s_size\nprint(\"Current I2S word length:\", end=\" \")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcm51xx/examples/pcm51xx_fulltest.py",
      "library": "pcm51xx",
      "type": "example",
      "file_name": "pcm51xx_fulltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_pcm51xx\n\npll_enabled = pcm.pll_enabled\n# Set PLL reference to BCK\npcm.pll_reference = adafruit_pcm51xx.PLL_REF_BCK\n# Read and display current PLL reference\npll_ref = pcm.pll_reference\nprint(\"Current PLL reference:\", end=\" \")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcm51xx/examples/pcm51xx_fulltest.py",
      "library": "pcm51xx",
      "type": "example",
      "file_name": "pcm51xx_fulltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_pcm51xx\n\n# Set DAC clock source to PLL\npcm.dac_source = adafruit_pcm51xx.DAC_CLK_PLL\n# Read and display current DAC source\ndac_source = pcm.dac_source\nprint(\"Current DAC source:\", end=\" \")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcm51xx/examples/pcm51xx_fulltest.py",
      "library": "pcm51xx",
      "type": "example",
      "file_name": "pcm51xx_fulltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel\n\nimport neopixel\n# Choose an open pin connected to the Data In of the NeoPixel strip, i.e. board.D18\n# NeoPixels must be connected to D10, D12, D18 or D21 to work.\npixel_pin = board.D18\n# The number of NeoPixels\nnum_pixels = 30",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopixel/examples/neopixel_rpi_simpletest.py",
      "library": "neopixel",
      "type": "example",
      "file_name": "neopixel_rpi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel\n\n# The number of NeoPixels\nnum_pixels = 30\n# The order of the pixel colors - RGB or GRB. Some NeoPixels have red and green reversed!\n# For RGBW NeoPixels, simply change the ORDER to RGBW or GRBW.\nORDER = neopixel.GRB\npixels = neopixel.NeoPixel(\n    pixel_pin, num_pixels, brightness=0.2, auto_write=False, pixel_order=ORDER",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopixel/examples/neopixel_rpi_simpletest.py",
      "library": "neopixel",
      "type": "example",
      "file_name": "neopixel_rpi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel\n\npixels = neopixel.NeoPixel(pixel_pin, num_pixels, brightness=0.2, auto_write=False, pixel_order=ORDER)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopixel/examples/neopixel_rpi_simpletest.py",
      "library": "neopixel",
      "type": "example",
      "file_name": "neopixel_rpi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel\n\ndef wheel(pos):\n    if pos < 0 or pos > 255:\n        r = g = b = 0\n    elif pos < 85:\n        r = int(pos * 3)\n        g = int(255 - pos * 3)\n        b = 0\n    elif pos < 170:\n        pos -= 85\n        r = int(255 - pos * 3)\n        g = 0\n        b = int(pos * 3)\n    else:\n        pos -= 170\n        r = 0\n        g = int(pos * 3)\n        b = int(255 - pos * 3)\n    return (r, g, b) if ORDER in {neopixel.RGB, neopixel.GRB} else (r, g, b, 0)\n\n# Usage example:\n        for i in range(num_pixels):\n            pixel_index = (i * 256 // num_pixels) + j\n            pixels[i] = wheel(pixel_index & 255)\n        pixels.show()\n        time.sleep(wait)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopixel/examples/neopixel_rpi_simpletest.py",
      "library": "neopixel",
      "type": "example",
      "file_name": "neopixel_rpi_simpletest.py",
      "chunk_type": "function",
      "function_name": "wheel"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel\n\ndef rainbow_cycle(wait):\n    for j in range(255):\n        for i in range(num_pixels):\n            pixel_index = i * 256 // num_pixels + j\n            pixels[i] = wheel(pixel_index & 255)\n        pixels.show()\n        time.sleep(wait)\n\n# Usage example:\n    time.sleep(1)\n\n    rainbow_cycle(0.001)  # rainbow cycle with 1ms delay per step\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopixel/examples/neopixel_rpi_simpletest.py",
      "library": "neopixel",
      "type": "example",
      "file_name": "neopixel_rpi_simpletest.py",
      "chunk_type": "function",
      "function_name": "rainbow_cycle"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_pcf8591.pcf8591 import PCF8591\n\n# Wiring:\n# Connect the DAC output to the first ADC channel, in addition to the\n# normal power and I2C connections\n#\n########################################\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = PCF8591(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8591/examples/pcf8591_dac_example.py",
      "library": "pcf8591",
      "type": "example",
      "file_name": "pcf8591_dac_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tt21100\n\nimport busio\nimport adafruit_tt21100\n# Create library object (named \"tt\") using a Bus I2C port\ni2c = busio.I2C(board.SCL, board.SDA)\ntt = adafruit_tt21100.TT21100(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tt21100/examples/tt21100_simpletest.py",
      "library": "tt21100",
      "type": "example",
      "file_name": "tt21100_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_tt21100\n\nimport adafruit_tt21100\n# Create library object (named \"tt\") using a Bus I2C port\ni2c = busio.I2C(board.SCL, board.SDA)\ntt = adafruit_tt21100.TT21100(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tt21100/examples/tt21100_simpletest.py",
      "library": "tt21100",
      "type": "example",
      "file_name": "tt21100_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2017 Scott Shawcroft, written for Adafruit Industries\n# SPDX-FileCopyrightText: Copyright (c) 2022 Scott Shawcroft for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\n\"\"\"\nExample for getting touch data from a TT21100 capacitive touch driver over I2C\n\"\"\"\n\nimport time\n\nimport board\nimport busio\n\nimport adafruit_tt21100\n\n# Create library object (named \"tt\") using a Bus I2C port\ni2c = busio.I2C(board.SCL, board.SDA)\n\ntt = adafruit_tt21100.TT21100(i2c)\n\nwhile True:\n    # if the screen is being touched print the touches\n    if tt.touched:\n        print(tt.touches)\n\n    time.sleep(0.15)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tt21100/examples/tt21100_simpletest.py",
      "library": "tt21100",
      "type": "example",
      "file_name": "tt21100_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_atecc.adafruit_atecc_cert_util as cert_utils\nfrom adafruit_atecc.adafruit_atecc import ATECC, CFG_TLS\n\nGENERATE_PRIVATE_KEY = True\n# -- END Configuration, code below -- #\n# Initialize the i2c bus\ni2c = busio.I2C(board.SCL, board.SDA, frequency=WAKE_CLK_FREQ)\n# Initialize a new atecc object\natecc = ATECC(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/atecc/examples/atecc_csr.py",
      "library": "atecc",
      "type": "example",
      "file_name": "atecc_csr.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_pcf8523.pcf8523 import PCF8523\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nrtc = PCF8523(i2c)\n# Lookup table for names of days (nicer printing).",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8523/examples/pcf8523_simpletest.py",
      "library": "pcf8523",
      "type": "example",
      "file_name": "pcf8523_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import array\nimport supervisor\nimport terminalio\nimport usb.core\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import ColorConverter, Group, OnDiskBitmap, Palette, TileGrid\nimport adafruit_usb_host_descriptors\n\n# Given a buffer and read_count return the x and y delta values\n:param buffer: A buffer containing data read from the mouse\n:param read_count: How many bytes of data were read from the mouse\n:return: tuple x,y delta values\ndef get_mouse_deltas(buffer, read_count):\n    \"\"\"\n    Given a buffer and read_count return the x and y delta values\n    :param buffer: A buffer containing data read from the mouse\n    :param read_count: How many bytes of data were read from the mouse\n    :return: tuple x,y delta values\n    \"\"\"\n    if read_count == 4:\n        delta_x = buffer[1]\n        delta_y = buffer[2]\n    elif read_count == 8:\n        delta_x = buffer[2]\n        delta_y = buffer[4]\n    else:\n        raise ValueError(f'Unsupported mouse packet size: {read_count}, must be 4 or 8')\n    return (delta_x, delta_y)\n\n# Usage example:\n\n        # there was mouse data, so get the delta x and y values from it\n        mouse_deltas = get_mouse_deltas(mouse_bufs[mouse_index], count)\n\n        # update the x position of this mouse cursor using the delta value",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/usb_host_descriptors/examples/usb_host_descriptors_two_boot_mice.py",
      "library": "usb_host_descriptors",
      "type": "example",
      "file_name": "usb_host_descriptors_two_boot_mice.py",
      "chunk_type": "function",
      "function_name": "get_mouse_deltas"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\nimport adafruit_il0373\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = busio.SPI(board.SCK, board.MOSI)  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\ndisplay_bus = fourwire.FourWire(spi, command=epd_dc, chip_select=epd_cs, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_2.9_grayscale.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_2.9_grayscale.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = busio.SPI(board.SCK, board.MOSI)  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\ndisplay_bus = fourwire.FourWire(spi, command=epd_dc, chip_select=epd_cs, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_2.9_grayscale.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_2.9_grayscale.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = busio.SPI(board.SCK, board.MOSI)  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\ndisplay_bus = fourwire.FourWire(spi, command=epd_dc, chip_select=epd_cs, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_2.9_grayscale.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_2.9_grayscale.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\ndisplay = adafruit_il0373.IL0373(display_bus, width=296, height=128, rotation=270, black_bits_inverted=False, color_bits_inverted=False, grayscale=True, refresh_time=1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_2.9_grayscale.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_2.9_grayscale.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_dacx578\n\nimport board\nimport adafruit_dacx578\ni2c = board.I2C()\ndac = adafruit_dacx578.DACx578(i2c)\n# channels are available with dac.channels[NUM]\n# with NUM being 0-7",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dacx578/examples/dacx578_simpletest.py",
      "library": "dacx578",
      "type": "example",
      "file_name": "dacx578_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_dacx578\n\nimport board\nimport adafruit_dacx578\ni2c = board.I2C()\ndac = adafruit_dacx578.DACx578(i2c)\n# channels are available with dac.channels[NUM]\n# with NUM being 0-7\ndac.channels[0].value = 65535  # 3.3V",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dacx578/examples/dacx578_simpletest.py",
      "library": "dacx578",
      "type": "example",
      "file_name": "dacx578_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2025 Liz Clark for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nimport board\n\nimport adafruit_dacx578\n\ni2c = board.I2C()\ndac = adafruit_dacx578.DACx578(i2c)\n\n# channels are available with dac.channels[NUM]\n# with NUM being 0-7\ndac.channels[0].value = 65535  # 3.3V\ndac.channels[1].value = int(65535 / 2)  # 1.65V\ndac.channels[2].value = int(65535 / 4)  # 0.825V\ndac.channels[3].value = 0\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dacx578/examples/dacx578_simpletest.py",
      "library": "dacx578",
      "type": "example",
      "file_name": "dacx578_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice\n\n    esp32_cs = DigitalInOut(board.D13)\n    esp32_ready = DigitalInOut(board.D11)\n    esp32_reset = DigitalInOut(board.D12)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_properties.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_properties.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice\n\n    esp32_cs = DigitalInOut(board.D13)\n    esp32_ready = DigitalInOut(board.D11)\n    esp32_reset = DigitalInOut(board.D12)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_properties.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_properties.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice\n\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)  # Uncomment for Most Boards",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_properties.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_properties.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice\n\n# from adafruit_esp32spi import PWMOut\n# RED_LED = PWMOut.PWMOut(esp, 26)\n# GREEN_LED = PWMOut.PWMOut(esp, 27)\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password, status_pixel=status_pixel)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_properties.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_properties.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice\n\n#\n# From the Adafruit CircuitPython Bundle https://github.com/adafruit/Adafruit_CircuitPython_Bundle:\n# * adafruit-circuitpython-minimqtt\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Create an IoT Hub device client and connect\ndevice = IoTCentralDevice(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_properties.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_properties.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice\n\n# From the Adafruit CircuitPython Bundle https://github.com/adafruit/Adafruit_CircuitPython_Bundle:\n# * adafruit-circuitpython-minimqtt\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Create an IoT Hub device client and connect\ndevice = IoTCentralDevice(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_properties.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_properties.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice\n\ndef property_changed(property_name, property_value, version):\n    print('Property', property_name, 'updated to', str(property_value), 'version', str(version))\n\n# Usage example:\n\n# Subscribe to the property changed event\ndevice.on_property_changed = property_changed\n\nprint(\"Connecting to Azure IoT Central...\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_properties.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_properties.py",
      "chunk_type": "function",
      "function_name": "property_changed"
    }
  },
  {
    "content": "import time\nimport adafruit_thermistor\nimport analogio\nimport board\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_ble.services.nordic import UARTService\n\nble = BLERadio()\nuart_server = UARTService()\nadvertisement = ProvideServicesAdvertisement(uart_server)\nthermistor = adafruit_thermistor.Thermistor(board.TEMPERATURE, 10000, 10000, 25, 3950)\nlight = analogio.AnalogIn(board.LIGHT)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_bluefruit_connect_plotter.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_bluefruit_connect_plotter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_thermistor\nimport analogio\nimport board\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_ble.services.nordic import UARTService\n\nble = BLERadio()\nuart_server = UARTService()\nadvertisement = ProvideServicesAdvertisement(uart_server)\nthermistor = adafruit_thermistor.Thermistor(board.TEMPERATURE, 10000, 10000, 25, 3950)\nlight = analogio.AnalogIn(board.LIGHT)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_bluefruit_connect_plotter.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_bluefruit_connect_plotter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_thermistor\nimport analogio\nimport board\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_ble.services.nordic import UARTService\n\n# Scale the light sensor values from 0-65535 (AnalogIn range)\nto 0-50 (arbitrarily chosen to plot well with temperature)\ndef scale(value):\n    \"\"\"Scale the light sensor values from 0-65535 (AnalogIn range)\n    to 0-50 (arbitrarily chosen to plot well with temperature)\"\"\"\n    return value / 65535 * 50\n\n# Usage example:\n\n    while ble.connected:\n        print((scale(light.value), thermistor.temperature))\n        uart_server.write(f\"{scale(light.value)},{thermistor.temperature}\\n\")\n        time.sleep(0.1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_bluefruit_connect_plotter.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_bluefruit_connect_plotter.py",
      "chunk_type": "function",
      "function_name": "scale"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Set debug to True for full JSON response.\n# WARNING: makes credentials visible\nDEBUG = False\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Requests URL - icao24 is their endpoint required for a transponder",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_openskynetwork_public.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_openskynetwork_public.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# WARNING: makes credentials visible\nDEBUG = False\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Requests URL - icao24 is their endpoint required for a transponder\n# example https://opensky-network.org/api/states/all?icao24=a808c5",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_openskynetwork_public.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_openskynetwork_public.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nDEBUG = False\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Requests URL - icao24 is their endpoint required for a transponder\n# example https://opensky-network.org/api/states/all?icao24=a808c5\nOPENSKY_SOURCE = \"https://opensky-network.org/api/states/all?\" + \"icao24=\" + TRANSPONDER",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_openskynetwork_public.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_openskynetwork_public.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Converts seconds to minutes/hours/days\ndef time_calc(input_time):\n    \"\"\"Converts seconds to minutes/hours/days\"\"\"\n    if input_time < 60:\n        return f'{input_time:.0f} seconds'\n    if input_time < 3600:\n        return f'{input_time / 60:.0f} minutes'\n    if input_time < 86400:\n        return f'{input_time / 60 / 60:.0f} hours'\n    return f'{input_time / 60 / 60 / 24:.1f} days'\n\n# Usage example:\n\n        print(\"\\nFinished!\")\n        print(f\"Board Uptime: {time_calc(time.monotonic())}\")\n        print(f\"Next Update: {time_calc(SLEEP_TIME)}\")\n        print(\"===============================\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_openskynetwork_public.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_openskynetwork_public.py",
      "chunk_type": "function",
      "function_name": "time_calc"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\ndef _format_datetime(datetime):\n    return f'{datetime.tm_mon:02}/{datetime.tm_mday:02}/{datetime.tm_year} {datetime.tm_hour:02}:{datetime.tm_min:02}:{datetime.tm_sec:02}'\n\n# Usage example:\n            # print(f\" |  | Last Contact Unix Time: {last_contact}\")\n            lc_struct_time = time.localtime(last_contact)\n            lc_readable_time = f\"{_format_datetime(lc_struct_time)}\"\n            print(f\" |  | Last Contact: {lc_readable_time}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_openskynetwork_public.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_openskynetwork_public.py",
      "chunk_type": "function",
      "function_name": "_format_datetime"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_pcf8574\n\nimport adafruit_pcf8574\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8574.PCF8574(i2c)\n# get a 'digitalio' like pin from the pcf",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8574/examples/pcf8574_buttonled.py",
      "library": "pcf8574",
      "type": "example",
      "file_name": "pcf8574_buttonled.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_pcf8574\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8574.PCF8574(i2c)\n# get a 'digitalio' like pin from the pcf\nled = pcf.get_pin(7)\nbutton = pcf.get_pin(0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8574/examples/pcf8574_buttonled.py",
      "library": "pcf8574",
      "type": "example",
      "file_name": "pcf8574_buttonled.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2017 Scott Shawcroft, written for Adafruit Industries\n# SPDX-FileCopyrightText: Copyright (c) 2022 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\nimport digitalio\n\nimport adafruit_pcf8574\n\nprint(\"PCF8574 digitalio LED + button test\")\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = adafruit_pcf8574.PCF8574(i2c)\n\n# get a 'digitalio' like pin from the pcf\nled = pcf.get_pin(7)\nbutton = pcf.get_pin(0)\n\n# Setup pin7 as an output that's at a high logic level default\nled.switch_to_output(value=True)\n# Setup pin0 as an output that's got a pullup\nbutton.switch_to_input(pull=digitalio.Pull.UP)\n\n\nwhile True:\n    led.value = button.value\n    time.sleep(0.01)  # debounce\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8574/examples/pcf8574_buttonled.py",
      "library": "pcf8574",
      "type": "example",
      "file_name": "pcf8574_buttonled.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import os\nimport adafruit_datetime as datetime\nimport board\nimport storage\nimport adafruit_floppy\n\n        flux_buffer=flux_buffer,\nf = adafruit_floppy.FloppyBlockDevice(floppy, sectors=18, flux_buffer=flux_buffer)\nvfs = storage.VfsFat(f)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/floppy/examples/floppy_vfs.py",
      "library": "floppy",
      "type": "example",
      "file_name": "floppy_vfs.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_veml7700\n\nimport board\nimport adafruit_veml7700\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nveml7700 = adafruit_veml7700.VEML7700(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/veml7700/examples/veml7700_simpletest.py",
      "library": "veml7700",
      "type": "example",
      "file_name": "veml7700_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_veml7700\n\nimport adafruit_veml7700\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nveml7700 = adafruit_veml7700.VEML7700(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/veml7700/examples/veml7700_simpletest.py",
      "library": "veml7700",
      "type": "example",
      "file_name": "veml7700_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_veml7700\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nveml7700 = adafruit_veml7700.VEML7700(i2c)\n\nwhile True:\n    print(\"Ambient light:\", veml7700.light)\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/veml7700/examples/veml7700_simpletest.py",
      "library": "veml7700",
      "type": "example",
      "file_name": "veml7700_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_veml6075\n\nimport board\nimport busio\nimport adafruit_veml6075\ni2c = busio.I2C(board.SCL, board.SDA)\nveml = adafruit_veml6075.VEML6075(i2c, integration_time=100)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/veml6075/examples/veml6075_simpletest.py",
      "library": "veml6075",
      "type": "example",
      "file_name": "veml6075_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_veml6075\n\nimport adafruit_veml6075\ni2c = busio.I2C(board.SCL, board.SDA)\nveml = adafruit_veml6075.VEML6075(i2c, integration_time=100)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/veml6075/examples/veml6075_simpletest.py",
      "library": "veml6075",
      "type": "example",
      "file_name": "veml6075_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport busio\n\nimport adafruit_veml6075\n\ni2c = busio.I2C(board.SCL, board.SDA)\n\nveml = adafruit_veml6075.VEML6075(i2c, integration_time=100)\n\nprint(\"Integration time: %d ms\" % veml.integration_time)\n\nwhile True:\n    print(veml.uv_index)\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/veml6075/examples/veml6075_simpletest.py",
      "library": "veml6075",
      "type": "example",
      "file_name": "veml6075_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_ahtx0\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = adafruit_ahtx0.AHTx0(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ahtx0/examples/ahtx0_displayio_simpletest.py",
      "library": "ahtx0",
      "type": "example",
      "file_name": "ahtx0_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_ahtx0\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = adafruit_ahtx0.AHTx0(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ahtx0/examples/ahtx0_displayio_simpletest.py",
      "library": "ahtx0",
      "type": "example",
      "file_name": "ahtx0_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_ahtx0\n\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ahtx0/examples/ahtx0_displayio_simpletest.py",
      "library": "ahtx0",
      "type": "example",
      "file_name": "ahtx0_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_ahtx0\n\n# add the label(s) to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ahtx0/examples/ahtx0_displayio_simpletest.py",
      "library": "ahtx0",
      "type": "example",
      "file_name": "ahtx0_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_location.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_location.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_location.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_location.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_location.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_location.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_location.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_location.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_location.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_location.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)  # Uncomment for Most Boards",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_location.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_location.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n# from adafruit_esp32spi import PWMOut\n# RED_LED = PWMOut.PWMOut(esp, 26)\n# GREEN_LED = PWMOut.PWMOut(esp, 27)\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password, status_pixel=status_pixel)\n# Define callback functions which will be called when certain events happen.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_location.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_location.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef connected(client):\n    print('Connected to Adafruit IO!')\n    io.subscribe('location')\n\n# Usage example:\nesp32_reset = DigitalInOut(board.ESP_RESET)\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_location.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_location.py",
      "chunk_type": "function",
      "function_name": "connected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef disconnected(client):\n    print('Disconnected from Adafruit IO!')\n\n# Usage example:\n# Connect the callback methods defined above to Adafruit IO\nio.on_connect = connected\nio.on_disconnect = disconnected\nio.on_message = message\nio.on_publish = publish",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_location.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_location.py",
      "chunk_type": "function",
      "function_name": "disconnected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef publish(client, userdata, topic, pid):\n    print(f'Published to {topic} with PID {pid}')\n    if userdata is not None:\n        print('Published User data: ', end='')\n        print(userdata)\n\n# Usage example:\n\ndef publish(client, userdata, topic, pid):\n    # This method is called when the client publishes data to a feed.\n    print(f\"Published to {topic} with PID {pid}\")\n    if userdata is not None:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_location.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_location.py",
      "chunk_type": "function",
      "function_name": "publish"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef message(client, feed_id, payload):\n    print(f'Feed {feed_id} received new value: {payload}')\n\n# Usage example:\nio.on_connect = connected\nio.on_disconnect = disconnected\nio.on_message = message\nio.on_publish = publish\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_location.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_location.py",
      "chunk_type": "function",
      "function_name": "message"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n# Connect to WiFi\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_location.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_location.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(\n    broker=\"io.adafruit.com\",",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_location.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_location.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_requests\nimport wifi\nimport adafruit_connection_manager\n\nradio = wifi.radio\n# get the pool and ssl_context from the helpers:\npool = adafruit_connection_manager.get_radio_socketpool(radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(radio)\n# get request session\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/connection_manager/examples/connectionmanager_helpers.py",
      "library": "connection_manager",
      "type": "example",
      "file_name": "connectionmanager_helpers.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_requests\nimport wifi\nimport adafruit_connection_manager\n\n# get the pool and ssl_context from the helpers:\npool = adafruit_connection_manager.get_radio_socketpool(radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(radio)\n# get request session\nrequests = adafruit_requests.Session(pool, ssl_context)\nconnection_manager = adafruit_connection_manager.get_connection_manager(pool)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/connection_manager/examples/connectionmanager_helpers.py",
      "library": "connection_manager",
      "type": "example",
      "file_name": "connectionmanager_helpers.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_requests\nimport wifi\nimport adafruit_connection_manager\n\n# get the pool and ssl_context from the helpers:\npool = adafruit_connection_manager.get_radio_socketpool(radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(radio)\n# get request session\nrequests = adafruit_requests.Session(pool, ssl_context)\nconnection_manager = adafruit_connection_manager.get_connection_manager(pool)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/connection_manager/examples/connectionmanager_helpers.py",
      "library": "connection_manager",
      "type": "example",
      "file_name": "connectionmanager_helpers.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_requests\nimport wifi\nimport adafruit_connection_manager\n\npool = adafruit_connection_manager.get_radio_socketpool(radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(radio)\n# get request session\nrequests = adafruit_requests.Session(pool, ssl_context)\nconnection_manager = adafruit_connection_manager.get_connection_manager(pool)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/connection_manager/examples/connectionmanager_helpers.py",
      "library": "connection_manager",
      "type": "example",
      "file_name": "connectionmanager_helpers.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import sys\nimport time\nimport adafruit_debouncer\n\ndef _true():\n    return True\n\n# Usage example:\n    # Set the raw state to true, update, and make sure the debounced\n    # state has not changed yet:\n    debouncer.function = _true\n    debouncer.update()\n    assertEqual(debouncer.value, False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debouncer/examples/debouncer_unittest.py",
      "library": "debouncer",
      "type": "example",
      "file_name": "debouncer_unittest.py",
      "chunk_type": "function",
      "function_name": "_true"
    }
  },
  {
    "content": "import sys\nimport time\nimport adafruit_debouncer\n\ndef _false():\n    return False\n\n# Usage example:\ndef test_back_and_forth():\n    # Start false\n    debouncer = adafruit_debouncer.Debouncer(_false)\n    assertEqual(debouncer.value, False)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debouncer/examples/debouncer_unittest.py",
      "library": "debouncer",
      "type": "example",
      "file_name": "debouncer_unittest.py",
      "chunk_type": "function",
      "function_name": "_false"
    }
  },
  {
    "content": "import sys\nimport time\nimport adafruit_debouncer\n\ndef assertEqual(var_a, var_b):\n    assert var_a == var_b, f'Want {var_a!r}, got {var_b!r}'\n\n# Usage example:\n    # Start false\n    debouncer = adafruit_debouncer.Debouncer(_false)\n    assertEqual(debouncer.value, False)\n\n    # Set the raw state to true, update, and make sure the debounced",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debouncer/examples/debouncer_unittest.py",
      "library": "debouncer",
      "type": "example",
      "file_name": "debouncer_unittest.py",
      "chunk_type": "function",
      "function_name": "assertEqual"
    }
  },
  {
    "content": "import sys\nimport time\nimport adafruit_debouncer\n\ndef test_back_and_forth():\n    debouncer = adafruit_debouncer.Debouncer(_false)\n    assertEqual(debouncer.value, False)\n    debouncer.function = _true\n    debouncer.update()\n    assertEqual(debouncer.value, False)\n    assert not debouncer.last_duration, 'There was no previous interval??'\n    time.sleep(0.02)\n    debouncer.update()\n    assert debouncer.last_duration\n    assertEqual(debouncer.value, True)\n    assertEqual(debouncer.rose, True)\n    assertEqual(debouncer.fell, False)\n    assert debouncer.current_duration < 0.1, 'Unit error? %d' % debouncer.current_duration\n    debouncer.function = _false\n    debouncer.update()\n    assertEqual(debouncer.value, True)\n    assertEqual(debouncer.fell, False)\n    assertEqual(debouncer.rose, False)\n    time.sleep(0.02)\n    assert 0.019 < debouncer.current_duration <= 1, 'Unit error? sleep .02 -> duration %d' % debouncer.current_duration\n    debouncer.update()\n    assertEqual(debouncer.value, False)\n    assertEqual(debouncer.rose, False)\n    assertEqual(debouncer.fell, True)\n    assert 0 < debouncer.current_duration <= 0.1, 'Unit error? time to run asserts %d' % debouncer.current_duration\n    assert 0 < debouncer.last_duration < 0.1, 'Unit error? Last dur should be ~.02, is %d' % debouncer.last_duration",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debouncer/examples/debouncer_unittest.py",
      "library": "debouncer",
      "type": "example",
      "file_name": "debouncer_unittest.py",
      "chunk_type": "function",
      "function_name": "test_back_and_forth"
    }
  },
  {
    "content": "import sys\nimport time\nimport adafruit_debouncer\n\ndef test_interval_is_the_same():\n    debouncer = adafruit_debouncer.Debouncer(_false, interval=0.25)\n    assertEqual(debouncer.value, False)\n    debouncer.update()\n    debouncer.function = _true\n    debouncer.update()\n    time.sleep(0.1)\n    debouncer.update()\n    assertEqual(debouncer.value, False)\n    time.sleep(0.2)\n    debouncer.update()\n    assertEqual(debouncer.value, True)\n    assertEqual(debouncer.rose, True)\n    assertEqual(debouncer.interval, 0.25)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debouncer/examples/debouncer_unittest.py",
      "library": "debouncer",
      "type": "example",
      "file_name": "debouncer_unittest.py",
      "chunk_type": "function",
      "function_name": "test_interval_is_the_same"
    }
  },
  {
    "content": "import sys\nimport time\nimport adafruit_debouncer\n\ndef test_setting_interval():\n    debouncer = adafruit_debouncer.Debouncer(_false, interval=0.01)\n    debouncer.update()\n    debouncer.function = _true\n    debouncer.interval = 0.2\n    debouncer.update()\n    assert debouncer.interval - 0.2 < 1e-05, 'interval is not consistent'\n    time.sleep(0.11)\n    debouncer.update()\n    assertEqual(debouncer.value, False)\n    assertEqual(debouncer.rose, False)\n    assertEqual(debouncer.fell, False)\n    time.sleep(0.11)\n    debouncer.update()\n    assertEqual(debouncer.value, True)\n    assertEqual(debouncer.rose, True)\n    assertEqual(debouncer.fell, False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debouncer/examples/debouncer_unittest.py",
      "library": "debouncer",
      "type": "example",
      "file_name": "debouncer_unittest.py",
      "chunk_type": "function",
      "function_name": "test_setting_interval"
    }
  },
  {
    "content": "import sys\nimport time\nimport adafruit_debouncer\n\ndef run():\n    passes = 0\n    fails = 0\n    for name, test in locals().items():\n        if name.startswith('test_') and callable(test):\n            try:\n                print()\n                print(name)\n                test()\n                print('PASS')\n                passes += 1\n            except Exception as err:\n                sys.print_exception(err)\n                print('FAIL')\n                fails += 1\n    print(passes, 'passed,', fails, 'failed')\n    if passes and (not fails):\n        print('\\n ________\\n< YATTA! >\\n --------\\n        \\\\   ^__^\\n         \\\\  (oo)\\\\_______\\n            (__)\\\\       )\\\\/\\\\\\n                ||----w |\\n                ||     ||')\n\n# Usage example:\nCopy this tests.py file to /main.py on the device\nConnect to the serial terminal (e.g. sudo screen /dev/ttyACM0 115200)\nPress Ctrl-D, if needed to start the tests running\n\"\"\"\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debouncer/examples/debouncer_unittest.py",
      "library": "debouncer",
      "type": "example",
      "file_name": "debouncer_unittest.py",
      "chunk_type": "function",
      "function_name": "run"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_si7021\n\nimport board\nimport adafruit_si7021\n# Create library object using our Bus I2C port\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_si7021.SI7021(i2c)\n# If you'd like to use the heater, you can uncomment the code below",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si7021/examples/si7021_simpletest.py",
      "library": "si7021",
      "type": "example",
      "file_name": "si7021_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_si7021\n\nimport adafruit_si7021\n# Create library object using our Bus I2C port\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_si7021.SI7021(i2c)\n# If you'd like to use the heater, you can uncomment the code below\n# and pick a heater level that works for your purposes\n#",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si7021/examples/si7021_simpletest.py",
      "library": "si7021",
      "type": "example",
      "file_name": "si7021_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nInitializes the sensor, gets and prints readings every two seconds.\n\"\"\"\n\nimport time\n\nimport board\n\nimport adafruit_si7021\n\n# Create library object using our Bus I2C port\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_si7021.SI7021(i2c)\n\n# If you'd like to use the heater, you can uncomment the code below\n# and pick a heater level that works for your purposes\n#\n# sensor.heater_enable = True\n# sensor.heater_level = 0  # Use any level from 0 to 15 inclusive\n\nwhile True:\n    print(\"\\nTemperature: %0.1f C\" % sensor.temperature)\n    print(\"Humidity: %0.1f %%\" % sensor.relative_humidity)\n    time.sleep(2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/si7021/examples/si7021_simpletest.py",
      "library": "si7021",
      "type": "example",
      "file_name": "si7021_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_socket as pool\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.adafruit_fona_gsm import GSM\nfrom adafruit_io.adafruit_io import IO_MQTT\n\napn_password = getenv(\"apn_password\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# Create a serial connection for the FONA connection\nuart = busio.UART(board.TX, board.RX)\nrst = digitalio.DigitalInOut(board.D4)\n# Initialize FONA module (this may take a few seconds)\nfona = FONA(uart, rst)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_cellular.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_cellular.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_socket as pool\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.adafruit_fona_gsm import GSM\nfrom adafruit_io.adafruit_io import IO_MQTT\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# Create a serial connection for the FONA connection\nuart = busio.UART(board.TX, board.RX)\nrst = digitalio.DigitalInOut(board.D4)\n# Initialize FONA module (this may take a few seconds)\nfona = FONA(uart, rst)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_cellular.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_cellular.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_socket as pool\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.adafruit_fona_gsm import GSM\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef connected(client):\n    print('Connected to Adafruit IO!  Listening for DemoFeed changes...')\n    client.subscribe('DemoFeed')\n\n# Usage example:\n    time.sleep(0.5)\n\nwhile not gsm.is_connected:\n    print(\"Connecting to network...\")\n    gsm.connect()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_cellular.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_cellular.py",
      "chunk_type": "function",
      "function_name": "connected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_socket as pool\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.adafruit_fona_gsm import GSM\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef subscribe(client, userdata, topic, granted_qos):\n    print(f'Subscribed to {topic} with QOS level {granted_qos}')\n\n# Usage example:\n\n# Example of using the Adafruit IO CircuitPython MQTT client\n# to subscribe to an Adafruit IO feed and publish random data\n# to be received by the feed.\nimport time",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_cellular.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_cellular.py",
      "chunk_type": "function",
      "function_name": "subscribe"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_socket as pool\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.adafruit_fona_gsm import GSM\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef unsubscribe(client, userdata, topic, pid):\n    print(f'Unsubscribed from {topic} with PID {pid}')\n\n# Usage example:\n\ndef unsubscribe(client, userdata, topic, pid):\n    # This method is called when the client unsubscribes from a feed.\n    print(f\"Unsubscribed from {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_cellular.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_cellular.py",
      "chunk_type": "function",
      "function_name": "unsubscribe"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_socket as pool\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.adafruit_fona_gsm import GSM\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef disconnected(client):\n    print('Disconnected from Adafruit IO!')\n\n# Usage example:\n# Connect the callback methods defined above to Adafruit IO\nio.on_connect = connected\nio.on_disconnect = disconnected\nio.on_subscribe = subscribe\nio.on_unsubscribe = unsubscribe",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_cellular.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_cellular.py",
      "chunk_type": "function",
      "function_name": "disconnected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_socket as pool\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.adafruit_fona_gsm import GSM\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef publish(client, userdata, topic, pid):\n    print(f'Published to {topic} with PID {pid}')\n    if userdata is not None:\n        print('Published User data: ', end='')\n        print(userdata)\n\n# Usage example:\n\n# Example of using the Adafruit IO CircuitPython MQTT client\n# to subscribe to an Adafruit IO feed and publish random data\n# to be received by the feed.\nimport time",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_cellular.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_cellular.py",
      "chunk_type": "function",
      "function_name": "publish"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_socket as pool\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.adafruit_fona_gsm import GSM\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef message(client, feed_id, payload):\n    print(f'Feed {feed_id} received new value: {payload}')\n\n# Usage example:\nio.on_subscribe = subscribe\nio.on_unsubscribe = unsubscribe\nio.on_message = message\nio.on_publish = publish\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_cellular.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_cellular.py",
      "chunk_type": "function",
      "function_name": "message"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_fona.adafruit_fona_socket as pool\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport digitalio\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.adafruit_fona_gsm import GSM\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n    # The feed_id parameter identifies the feed, and the payload parameter has\n    # the new value.\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, fona)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(\n    broker=\"io.adafruit.com\",",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_cellular.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_cellular.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef connected(client, userdata, flags, rc):\n    print(f'Connected to MQTT broker! Listening for topic changes on {default_topic}')\n    client.subscribe(default_topic)\n\n# Usage example:\n# Define callback methods which are called when events occur\ndef connected(client, userdata, flags, rc):\n    # This function will be called when the client is connected\n    # successfully to the broker.\n    print(f\"Connected to MQTT broker! Listening for topic changes on {default_topic}\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/native_networking/minimqtt_pub_sub_blocking_native_networking.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_native_networking.py",
      "chunk_type": "function",
      "function_name": "connected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef disconnected(client, userdata, rc):\n    print('Disconnected from MQTT Broker!')\n\n# Usage example:\n\ndef disconnected(client, userdata, rc):\n    # This method is called when the client is disconnected\n    print(\"Disconnected from MQTT Broker!\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/native_networking/minimqtt_pub_sub_blocking_native_networking.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_native_networking.py",
      "chunk_type": "function",
      "function_name": "disconnected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# Method callled when a client's subscribed feed has a new\nvalue.\n:param str topic: The topic of the feed with a new value.\n:param str message: The new value\ndef message(client, topic, message):\n    \"\"\"Method callled when a client's subscribed feed has a new\n    value.\n    :param str topic: The topic of the feed with a new value.\n    :param str message: The new value\n    \"\"\"\n    print(f'New message on topic {topic}: {message}')\n\n# Usage example:\n    value.\n    :param str topic: The topic of the feed with a new value.\n    :param str message: The new value\n    \"\"\"\n    print(f\"New message on topic {topic}: {message}\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/native_networking/minimqtt_pub_sub_blocking_native_networking.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_native_networking.py",
      "chunk_type": "function",
      "function_name": "message"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# Create a socket pool and ssl_context\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\n# If you need to use certificate/key pair authentication (e.g. X.509), you can load them in the\n# ssl context by uncommenting the lines below and adding the following keys to your settings.toml:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/native_networking/minimqtt_pub_sub_blocking_native_networking.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_native_networking.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# Create a socket pool and ssl_context\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\n# If you need to use certificate/key pair authentication (e.g. X.509), you can load them in the\n# ssl context by uncommenting the lines below and adding the following keys to your settings.toml:\n# \"device_cert_path\" - Path to the Device Certificate",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/native_networking/minimqtt_pub_sub_blocking_native_networking.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_pub_sub_blocking_native_networking.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport adafruit_miniqr\n\ndef bitmap_QR(matrix):\n    BORDER_PIXELS = 2\n    bitmap = displayio.Bitmap(matrix.width + 2 * BORDER_PIXELS, matrix.height + 2 * BORDER_PIXELS, 2)\n    for y in range(matrix.height):\n        for x in range(matrix.width):\n            if matrix[x, y]:\n                bitmap[x + BORDER_PIXELS, y + BORDER_PIXELS] = 1\n            else:\n                bitmap[x + BORDER_PIXELS, y + BORDER_PIXELS] = 0\n    return bitmap\n\n# Usage example:\n\n# generate the 1-pixel-per-bit bitmap\nqr_bitmap = bitmap_QR(qr.matrix)\n# We'll draw with a classic black/white palette\npalette = displayio.Palette(2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniqr/examples/miniqr_displaytest.py",
      "library": "miniqr",
      "type": "example",
      "file_name": "miniqr_displaytest.py",
      "chunk_type": "function",
      "function_name": "bitmap_QR"
    }
  },
  {
    "content": "import board\nimport displayio\nimport adafruit_miniqr\n\n                bitmap[x + BORDER_PIXELS, y + BORDER_PIXELS] = 0\nqr = adafruit_miniqr.QRCode(qr_type=3, error_correct=adafruit_miniqr.L)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniqr/examples/miniqr_displaytest.py",
      "library": "miniqr",
      "type": "example",
      "file_name": "miniqr_displaytest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport adafruit_miniqr\n\n# We'll draw with a classic black/white palette\npalette = displayio.Palette(2)\npalette[0] = 0xFFFFFF\npalette[1] = 0x000000\n# we'll scale the QR code as big as the display can handle\nscale = min(board.DISPLAY.width // qr_bitmap.width, board.DISPLAY.height // qr_bitmap.height)\n# then center it!\npos_x = int(((board.DISPLAY.width / scale) - qr_bitmap.width) / 2)\npos_y = int(((board.DISPLAY.height / scale) - qr_bitmap.height) / 2)\nqr_img = displayio.TileGrid(qr_bitmap, pixel_shader=palette, x=pos_x, y=pos_y)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniqr/examples/miniqr_displaytest.py",
      "library": "miniqr",
      "type": "example",
      "file_name": "miniqr_displaytest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport adafruit_miniqr\n\npos_x = int((board.DISPLAY.width / scale - qr_bitmap.width) / 2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniqr/examples/miniqr_displaytest.py",
      "library": "miniqr",
      "type": "example",
      "file_name": "miniqr_displaytest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport adafruit_miniqr\n\npos_y = int((board.DISPLAY.height / scale - qr_bitmap.height) / 2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniqr/examples/miniqr_displaytest.py",
      "library": "miniqr",
      "type": "example",
      "file_name": "miniqr_displaytest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport adafruit_miniqr\n\npos_y = int(((board.DISPLAY.height / scale) - qr_bitmap.height) / 2)\nqr_img = displayio.TileGrid(qr_bitmap, pixel_shader=palette, x=pos_x, y=pos_y)\nsplash = displayio.Group(scale=scale)\nboard.DISPLAY.root_group = splash\n# Hang out forever",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/miniqr/examples/miniqr_displaytest.py",
      "library": "miniqr",
      "type": "example",
      "file_name": "miniqr_displaytest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport touchio\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_dash_display import Hub\n\nup = DigitalInOut(board.BUTTON_UP)\nup.direction = Direction.INPUT\nup.pull = Pull.DOWN\nselect = DigitalInOut(board.BUTTON_SELECT)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_simpletest.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "dash_display_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport touchio\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_dash_display import Hub\n\nup = DigitalInOut(board.BUTTON_UP)\nup.direction = Direction.INPUT\nup.pull = Pull.DOWN\nselect = DigitalInOut(board.BUTTON_SELECT)\nselect.direction = Direction.INPUT\nselect.pull = Pull.DOWN\ndown = DigitalInOut(board.BUTTON_DOWN)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_simpletest.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "dash_display_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport touchio\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_dash_display import Hub\n\nselect = DigitalInOut(board.BUTTON_SELECT)\nselect.direction = Direction.INPUT\nselect.pull = Pull.DOWN\ndown = DigitalInOut(board.BUTTON_DOWN)\ndown.direction = Direction.INPUT\ndown.pull = Pull.DOWN\nback = touchio.TouchIn(board.CAP7)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_simpletest.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "dash_display_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport touchio\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_dash_display import Hub\n\ndown = DigitalInOut(board.BUTTON_DOWN)\ndown.direction = Direction.INPUT\ndown.pull = Pull.DOWN\nback = touchio.TouchIn(board.CAP7)\nsubmit = touchio.TouchIn(board.CAP8)\n# Get WiFi details and Adafruit IO keys, ensure these are setup in settings.toml\n# (visit io.adafruit.com if you need to create an account, or if you need your Adafruit IO key.)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_simpletest.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "dash_display_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport touchio\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_dash_display import Hub\n\ndown = DigitalInOut(board.BUTTON_DOWN)\ndown.direction = Direction.INPUT\ndown.pull = Pull.DOWN\nback = touchio.TouchIn(board.CAP7)\nsubmit = touchio.TouchIn(board.CAP8)\n# Get WiFi details and Adafruit IO keys, ensure these are setup in settings.toml\n# (visit io.adafruit.com if you need to create an account, or if you need your Adafruit IO key.)\nssid = getenv(\"CIRCUITPY_WIFI_SSID\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_simpletest.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "dash_display_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport touchio\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_dash_display import Hub\n\nssid = getenv(\"CIRCUITPY_WIFI_SSID\")\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\ndisplay = board.DISPLAY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_simpletest.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "dash_display_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport touchio\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_dash_display import Hub\n\n# Create a socket pool and ssl_context\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_simpletest.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "dash_display_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport touchio\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_dash_display import Hub\n\n# Create a socket pool and ssl_context\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(\n    broker=\"io.adafruit.com\",",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_simpletest.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "dash_display_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport touchio\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_dash_display import Hub\n\ndef pub_lamp(lamp):\n    if isinstance(lamp, str):\n        lamp = eval(lamp)\n    iot.publish('lamp', str(not lamp))\n    time.sleep(0.3)\n\n# Usage example:\n    default_text=\"Lamp: \",\n    formatted_text=\"Lamp: {}\",\n    pub_method=pub_lamp,\n)\niot.add_device(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_simpletest.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "dash_display_simpletest.py",
      "chunk_type": "function",
      "function_name": "pub_lamp"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut\n\nssid = getenv(\"CIRCUITPY_WIFI_SSID\")\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\npixels = neopixel.NeoPixel(board.D5, 300)\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/neopixel_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "neopixel_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut\n\npixels = neopixel.NeoPixel(board.D5, 300)\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/neopixel_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "neopixel_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/neopixel_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "neopixel_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D13)\n# esp32_ready = DigitalInOut(board.D11)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/neopixel_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "neopixel_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut\n\n# Secondary (SCK1) SPI used to connect to WiFi board on Arduino Nano Connect RP2040\n    spi = busio.SPI(board.SCK1, board.MOSI1, board.MISO1)\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/neopixel_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "neopixel_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut\n\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/neopixel_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "neopixel_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut\n\n# RED_LED = PWMOut.PWMOut(esp, 26)\n# GREEN_LED = PWMOut.PWMOut(esp, 27)\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password, status_pixel=status_pixel)\n# Define callback functions which will be called when certain events happen.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/neopixel_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "neopixel_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut\n\ndef connected(client):\n    client.subscribe('neopixel')\n\n# Usage example:\nesp32_reset = DigitalInOut(board.ESP_RESET)\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D13)\n# esp32_ready = DigitalInOut(board.D11)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/neopixel_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "neopixel_daughter.py",
      "chunk_type": "function",
      "function_name": "connected"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut\n\ndef subscribe(client, userdata, topic, granted_qos):\n    print(f'Subscribed to {topic} with QOS level {granted_qos}')\n\n# Usage example:\n# Define callback functions which will be called when certain events happen.\ndef connected(client):\n    client.subscribe(\"neopixel\")\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/neopixel_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "neopixel_daughter.py",
      "chunk_type": "function",
      "function_name": "subscribe"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut\n\ndef on_neopixel(client, topic, message):\n    print(message)\n    colors = [int(message.split('#')[1][i:i + 2], 16) for i in range(0, len(message) - 1, 2)]\n    print(colors)\n    pixels.fill(colors)\n\n# Usage example:\nio = IO_MQTT(mqtt_client)\n\nio.add_feed_callback(\"neopixel\", on_neopixel)\n# Connect the callback methods defined above to Adafruit IO\nio.on_connect = connected",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/neopixel_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "neopixel_daughter.py",
      "chunk_type": "function",
      "function_name": "on_neopixel"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut\n\n# Connect to WiFi\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/neopixel_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "neopixel_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(\n    broker=\"io.adafruit.com\",",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/neopixel_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "neopixel_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ds1307\n\nimport board\nimport adafruit_ds1307\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nrtc = adafruit_ds1307.DS1307(i2c)\n# Lookup table for names of days (nicer printing).",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds1307/examples/ds1307_simpletest.py",
      "library": "ds1307",
      "type": "example",
      "file_name": "ds1307_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ds1307\n\nimport adafruit_ds1307\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nrtc = adafruit_ds1307.DS1307(i2c)\n# Lookup table for names of days (nicer printing).\ndays = (\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds1307/examples/ds1307_simpletest.py",
      "library": "ds1307",
      "type": "example",
      "file_name": "ds1307_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bme680\n\nimport board\nimport adafruit_bme680\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nbme680 = adafruit_bme680.Adafruit_BME680_I2C(i2c, debug=False)\n# change this to match the location's pressure (hPa) at sea level",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme680/examples/bme680_simpletest.py",
      "library": "bme680",
      "type": "example",
      "file_name": "bme680_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bme680\n\nimport adafruit_bme680\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nbme680 = adafruit_bme680.Adafruit_BME680_I2C(i2c, debug=False)\n# change this to match the location's pressure (hPa) at sea level\nbme680.sea_level_pressure = 1013.25",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme680/examples/bme680_simpletest.py",
      "library": "bme680",
      "type": "example",
      "file_name": "bme680_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_guvx_i2c\n\nimport board\nimport adafruit_guvx_i2c\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_guvx_i2c.GUVB_C31SM(i2c)\n# Check advanced example for more settings, start with lowest range",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/guvx-i2c/examples/guvb_c31sm_simpletest.py",
      "library": "guvx-i2c",
      "type": "example",
      "file_name": "guvb_c31sm_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_guvx_i2c\n\nimport adafruit_guvx_i2c\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_guvx_i2c.GUVB_C31SM(i2c)\n# Check advanced example for more settings, start with lowest range\nsensor.range = 1",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/guvx-i2c/examples/guvb_c31sm_simpletest.py",
      "library": "guvx-i2c",
      "type": "example",
      "file_name": "guvb_c31sm_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2022 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\n\nimport adafruit_guvx_i2c\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_guvx_i2c.GUVB_C31SM(i2c)\n\n# Check advanced example for more settings, start with lowest range\nsensor.range = 1\n\nwhile True:\n    print(\"UVB:\", sensor.uvb)\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/guvx-i2c/examples/guvb_c31sm_simpletest.py",
      "library": "guvx-i2c",
      "type": "example",
      "file_name": "guvb_c31sm_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_simplemath import map_range\nfrom analogio import AnalogIn\nfrom adafruit_wm8960 import WM8960, Input\n\nanalog_in = AnalogIn(board.A0)\ncodec = WM8960(board.I2C())\ncodec.input = Input.MIC1\ncodec.gain = 0.5",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wm8960/examples/wm8960_automatic_level_control.py",
      "library": "wm8960",
      "type": "example",
      "file_name": "wm8960_automatic_level_control.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_simplemath import map_range\nfrom analogio import AnalogIn\nfrom adafruit_wm8960 import WM8960, Input\n\nanalog_in = AnalogIn(board.A0)\ncodec = WM8960(board.I2C())\ncodec.input = Input.MIC1\ncodec.gain = 0.5\ncodec.volume = 1.0\ncodec.headphone = 0.5",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wm8960/examples/wm8960_automatic_level_control.py",
      "library": "wm8960",
      "type": "example",
      "file_name": "wm8960_automatic_level_control.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_bluefruitspi import BluefruitSPI\n\nADVERT_NAME = b\"BlinkaBLE\"\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\ncs = DigitalInOut(board.D8)\nirq = DigitalInOut(board.D7)\nrst = DigitalInOut(board.D4)\nbluefruit = BluefruitSPI(spi_bus, cs, irq, rst, debug=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bluefruitspi/examples/bluefruitspi_ruggedechotest.py",
      "library": "bluefruitspi",
      "type": "example",
      "file_name": "bluefruitspi_ruggedechotest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_bluefruitspi import BluefruitSPI\n\nADVERT_NAME = b\"BlinkaBLE\"\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\ncs = DigitalInOut(board.D8)\nirq = DigitalInOut(board.D7)\nrst = DigitalInOut(board.D4)\nbluefruit = BluefruitSPI(spi_bus, cs, irq, rst, debug=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bluefruitspi/examples/bluefruitspi_ruggedechotest.py",
      "library": "bluefruitspi",
      "type": "example",
      "file_name": "bluefruitspi_ruggedechotest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_bluefruitspi import BluefruitSPI\n\nADVERT_NAME = b\"BlinkaBLE\"\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\ncs = DigitalInOut(board.D8)\nirq = DigitalInOut(board.D7)\nrst = DigitalInOut(board.D4)\nbluefruit = BluefruitSPI(spi_bus, cs, irq, rst, debug=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bluefruitspi/examples/bluefruitspi_ruggedechotest.py",
      "library": "bluefruitspi",
      "type": "example",
      "file_name": "bluefruitspi_ruggedechotest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_bluefruitspi import BluefruitSPI\n\nADVERT_NAME = b\"BlinkaBLE\"\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\ncs = DigitalInOut(board.D8)\nirq = DigitalInOut(board.D7)\nrst = DigitalInOut(board.D4)\nbluefruit = BluefruitSPI(spi_bus, cs, irq, rst, debug=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bluefruitspi/examples/bluefruitspi_ruggedechotest.py",
      "library": "bluefruitspi",
      "type": "example",
      "file_name": "bluefruitspi_ruggedechotest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_bluefruitspi import BluefruitSPI\n\ndef init_bluefruit():\n    print('Initializing the Bluefruit LE SPI Friend module')\n    bluefruit.init()\n    bluefruit.command_check_OK(b'AT+FACTORYRESET', delay=1)\n    print(str(bluefruit.command_check_OK(b'ATI'), 'utf-8'))\n    bluefruit.command_check_OK(b'AT+GAPDEVNAME=' + ADVERT_NAME)\n\n# Usage example:\n    try:  # Wireless connections can have corrupt data or other runtime failures\n        # This try block will reset the module if that happens\n        init_bluefruit()\n        wait_for_connection()\n        print(\"\\n *Connected!*\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bluefruitspi/examples/bluefruitspi_ruggedechotest.py",
      "library": "bluefruitspi",
      "type": "example",
      "file_name": "bluefruitspi_ruggedechotest.py",
      "chunk_type": "function",
      "function_name": "init_bluefruit"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_bluefruitspi import BluefruitSPI\n\ndef wait_for_connection():\n    print('Waiting for a connection to Bluefruit LE Connect ...')\n    dotcount = 0\n    while not bluefruit.connected:\n        print('.', end='')\n        dotcount = (dotcount + 1) % 80\n        if dotcount == 79:\n            print('')\n        time.sleep(0.5)\n\n# Usage example:\n        # This try block will reset the module if that happens\n        init_bluefruit()\n        wait_for_connection()\n        print(\"\\n *Connected!*\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bluefruitspi/examples/bluefruitspi_ruggedechotest.py",
      "library": "bluefruitspi",
      "type": "example",
      "file_name": "bluefruitspi_ruggedechotest.py",
      "chunk_type": "function",
      "function_name": "wait_for_connection"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_bluefruitspi import BluefruitSPI\n\ndef check_connection(n_sec):\n    global connection_timestamp, is_connected\n    if not connection_timestamp or time.monotonic() - connection_timestamp > n_sec:\n        connection_timestamp = time.monotonic()\n        is_connected = bluefruit.connected\n    return is_connected\n\n# Usage example:\n\n        # Once connected, check for incoming BLE UART data\n        while check_connection(3):  # Check our connection status every 3 seconds\n            # OK we're still connected, see if we have any data waiting\n            resp = bluefruit.uart_rx()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bluefruitspi/examples/bluefruitspi_ruggedechotest.py",
      "library": "bluefruitspi",
      "type": "example",
      "file_name": "bluefruitspi_ruggedechotest.py",
      "chunk_type": "function",
      "function_name": "check_connection"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_pcf8591.pcf8591 import PCF8591\n\n# Wiring:\n# Connect a voltage source to the first ADC channel, in addition to the\n# normal power and I2C connections. The voltage level should be between 0V/GND and VCC\n#\n########################################\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npcf = PCF8591(i2c)\nchannel_a = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8591/examples/pcf8591_adc_example.py",
      "library": "pcf8591",
      "type": "example",
      "file_name": "pcf8591_adc_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_hdc302x\n\nimport board\nimport adafruit_hdc302x\ni2c = board.I2C()\nsensor = adafruit_hdc302x.HDC302x(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hdc302x/examples/hdc302x_simpletest.py",
      "library": "hdc302x",
      "type": "example",
      "file_name": "hdc302x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_hdc302x\n\nimport board\nimport adafruit_hdc302x\ni2c = board.I2C()\nsensor = adafruit_hdc302x.HDC302x(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hdc302x/examples/hdc302x_simpletest.py",
      "library": "hdc302x",
      "type": "example",
      "file_name": "hdc302x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2024 Liz Clark for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\n\"\"\"HDC302x simple test\"\"\"\n\nimport time\n\nimport board\n\nimport adafruit_hdc302x\n\ni2c = board.I2C()\nsensor = adafruit_hdc302x.HDC302x(i2c)\n\nwhile True:\n    print(f\"Temperature: {sensor.temperature:0.1f}\u00b0C\")\n    print(f\"Relative Humidity: {sensor.relative_humidity:0.1f}%\")\n    print()\n    time.sleep(2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hdc302x/examples/hdc302x_simpletest.py",
      "library": "hdc302x",
      "type": "example",
      "file_name": "hdc302x_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm69 = adafruit_rfm69.RFM69(spi, CS, RESET, RADIO_FREQ_MHZ)\n# Optionally set an encryption key (16 byte AES key). MUST match both",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm69 = adafruit_rfm69.RFM69(spi, CS, RESET, RADIO_FREQ_MHZ)\n# Optionally set an encryption key (16 byte AES key). MUST match both\n# on the transmitter and receiver (or be set to None to disable/the default).\nrfm69.encryption_key = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node1.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node1.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport fourwire\nfrom adafruit_st7789 import ST7789\nimport adafruit_ov2640\n\n# Pylint is unable to see that the \"size\" property of OV2640_GrandCentral exists\n# Release any resources currently in use for the displays\nspi = busio.SPI(MOSI=board.LCD_MOSI, clock=board.LCD_CLK)\ndisplay_bus = fourwire.FourWire(\n    spi, command=board.LCD_D_C, chip_select=board.LCD_CS, reset=board.LCD_RST",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_displayio_kaluga1_3_st7789.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_displayio_kaluga1_3_st7789.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport fourwire\nfrom adafruit_st7789 import ST7789\nimport adafruit_ov2640\n\ndisplay_bus = fourwire.FourWire(spi, command=board.LCD_D_C, chip_select=board.LCD_CS, reset=board.LCD_RST)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_displayio_kaluga1_3_st7789.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_displayio_kaluga1_3_st7789.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport fourwire\nfrom adafruit_st7789 import ST7789\nimport adafruit_ov2640\n\ndisplay_bus = fourwire.FourWire(\n    spi, command=board.LCD_D_C, chip_select=board.LCD_CS, reset=board.LCD_RST\ndisplay = ST7789(display_bus, width=320, height=240, rotation=90, reverse_bytes_in_word=True)\nbus = busio.I2C(scl=board.CAMERA_SIOC, sda=board.CAMERA_SIOD)\ncam = adafruit_ov2640.OV2640(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_displayio_kaluga1_3_st7789.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_displayio_kaluga1_3_st7789.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport fourwire\nfrom adafruit_st7789 import ST7789\nimport adafruit_ov2640\n\ncam = adafruit_ov2640.OV2640(bus, data_pins=board.CAMERA_DATA, clock=board.CAMERA_PCLK, vsync=board.CAMERA_VSYNC, href=board.CAMERA_HREF, mclk=board.CAMERA_XCLK, mclk_frequency=20000000, size=adafruit_ov2640.OV2640_SIZE_QVGA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_displayio_kaluga1_3_st7789.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_displayio_kaluga1_3_st7789.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_ssd1327\n\nimport adafruit_ssd1327\n# Use for I2C\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndisplay_bus = I2CDisplayBus(i2c, device_address=0x3D)\n# Use for SPI",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1327/examples/ssd1327_gamma.py",
      "library": "ssd1327",
      "type": "example",
      "file_name": "ssd1327_gamma.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_ssd1327\n\n#    spi, command=oled_dc, chip_select=oled_cs, baudrate=1000000, reset=board.D9\n# )\ndisplay = adafruit_ssd1327.SSD1327(display_bus, width=128, height=128)\ng = displayio.Group()\ndimension = min(display.width, display.height)\ncolor_count = 16",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1327/examples/ssd1327_gamma.py",
      "library": "ssd1327",
      "type": "example",
      "file_name": "ssd1327_gamma.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel_write\nfrom adafruit_ble import BLERadio\nfrom adafruit_circuitplayground import cp\nfrom digitalio import DigitalInOut\nfrom adafruit_ble_adafruit.accelerometer_service import AccelerometerService\nfrom adafruit_ble_adafruit.adafruit_service import AdafruitServerAdvertisement\nfrom adafruit_ble_adafruit.addressable_pixel_service import AddressablePixelService\nfrom adafruit_ble_adafruit.button_service import ButtonService\nfrom adafruit_ble_adafruit.light_sensor_service import LightSensorService\nfrom adafruit_ble_adafruit.temperature_service import TemperatureService\nfrom adafruit_ble_adafruit.tone_service import ToneService\n\naccel_svc.measurement_period = 100\naccel_last_update = 0\n# 3 RGB bytes * 10 pixels.\nNEOPIXEL_BUF_LENGTH = 3 * 10\nneopixel_svc = AddressablePixelService()\nneopixel_buf = bytearray(NEOPIXEL_BUF_LENGTH)\n# Take over NeoPixel control from cp.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_adafruit/examples/ble_adafruit_circuitplayground_bluefruit.py",
      "library": "ble_adafruit",
      "type": "example",
      "file_name": "ble_adafruit_circuitplayground_bluefruit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel_write\nfrom adafruit_ble import BLERadio\nfrom adafruit_circuitplayground import cp\nfrom digitalio import DigitalInOut\nfrom adafruit_ble_adafruit.accelerometer_service import AccelerometerService\nfrom adafruit_ble_adafruit.adafruit_service import AdafruitServerAdvertisement\nfrom adafruit_ble_adafruit.addressable_pixel_service import AddressablePixelService\nfrom adafruit_ble_adafruit.button_service import ButtonService\nfrom adafruit_ble_adafruit.light_sensor_service import LightSensorService\nfrom adafruit_ble_adafruit.temperature_service import TemperatureService\nfrom adafruit_ble_adafruit.tone_service import ToneService\n\naccel_last_update = 0\n# 3 RGB bytes * 10 pixels.\nNEOPIXEL_BUF_LENGTH = 3 * 10\nneopixel_svc = AddressablePixelService()\nneopixel_buf = bytearray(NEOPIXEL_BUF_LENGTH)\n# Take over NeoPixel control from cp.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_adafruit/examples/ble_adafruit_circuitplayground_bluefruit.py",
      "library": "ble_adafruit",
      "type": "example",
      "file_name": "ble_adafruit_circuitplayground_bluefruit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport neopixel_write\nfrom adafruit_ble import BLERadio\nfrom adafruit_circuitplayground import cp\nfrom digitalio import DigitalInOut\nfrom adafruit_ble_adafruit.accelerometer_service import AccelerometerService\nfrom adafruit_ble_adafruit.adafruit_service import AdafruitServerAdvertisement\nfrom adafruit_ble_adafruit.addressable_pixel_service import AddressablePixelService\nfrom adafruit_ble_adafruit.button_service import ButtonService\nfrom adafruit_ble_adafruit.light_sensor_service import LightSensorService\nfrom adafruit_ble_adafruit.temperature_service import TemperatureService\nfrom adafruit_ble_adafruit.tone_service import ToneService\n\nNEOPIXEL_BUF_LENGTH = 3 * 10\nneopixel_svc = AddressablePixelService()\nneopixel_buf = bytearray(NEOPIXEL_BUF_LENGTH)\n# Take over NeoPixel control from cp.\nneopixel_out = DigitalInOut(board.NEOPIXEL)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_adafruit/examples/ble_adafruit_circuitplayground_bluefruit.py",
      "library": "ble_adafruit",
      "type": "example",
      "file_name": "ble_adafruit_circuitplayground_bluefruit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport bitmaptools\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport gifio\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\nimport adafruit_ov5640\nV_RECORD = int(2.41 * 65536 / 3.3)\nV_FUZZ = 2000\na = analogio.AnalogIn(board.IO6)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_stopmotion_kaluga1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_stopmotion_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport bitmaptools\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport gifio\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ndef record_pressed():\n    value = a.value\n    return abs(value - V_RECORD) < V_FUZZ\n\n# Usage example:\n\ndef wait_record_pressed_update_display(first_frame, cap):\n    while record_pressed():\n        pass\n    while True:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_stopmotion_kaluga1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_stopmotion_kaluga1_3.py",
      "chunk_type": "function",
      "function_name": "record_pressed"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport bitmaptools\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport gifio\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\n    value = a.value\nspi = busio.SPI(MOSI=board.LCD_MOSI, clock=board.LCD_CLK)\ndisplay_bus = fourwire.FourWire(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_stopmotion_kaluga1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_stopmotion_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport bitmaptools\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport gifio\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ndisplay_bus = fourwire.FourWire(spi, command=board.LCD_D_C, chip_select=board.LCD_CS, reset=board.LCD_RST, baudrate=80000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_stopmotion_kaluga1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_stopmotion_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport bitmaptools\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport gifio\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ndisplay = busdisplay.BusDisplay(display_bus, _INIT_SEQUENCE, width=320, height=240)\nsd_spi = busio.SPI(clock=board.IO18, MOSI=board.IO14, MISO=board.IO17)\nsd_cs = board.IO12\nsdcard = sdcardio.SDCard(sd_spi, sd_cs, baudrate=24_000_000)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_stopmotion_kaluga1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_stopmotion_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport bitmaptools\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport gifio\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ndisplay = busdisplay.BusDisplay(display_bus, _INIT_SEQUENCE, width=320, height=240)\nsd_spi = busio.SPI(clock=board.IO18, MOSI=board.IO14, MISO=board.IO17)\nsd_cs = board.IO12\nsdcard = sdcardio.SDCard(sd_spi, sd_cs, baudrate=24_000_000)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_stopmotion_kaluga1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_stopmotion_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport bitmaptools\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport gifio\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\nsd_cs = board.IO12\nsdcard = sdcardio.SDCard(sd_spi, sd_cs, baudrate=24_000_000)\nvfs = storage.VfsFat(sdcard)\nbus = busio.I2C(scl=board.CAMERA_SIOC, sda=board.CAMERA_SIOD)\ncam = adafruit_ov5640.OV5640(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_stopmotion_kaluga1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_stopmotion_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport bitmaptools\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport gifio\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ncam = adafruit_ov5640.OV5640(bus, data_pins=board.CAMERA_DATA, clock=board.CAMERA_PCLK, vsync=board.CAMERA_VSYNC, href=board.CAMERA_HREF, mclk=board.CAMERA_XCLK, size=adafruit_ov5640.OV5640_SIZE_240X240)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_stopmotion_kaluga1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_stopmotion_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport bitmaptools\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport gifio\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ndef exists(filename):\n    try:\n        os.stat(filename)\n        return True\n    except OSError as _:\n        return False\n\n# Usage example:\n        while True:\n            filename = f\"/sd/img{self.count:04d}.{extension}\"\n            if exists(filename):\n                print(f\"File exists: {filename}\", end=\"\\r\")\n                self.count += 1",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_stopmotion_kaluga1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_stopmotion_kaluga1_3.py",
      "chunk_type": "function",
      "function_name": "exists"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport bitmaptools\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport gifio\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\nclass ImageCounter:\n\n    def __init__(self):\n        self.count = 0\n\n    def next_filename(self, extension='jpg'):\n        while True:\n            filename = f'/sd/img{self.count:04d}.{extension}'\n            if exists(filename):\n                print(f'File exists: {filename}', end='\\r')\n                self.count += 1\n                continue\n            print()\n            return filename\n\n# Usage example:\n\n\nclass ImageCounter:\n    def __init__(self):\n        self.count = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_stopmotion_kaluga1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_stopmotion_kaluga1_3.py",
      "chunk_type": "function",
      "function_name": "ImageCounter"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport bitmaptools\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport gifio\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ndef next_filename(extension='jpg'):\n    return _image_counter.next_filename(extension)\n\n# Usage example:\n\ndef next_filename(extension=\"jpg\"):\n    return _image_counter.next_filename(extension)\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_stopmotion_kaluga1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_stopmotion_kaluga1_3.py",
      "chunk_type": "function",
      "function_name": "next_filename"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport bitmaptools\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport gifio\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ndef open_next_image(extension='jpg'):\n    while True:\n        filename = next_filename(extension)\n        print('# writing to', filename)\n        return open(filename, 'wb')\n\n# Usage example:\n    with ContinuousCapture(cam, rec1, rec2) as cap:\n        frame = wait_record_pressed_update_display(True, cap)\n        with open_next_image(\"gif\") as f, gifio.GifWriter(\n            f, cam.width, cam.height, displayio.Colorspace.RGB565_SWAPPED, dither=True\n        ) as g:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_stopmotion_kaluga1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_stopmotion_kaluga1_3.py",
      "chunk_type": "function",
      "function_name": "open_next_image"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport bitmaptools\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport gifio\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ncam.flip_x = False\ncam.flip_y = False\nchip_id = cam.chip_id\ncam.test_pattern = False\ncam.effect = adafruit_ov5640.OV5640_SPECIAL_EFFECT_NONE\ncam.saturation = 3\n# Alternately recording to these two bitmaps\nrec1 = displayio.Bitmap(cam.width, cam.height, 65536)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_stopmotion_kaluga1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_stopmotion_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport bitmaptools\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport gifio\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\nclass ContinuousCapture:\n\n    def __init__(self, camera, buffer1, buffer2):\n        camera = getattr(camera, '_imagecapture', camera)\n        self._camera = camera\n        print('buffer1', buffer1)\n        print('buffer2', buffer2)\n        camera.continuous_capture_start(buffer1, buffer2)\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self._camera.continuous_capture_stop()\n\n    def __enter__(self):\n        return self\n\n    def get_frame(self):\n        return self._camera.continuous_capture_get_frame()\n    __next__ = get_frame\n\n# Usage example:\n\n\nclass ContinuousCapture:\n    def __init__(self, camera, buffer1, buffer2):\n        camera = getattr(camera, \"_imagecapture\", camera)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_stopmotion_kaluga1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_stopmotion_kaluga1_3.py",
      "chunk_type": "function",
      "function_name": "ContinuousCapture"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport bitmaptools\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport gifio\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ndef wait_record_pressed_update_display(first_frame, cap):\n    while record_pressed():\n        pass\n    while True:\n        frame = cap.get_frame()\n        if record_pressed():\n            return frame\n        if first_frame:\n            display_bus.send(44, frame)\n        else:\n            bitmaptools.alphablend(onionskin, old_frame, frame, displayio.Colorspace.RGB565_SWAPPED)\n            display_bus.send(44, onionskin)\n\n# Usage example:\n    print(f\"0/{n_frames}\")\n    with ContinuousCapture(cam, rec1, rec2) as cap:\n        frame = wait_record_pressed_update_display(True, cap)\n        with open_next_image(\"gif\") as f, gifio.GifWriter(\n            f, cam.width, cam.height, displayio.Colorspace.RGB565_SWAPPED, dither=True",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_stopmotion_kaluga1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_stopmotion_kaluga1_3.py",
      "chunk_type": "function",
      "function_name": "wait_record_pressed_update_display"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport bitmaptools\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport gifio\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ndef take_stop_motion_gif(n_frames=10, replay_frame_time=0.3):\n    print(f'0/{n_frames}')\n    with ContinuousCapture(cam, rec1, rec2) as cap:\n        frame = wait_record_pressed_update_display(True, cap)\n        with open_next_image('gif') as f, gifio.GifWriter(f, cam.width, cam.height, displayio.Colorspace.RGB565_SWAPPED, dither=True) as g:\n            g.add_frame(frame, replay_frame_time)\n            for i in range(1, n_frames):\n                print(f'{i}/{n_frames}')\n                if hasattr(old_frame, 'blit'):\n                    old_frame.blit(0, 0, frame, x1=0, y1=0, x2=frame.width, y2=frame.height)\n                else:\n                    bitmaptools.blit(old_frame, frame, 0, 0, x1=0, y1=0, x2=frame.width, y2=frame.height)\n                frame = wait_record_pressed_update_display(False, cap)\n                g.add_frame(frame, replay_frame_time)\n            print('done')\n\n# Usage example:\ndither = True\nwhile True:\n    take_stop_motion_gif()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_stopmotion_kaluga1_3.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_stopmotion_kaluga1_3.py",
      "chunk_type": "function",
      "function_name": "take_stop_motion_gif"
    }
  },
  {
    "content": "import asyncio\nimport adafruit_touchscreen\nimport board\nimport displayio\nimport terminalio\nimport vectorio\nfrom adafruit_button import Button\n\nimport terminalio\nimport vectorio\n# use built-in display\ndisplay = board.DISPLAY\n# explicitly set the display to default orientation in-case it was changed\ndisplay.rotation = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/asyncio/examples/asyncio_displayio_button.py",
      "library": "asyncio",
      "type": "example",
      "file_name": "asyncio_displayio_button.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import asyncio\nimport adafruit_touchscreen\nimport board\nimport displayio\nimport terminalio\nimport vectorio\nfrom adafruit_button import Button\n\nts = adafruit_touchscreen.Touchscreen(board.TOUCH_XL, board.TOUCH_XR, board.TOUCH_YD, board.TOUCH_YU, calibration=((5200, 59000), (5800, 57000)), size=(display.width, display.height))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/asyncio/examples/asyncio_displayio_button.py",
      "library": "asyncio",
      "type": "example",
      "file_name": "asyncio_displayio_button.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import asyncio\nimport adafruit_touchscreen\nimport board\nimport displayio\nimport terminalio\nimport vectorio\nfrom adafruit_button import Button\n\nclass ButtonState:\n\n    def __init__(self, initial_state):\n        self.state = initial_state\n\n# Usage example:\n\n# Button state data object. Will hold either true of false whether button is currently pressed\nclass ButtonState:\n    def __init__(self, initial_state):\n        self.state = initial_state",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/asyncio/examples/asyncio_displayio_button.py",
      "library": "asyncio",
      "type": "example",
      "file_name": "asyncio_displayio_button.py",
      "chunk_type": "function",
      "function_name": "ButtonState"
    }
  },
  {
    "content": "import asyncio\nimport adafruit_touchscreen\nimport board\nimport displayio\nimport terminalio\nimport vectorio\nfrom adafruit_button import Button\n\nclass Interval:\n\n    def __init__(self, initial_value):\n        self.value = initial_value\n\n# Usage example:\n\n\n# Interval length data object. Holds the amount of time in ms the interval should last for\nclass Interval:\n    def __init__(self, initial_value):",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/asyncio/examples/asyncio_displayio_button.py",
      "library": "asyncio",
      "type": "example",
      "file_name": "asyncio_displayio_button.py",
      "chunk_type": "function",
      "function_name": "Interval"
    }
  },
  {
    "content": "import asyncio\nimport adafruit_touchscreen\nimport board\nimport displayio\nimport terminalio\nimport vectorio\nfrom adafruit_button import Button\n\n# Check if the color button is pressed, and updates\nthe ButtonState data object as appropriate\n\n:param touch_event: The touch point object from touchscreen\n:param Button color_button: The button to check for presses on\n:param ButtonState button_state: ButtonState data object to set\n the current value into\ndef handle_color_button(touch_event, color_button, button_state):\n    \"\"\"\n    Check if the color button is pressed, and updates\n    the ButtonState data object as appropriate\n\n    :param touch_event: The touch point object from touchscreen\n    :param Button color_button: The button to check for presses on\n    :param ButtonState button_state: ButtonState data object to set\n     the current value into\n    \"\"\"\n    if touch_event:\n        if color_button.contains(touch_event):\n            color_button.selected = True\n            button_state.state = True\n        else:\n            color_button.selected = False\n            button_state.state = False\n    elif color_button.selected:\n        color_button.selected = False\n        button_state.state = False\n\n# Usage example:\n\n        # handle touch event data\n        handle_color_button(p, color_button, button_state)\n        handle_interval_buttons(p, button_slower, button_faster, interval)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/asyncio/examples/asyncio_displayio_button.py",
      "library": "asyncio",
      "type": "example",
      "file_name": "asyncio_displayio_button.py",
      "chunk_type": "function",
      "function_name": "handle_color_button"
    }
  },
  {
    "content": "import asyncio\nimport adafruit_touchscreen\nimport board\nimport displayio\nimport terminalio\nimport vectorio\nfrom adafruit_button import Button\n\n# Will check for presses on\nthe faster and slower buttons and updated the data in the\nInterval data object as appropriate\n\n:param touch_event: Touch point object from touchscreen\n:param Button button_slower: The slower button object\n:param Button button_faster: The faster button object\n:param Interval interval: The Interval data object to store state\ndef handle_interval_buttons(touch_event, button_slower, button_faster, interval):\n    \"\"\"\n    Will check for presses on\n    the faster and slower buttons and updated the data in the\n    Interval data object as appropriate\n\n    :param touch_event: Touch point object from touchscreen\n    :param Button button_slower: The slower button object\n    :param Button button_faster: The faster button object\n    :param Interval interval: The Interval data object to store state\n    \"\"\"\n    if touch_event:\n        if button_slower.contains(touch_event):\n            if not button_slower.selected:\n                button_slower.selected = True\n                interval.value += 100\n                print(f'new interval val: {interval.value}')\n        else:\n            button_slower.selected = False\n        if button_faster.contains(touch_event):\n            if not button_faster.selected:\n                button_faster.selected = True\n                if interval.value >= 100:\n                    interval.value -= 100\n                print(f'new interval val: {interval.value}')\n        else:\n            button_faster.selected = False\n    else:\n        if button_slower.selected:\n            button_slower.selected = False\n        if button_faster.selected:\n            button_faster.selected = False\n\n# Usage example:\n        # handle touch event data\n        handle_color_button(p, color_button, button_state)\n        handle_interval_buttons(p, button_slower, button_faster, interval)\n\n        # allow other tasks to do work",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/asyncio/examples/asyncio_displayio_button.py",
      "library": "asyncio",
      "type": "example",
      "file_name": "asyncio_displayio_button.py",
      "chunk_type": "function",
      "function_name": "handle_interval_buttons"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_pct2075\n\nimport board\nimport adafruit_pct2075\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npct = adafruit_pct2075.PCT2075(i2c)\npct.high_temperature_threshold = 35.5",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pct2075/examples/pct2075_high_temp_alert_example.py",
      "library": "pct2075",
      "type": "example",
      "file_name": "pct2075_high_temp_alert_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_pct2075\n\nimport adafruit_pct2075\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npct = adafruit_pct2075.PCT2075(i2c)\npct.high_temperature_threshold = 35.5\npct.temperature_hysteresis = 30.0\npct.high_temp_active_high = False",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pct2075/examples/pct2075_high_temp_alert_example.py",
      "library": "pct2075",
      "type": "example",
      "file_name": "pct2075_high_temp_alert_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_pct2075\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npct = adafruit_pct2075.PCT2075(i2c)\n\npct.high_temperature_threshold = 35.5\npct.temperature_hysteresis = 30.0\npct.high_temp_active_high = False\nprint(\"High temp alert active high? %s\" % pct.high_temp_active_high)\n\n# Attach an LED with the Cathode to the INT pin and Anode to 3.3V with a current limiting resistor\n\nwhile True:\n    print(\"Temperature: %.2f C\" % pct.temperature)\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pct2075/examples/pct2075_high_temp_alert_example.py",
      "library": "pct2075",
      "type": "example",
      "file_name": "pct2075_high_temp_alert_example.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom analogio import AnalogIn\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il91874 import Adafruit_IL91874\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.D10)\ndc = digitalio.DigitalInOut(board.D9)\nsrcs = digitalio.DigitalInOut(board.D8)  # can be None to use internal memory",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_shieldtest.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_shieldtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom analogio import AnalogIn\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il91874 import Adafruit_IL91874\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.D10)\ndc = digitalio.DigitalInOut(board.D9)\nsrcs = digitalio.DigitalInOut(board.D8)  # can be None to use internal memory\n# give them all to our driver",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_shieldtest.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_shieldtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom analogio import AnalogIn\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il91874 import Adafruit_IL91874\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.D10)\ndc = digitalio.DigitalInOut(board.D9)\nsrcs = digitalio.DigitalInOut(board.D8)  # can be None to use internal memory\n# give them all to our driver",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_shieldtest.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_shieldtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom analogio import AnalogIn\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il91874 import Adafruit_IL91874\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.D10)\ndc = digitalio.DigitalInOut(board.D9)\nsrcs = digitalio.DigitalInOut(board.D8)  # can be None to use internal memory\n# give them all to our driver",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_shieldtest.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_shieldtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom analogio import AnalogIn\nfrom adafruit_epd.epd import Adafruit_EPD\nfrom adafruit_epd.il91874 import Adafruit_IL91874\n\ndef read_buttons():\n    with AnalogIn(board.A3) as ain:\n        reading = ain.value / 65535\n        if reading > 0.75:\n            return None\n        if reading > 0.4:\n            return 4\n        if reading > 0.25:\n            return 3\n        if reading > 0.13:\n            return 2\n        return 1\n\n# Usage example:\n\nwhile True:\n    button = read_buttons()\n    if not button:\n        continue",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_shieldtest.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_shieldtest.py",
      "chunk_type": "function",
      "function_name": "read_buttons"
    }
  },
  {
    "content": "import board\nimport adafruit_mcp4728\n\nimport adafruit_mcp4728\nMCP4728_DEFAULT_ADDRESS = 0x60\nMCP4728A4_DEFAULT_ADDRESS = 0x64\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n#  use for MCP4728 variant\nmcp4728 = adafruit_mcp4728.MCP4728(i2c, adafruit_mcp4728.MCP4728_DEFAULT_ADDRESS)\n#  use for MCP4728A4 variant",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp4728/examples/mcp4728_simpletest.py",
      "library": "mcp4728",
      "type": "example",
      "file_name": "mcp4728_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_mcp4728\n\nMCP4728A4_DEFAULT_ADDRESS = 0x64\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n#  use for MCP4728 variant\nmcp4728 = adafruit_mcp4728.MCP4728(i2c, adafruit_mcp4728.MCP4728_DEFAULT_ADDRESS)\n#  use for MCP4728A4 variant\n#  mcp4728 = adafruit_mcp4728.MCP4728(i2c, adafruit_mcp4728.MCP4728A4_DEFAULT_ADDRESS)\nmcp4728.channel_a.value = 65535  # Voltage = VDD",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp4728/examples/mcp4728_simpletest.py",
      "library": "mcp4728",
      "type": "example",
      "file_name": "mcp4728_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\n\nimport adafruit_mcp4728\n\nMCP4728_DEFAULT_ADDRESS = 0x60\nMCP4728A4_DEFAULT_ADDRESS = 0x64\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n#  use for MCP4728 variant\nmcp4728 = adafruit_mcp4728.MCP4728(i2c, adafruit_mcp4728.MCP4728_DEFAULT_ADDRESS)\n#  use for MCP4728A4 variant\n#  mcp4728 = adafruit_mcp4728.MCP4728(i2c, adafruit_mcp4728.MCP4728A4_DEFAULT_ADDRESS)\n\nmcp4728.channel_a.value = 65535  # Voltage = VDD\nmcp4728.channel_b.value = int(65535 / 2)  # VDD/2\nmcp4728.channel_c.value = int(65535 / 4)  # VDD/4\nmcp4728.channel_d.value = 0  # 0V\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp4728/examples/mcp4728_simpletest.py",
      "library": "mcp4728",
      "type": "example",
      "file_name": "mcp4728_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import adafruit_trellism4\n\n# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\nimport adafruit_trellism4\ntrellis = adafruit_trellism4.TrellisM4Express()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/trellism4/examples/trellism4_simpletest.py",
      "library": "trellism4",
      "type": "example",
      "file_name": "trellism4_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport adafruit_trellism4\n\ntrellis = adafruit_trellism4.TrellisM4Express()\n\nwhile True:\n    pressed = trellis.pressed_keys\n    if pressed:\n        print(\"Pressed:\", pressed)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/trellism4/examples/trellism4_simpletest.py",
      "library": "trellism4",
      "type": "example",
      "file_name": "trellism4_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import Color, turtle\n\nimport board\nturtle = turtle(board.DISPLAY)\n# The purpose of this test is to check that the OnDiskBitmap usage is\n# working correctly: bgpic(), changeturtle() & stamp()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_bgpic_changeturtle.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_bgpic_changeturtle.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import Color, turtle\n\n# Make sure that the following file is copied to the CircuitPython drive\nICON = \"/icons/Play_48x48_small.bmp\"\nstarsize = min(board.DISPLAY.width, board.DISPLAY.height) * 0.9  # 90% of screensize",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_bgpic_changeturtle.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_bgpic_changeturtle.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\n\nfrom adafruit_turtle import Color, turtle\n\nturtle = turtle(board.DISPLAY)\n\n# The purpose of this test is to check that the OnDiskBitmap usage is\n# working correctly: bgpic(), changeturtle() & stamp()\n\n# Make sure that the following file is copied to the CircuitPython drive\nICON = \"/icons/Play_48x48_small.bmp\"\nturtle.bgpic(ICON)\nturtle.changeturtle(ICON)\n\nstarsize = min(board.DISPLAY.width, board.DISPLAY.height) * 0.9  # 90% of screensize\n\nprint(\"Turtle time! Lets draw a star\")\n\nturtle.pencolor(Color.BLUE)\nturtle.setheading(90)\n\nturtle.penup()\nturtle.goto(-starsize / 2, 0)\nturtle.pendown()\n\nstart = turtle.pos()\nwhile True:\n    turtle.forward(starsize)\n    turtle.stamp()\n    turtle.left(170)\n    if abs(turtle.pos() - start) < 1:\n        break\n\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_bgpic_changeturtle.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_bgpic_changeturtle.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import usb_hid\nimport adafruit_radial_controller.device\n\nimport adafruit_radial_controller.device\nREPORT_ID = 5\nradial_controller_device = adafruit_radial_controller.device.device(REPORT_ID)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/radial_controller/examples/radial_controller_rotary_trinkey/boot.py",
      "library": "radial_controller",
      "type": "example",
      "file_name": "boot.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2021 Dan Halbert for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport usb_hid\n\nimport adafruit_radial_controller.device\n\nREPORT_ID = 5\n\nradial_controller_device = adafruit_radial_controller.device.device(REPORT_ID)\nusb_hid.enable((radial_controller_device,))\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/radial_controller/examples/radial_controller_rotary_trinkey/boot.py",
      "library": "radial_controller",
      "type": "example",
      "file_name": "boot.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport adafruit_pio_uart\n\nimport board\nimport adafruit_pio_uart\nuart = adafruit_pio_uart.UART(board.TX, board.RX)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pio_uart/examples/pio_uart_simpletest.py",
      "library": "pio_uart",
      "type": "example",
      "file_name": "pio_uart_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2023 Scott Shawcroft for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport board\n\nimport adafruit_pio_uart\n\nuart = adafruit_pio_uart.UART(board.TX, board.RX)\n\nuart.write(b\"\\x00\")\nprint(uart.read(1))\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pio_uart/examples/pio_uart_simpletest.py",
      "library": "pio_uart",
      "type": "example",
      "file_name": "pio_uart_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_fram\n\nimport digitalio\nimport adafruit_fram\n## Create a FRAM object.\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\ncs = digitalio.DigitalInOut(board.D5)\nfram = adafruit_fram.FRAM_SPI(spi, cs)\n## Write a single-byte value to register address '0'",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fram/examples/fram_spi_simpletest.py",
      "library": "fram",
      "type": "example",
      "file_name": "fram_spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_fram\n\nimport adafruit_fram\n## Create a FRAM object.\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\ncs = digitalio.DigitalInOut(board.D5)\nfram = adafruit_fram.FRAM_SPI(spi, cs)\n## Write a single-byte value to register address '0'",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fram/examples/fram_spi_simpletest.py",
      "library": "fram",
      "type": "example",
      "file_name": "fram_spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_fram\n\nimport adafruit_fram\n## Create a FRAM object.\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\ncs = digitalio.DigitalInOut(board.D5)\nfram = adafruit_fram.FRAM_SPI(spi, cs)\n## Write a single-byte value to register address '0'\nfram[0] = 1",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fram/examples/fram_spi_simpletest.py",
      "library": "fram",
      "type": "example",
      "file_name": "fram_spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n## Simple Example For CircuitPython/Python SPI FRAM Library\n\nimport board\nimport busio\nimport digitalio\n\nimport adafruit_fram\n\n## Create a FRAM object.\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\ncs = digitalio.DigitalInOut(board.D5)\nfram = adafruit_fram.FRAM_SPI(spi, cs)\n\n## Write a single-byte value to register address '0'\n\nfram[0] = 1\n\n## Read that byte to ensure a proper write.\n## Note: 'read()' returns a bytearray\n\nprint(fram[0])\n\n## Or write a sequential value, then read the values back.\n## Note: 'read()' returns a bytearray. It also allocates\n##       a buffer the size of 'length', which may cause\n##       problems on memory-constrained platforms.\n\n# values = list(range(100))  # or bytearray or tuple\n# fram[0:100] = values\n# print(fram[0:100])\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fram/examples/fram_spi_simpletest.py",
      "library": "fram",
      "type": "example",
      "file_name": "fram_spi_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nimport adafruit_esp32spi.adafruit_esp32spi_socketpool as socketpool\nfrom adafruit_esp32spi import adafruit_esp32spi\n\nUDP_IN_PORT = 5500\nUDP_TIMEOUT = 20\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_ipconfig.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_ipconfig.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nimport adafruit_esp32spi.adafruit_esp32spi_socketpool as socketpool\nfrom adafruit_esp32spi import adafruit_esp32spi\n\nUDP_TIMEOUT = 20\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_ipconfig.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_ipconfig.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nimport adafruit_esp32spi.adafruit_esp32spi_socketpool as socketpool\nfrom adafruit_esp32spi import adafruit_esp32spi\n\nUDP_TIMEOUT = 20\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_ipconfig.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_ipconfig.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nimport adafruit_esp32spi.adafruit_esp32spi_socketpool as socketpool\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n    spi = busio.SPI(board.SCK1, board.MOSI1, board.MISO1)\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\npool = socketpool.SocketPool(esp)\ns_in = pool.socket(type=pool.SOCK_DGRAM)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_ipconfig.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_ipconfig.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_touchscreen\nimport board\nimport displayio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_displayio_layout.widgets.flip_input import FlipInput\n\nimport displayio\ndisplay = board.DISPLAY  # create the display on the PyPortal,\n# otherwise change this to setup the display\n# for display chip driver and pinout you have (e.g. ILI9341)\n# setup the touchscreen",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_flip_input_simpletest.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_flip_input_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_touchscreen\nimport board\nimport displayio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_displayio_layout.widgets.flip_input import FlipInput\n\nts = adafruit_touchscreen.Touchscreen(board.TOUCH_XL, board.TOUCH_XR, board.TOUCH_YD, board.TOUCH_YU, calibration=((5200, 59000), (5800, 57000)), size=(display.width, display.height))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_flip_input_simpletest.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_flip_input_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_character_lcd.character_lcd_i2c as character_lcd\n\n# Modify this if you have a different sized Character LCD\nlcd_columns = 16\nlcd_rows = 2\n# Initialise I2C bus.\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Initialise the lcd class\nlcd = character_lcd.Character_LCD_I2C(i2c, lcd_columns, lcd_rows)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_i2c_mono_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_i2c_mono_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.blink import Blink\nfrom adafruit_led_animation.color import RED\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\npixel_num = 32\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_simpletest.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.blink import Blink\nfrom adafruit_led_animation.color import RED\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\npixel_num = 32\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)\nblink = Blink(pixels, speed=0.5, color=RED)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_simpletest.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 Kattni Rembor for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nThis simpletest example displays the Blink animation.\n\nFor NeoPixel FeatherWing. Update pixel_pin and pixel_num to match your wiring if using\na different form of NeoPixels.\n\"\"\"\n\nimport board\nimport neopixel\n\nfrom adafruit_led_animation.animation.blink import Blink\nfrom adafruit_led_animation.color import RED\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\npixel_num = 32\n\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)\n\nblink = Blink(pixels, speed=0.5, color=RED)\n\nwhile True:\n    blink.animate()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_simpletest.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport rp2pio\nimport adafruit_pioasm\n\nassembled = adafruit_pioasm.assemble(squarewave)\nsm = rp2pio.StateMachine(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_simpletest.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport rp2pio\nimport adafruit_pioasm\n\nsm = rp2pio.StateMachine(assembled, frequency=1000 * 2, first_set_pin=board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_simpletest.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 Scott Shawcroft, written for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport rp2pio\n\nimport adafruit_pioasm\n\nsquarewave = \"\"\"\n.program squarewave\n    set pins 1      ; Drive pin high and then delay for one cycle\n    set pins 0      ; Drive pin low\n\"\"\"\n\nassembled = adafruit_pioasm.assemble(squarewave)\n\nsm = rp2pio.StateMachine(\n    assembled,\n    frequency=1000 * 2,\n    first_set_pin=board.D13,\n)\nprint(\"real frequency\", sm.frequency)\n\ntime.sleep(120)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_simpletest.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom adafruit_seesaw.tftshield18 import TFTShield18\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\n# Release any resources currently in use for the displays\nss = TFTShield18()\nspi = board.SPI()\ntft_cs = board.D10\ntft_dc = board.D8\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_18tftshield_buttons.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_18tftshield_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom adafruit_seesaw.tftshield18 import TFTShield18\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\nss = TFTShield18()\nspi = board.SPI()\ntft_cs = board.D10\ntft_dc = board.D8\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_18tftshield_buttons.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_18tftshield_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom adafruit_seesaw.tftshield18 import TFTShield18\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\nss = TFTShield18()\nspi = board.SPI()\ntft_cs = board.D10\ntft_dc = board.D8\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_18tftshield_buttons.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_18tftshield_buttons.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_datetime as datetime\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_groups.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_groups.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_datetime as datetime\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_groups.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_groups.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_datetime as datetime\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_groups.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_groups.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_datetime as datetime\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_groups.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_groups.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_datetime as datetime\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_groups.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_groups.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_datetime as datetime\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\n# adafruit_esp32spi import line, optionally esp.connect(ssid, password)\n# import wifi\n# esp = wifi.radio\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# If you are testing on python with blinka, use real requests below and comment out above:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_groups.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_groups.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_datetime as datetime\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\n# import wifi\n# esp = wifi.radio\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# If you are testing on python with blinka, use real requests below and comment out above:\n# import os, datetime, requests as real_requests",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_groups.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_groups.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_datetime as datetime\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_HTTP\n\n# esp = wifi.radio\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# If you are testing on python with blinka, use real requests below and comment out above:\n# import os, datetime, requests as real_requests\n# from adafruit_io.adafruit_io import IO_HTTP",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_groups.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_groups.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_scd30\n\nimport adafruit_scd30\n# SCD-30 has tempremental I2C with clock stretching, datasheet recommends\n# starting at 50KHz\ni2c = busio.I2C(board.SCL, board.SDA, frequency=50000)\nscd = adafruit_scd30.SCD30(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/scd30/examples/scd30_simpletest.py",
      "library": "scd30",
      "type": "example",
      "file_name": "scd30_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_scd30\n\nimport adafruit_scd30\n# SCD-30 has tempremental I2C with clock stretching, datasheet recommends\n# starting at 50KHz\ni2c = busio.I2C(board.SCL, board.SDA, frequency=50000)\nscd = adafruit_scd30.SCD30(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/scd30/examples/scd30_simpletest.py",
      "library": "scd30",
      "type": "example",
      "file_name": "scd30_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 by Bryan Siepert, written for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\nimport time\n\nimport board\nimport busio\n\nimport adafruit_scd30\n\n# SCD-30 has tempremental I2C with clock stretching, datasheet recommends\n# starting at 50KHz\ni2c = busio.I2C(board.SCL, board.SDA, frequency=50000)\nscd = adafruit_scd30.SCD30(i2c)\n\nwhile True:\n    # since the measurement interval is long (2+ seconds) we check for new data before reading\n    # the values, to ensure current readings.\n    if scd.data_available:\n        print(\"Data Available!\")\n        print(\"CO2: %d PPM\" % scd.CO2)\n        print(\"Temperature: %0.2f degrees C\" % scd.temperature)\n        print(\"Humidity: %0.2f %% rH\" % scd.relative_humidity)\n        print(\"\")\n        print(\"Waiting for new data...\")\n        print(\"\")\n\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/scd30/examples/scd30_simpletest.py",
      "library": "scd30",
      "type": "example",
      "file_name": "scd30_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bmp3xx\n\nimport board\nimport adafruit_bmp3xx\n# I2C setup\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nbmp = adafruit_bmp3xx.BMP3XX_I2C(i2c)\n# SPI setup",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp3xx/examples/bmp3xx_simpletest.py",
      "library": "bmp3xx",
      "type": "example",
      "file_name": "bmp3xx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bmp3xx\n\nimport adafruit_bmp3xx\n# I2C setup\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nbmp = adafruit_bmp3xx.BMP3XX_I2C(i2c)\n# SPI setup\n# from digitalio import DigitalInOut, Direction\n# spi = board.SPI()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp3xx/examples/bmp3xx_simpletest.py",
      "library": "bmp3xx",
      "type": "example",
      "file_name": "bmp3xx_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_bmp3xx\n\n# I2C setup\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nbmp = adafruit_bmp3xx.BMP3XX_I2C(i2c)\n\n# SPI setup\n# from digitalio import DigitalInOut, Direction\n# spi = board.SPI()\n# cs = DigitalInOut(board.D5)\n# bmp = adafruit_bmp3xx.BMP3XX_SPI(spi, cs)\n\nbmp.pressure_oversampling = 8\nbmp.temperature_oversampling = 2\n\nwhile True:\n    print(f\"Pressure: {bmp.pressure:6.4f}  Temperature: {bmp.temperature:5.2f}\")\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp3xx/examples/bmp3xx_simpletest.py",
      "library": "bmp3xx",
      "type": "example",
      "file_name": "bmp3xx_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\n\n# Secondary (SCK1) SPI used to connect to WiFi board on Arduino Nano Connect RP2040\n    spi = busio.SPI(board.SCK1, board.MOSI1, board.MISO1)\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_wpa2ent_aio_post.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_wpa2ent_aio_post.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\n\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_wpa2ent_aio_post.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_wpa2ent_aio_post.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef connected(client):\n    print('Connected to Adafruit IO!  Listening for DemoFeed changes...')\n    client.subscribe('DemoFeed')\n\n# Usage example:\n### WiFi ###\n\nif not wifi.radio.connected:\n    print(\"Connecting to %s\" % ssid)\n    wifi.radio.connect(ssid, password)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_esp32s2.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_esp32s2.py",
      "chunk_type": "function",
      "function_name": "connected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef subscribe(client, userdata, topic, granted_qos):\n    print(f'Subscribed to {topic} with QOS level {granted_qos}')\n\n# Usage example:\ndef connected(client):\n    # Connected function will be called when the client is connected to Adafruit IO.\n    # This is a good place to subscribe to feed changes.  The client parameter\n    # passed to this function is the Adafruit IO MQTT client so you can make\n    # calls against it easily.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_esp32s2.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_esp32s2.py",
      "chunk_type": "function",
      "function_name": "subscribe"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef unsubscribe(client, userdata, topic, pid):\n    print(f'Unsubscribed from {topic} with PID {pid}')\n\n# Usage example:\n\ndef unsubscribe(client, userdata, topic, pid):\n    # This method is called when the client unsubscribes from a feed.\n    print(f\"Unsubscribed from {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_esp32s2.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_esp32s2.py",
      "chunk_type": "function",
      "function_name": "unsubscribe"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef disconnected(client):\n    print('Disconnected from Adafruit IO!')\n\n# Usage example:\n# Connect the callback methods defined above to Adafruit IO\nio.on_connect = connected\nio.on_disconnect = disconnected\nio.on_subscribe = subscribe\nio.on_unsubscribe = unsubscribe",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_esp32s2.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_esp32s2.py",
      "chunk_type": "function",
      "function_name": "disconnected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef publish(client, userdata, topic, pid):\n    print(f'Published to {topic} with PID {pid}')\n    if userdata is not None:\n        print('Published User data: ', end='')\n        print(userdata)\n\n# Usage example:\n\ndef publish(client, userdata, topic, pid):\n    # This method is called when the client publishes data to a feed.\n    print(f\"Published to {topic} with PID {pid}\")\n    if userdata is not None:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_esp32s2.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_esp32s2.py",
      "chunk_type": "function",
      "function_name": "publish"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef message(client, feed_id, payload):\n    print(f'Feed {feed_id} received new value: {payload}')\n\n# Usage example:\nio.on_subscribe = subscribe\nio.on_unsubscribe = unsubscribe\nio.on_message = message\nio.on_publish = publish\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_esp32s2.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_esp32s2.py",
      "chunk_type": "function",
      "function_name": "message"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n    # the new value.\n# Create a socket pool and ssl_context\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_esp32s2.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_esp32s2.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nfrom random import randint\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n# Create a socket pool and ssl_context\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(\n    broker=\"io.adafruit.com\",",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_simpletest_esp32s2.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_simpletest_esp32s2.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\n\napn = getenv(\"apn\")\napn_username = getenv(\"apn_username\")\napn_password = getenv(\"apn_password\")\n# Create a serial connection for the FONA connection\nuart = busio.UART(board.TX, board.RX)\nrst = digitalio.DigitalInOut(board.D4)\n# Use this for FONA800 and FONA808\nfona = FONA(uart, rst)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fona/examples/fona_simpletest.py",
      "library": "fona",
      "type": "example",
      "file_name": "fona_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\n\napn_username = getenv(\"apn_username\")\napn_password = getenv(\"apn_password\")\n# Create a serial connection for the FONA connection\nuart = busio.UART(board.TX, board.RX)\nrst = digitalio.DigitalInOut(board.D4)\n# Use this for FONA800 and FONA808\nfona = FONA(uart, rst)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fona/examples/fona_simpletest.py",
      "library": "fona",
      "type": "example",
      "file_name": "fona_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\n\n# create requests session\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, fona)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# fona._debug = True",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fona/examples/fona_simpletest.py",
      "library": "fona",
      "type": "example",
      "file_name": "fona_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\n\n# create requests session\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, fona)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# fona._debug = True",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fona/examples/fona_simpletest.py",
      "library": "fona",
      "type": "example",
      "file_name": "fona_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_hdc302x\n\nimport board\nimport adafruit_hdc302x\ni2c = board.I2C()\nsensor = adafruit_hdc302x.HDC302x(i2c)\nhigh_temp = 28\nhigh_humid = 80",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hdc302x/examples/hdc302x_alerts.py",
      "library": "hdc302x",
      "type": "example",
      "file_name": "hdc302x_alerts.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_hdc302x\n\nimport board\nimport adafruit_hdc302x\ni2c = board.I2C()\nsensor = adafruit_hdc302x.HDC302x(i2c)\nhigh_temp = 28\nhigh_humid = 80\nlow_temp = 24",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hdc302x/examples/hdc302x_alerts.py",
      "library": "hdc302x",
      "type": "example",
      "file_name": "hdc302x_alerts.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2024 Liz Clark for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\n\"\"\"HDC302x alerts example\"\"\"\n\nimport time\n\nimport board\n\nimport adafruit_hdc302x\n\ni2c = board.I2C()\nsensor = adafruit_hdc302x.HDC302x(i2c)\n\nhigh_temp = 28\nhigh_humid = 80\nlow_temp = 24\nlow_humid = 54\n\nprint(\"Setting alerts\")\nsensor.set_high_alert(high_temp, high_humid)\nsensor.set_low_alert(low_temp, low_humid)\n\nwhile True:\n    print(\"Temperature:\", sensor.temperature, \"C\")\n    print(\"Relative Humidity:\", sensor.relative_humidity, \"%\")\n    if sensor.high_alert:\n        print(\"High alert triggered!\")\n        print(\"Clearing high alert\")\n        sensor.clear_high_alert(high_temp, high_humid)\n    if sensor.low_alert:\n        print(\"Low alert triggered!\")\n        print(\"Clearing low alert\")\n        sensor.clear_low_alert(low_temp, low_humid)\n    else:\n        print(\"No alerts triggered\")\n    print()\n    time.sleep(2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hdc302x/examples/hdc302x_alerts.py",
      "library": "hdc302x",
      "type": "example",
      "file_name": "hdc302x_alerts.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport usb_hid\nfrom adafruit_hid.mouse import Mouse\nimport adafruit_nunchuk\n\nimport adafruit_nunchuk\nm = Mouse(usb_hid.devices)\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nnc = adafruit_nunchuk.Nunchuk(i2c)\ncenterX = 128",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/nunchuk/examples/nunchuk_analog_mouse.py",
      "library": "nunchuk",
      "type": "example",
      "file_name": "nunchuk_analog_mouse.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport usb_hid\nfrom adafruit_hid.mouse import Mouse\nimport adafruit_nunchuk\n\nimport adafruit_nunchuk\nm = Mouse(usb_hid.devices)\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nnc = adafruit_nunchuk.Nunchuk(i2c)\ncenterX = 128\ncenterY = 128",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/nunchuk/examples/nunchuk_analog_mouse.py",
      "library": "nunchuk",
      "type": "example",
      "file_name": "nunchuk_analog_mouse.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_tmp117 import TMP117, AlertMode\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntmp117 = TMP117(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tmp117/examples/tmp117_limits_test.py",
      "library": "tmp117",
      "type": "example",
      "file_name": "tmp117_limits_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 Bryan Siepert, written for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\nimport time\n\nimport board\n\nfrom adafruit_tmp117 import TMP117, AlertMode\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\ntmp117 = TMP117(i2c)\n\ntmp117.high_limit = 25\ntmp117.low_limit = 10\n\nprint(\"\\nHigh limit\", tmp117.high_limit)\nprint(\"Low limit\", tmp117.low_limit)\n\n# Try changing `alert_mode`  to see how it modifies the behavior of the alerts.\n# tmp117.alert_mode = AlertMode.WINDOW #default\n# tmp117.alert_mode = AlertMode.HYSTERESIS\n\nprint(\"Alert mode:\", AlertMode.string[tmp117.alert_mode])\nprint(\"\\n\\n\")\nwhile True:\n    print(\"Temperature: %.2f degrees C\" % tmp117.temperature)\n    alert_status = tmp117.alert_status\n    print(\"High alert:\", alert_status.high_alert)\n    print(\"Low alert:\", alert_status.low_alert)\n    print(\"\")\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tmp117/examples/tmp117_limits_test.py",
      "library": "tmp117",
      "type": "example",
      "file_name": "tmp117_limits_test.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport adafruit_touchscreen\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_button.sprite_button import SpriteButton\n\nts = adafruit_touchscreen.Touchscreen(board.TOUCH_XL, board.TOUCH_XR, board.TOUCH_YD, board.TOUCH_YU, calibration=((5200, 59000), (5800, 57000)), size=(board.DISPLAY.width, board.DISPLAY.height))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-button/examples/display_button_spritebutton_simpletest.py",
      "library": "display-button",
      "type": "example",
      "file_name": "display_button_spritebutton_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_touchscreen\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_button.sprite_button import SpriteButton\n\n    size=(board.DISPLAY.width, board.DISPLAY.height),\n# Make the display context\nmain_group = displayio.Group()\nboard.DISPLAY.root_group = main_group\nBUTTON_WIDTH = 10 * 16\nBUTTON_HEIGHT = 3 * 16\nBUTTON_MARGIN = 20",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-button/examples/display_button_spritebutton_simpletest.py",
      "library": "display-button",
      "type": "example",
      "file_name": "display_button_spritebutton_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from math import cos, radians, sin, sqrt\nfrom adafruit_featherwing import neopixel_featherwing\n\nneopixel = neopixel_featherwing.NeoPixelFeatherWing()\n# Remap the calculated rotation to 0 - 255",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/featherwing/examples/featherwing_neopixel_palette_example.py",
      "library": "featherwing",
      "type": "example",
      "file_name": "featherwing_neopixel_palette_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from math import cos, radians, sin, sqrt\nfrom adafruit_featherwing import neopixel_featherwing\n\ndef remap(vector):\n    return int((255 * vector + 85) * 0.75 + 0.5)\n\n# Usage example:\n    green = 1.0 / 3.0 * (1.0 - cosA) + sqrt(1.0 / 3.0) * sinA\n    blue = 1.0 / 3.0 * (1.0 - cosA) - sqrt(1.0 / 3.0) * sinA\n    return (remap(red), remap(green), remap(blue))\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/featherwing/examples/featherwing_neopixel_palette_example.py",
      "library": "featherwing",
      "type": "example",
      "file_name": "featherwing_neopixel_palette_example.py",
      "chunk_type": "function",
      "function_name": "remap"
    }
  },
  {
    "content": "from math import cos, radians, sin, sqrt\nfrom adafruit_featherwing import neopixel_featherwing\n\ndef rotate(degrees):\n    cosA = cos(radians(degrees))\n    sinA = sin(radians(degrees))\n    red = cosA + (1.0 - cosA) / 3.0\n    green = 1.0 / 3.0 * (1.0 - cosA) + sqrt(1.0 / 3.0) * sinA\n    blue = 1.0 / 3.0 * (1.0 - cosA) - sqrt(1.0 / 3.0) * sinA\n    return (remap(red), remap(green), remap(blue))\n\n# Usage example:\n\"\"\"\nThis creates a palette of colors, draws a pattern and\nrotates through the palette creating a moving rainbow.\n\"\"\"\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/featherwing/examples/featherwing_neopixel_palette_example.py",
      "library": "featherwing",
      "type": "example",
      "file_name": "featherwing_neopixel_palette_example.py",
      "chunk_type": "function",
      "function_name": "rotate"
    }
  },
  {
    "content": "from math import cos, radians, sin, sqrt\nfrom adafruit_featherwing import neopixel_featherwing\n\n# Clear the screen\n# Start the Animation\nneopixel.auto_write = False",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/featherwing/examples/featherwing_neopixel_palette_example.py",
      "library": "featherwing",
      "type": "example",
      "file_name": "featherwing_neopixel_palette_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_ltr390 import LTR390, Gain, MeasurementDelay, Resolution\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nltr = LTR390(i2c)\n# ltr.resolution = Resolution.RESOLUTION_16BIT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ltr390/examples/ltr390_configuration_example.py",
      "library": "ltr390",
      "type": "example",
      "file_name": "ltr390_configuration_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 by Bryan Siepert, written for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n# pylint:disable=unused-import,no-member\n\nimport time\n\nimport board\n\nfrom adafruit_ltr390 import LTR390, Gain, MeasurementDelay, Resolution\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nltr = LTR390(i2c)\n\n# ltr.resolution = Resolution.RESOLUTION_16BIT\nprint(\"Measurement resolution is\", Resolution.string[ltr.resolution])\n\n# ltr.gain = Gain.GAIN_1X\nprint(\"Measurement gain is\", Gain.string[ltr.gain])\n\n# ltr.measurement_delay = MeasurementDelay.DELAY_100MS\nprint(\"Measurement delay is\", MeasurementDelay.string[ltr.measurement_delay])\nprint(\"\")\nwhile True:\n    print(\"UV:\", ltr.uvs, \"\\t\\tAmbient Light:\", ltr.light)\n\n    # for shorter measurement delays you may need to make this sleep shorter to see a change\n    time.sleep(1.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ltr390/examples/ltr390_configuration_example.py",
      "library": "ltr390",
      "type": "example",
      "file_name": "ltr390_configuration_example.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import json\nimport time\nfrom array import array\nimport board\nimport numpy as np\nimport paho.mqtt.client as mqtt\nimport adafruit_mcp9808\n\nimport numpy as np\nimport paho.mqtt.client as mqtt\nimport adafruit_mcp9808\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# To initialise using the default address:\nmcp = adafruit_mcp9808.MCP9808(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp9808/examples/mcp9808_average_temp_mqtt.py",
      "library": "mcp9808",
      "type": "example",
      "file_name": "mcp9808_average_temp_mqtt.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport time\nfrom array import array\nimport board\nimport numpy as np\nimport paho.mqtt.client as mqtt\nimport adafruit_mcp9808\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# To initialise using the default address:\nmcp = adafruit_mcp9808.MCP9808(i2c)\nbroker_address = \"Broker IP\"\nport = 1883\nuser = \"mqttuser\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp9808/examples/mcp9808_average_temp_mqtt.py",
      "library": "mcp9808",
      "type": "example",
      "file_name": "mcp9808_average_temp_mqtt.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom adafruit_ht16k33.bargraph import Bicolor24\n\n# Import the Bicolor24 driver from the HT16K33 module\n# Create the I2C interface\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create the LED bargraph class.\nbc24 = Bicolor24(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ht16k33/examples/ht16k33_bicolor24_simpletest.py",
      "library": "ht16k33",
      "type": "example",
      "file_name": "ht16k33_bicolor24_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# Basic example of using the Bi-color 24 segment bargraph display.\n# This example and library is meant to work with Adafruit CircuitPython API.\n# Author: Carter Nelson\n# License: Public Domain\n\nimport time\n\n# Import board related modules\nimport board\nimport busio\n\n# Import the Bicolor24 driver from the HT16K33 module\nfrom adafruit_ht16k33.bargraph import Bicolor24\n\n# Create the I2C interface\ni2c = busio.I2C(board.SCL, board.SDA)\n\n# Create the LED bargraph class.\nbc24 = Bicolor24(i2c)\n\n# Set individual segments of bargraph\nbc24[0] = bc24.LED_RED\nbc24[1] = bc24.LED_GREEN\nbc24[2] = bc24.LED_YELLOW\n\ntime.sleep(2)\n\n# Turn them all off\nbc24.fill(bc24.LED_OFF)\n\n# Turn them on in a loop\nfor i in range(24):\n    bc24[i] = bc24.LED_RED\n    time.sleep(0.1)\n    bc24[i] = bc24.LED_OFF\n\ntime.sleep(1)\n\n# Fill the entrire bargraph\nbc24.fill(bc24.LED_GREEN)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ht16k33/examples/ht16k33_bicolor24_simpletest.py",
      "library": "ht16k33",
      "type": "example",
      "file_name": "ht16k33_bicolor24_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_rgb_display import color565, ili9341\nimport adafruit_focaltouch\n\nimport adafruit_focaltouch\n# Create library object using our Bus I2C & SPI port\ni2c = busio.I2C(board.SCL, board.SDA)\nspi = busio.SPI(clock=board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Adafruit Metro M0 + 2.8\" Capacitive touch shield\ncs_pin = digitalio.DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/focaltouch/examples/focaltouch_paint_simpletest.py",
      "library": "focaltouch",
      "type": "example",
      "file_name": "focaltouch_paint_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_rgb_display import color565, ili9341\nimport adafruit_focaltouch\n\nimport adafruit_focaltouch\n# Create library object using our Bus I2C & SPI port\ni2c = busio.I2C(board.SCL, board.SDA)\nspi = busio.SPI(clock=board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Adafruit Metro M0 + 2.8\" Capacitive touch shield\ncs_pin = digitalio.DigitalInOut(board.D10)\ndc_pin = digitalio.DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/focaltouch/examples/focaltouch_paint_simpletest.py",
      "library": "focaltouch",
      "type": "example",
      "file_name": "focaltouch_paint_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_rgb_display import color565, ili9341\nimport adafruit_focaltouch\n\n# Create library object using our Bus I2C & SPI port\ni2c = busio.I2C(board.SCL, board.SDA)\nspi = busio.SPI(clock=board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Adafruit Metro M0 + 2.8\" Capacitive touch shield\ncs_pin = digitalio.DigitalInOut(board.D10)\ndc_pin = digitalio.DigitalInOut(board.D9)\n# Initialize display\ndisplay = ili9341.ILI9341(spi, cs=cs_pin, dc=dc_pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/focaltouch/examples/focaltouch_paint_simpletest.py",
      "library": "focaltouch",
      "type": "example",
      "file_name": "focaltouch_paint_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_rgb_display import color565, ili9341\nimport adafruit_focaltouch\n\ni2c = busio.I2C(board.SCL, board.SDA)\nspi = busio.SPI(clock=board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Adafruit Metro M0 + 2.8\" Capacitive touch shield\ncs_pin = digitalio.DigitalInOut(board.D10)\ndc_pin = digitalio.DigitalInOut(board.D9)\n# Initialize display\ndisplay = ili9341.ILI9341(spi, cs=cs_pin, dc=dc_pin)\n# Fill with black!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/focaltouch/examples/focaltouch_paint_simpletest.py",
      "library": "focaltouch",
      "type": "example",
      "file_name": "focaltouch_paint_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_rgb_display import color565, ili9341\nimport adafruit_focaltouch\n\n# Initialize display\ndisplay = ili9341.ILI9341(spi, cs=cs_pin, dc=dc_pin)\n# Fill with black!\nft = adafruit_focaltouch.Adafruit_FocalTouch(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/focaltouch/examples/focaltouch_paint_simpletest.py",
      "library": "focaltouch",
      "type": "example",
      "file_name": "focaltouch_paint_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_scd4x\n\nimport board\nimport adafruit_scd4x\ni2c = board.I2C()\nscd4x = adafruit_scd4x.SCD4X(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/scd4x/examples/scd41_single_shot_example.py",
      "library": "scd4x",
      "type": "example",
      "file_name": "scd41_single_shot_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_scd4x\n\nimport board\nimport adafruit_scd4x\ni2c = board.I2C()\nscd4x = adafruit_scd4x.SCD4X(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/scd4x/examples/scd41_single_shot_example.py",
      "library": "scd4x",
      "type": "example",
      "file_name": "scd41_single_shot_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_minitft_revb_simpletest.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_minitft_revb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_minitft_revb_simpletest.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_minitft_revb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)\ndisplay = ST7735R(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_minitft_revb_simpletest.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_minitft_revb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)\ndisplay = ST7735R(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_minitft_revb_simpletest.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_minitft_revb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_sdcard\nimport board\nimport digitalio\nimport displayio\nimport fourwire\nimport storage\nfrom adafruit_hx8357 import HX8357\nfrom adafruit_bitmapsaver import save_pixels\n\nDISPLAY_HEIGHT = 320\nTAKE_SCREENSHOT = False  # Set to True to take a screenshot\n# Initialize SPI Bus\nspi = board.SPI()\n# Initialize TFT Featherwing Display\ntft_cs = board.D9\ntft_dc = board.D10",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/bitmapsaver/examples/bitmapsaver_screenshot_tft_featherwing.py",
      "library": "bitmapsaver",
      "type": "example",
      "file_name": "bitmapsaver_screenshot_tft_featherwing.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_sdcard\nimport board\nimport digitalio\nimport displayio\nimport fourwire\nimport storage\nfrom adafruit_hx8357 import HX8357\nfrom adafruit_bitmapsaver import save_pixels\n\n# Initialize SPI Bus\nspi = board.SPI()\n# Initialize TFT Featherwing Display\ntft_cs = board.D9\ntft_dc = board.D10\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = HX8357(display_bus, width=DISPLAY_WIDTH, height=DISPLAY_HEIGHT)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/bitmapsaver/examples/bitmapsaver_screenshot_tft_featherwing.py",
      "library": "bitmapsaver",
      "type": "example",
      "file_name": "bitmapsaver_screenshot_tft_featherwing.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_sdcard\nimport board\nimport digitalio\nimport displayio\nimport fourwire\nimport storage\nfrom adafruit_hx8357 import HX8357\nfrom adafruit_bitmapsaver import save_pixels\n\n# Initialize SPI Bus\nspi = board.SPI()\n# Initialize TFT Featherwing Display\ntft_cs = board.D9\ntft_dc = board.D10\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = HX8357(display_bus, width=DISPLAY_WIDTH, height=DISPLAY_HEIGHT)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/bitmapsaver/examples/bitmapsaver_screenshot_tft_featherwing.py",
      "library": "bitmapsaver",
      "type": "example",
      "file_name": "bitmapsaver_screenshot_tft_featherwing.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_neopxl8 import NeoPxl8\n\n# Customize for your strands here\nnum_strands = 8\nstrand_length = 30\nfirst_led_pin = board.NEOPIXEL0\nnum_pixels = num_strands * strand_length\n# Make the object to control the pixels",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopxl8/examples/neopxl8_simpletest.py",
      "library": "neopxl8",
      "type": "example",
      "file_name": "neopxl8_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2022 Jeff Epler\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\n\nfrom adafruit_neopxl8 import NeoPxl8\n\n# Customize for your strands here\nnum_strands = 8\nstrand_length = 30\nfirst_led_pin = board.NEOPIXEL0\n\nnum_pixels = num_strands * strand_length\n\n# Make the object to control the pixels\npixels = NeoPxl8(\n    first_led_pin,\n    num_pixels,\n    num_strands=num_strands,\n    auto_write=False,\n    brightness=1.00,\n)\n\nwhile True:\n    for i in range(num_pixels):\n        pixels[i] = 0x00_01_00\n        pixels[i - 8] = 0x00_00_00\n        pixels.show()\n        time.sleep(1e-3)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopxl8/examples/neopxl8_simpletest.py",
      "library": "neopxl8",
      "type": "example",
      "file_name": "neopxl8_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_character_lcd.character_lcd_rgb_i2c as character_lcd\n\n# Modify this if you have a different sized Character LCD\nlcd_columns = 16\nlcd_rows = 2\n# Initialise I2C bus.\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Initialise the LCD class\nlcd = character_lcd.Character_LCD_RGB_I2C(i2c, lcd_columns, lcd_rows)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_keypad_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_keypad_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_mcp2515 import MCP2515 as CAN\nfrom adafruit_mcp2515.canio import Message, RemoteTransmissionRequest\n\ncs = DigitalInOut(board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp2515/examples/mcp2515_simpletest.py",
      "library": "mcp2515",
      "type": "example",
      "file_name": "mcp2515_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_mcp2515 import MCP2515 as CAN\nfrom adafruit_mcp2515.canio import Message, RemoteTransmissionRequest\n\ncs = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\ncan_bus = CAN(spi, cs, loopback=True, silent=True)  # use loopback to test without another device",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp2515/examples/mcp2515_simpletest.py",
      "library": "mcp2515",
      "type": "example",
      "file_name": "mcp2515_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport pwmio\nfrom adafruit_motor import servo\n\nimport pwmio\n# create a PWMOut object on the control pin.\npwm = pwmio.PWMOut(board.D5, duty_cycle=0, frequency=50)\n# To get the full range of the servo you will likely need to adjust the min_pulse and max_pulse to\n# match the stall points of the servo.\n# This is an example for the Sub-micro servo: https://www.adafruit.com/product/2201",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/motor/examples/motor_servo_sweep_simpletest.py",
      "library": "motor",
      "type": "example",
      "file_name": "motor_servo_sweep_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_tpa2016\n\nimport board\nimport busio\nimport adafruit_tpa2016\ni2c = busio.I2C(board.SCL, board.SDA)\ntpa = adafruit_tpa2016.TPA2016(i2c)\ntpa.fixed_gain = -16",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tpa2016/examples/tpa2016_simpletest.py",
      "library": "tpa2016",
      "type": "example",
      "file_name": "tpa2016_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport adafruit_tpa2016\n\nimport busio\nimport adafruit_tpa2016\ni2c = busio.I2C(board.SCL, board.SDA)\ntpa = adafruit_tpa2016.TPA2016(i2c)\ntpa.fixed_gain = -16",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tpa2016/examples/tpa2016_simpletest.py",
      "library": "tpa2016",
      "type": "example",
      "file_name": "tpa2016_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport busio\n\nimport adafruit_tpa2016\n\ni2c = busio.I2C(board.SCL, board.SDA)\ntpa = adafruit_tpa2016.TPA2016(i2c)\n\ntpa.fixed_gain = -16\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tpa2016/examples/tpa2016_simpletest.py",
      "library": "tpa2016",
      "type": "example",
      "file_name": "tpa2016_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import adafruit_sdcard\nimport board\nimport busio\nimport digitalio\nimport storage\nimport adafruit_vs1053\n\nimport adafruit_vs1053\n# Define pins connected to VS1053:\n# For FeatherWing with Feather M0:\nSDCS = board.D5  # Pin connected to SD card CS line.\nMP3CS = board.D6  # Pin connected to VS1053 CS line.\nDREQ = board.D9  # Pin connected to VS1053 DREQ line.\nXDCS = board.D10  # Pin connected to VS1053 D/C line.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vs1053/examples/vs1053_simpletest.py",
      "library": "vs1053",
      "type": "example",
      "file_name": "vs1053_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_sdcard\nimport board\nimport busio\nimport digitalio\nimport storage\nimport adafruit_vs1053\n\n# Define pins connected to VS1053:\n# For FeatherWing with Feather M0:\nSDCS = board.D5  # Pin connected to SD card CS line.\nMP3CS = board.D6  # Pin connected to VS1053 CS line.\nDREQ = board.D9  # Pin connected to VS1053 DREQ line.\nXDCS = board.D10  # Pin connected to VS1053 D/C line.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vs1053/examples/vs1053_simpletest.py",
      "library": "vs1053",
      "type": "example",
      "file_name": "vs1053_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_sdcard\nimport board\nimport busio\nimport digitalio\nimport storage\nimport adafruit_vs1053\n\n# Define pins connected to VS1053:\n# For FeatherWing with Feather M0:\nSDCS = board.D5  # Pin connected to SD card CS line.\nMP3CS = board.D6  # Pin connected to VS1053 CS line.\nDREQ = board.D9  # Pin connected to VS1053 DREQ line.\nXDCS = board.D10  # Pin connected to VS1053 D/C line.\n# Other configuration:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vs1053/examples/vs1053_simpletest.py",
      "library": "vs1053",
      "type": "example",
      "file_name": "vs1053_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_sdcard\nimport board\nimport busio\nimport digitalio\nimport storage\nimport adafruit_vs1053\n\n# For FeatherWing with Feather M0:\nSDCS = board.D5  # Pin connected to SD card CS line.\nMP3CS = board.D6  # Pin connected to VS1053 CS line.\nDREQ = board.D9  # Pin connected to VS1053 DREQ line.\nXDCS = board.D10  # Pin connected to VS1053 D/C line.\n# Other configuration:\nPLAYBACK_FILE = \"/sd/test.wav\"  # Name of file to play.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vs1053/examples/vs1053_simpletest.py",
      "library": "vs1053",
      "type": "example",
      "file_name": "vs1053_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_sdcard\nimport board\nimport busio\nimport digitalio\nimport storage\nimport adafruit_vs1053\n\nBUFFER_SIZE = 128  # Size in bytes of the MP3 data buffer for sending data to\n# the VS1053.\n# Setup SPI bus (hardware SPI).\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Setup SD card and mount it in the filesystem.\nsd_cs = digitalio.DigitalInOut(SDCS)\nsdcard = adafruit_sdcard.SDCard(spi, sd_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vs1053/examples/vs1053_simpletest.py",
      "library": "vs1053",
      "type": "example",
      "file_name": "vs1053_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_sdcard\nimport board\nimport busio\nimport digitalio\nimport storage\nimport adafruit_vs1053\n\n# Setup SPI bus (hardware SPI).\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Setup SD card and mount it in the filesystem.\nsd_cs = digitalio.DigitalInOut(SDCS)\nsdcard = adafruit_sdcard.SDCard(spi, sd_cs)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vs1053/examples/vs1053_simpletest.py",
      "library": "vs1053",
      "type": "example",
      "file_name": "vs1053_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_sdcard\nimport board\nimport busio\nimport digitalio\nimport storage\nimport adafruit_vs1053\n\n# Setup SPI bus (hardware SPI).\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Setup SD card and mount it in the filesystem.\nsd_cs = digitalio.DigitalInOut(SDCS)\nsdcard = adafruit_sdcard.SDCard(spi, sd_cs)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vs1053/examples/vs1053_simpletest.py",
      "library": "vs1053",
      "type": "example",
      "file_name": "vs1053_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_sdcard\nimport board\nimport busio\nimport digitalio\nimport storage\nimport adafruit_vs1053\n\n# import os\n# print('SD card root contains:')\n# print(os.listdir('/sd'))\n# Setup VS1053.\nvs1053 = adafruit_vs1053.VS1053(spi, MP3CS, XDCS, DREQ)\n# Set volume of left and right channels.\n# Value ranges from 0 to 255 for each channel, the lower the higher volume.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vs1053/examples/vs1053_simpletest.py",
      "library": "vs1053",
      "type": "example",
      "file_name": "vs1053_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mpu6050\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nmpu = adafruit_mpu6050.MPU6050(i2c)\n# Create Label(s) to show the readings. If you have a very small",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpu6050/examples/mpu6050_displayio_simpletest.py",
      "library": "mpu6050",
      "type": "example",
      "file_name": "mpu6050_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mpu6050\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nmpu = adafruit_mpu6050.MPU6050(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpu6050/examples/mpu6050_displayio_simpletest.py",
      "library": "mpu6050",
      "type": "example",
      "file_name": "mpu6050_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mpu6050\n\ndisplay_output_acceleration.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpu6050/examples/mpu6050_displayio_simpletest.py",
      "library": "mpu6050",
      "type": "example",
      "file_name": "mpu6050_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mpu6050\n\ndisplay_output_gyro.anchored_position = (4, board.DISPLAY.height // 2 - 40)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpu6050/examples/mpu6050_displayio_simpletest.py",
      "library": "mpu6050",
      "type": "example",
      "file_name": "mpu6050_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mpu6050\n\ndisplay_output_temperature.anchored_position = (4, board.DISPLAY.height // 2 - 20)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpu6050/examples/mpu6050_displayio_simpletest.py",
      "library": "mpu6050",
      "type": "example",
      "file_name": "mpu6050_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mpu6050\n\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpu6050/examples/mpu6050_displayio_simpletest.py",
      "library": "mpu6050",
      "type": "example",
      "file_name": "mpu6050_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport busio\nfrom adafruit_pca9685 import PCA9685\nfrom board import SCL, SDA\nfrom adafruit_motor import servo\n\ni2c = busio.I2C(SCL, SDA)\n# Create a simple PCA9685 class instance.\npca = PCA9685(i2c)\n# You can optionally provide a finer tuned reference clock speed to improve the accuracy of the",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/motor/examples/motor_pca9685_continuous_servo.py",
      "library": "motor",
      "type": "example",
      "file_name": "motor_pca9685_continuous_servo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ft5336\n\nimport board\nimport adafruit_ft5336\ni2c = board.I2C()\ntouch = adafruit_ft5336.Adafruit_FT5336(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ft5336/examples/ft5336_simpletest.py",
      "library": "ft5336",
      "type": "example",
      "file_name": "ft5336_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ft5336\n\nimport board\nimport adafruit_ft5336\ni2c = board.I2C()\ntouch = adafruit_ft5336.Adafruit_FT5336(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ft5336/examples/ft5336_simpletest.py",
      "library": "ft5336",
      "type": "example",
      "file_name": "ft5336_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2023 Liz Clark for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nDemo for the FT5336. Reads all available touch input coordinates.\n\"\"\"\n\nimport time\n\nimport board\n\nimport adafruit_ft5336\n\ni2c = board.I2C()\ntouch = adafruit_ft5336.Adafruit_FT5336(i2c)\n\nwhile True:\n    t = touch.points\n    print(t)\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ft5336/examples/ft5336_simpletest.py",
      "library": "ft5336",
      "type": "example",
      "file_name": "ft5336_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import math\nimport time\nimport analogio\nimport board\nimport microcontroller\nimport adafruit_ble_broadcastnet\n\nimport adafruit_ble_broadcastnet\nbattery = analogio.AnalogIn(board.VOLTAGE_MONITOR)\ndivider_ratio = 2\nlast_temperature = None\nconsecutive = 1",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_expo_backoff.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_expo_backoff.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.rainbow import Rainbow\nfrom adafruit_led_animation.animation.rainbowchase import RainbowChase\nfrom adafruit_led_animation.animation.rainbowcomet import RainbowComet\nfrom adafruit_led_animation.animation.rainbowsparkle import RainbowSparkle\nfrom adafruit_led_animation.sequence import AnimationSequence\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\npixel_num = 32\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_rainbow_animations.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_rainbow_animations.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.rainbow import Rainbow\nfrom adafruit_led_animation.animation.rainbowchase import RainbowChase\nfrom adafruit_led_animation.animation.rainbowcomet import RainbowComet\nfrom adafruit_led_animation.animation.rainbowsparkle import RainbowSparkle\nfrom adafruit_led_animation.sequence import AnimationSequence\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\npixel_num = 32\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)\nrainbow = Rainbow(pixels, speed=0.1, period=2)\nrainbow_chase = RainbowChase(pixels, speed=0.1, size=5, spacing=3)\nrainbow_comet = RainbowComet(pixels, speed=0.1, tail_length=7, bounce=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_rainbow_animations.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_rainbow_animations.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport busio\nfrom adafruit_pca9685 import PCA9685\nfrom board import SCL, SDA\nfrom adafruit_motor import stepper\n\ni2c = busio.I2C(SCL, SDA)\n# Create a simple PCA9685 class instance for the Motor FeatherWing's default address.\npca = PCA9685(i2c, address=0x60)\npca.frequency = 1600",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/motor/examples/motor_pca9685_stepper_motor.py",
      "library": "motor",
      "type": "example",
      "file_name": "motor_pca9685_stepper_motor.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_mcp2515 import MCP2515 as CAN\nfrom adafruit_mcp2515.canio import Message, RemoteTransmissionRequest, Timer\n\nimport digitalio\ncs = digitalio.DigitalInOut(board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp2515/examples/mcp2515_receive.py",
      "library": "mcp2515",
      "type": "example",
      "file_name": "mcp2515_receive.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_mcp2515 import MCP2515 as CAN\nfrom adafruit_mcp2515.canio import Message, RemoteTransmissionRequest, Timer\n\ncs = digitalio.DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nmcp = CAN(spi, cs, silent=True)\nt = Timer(timeout=5)\nnext_message = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp2515/examples/mcp2515_receive.py",
      "library": "mcp2515",
      "type": "example",
      "file_name": "mcp2515_receive.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom PIL import Image\nimport adafruit_dotstar as dotstar\n\nDOTS = dotstar.DotStar(board.SCK, board.MOSI, NUMPIXELS, auto_write=False, brightness=1.0, pixel_order=ORDER)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dotstar/examples/dotstar_image_pov.py",
      "library": "dotstar",
      "type": "example",
      "file_name": "dotstar_image_pov.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_time.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_time.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_time.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_time.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_time.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_time.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_time.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_time.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_time.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_time.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)  # Uncomment for Most Boards",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_time.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_time.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n# from adafruit_esp32spi import PWMOut\n# RED_LED = PWMOut.PWMOut(esp, 26)\n# GREEN_LED = PWMOut.PWMOut(esp, 27)\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password, status_pixel=status_pixel)\n# Define callback functions which will be called when certain events happen.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_time.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_time.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef connected(client):\n    print('Connected to Adafruit IO!')\n    io.subscribe_to_time('seconds')\n    io.subscribe_to_time('millis')\n    io.subscribe_to_time('iso')\n    io.subscribe_to_time('hours')\n\n# Usage example:\nesp32_reset = DigitalInOut(board.ESP_RESET)\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_time.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_time.py",
      "chunk_type": "function",
      "function_name": "connected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef disconnected(client):\n    print('Disconnected from Adafruit IO!')\n\n# Usage example:\n# Connect the callback methods defined above to Adafruit IO\nio.on_connect = connected\nio.on_disconnect = disconnected\nio.on_message = message\nio.on_publish = publish",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_time.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_time.py",
      "chunk_type": "function",
      "function_name": "disconnected"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef publish(client, userdata, topic, pid):\n    print(f'Published to {topic} with PID {pid}')\n    if userdata is not None:\n        print('Published User data: ', end='')\n        print(userdata)\n\n# Usage example:\n\n    # Subscribe to time/hours topic\n    # NOTE: This topic only publishes once every hour.\n    # https://io.adafruit.com/api/docs/mqtt.html#adafruit-io-monitor\n    io.subscribe_to_time(\"hours\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_time.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_time.py",
      "chunk_type": "function",
      "function_name": "publish"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\ndef message(client, feed_id, payload):\n    print(f'Feed {feed_id} received new value: {payload}')\n\n# Usage example:\nio.on_connect = connected\nio.on_disconnect = disconnected\nio.on_message = message\nio.on_publish = publish\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_time.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_time.py",
      "chunk_type": "function",
      "function_name": "message"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\n# Connect to WiFi\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_time.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_time.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_io.adafruit_io import IO_MQTT\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(\n    broker=\"io.adafruit.com\",",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_mqtt/adafruit_io_time.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_time.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_ht16k33 import segments\n\n# Create the display object.\n# Display connected to STEMMA QT connector.\ndisplay = segments.Seg14x4(board.STEMMA_I2C())\n# Display connected to I2C pins.\n# display = segments.Seg14x4(board.I2C())  # uses board.SCL and board.SDA\n# This section displays four 0's across the display. The code shows four",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ht16k33/examples/ht16k33_segments_14x4_demo.py",
      "library": "ht16k33",
      "type": "example",
      "file_name": "ht16k33_segments_14x4_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mcp9808\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nmcp = adafruit_mcp9808.MCP9808(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp9808/examples/mcp9808_displayio_simpletest.py",
      "library": "mcp9808",
      "type": "example",
      "file_name": "mcp9808_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mcp9808\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nmcp = adafruit_mcp9808.MCP9808(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp9808/examples/mcp9808_displayio_simpletest.py",
      "library": "mcp9808",
      "type": "example",
      "file_name": "mcp9808_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mcp9808\n\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp9808/examples/mcp9808_displayio_simpletest.py",
      "library": "mcp9808",
      "type": "example",
      "file_name": "mcp9808_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mcp9808\n\n# add the label(s) to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp9808/examples/mcp9808_displayio_simpletest.py",
      "library": "mcp9808",
      "type": "example",
      "file_name": "mcp9808_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_button import Button\nfrom adafruit_ili9341 import ILI9341\nimport adafruit_stmpe610\n\nBUTTON_LABEL_COLOR = 0x000000\n# --| Button Config |-------------------------------------------------\n# Release any resources currently in use for the displays\ndisp_bus = fourwire.FourWire(board.SPI(), command=board.D10, chip_select=board.D9, reset=None)\n# Instantiate the 2.4\" 320x240 TFT FeatherWing (#3315).\ndisplay = ILI9341(disp_bus, width=320, height=240)\n_touch_flip = (False, False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/stmpe610/examples/stmpe610_button_demo.py",
      "library": "stmpe610",
      "type": "example",
      "file_name": "stmpe610_button_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_button import Button\nfrom adafruit_ili9341 import ILI9341\nimport adafruit_stmpe610\n\n# Always set rotation before instantiating the touchscreen\ndisplay.rotation = 0\n# Instantiate touchscreen\nts_cs = digitalio.DigitalInOut(board.D6)\nts = adafruit_stmpe610.Adafruit_STMPE610_SPI(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/stmpe610/examples/stmpe610_button_demo.py",
      "library": "stmpe610",
      "type": "example",
      "file_name": "stmpe610_button_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_button import Button\nfrom adafruit_ili9341 import ILI9341\nimport adafruit_stmpe610\n\nts = adafruit_stmpe610.Adafruit_STMPE610_SPI(board.SPI(), ts_cs, calibration=((357, 3812), (390, 3555)), size=(display.width, display.height), disp_rotation=display.rotation, touch_flip=_touch_flip)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/stmpe610/examples/stmpe610_button_demo.py",
      "library": "stmpe610",
      "type": "example",
      "file_name": "stmpe610_button_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_stmpe610\nimport board\nimport digitalio\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_hx8357 import HX8357\nfrom adafruit_button.sprite_button import SpriteButton\n\nDISPLAY_WIDTH = 480\nDISPLAY_HEIGHT = 320\n# Initialize TFT Display\nspi = board.SPI()\ntft_cs = board.D9\ntft_dc = board.D10\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = HX8357(display_bus, width=DISPLAY_WIDTH, height=DISPLAY_HEIGHT)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-button/examples/display_button_spritebutton_tft_featherwing_simpletest.py",
      "library": "display-button",
      "type": "example",
      "file_name": "display_button_spritebutton_tft_featherwing_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_stmpe610\nimport board\nimport digitalio\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_hx8357 import HX8357\nfrom adafruit_button.sprite_button import SpriteButton\n\nDISPLAY_WIDTH = 480\nDISPLAY_HEIGHT = 320\n# Initialize TFT Display\nspi = board.SPI()\ntft_cs = board.D9\ntft_dc = board.D10\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = HX8357(display_bus, width=DISPLAY_WIDTH, height=DISPLAY_HEIGHT)\ndisplay.rotation = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-button/examples/display_button_spritebutton_tft_featherwing_simpletest.py",
      "library": "display-button",
      "type": "example",
      "file_name": "display_button_spritebutton_tft_featherwing_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_stmpe610\nimport board\nimport digitalio\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_hx8357 import HX8357\nfrom adafruit_button.sprite_button import SpriteButton\n\nDISPLAY_HEIGHT = 320\n# Initialize TFT Display\nspi = board.SPI()\ntft_cs = board.D9\ntft_dc = board.D10\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = HX8357(display_bus, width=DISPLAY_WIDTH, height=DISPLAY_HEIGHT)\ndisplay.rotation = 0\n_touch_flip = (False, True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-button/examples/display_button_spritebutton_tft_featherwing_simpletest.py",
      "library": "display-button",
      "type": "example",
      "file_name": "display_button_spritebutton_tft_featherwing_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_stmpe610\nimport board\nimport digitalio\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_hx8357 import HX8357\nfrom adafruit_button.sprite_button import SpriteButton\n\ndisplay = HX8357(display_bus, width=DISPLAY_WIDTH, height=DISPLAY_HEIGHT)\ndisplay.rotation = 0\n_touch_flip = (False, True)\n# Initialize 3.5\" TFT Featherwing Touchscreen\nts_cs_pin = digitalio.DigitalInOut(board.D6)\ntouchscreen = adafruit_stmpe610.Adafruit_STMPE610_SPI(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-button/examples/display_button_spritebutton_tft_featherwing_simpletest.py",
      "library": "display-button",
      "type": "example",
      "file_name": "display_button_spritebutton_tft_featherwing_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_stmpe610\nimport board\nimport digitalio\nimport displayio\nimport fourwire\nimport terminalio\nfrom adafruit_hx8357 import HX8357\nfrom adafruit_button.sprite_button import SpriteButton\n\ntouchscreen = adafruit_stmpe610.Adafruit_STMPE610_SPI(board.SPI(), ts_cs_pin, calibration=((231, 3703), (287, 3787)), size=(display.width, display.height), disp_rotation=display.rotation, touch_flip=_touch_flip)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-button/examples/display_button_spritebutton_tft_featherwing_simpletest.py",
      "library": "display-button",
      "type": "example",
      "file_name": "display_button_spritebutton_tft_featherwing_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_character_lcd.character_lcd_rgb_i2c as character_lcd\n\n# Modify this if you have a different sized Character LCD\nlcd_columns = 16\nlcd_rows = 2\n# Initialise I2C bus.\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Initialise the LCD class\nlcd = character_lcd.Character_LCD_RGB_I2C(i2c, lcd_columns, lcd_rows)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_i2c_rgb_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_i2c_rgb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_emc2101.emc2101_lut import EMC2101_LUT as EMC2101\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nFAN_MAX_RPM = 1700\nemc = EMC2101(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/emc2101/examples/emc2101_lut_example.py",
      "library": "emc2101",
      "type": "example",
      "file_name": "emc2101_lut_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 Bryan Siepert, written for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\nimport time\n\nimport board\n\nfrom adafruit_emc2101.emc2101_lut import EMC2101_LUT as EMC2101\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\nFAN_MAX_RPM = 1700\nemc = EMC2101(i2c)\nemc.manual_fan_speed = 50\ntime.sleep(1)\nemc.lut[27] = 25\nemc.lut[34] = 50\nemc.lut[42] = 75\nemc.lut_enabled = True\nemc.forced_temp_enabled = True\nprint(\"Lut:\", emc.lut)\nemc.forced_ext_temp = 28  # over 25, should be 25%\ntime.sleep(3)\nprint(\"25%% duty cycle is %f RPM:\" % emc.fan_speed)\n\n\nemc.forced_ext_temp = 35  # over 30, should be 50%\ntime.sleep(3)\nprint(\"50%% duty cycle is %f RPM:\" % emc.fan_speed)\n\nemc.forced_ext_temp = 43  # over 42, should be 75%\ntime.sleep(3)\nprint(\"75%% duty cycle is %f RPM:\" % emc.fan_speed)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/emc2101/examples/emc2101_lut_example.py",
      "library": "emc2101",
      "type": "example",
      "file_name": "emc2101_lut_example.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nfrom rainbowio import colorwheel\nimport adafruit_trellism4\n\nimport adafruit_trellism4\ntrellis = adafruit_trellism4.TrellisM4Express()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/trellism4/examples/trellism4_neopixel_simpletest.py",
      "library": "trellism4",
      "type": "example",
      "file_name": "trellism4_neopixel_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom analogio import AnalogIn\nimport adafruit_ds1841\n\ndef wiper_voltage(_wiper_pin):\n    raw_value = _wiper_pin.value\n    return raw_value / (2 ** 16 - 1) * _wiper_pin.reference_voltage\n\n# Usage example:\n            \"\\tLUTAR/LUT Selection: %s\" % hex(ds.lut_selection),\n            \"\\tWiper = %d\" % ds.wiper,\n            \"\\tWiper Voltage: %f\" % wiper_voltage(wiper_pin),\n        )\n        time.sleep(0.5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds1841/examples/ds1841_lut_test.py",
      "library": "ds1841",
      "type": "example",
      "file_name": "ds1841_lut_test.py",
      "chunk_type": "function",
      "function_name": "wiper_voltage"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom analogio import AnalogIn\nimport adafruit_ds1841\n\n    raw_value = _wiper_pin.value\ni2c = busio.I2C(board.SCL, board.SDA)\nds = adafruit_ds1841.DS1841(i2c)\nLUT_MAX_INDEX = 71",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds1841/examples/ds1841_lut_test.py",
      "library": "ds1841",
      "type": "example",
      "file_name": "ds1841_lut_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom analogio import AnalogIn\nimport adafruit_ds1841\n\n    raw_value = _wiper_pin.value\ni2c = busio.I2C(board.SCL, board.SDA)\nds = adafruit_ds1841.DS1841(i2c)\nLUT_MAX_INDEX = 71\nWIPER_MAX = 127",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds1841/examples/ds1841_lut_test.py",
      "library": "ds1841",
      "type": "example",
      "file_name": "ds1841_lut_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom analogio import AnalogIn\nimport adafruit_ds1841\n\nds = adafruit_ds1841.DS1841(i2c)\nLUT_MAX_INDEX = 71\nWIPER_MAX = 127\nwiper_pin = AnalogIn(board.A0)\nds.lut_mode_enabled = True\n# you only need to run this once per DS1841 since the LUT is stored to EEPROM",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds1841/examples/ds1841_lut_test.py",
      "library": "ds1841",
      "type": "example",
      "file_name": "ds1841_lut_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_ads1x15.ads1015 as ADS\nfrom adafruit_ads1x15.ads1x15 import Mode\nfrom adafruit_ads1x15.analog_in import AnalogIn\n\n# Create the I2C bus with a fast frequency\n# NOTE: Your device may not respect the frequency setting\n#       Raspberry Pis must change this in /boot/config.txt\ni2c = busio.I2C(board.SCL, board.SDA, frequency=1000000)\n# Create the ADC object using the I2C bus\nads = ADS.ADS1015(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ads1x15/examples/ads1x15_fast_read.py",
      "library": "ads1x15",
      "type": "example",
      "file_name": "ads1x15_fast_read.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# Used to ensure the display is free in CircuitPython\n# Define the pins needed for display use\n# This pinout is for a Feather M4 and may be different for other boards\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_2.13_color.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_2.13_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# Define the pins needed for display use\n# This pinout is for a Feather M4 and may be different for other boards\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_2.13_color.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_2.13_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# Define the pins needed for display use\n# This pinout is for a Feather M4 and may be different for other boards\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\n# Create the displayio connection to the display pins",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_2.13_color.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_2.13_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# Define the pins needed for display use\n# This pinout is for a Feather M4 and may be different for other boards\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\n# Create the displayio connection to the display pins\ndisplay_bus = fourwire.FourWire(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_2.13_color.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_2.13_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# This pinout is for a Feather M4 and may be different for other boards\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\n# Create the displayio connection to the display pins\ndisplay_bus = fourwire.FourWire(\n    spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_2.13_color.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_2.13_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\ndisplay = adafruit_il0373.IL0373(display_bus, width=212, height=104, rotation=90, busy_pin=epd_busy, highlight_color=16711680)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_2.13_color.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_2.13_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_vl53l1x\n\nimport digitalio\nimport adafruit_vl53l1x\n# Define the I2C pins.\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nxshut = [\n    # Update the D6 and D5 pins to match the pins to which you wired your sensor XSHUT pins.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l1x/examples/vl53l1x_set_address_multiple_sensors.py",
      "library": "vl53l1x",
      "type": "example",
      "file_name": "vl53l1x_set_address_multiple_sensors.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_vl53l1x\n\nxshut = [digitalio.DigitalInOut(board.D6), digitalio.DigitalInOut(board.D5)]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l1x/examples/vl53l1x_set_address_multiple_sensors.py",
      "library": "vl53l1x",
      "type": "example",
      "file_name": "vl53l1x_set_address_multiple_sensors.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nfrom adafruit_is31fl3731.keybow2040 import Keybow2040 as Display\n\n# Convert HSV colour to RGB\n\n:param hue: hue; 0.0-1.0\n:param sat: saturation; 0.0-1.0\n:param val: value; 0.0-1.0\ndef hsv_to_rgb(hue, sat, val):\n    \"\"\"\n    Convert HSV colour to RGB\n\n    :param hue: hue; 0.0-1.0\n    :param sat: saturation; 0.0-1.0\n    :param val: value; 0.0-1.0\n    \"\"\"\n    if sat == 0.0:\n        return (val, val, val)\n    i = int(hue * 6.0)\n    p = val * (1.0 - sat)\n    f = hue * 6.0 - i\n    q = val * (1.0 - sat * f)\n    t = val * (1.0 - sat * (1.0 - f))\n    i %= 6\n    if i == 0:\n        return (val, t, p)\n    if i == 1:\n        return (q, val, p)\n    if i == 2:\n        return (p, val, t)\n    if i == 3:\n        return (p, q, val)\n    if i == 4:\n        return (t, p, val)\n    if i == 5:\n        return (val, p, q)\n\n# Usage example:\n            pixel_hue = pixel_hue - math.floor(pixel_hue)\n\n            rgb = hsv_to_rgb(pixel_hue, 1, 1)\n\n            display.pixelrgb(x, y, int(rgb[0] * 255), int(rgb[1] * 255), int(rgb[2] * 255))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3731/examples/is31fl3731_keybow_2040_rainbow.py",
      "library": "is31fl3731",
      "type": "example",
      "file_name": "is31fl3731_keybow_2040_rainbow.py",
      "chunk_type": "function",
      "function_name": "hsv_to_rgb"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nfrom adafruit_is31fl3731.keybow2040 import Keybow2040 as Display\n\n    if i == 5:\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Set up 4x4 RGB matrix of Keybow 2040\ndisplay = Display(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3731/examples/is31fl3731_keybow_2040_rainbow.py",
      "library": "is31fl3731",
      "type": "example",
      "file_name": "is31fl3731_keybow_2040_rainbow.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nimport board\nimport displayio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_ble.advertising.standard import SolicitServicesAdvertisement\nfrom adafruit_ble_apple_media import AppleMediaService, UnsupportedCommand\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_text import label\nfrom adafruit_clue import clue\n\n# PyLint can't find BLERadio for some reason so special case it here.\nradio = adafruit_ble.BLERadio()\na = SolicitServicesAdvertisement()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/clue/examples/clue_ams_remote_advanced.py",
      "library": "clue",
      "type": "example",
      "file_name": "clue_ams_remote_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nimport board\nimport displayio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_ble.advertising.standard import SolicitServicesAdvertisement\nfrom adafruit_ble_apple_media import AppleMediaService, UnsupportedCommand\nfrom adafruit_display_shapes.rect import Rect\nfrom adafruit_display_text import label\nfrom adafruit_clue import clue\n\n# arial12 = bitmap_font.load_font(\"/fonts/Arial-12.bdf\")\narial16 = bitmap_font.load_font(\"/fonts/Arial-16.bdf\")\n# arial24 = bitmap_font.load_font(\"/fonts/Arial-Bold-24.bdf\")\ndisplay = board.DISPLAY\ngroup = displayio.Group()\ntitle = label.Label(font=arial16, x=15, y=25, text=\"_\", color=0xFFFFFF)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/clue/examples/clue_ams_remote_advanced.py",
      "library": "clue",
      "type": "example",
      "file_name": "clue_ams_remote_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport usb_hid\nfrom adafruit_hid.consumer_control import ConsumerControl\nfrom adafruit_hid.consumer_control_code import ConsumerControlCode\n\ncc = ConsumerControl(usb_hid.devices)\n# define buttons. these can be any physical switches/buttons, but the values\n# here work out-of-the-box with a FunHouse UP and DOWN buttons.\nbutton_up = digitalio.DigitalInOut(board.BUTTON_UP)\nbutton_up.switch_to_input(pull=digitalio.Pull.DOWN)\nbutton_down = digitalio.DigitalInOut(board.BUTTON_DOWN)\nbutton_down.switch_to_input(pull=digitalio.Pull.DOWN)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_consumer_control_brightness.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_consumer_control_brightness.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport usb_hid\nfrom adafruit_hid.consumer_control import ConsumerControl\nfrom adafruit_hid.consumer_control_code import ConsumerControlCode\n\n# define buttons. these can be any physical switches/buttons, but the values\n# here work out-of-the-box with a FunHouse UP and DOWN buttons.\nbutton_up = digitalio.DigitalInOut(board.BUTTON_UP)\nbutton_up.switch_to_input(pull=digitalio.Pull.DOWN)\nbutton_down = digitalio.DigitalInOut(board.BUTTON_DOWN)\nbutton_down.switch_to_input(pull=digitalio.Pull.DOWN)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_consumer_control_brightness.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_consumer_control_brightness.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import fcntl\nimport mmap\nimport os\nimport struct\nimport time\nimport board\nimport digitalio\nfrom PIL import Image, ImageDraw\nfrom adafruit_rgb_display import st7789\n\nclass Bitfield:\n\n    def __init__(self, offset, length, msb_right):\n        self.offset = offset\n        self.length = length\n        self.msb_right = msb_right\n\n# Usage example:\n\n\nclass Bitfield:\n    def __init__(self, offset, length, msb_right):\n        self.offset = offset",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_fbcp.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_fbcp.py",
      "chunk_type": "function",
      "function_name": "Bitfield"
    }
  },
  {
    "content": "import fcntl\nimport mmap\nimport os\nimport struct\nimport time\nimport board\nimport digitalio\nfrom PIL import Image, ImageDraw\nfrom adafruit_rgb_display import st7789\n\nclass Framebuffer:\n\n    def __init__(self, dev):\n        self.dev = dev\n        self.fbfd = os.open(dev, os.O_RDWR)\n        vinfo = struct.unpack('8I12I16I4I', fcntl.ioctl(self.fbfd, FBIOGET_VSCREENINFO, ' ' * ((8 + 12 + 16 + 4) * 4)))\n        finfo = struct.unpack('16cL4I3HI', fcntl.ioctl(self.fbfd, FBIOGET_FSCREENINFO, ' ' * 48))\n        bytes_per_pixel = (vinfo[6] + 7) // 8\n        screensize = vinfo[0] * vinfo[1] * bytes_per_pixel\n        fbp = mmap.mmap(self.fbfd, screensize, flags=mmap.MAP_SHARED, prot=mmap.PROT_READ)\n        self.fbp = fbp\n        self.xres = vinfo[0]\n        self.yres = vinfo[1]\n        self.xoffset = vinfo[4]\n        self.yoffset = vinfo[5]\n        self.bits_per_pixel = vinfo[6]\n        self.bytes_per_pixel = bytes_per_pixel\n        self.grayscale = vinfo[7]\n        self.red = Bitfield(vinfo[8], vinfo[9], vinfo[10])\n        self.green = Bitfield(vinfo[11], vinfo[12], vinfo[13])\n        self.blue = Bitfield(vinfo[14], vinfo[15], vinfo[16])\n        self.transp = Bitfield(vinfo[17], vinfo[18], vinfo[19])\n        self.nonstd = vinfo[20]\n        self.name = b''.join([x for x in finfo[0:15] if x != b'\\x00'])\n        self.type = finfo[18]\n        self.visual = finfo[20]\n        self.line_length = finfo[24]\n        self.screensize = screensize\n\n    def close(self):\n        self.fbp.close()\n        os.close(self.fbfd)\n\n    def blank(self, blank):\n        try:\n            if blank:\n                fcntl.ioctl(self.fbfd, FBIOBLANK, FB_BLANK_POWERDOWN)\n            else:\n                fcntl.ioctl(self.fbfd, FBIOBLANK, FB_BLANK_UNBLANK)\n        except OSError:\n            pass\n\n    def __str__(self):\n        visual_list = ['MONO01', 'MONO10', 'TRUECOLOR', 'PSEUDOCOLOR', 'DIRECTCOLOR', 'STATIC PSEUDOCOLOR', 'FOURCC']\n        type_list = ['PACKED_PIXELS', 'PLANES', 'INTERLEAVED_PLANES', 'TEXT', 'VGA_PLANES', 'FOURCC']\n        visual_name = 'unknown'\n        if self.visual < len(visual_list):\n            visual_name = visual_list[self.visual]\n        type_name = 'unknown'\n        if self.type < len(type_list):\n            type_name = type_list[self.type]\n        return 'mode \"%sx%s\"\\n' % (self.xres, self.yres) + '    nonstd %s\\n' % self.nonstd + '    rgba %s/%s,%s/%s,%s/%s,%s/%s\\n' % (self.red.length, self.red.offset, self.green.length, self.green.offset, self.blue.length, self.blue.offset, self.transp.length, self.transp.offset) + 'endmode\\n' + '\\n' + 'Frame buffer device information:\\n' + '    Device      : %s\\n' % self.dev + '    Name        : %s\\n' % self.name + '    Size        : (%d, %d)\\n' % (self.xres, self.yres) + '    Length      : %s\\n' % self.screensize + '    BPP         : %d\\n' % self.bits_per_pixel + '    Type        : %s\\n' % type_name + '    Visual      : %s\\n' % visual_name + '    LineLength  : %s\\n' % self.line_length\n\n# Usage example:\n# Kind of like a pygame Surface object, or not!\n# http://www.pygame.org/docs/ref/surface.html\nclass Framebuffer:\n    def __init__(self, dev):\n        self.dev = dev",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_fbcp.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_fbcp.py",
      "chunk_type": "function",
      "function_name": "Framebuffer"
    }
  },
  {
    "content": "import fcntl\nimport mmap\nimport os\nimport struct\nimport time\nimport board\nimport digitalio\nfrom PIL import Image, ImageDraw\nfrom adafruit_rgb_display import st7789\n\ndevice = \"/dev/fb0\"\nfb = Framebuffer(device)\n# Configuration for CS and DC pins (these are FeatherWing defaults on M0/M4):\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)\nreset_pin = None\n# Config for display baudrate (default max is 24mhz):",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_fbcp.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_fbcp.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import fcntl\nimport mmap\nimport os\nimport struct\nimport time\nimport board\nimport digitalio\nfrom PIL import Image, ImageDraw\nfrom adafruit_rgb_display import st7789\n\nfb = Framebuffer(device)\n# Configuration for CS and DC pins (these are FeatherWing defaults on M0/M4):\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)\nreset_pin = None\n# Config for display baudrate (default max is 24mhz):\nBAUDRATE = 64000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_fbcp.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_fbcp.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import fcntl\nimport mmap\nimport os\nimport struct\nimport time\nimport board\nimport digitalio\nfrom PIL import Image, ImageDraw\nfrom adafruit_rgb_display import st7789\n\n# Config for display baudrate (default max is 24mhz):\nBAUDRATE = 64000000\n# Setup SPI bus using hardware SPI:\nspi = board.SPI()\n# Create the ST7789 display:\ndisp = st7789.ST7789(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_fbcp.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_fbcp.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_hx8357 import HX8357\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.CE0\ntft_dc = board.D25\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hx8357/examples/hx8357_pitft_simpletest.py",
      "library": "hx8357",
      "type": "example",
      "file_name": "hx8357_pitft_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_hx8357 import HX8357\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.CE0\ntft_dc = board.D25\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hx8357/examples/hx8357_pitft_simpletest.py",
      "library": "hx8357",
      "type": "example",
      "file_name": "hx8357_pitft_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_hx8357 import HX8357\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.CE0\ntft_dc = board.D25\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = HX8357(display_bus, width=480, height=320)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/hx8357/examples/hx8357_pitft_simpletest.py",
      "library": "hx8357",
      "type": "example",
      "file_name": "hx8357_pitft_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_tla202x.tla2024 as TLA\nfrom adafruit_tla202x.analog_in import AnalogIn\n\n# Connect a voltage source to the first ADC channel, in addition to the\n# normal power and I2C connections. The voltage level should be between 0V/GND and VCC\n#\n########################################\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntla = TLA.TLA2024(i2c)\nval_max = (2**15) - 1\npin_0 = AnalogIn(tla, TLA.A0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tla202x/examples/tla202x_analog_in.py",
      "library": "tla202x",
      "type": "example",
      "file_name": "tla202x_analog_in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport keypad\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\nimport storage\nimport adafruit_ov5640\nsd_spi = busio.SPI(clock=board.GP18, MOSI=board.GP19, MISO=board.GP16)\nsd_cs = board.GP17\nsdcard = sdcardio.SDCard(sd_spi, sd_cs)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_capture_af.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_capture_af.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport keypad\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\nimport adafruit_ov5640\nsd_spi = busio.SPI(clock=board.GP18, MOSI=board.GP19, MISO=board.GP16)\nsd_cs = board.GP17\nsdcard = sdcardio.SDCard(sd_spi, sd_cs)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_capture_af.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_capture_af.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport keypad\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\nsdcard = sdcardio.SDCard(sd_spi, sd_cs)\nvfs = storage.VfsFat(sdcard)\ni2c = busio.I2C(board.GP5, board.GP4)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_capture_af.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_capture_af.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport keypad\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ni2c = busio.I2C(board.GP5, board.GP4)\nreset = digitalio.DigitalInOut(board.GP14)\ncam = adafruit_ov5640.OV5640(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_capture_af.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_capture_af.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport keypad\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ncam = adafruit_ov5640.OV5640(i2c, data_pins=(board.GP6, board.GP7, board.GP8, board.GP9, board.GP10, board.GP11, board.GP12, board.GP13), clock=board.GP3, vsync=board.GP0, href=board.GP2, mclk=None, shutdown=None, reset=reset, size=adafruit_ov5640.OV5640_SIZE_VGA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_capture_af.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_capture_af.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport keypad\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\n    size=adafruit_ov5640.OV5640_SIZE_VGA,\nkeys = keypad.Keys((board.GP22,), value_when_pressed=False, pull=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_capture_af.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_capture_af.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport keypad\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ndef exists(filename):\n    try:\n        os.stat(filename)\n        return True\n    except OSError as _:\n        return False\n\n# Usage example:\n            filename = f\"/sd/img{self.count:04d}.jpg\"\n            self.count += 1\n            if exists(filename):\n                continue\n            print(\"# writing to\", filename)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_capture_af.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_capture_af.py",
      "chunk_type": "function",
      "function_name": "exists"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport keypad\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\nclass ImageCounter:\n\n    def __init__(self):\n        self.count = 0\n\n    def get_next(self):\n        while True:\n            filename = f'/sd/img{self.count:04d}.jpg'\n            self.count += 1\n            if exists(filename):\n                continue\n            print('# writing to', filename)\n            return open(filename, 'wb')\n\n# Usage example:\n\n\nclass ImageCounter:\n    def __init__(self):\n        self.count = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_capture_af.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_capture_af.py",
      "chunk_type": "function",
      "function_name": "ImageCounter"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport keypad\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ndef open_next_image():\n    return _image_counter.get_next()\n\n# Usage example:\n            print(f\"Resolution {cam.width}x{cam.height}\")\n            try:\n                with open_next_image() as f:\n                    f.write(jpeg)\n                print(\"# Wrote image\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_capture_af.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_capture_af.py",
      "chunk_type": "function",
      "function_name": "open_next_image"
    }
  },
  {
    "content": "import os\nimport time\nimport board\nimport busio\nimport digitalio\nimport keypad\nimport sdcardio\nimport storage\nimport adafruit_ov5640\n\ncam.colorspace = adafruit_ov5640.OV5640_COLOR_JPEG\ncam.quality = 3\nb = bytearray(cam.capture_buffer_size)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_capture_af.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_capture_af.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_scd4x\n\nimport board\nimport adafruit_scd4x\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nscd4x = adafruit_scd4x.SCD4X(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/scd4x/examples/scd4x_tuning_knobs.py",
      "library": "scd4x",
      "type": "example",
      "file_name": "scd4x_tuning_knobs.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_scd4x\n\nimport adafruit_scd4x\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nscd4x = adafruit_scd4x.SCD4X(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/scd4x/examples/scd4x_tuning_knobs.py",
      "library": "scd4x",
      "type": "example",
      "file_name": "scd4x_tuning_knobs.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import gc\nimport time\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_espatcontrol.adafruit_espatcontrol_socket as pool\nfrom adafruit_espatcontrol import adafruit_espatcontrol\n\nesp = adafruit_espatcontrol.ESP_ATcontrol(uart, 115200, reset_pin=resetpin, rts_pin=rtspin, debug=debugflag)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_countviewer_enterprise.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_countviewer_enterprise.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import gc\nimport time\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_espatcontrol.adafruit_espatcontrol_socket as pool\nfrom adafruit_espatcontrol import adafruit_espatcontrol\n\n    uart, 115200, reset_pin=resetpin, rts_pin=rtspin, debug=debugflag\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# display",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_countviewer_enterprise.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_countviewer_enterprise.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import gc\nimport time\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_espatcontrol.adafruit_espatcontrol_socket as pool\nfrom adafruit_espatcontrol import adafruit_espatcontrol\n\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# display",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_countviewer_enterprise.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_countviewer_enterprise.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import gc\nimport time\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut, Direction\nimport adafruit_espatcontrol.adafruit_espatcontrol_socket as pool\nfrom adafruit_espatcontrol import adafruit_espatcontrol\n\n# Light up LEDs and play a tune\ndef chime_light():\n    \"\"\"Light up LEDs and play a tune\"\"\"\n    if NEOPIXELS_ON_CHANGE:\n        for i in range(0, 100, 10):\n            if pixel_type == 'RGB/GRB':\n                pixels.fill((i, i, i))\n            elif pixel_type == 'RGBW/GRBW':\n                pixels.fill((i, i, i, i))\n            pixels.show()\n            time.sleep(1)\n    if PLAY_SOUND_ON_CHANGE:\n        with audioio.AudioOut(board.A0) as audio:\n            audio.play(wave)\n            while audio.playing:\n                pass\n    if NEOPIXELS_ON_CHANGE:\n        for i in range(100, 0, -10):\n            if pixel_type == 'RGB/GRB':\n                pixels.fill((i, i, i))\n            elif pixel_type == 'RGBW/GRBW':\n                pixels.fill((i, i, i, i))\n            pixels.show()\n            time.sleep(1)\n        pixels.fill(0)\n\n# Usage example:\n\n    if last_value != value:\n        chime_light()  # animate the neopixels\n        last_value = value\n    times += 1",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp-atcontrol/examples/esp_atcontrol_countviewer_enterprise.py",
      "library": "esp-atcontrol",
      "type": "example",
      "file_name": "esp_atcontrol_countviewer_enterprise.py",
      "chunk_type": "function",
      "function_name": "chime_light"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom PIL import Image, ImageDraw\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\n# Configuration for CS and DC pins (these are PiTFT defaults):\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)\nreset_pin = digitalio.DigitalInOut(board.D24)\n# Config for display baudrate (default max is 24mhz):",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_image.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_image.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom PIL import Image, ImageDraw\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\n# Configuration for CS and DC pins (these are PiTFT defaults):\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)\nreset_pin = digitalio.DigitalInOut(board.D24)\n# Config for display baudrate (default max is 24mhz):\nBAUDRATE = 24000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_image.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_image.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom PIL import Image, ImageDraw\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\n# Configuration for CS and DC pins (these are PiTFT defaults):\ncs_pin = digitalio.DigitalInOut(board.CE0)\ndc_pin = digitalio.DigitalInOut(board.D25)\nreset_pin = digitalio.DigitalInOut(board.D24)\n# Config for display baudrate (default max is 24mhz):\nBAUDRATE = 24000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_image.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_image.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom PIL import Image, ImageDraw\nfrom adafruit_rgb_display import hx8357, ili9341, ssd1331, ssd1351, st7735, st7789\n\n# Config for display baudrate (default max is 24mhz):\nBAUDRATE = 24000000\n# Setup SPI bus using hardware SPI:\nspi = board.SPI()\n# Create the display:\n# disp = st7789.ST7789(spi, rotation=90,                            # 2.0\" ST7789",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rgb-display/examples/rgb_display_pillow_image.py",
      "library": "rgb-display",
      "type": "example",
      "file_name": "rgb_display_pillow_image.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.jd79661 import Adafruit_JD79661\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\nBACKGROUND_COLOR = BLACK\nFOREGROUND_COLOR = WHITE\nTEXT_COLOR = RED\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.CE0)\ndc = digitalio.DigitalInOut(board.D22)\nsrcs = None\nrst = digitalio.DigitalInOut(board.D27)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_pillow_demo.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.jd79661 import Adafruit_JD79661\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\nFOREGROUND_COLOR = WHITE\nTEXT_COLOR = RED\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.CE0)\ndc = digitalio.DigitalInOut(board.D22)\nsrcs = None\nrst = digitalio.DigitalInOut(board.D27)\nbusy = digitalio.DigitalInOut(board.D17)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_pillow_demo.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.jd79661 import Adafruit_JD79661\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\nTEXT_COLOR = RED\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.CE0)\ndc = digitalio.DigitalInOut(board.D22)\nsrcs = None\nrst = digitalio.DigitalInOut(board.D27)\nbusy = digitalio.DigitalInOut(board.D17)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_pillow_demo.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.jd79661 import Adafruit_JD79661\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\n# create the spi device and pins we will need\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.CE0)\ndc = digitalio.DigitalInOut(board.D22)\nsrcs = None\nrst = digitalio.DigitalInOut(board.D27)\nbusy = digitalio.DigitalInOut(board.D17)\n# give them all to our driver\n# display = Adafruit_JD79661(122, 150,        # 2.13\" Quad-color display",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_pillow_demo.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nfrom adafruit_epd.ek79686 import Adafruit_EK79686\nfrom adafruit_epd.il0373 import Adafruit_IL0373\nfrom adafruit_epd.il0398 import Adafruit_IL0398\nfrom adafruit_epd.il91874 import Adafruit_IL91874\nfrom adafruit_epd.jd79661 import Adafruit_JD79661\nfrom adafruit_epd.ssd1608 import Adafruit_SSD1608\nfrom adafruit_epd.ssd1675 import Adafruit_SSD1675\nfrom adafruit_epd.ssd1680 import Adafruit_SSD1680, Adafruit_SSD1680Z\nfrom adafruit_epd.ssd1681 import Adafruit_SSD1681\nfrom adafruit_epd.ssd1683 import Adafruit_SSD1683\nfrom adafruit_epd.uc8151d import Adafruit_UC8151D\nfrom adafruit_epd.uc8179 import Adafruit_UC8179\n\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\necs = digitalio.DigitalInOut(board.CE0)\ndc = digitalio.DigitalInOut(board.D22)\nsrcs = None\nrst = digitalio.DigitalInOut(board.D27)\nbusy = digitalio.DigitalInOut(board.D17)\n# give them all to our driver\n# display = Adafruit_JD79661(122, 150,        # 2.13\" Quad-color display\n# display = Adafruit_SSD1608(200, 200,        # 1.54\" HD mono display",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/epd/examples/epd_pillow_demo.py",
      "library": "epd",
      "type": "example",
      "file_name": "epd_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_bme680\n\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nbme680 = adafruit_bme680.Adafruit_BME680_I2C(i2c, debug=False)\n# change this to match the location's pressure (hPa) at sea level",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme680/examples/bme680_displayio_simpletest.py",
      "library": "bme680",
      "type": "example",
      "file_name": "bme680_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_bme680\n\nmain_group = Group()\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nbme680 = adafruit_bme680.Adafruit_BME680_I2C(i2c, debug=False)\n# change this to match the location's pressure (hPa) at sea level\nbme680.sea_level_pressure = 1013.25",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme680/examples/bme680_displayio_simpletest.py",
      "library": "bme680",
      "type": "example",
      "file_name": "bme680_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_bme680\n\n# add the label to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bme680/examples/bme680_displayio_simpletest.py",
      "library": "bme680",
      "type": "example",
      "file_name": "bme680_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_pca9685 import PCA9685\n\nimport board\n# Create the I2C bus interface.\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = busio.I2C(board.GP1, board.GP0)    # Pi Pico RP2040\n# Create a simple PCA9685 class instance.\npca = PCA9685(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pca9685/examples/pca9685_calibration.py",
      "library": "pca9685",
      "type": "example",
      "file_name": "pca9685_calibration.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_pioasm\n\nprogram = adafruit_pioasm.Program('\\n    set pindirs, 1\\n.wrap_target\\n    set pins, 0\\n    set pins, 1\\n.wrap', build_debuginfo=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_wrap.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_wrap.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2022 Jeff Epler, written for Adafruit Industries\n# SPDF-FileCopyrightText: 2020 Raspberry Pi (Trading) Ltd.\n#\n# SPDX-License-Identifier: BSD-3-Clause\nimport adafruit_pioasm\n\nprogram = adafruit_pioasm.Program(\n    \"\"\"\n    set pindirs, 1\n.wrap_target\n    set pins, 0\n    set pins, 1\n.wrap\"\"\",\n    build_debuginfo=True,\n)\n\nprogram.print_c_program(\"test\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_wrap.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_wrap.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport displayio\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_displayio_sh1107\n\n# Conway's \"Game of Life\" is played on a grid with simple rules, based\non the number of filled neighbors each cell has and whether the cell itself\nis filled.\n  * If the cell is filled, and 2 or 3 neighbors are filled, the cell stays\n    filled\n  * If the cell is empty, and exactly 3 neighbors are filled, a new cell\n    becomes filled\n  * Otherwise, the cell becomes or remains empty\n\nThe complicated way that the \"m1\" (minus 1) and \"p1\" (plus one) offsets are\ncalculated is due to the way the grid \"wraps around\", with the left and right\nsides being connected, as well as the top and bottom sides being connected.\n\nThis function has been somewhat optimized, so that when it indexes the bitmap\na single number [x + width * y] is used instead of indexing with [x, y].\nThis makes the animation run faster with some loss of clarity. More\noptimizations are probably possible.\ndef apply_life_rule(old, new):\n    \"\"\"\n    Conway's \"Game of Life\" is played on a grid with simple rules, based\n    on the number of filled neighbors each cell has and whether the cell itself\n    is filled.\n      * If the cell is filled, and 2 or 3 neighbors are filled, the cell stays\n        filled\n      * If the cell is empty, and exactly 3 neighbors are filled, a new cell\n        becomes filled\n      * Otherwise, the cell becomes or remains empty\n\n    The complicated way that the \"m1\" (minus 1) and \"p1\" (plus one) offsets are\n    calculated is due to the way the grid \"wraps around\", with the left and right\n    sides being connected, as well as the top and bottom sides being connected.\n\n    This function has been somewhat optimized, so that when it indexes the bitmap\n    a single number [x + width * y] is used instead of indexing with [x, y].\n    This makes the animation run faster with some loss of clarity. More\n    optimizations are probably possible.\n    \"\"\"\n    width = old.width\n    height = old.height\n    for y in range(height):\n        yyy = y * width\n        ym1 = (y + height - 1) % height * width\n        yp1 = (y + 1) % height * width\n        xm1 = width - 1\n        for x in range(width):\n            xp1 = (x + 1) % width\n            neighbors = old[xm1 + ym1] + old[xm1 + yyy] + old[xm1 + yp1] + old[x + ym1] + old[x + yp1] + old[xp1 + ym1] + old[xp1 + yyy] + old[xp1 + yp1]\n            new[x + yyy] = neighbors == 3 or (neighbors == 2 and old[x + yyy])\n            xm1 = x\n\n# Usage example:\n    for _ in range(n):\n        display.root_group = g1\n        apply_life_rule(b1, b2)\n        display.root_group = g2\n        apply_life_rule(b2, b1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_sh1107/examples/displayio_sh1107_game_of_life.py",
      "library": "displayio_sh1107",
      "type": "example",
      "file_name": "displayio_sh1107_game_of_life.py",
      "chunk_type": "function",
      "function_name": "apply_life_rule"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport displayio\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_displayio_sh1107\n\n# Fill 'fraction' out of all the cells.\ndef randomize(output, fraction=0.33):\n    \"\"\"Fill 'fraction' out of all the cells.\"\"\"\n    for i in range(output.height * output.width):\n        output[i] = random.random() < fraction\n\n# Usage example:\n    # After 2*n generations, fill the board with random values and\n    # start over with a new color.\n    randomize(b1)\n    # Only white for the OLED display\n    palette[1] = 0xFFFFFF",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_sh1107/examples/displayio_sh1107_game_of_life.py",
      "library": "displayio_sh1107",
      "type": "example",
      "file_name": "displayio_sh1107_game_of_life.py",
      "chunk_type": "function",
      "function_name": "randomize"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport displayio\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_displayio_sh1107\n\n# Fill the grid with a tribute to John Conway.\n\nBased on xkcd's tribute to John Conway (1937-2020) https://xkcd.com/2293/\ndef conway(output):\n    \"\"\"\n    Fill the grid with a tribute to John Conway.\n\n    Based on xkcd's tribute to John Conway (1937-2020) https://xkcd.com/2293/\n    \"\"\"\n    conway_data = [b'  +++   ', b'  + +   ', b'  + +   ', b'   +    ', b'+ +++   ', b' + + +  ', b'   +  + ', b'  + +   ', b'  + +   ']\n    for i in range(output.height * output.width):\n        output[i] = 0\n    for i, si in enumerate(conway_data):\n        y = output.height - len(conway_data) - 2 + i\n        for j, cj in enumerate(si):\n            output[(output.width - 8) // 2 + j, y] = cj & 1\n\n# Usage example:\n    Based on xkcd's tribute to John Conway (1937-2020) https://xkcd.com/2293/\n    \"\"\"\n    conway_data = [\n        b\"  +++   \",\n        b\"  + +   \",",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_sh1107/examples/displayio_sh1107_game_of_life.py",
      "library": "displayio_sh1107",
      "type": "example",
      "file_name": "displayio_sh1107_game_of_life.py",
      "chunk_type": "function",
      "function_name": "conway"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport displayio\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_displayio_sh1107\n\n        y = output.height - len(conway_data) - 2 + i\n            output[(output.width - 8) // 2 + j, y] = cj & 1\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndisplay_bus = I2CDisplayBus(i2c, device_address=0x3C)\n# SH1107 is vertically oriented 64x128",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_sh1107/examples/displayio_sh1107_game_of_life.py",
      "library": "displayio_sh1107",
      "type": "example",
      "file_name": "displayio_sh1107_game_of_life.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport board\nimport displayio\nfrom i2cdisplaybus import I2CDisplayBus\nimport adafruit_displayio_sh1107\n\ndisplay_bus = I2CDisplayBus(i2c, device_address=0x3C)\n# SH1107 is vertically oriented 64x128\nWIDTH = 128\nHEIGHT = 64\ndisplay = adafruit_displayio_sh1107.SH1107(display_bus, width=WIDTH, height=HEIGHT)\nSCALE = 2  # scale up for the small OLED pixels!\nb1 = displayio.Bitmap(display.width // SCALE, display.height // SCALE, 2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_sh1107/examples/displayio_sh1107_game_of_life.py",
      "library": "displayio_sh1107",
      "type": "example",
      "file_name": "displayio_sh1107_game_of_life.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lis2mdl\n\nimport board\nimport adafruit_lis2mdl\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmagnetometer = adafruit_lis2mdl.LIS2MDL(i2c)\n# calibration for magnetometer X (min, max), Y and Z",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis2mdl/examples/lis2mdl_calibrate.py",
      "library": "lis2mdl",
      "type": "example",
      "file_name": "lis2mdl_calibrate.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lis2mdl\n\nimport adafruit_lis2mdl\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmagnetometer = adafruit_lis2mdl.LIS2MDL(i2c)\n# calibration for magnetometer X (min, max), Y and Z\nhardiron_calibration = [[1000, -1000], [1000, -1000], [1000, -1000]]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis2mdl/examples/lis2mdl_calibrate.py",
      "library": "lis2mdl",
      "type": "example",
      "file_name": "lis2mdl_calibrate.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_lis2mdl\n\ndef calibrate():\n    start_time = time.monotonic()\n    while time.monotonic() - start_time < 10.0:\n        magval = magnetometer.magnetic\n        print('Calibrating - X:{0:10.2f}, Y:{1:10.2f}, Z:{2:10.2f} uT'.format(*magval))\n        for i, axis in enumerate(magval):\n            hardiron_calibration[i][0] = min(hardiron_calibration[i][0], axis)\n            hardiron_calibration[i][1] = max(hardiron_calibration[i][1], axis)\n    print('Calibration complete:')\n    print('hardiron_calibration =', hardiron_calibration)\n\n# Usage example:\n\n\nprint(\"Prepare to calibrate! Twist the magnetometer around in 3D in...\")\nprint(\"3...\")\ntime.sleep(1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis2mdl/examples/lis2mdl_calibrate.py",
      "library": "lis2mdl",
      "type": "example",
      "file_name": "lis2mdl_calibrate.py",
      "chunk_type": "function",
      "function_name": "calibrate"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_msa3xx import MSA301\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmsa = MSA301(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/msa301/examples/msa301_tap_example.py",
      "library": "msa301",
      "type": "example",
      "file_name": "msa301_tap_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nfrom adafruit_msa3xx import MSA301\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmsa = MSA301(i2c)\n\nmsa.enable_tap_detection()\n\nwhile True:\n    if msa.tapped:\n        print(\"Single Tap!\")\n    time.sleep(0.01)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/msa301/examples/msa301_tap_example.py",
      "library": "msa301",
      "type": "example",
      "file_name": "msa301_tap_example.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nfrom adafruit_display_analogclock import AnalogClock\n\nimport board\ndisplay = board.DISPLAY\nplain_clockface = AnalogClock(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display_analogclock/examples/display_analogclock_simpletest.py",
      "library": "display_analogclock",
      "type": "example",
      "file_name": "display_analogclock_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2025 Tim C for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nDemonstration of AnalogClock display widget.\nInitialize a clock, show it on the display and set it\nto show a specific time.\n\nIntended to run on devices with a built-in display.\n\"\"\"\n\nimport board\n\nfrom adafruit_display_analogclock import AnalogClock\n\ndisplay = board.DISPLAY\n\nplain_clockface = AnalogClock(\n    \"green_hour_hand.bmp\",\n    \"green_minute_hand.bmp\",\n    (120, 120),\n    106,\n    number_label_scale=2,\n    number_label_color=0x00FF00,\n)\n\ndisplay.root_group = plain_clockface\n\nplain_clockface.set_time(3, 30)\n\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display_analogclock/examples/display_analogclock_simpletest.py",
      "library": "display_analogclock",
      "type": "example",
      "file_name": "display_analogclock_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import adafruit_ticks\nimport board\nfrom adafruit_led_animation.animation.chase import Chase\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_led_animation.animation.pulse import Pulse\nfrom adafruit_led_animation.animation.rainbowchase import RainbowChase\nfrom adafruit_led_animation.animation.rainbowcomet import RainbowComet\nfrom adafruit_led_animation.animation.rainbowsparkle import RainbowSparkle\nfrom adafruit_led_animation.animation.sparkle import Sparkle\nfrom adafruit_led_animation.animation.sparklepulse import SparklePulse\nfrom adafruit_led_animation.color import AMBER, JADE, PURPLE, WHITE\nfrom adafruit_led_animation.group import AnimationGroup\nfrom adafruit_led_animation.helper import PixelMap\nfrom adafruit_neopxl8 import NeoPxl8\n\n# Customize for your strands here\nnum_strands = 8\nstrand_length = 30\nfirst_led_pin = board.NEOPIXEL0\nnum_pixels = num_strands * strand_length\n# Make the object to control the pixels",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopxl8/examples/neopxl8_multiple_animations.py",
      "library": "neopxl8",
      "type": "example",
      "file_name": "neopxl8_multiple_animations.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ticks\nimport board\nfrom adafruit_led_animation.animation.chase import Chase\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_led_animation.animation.pulse import Pulse\nfrom adafruit_led_animation.animation.rainbowchase import RainbowChase\nfrom adafruit_led_animation.animation.rainbowcomet import RainbowComet\nfrom adafruit_led_animation.animation.rainbowsparkle import RainbowSparkle\nfrom adafruit_led_animation.animation.sparkle import Sparkle\nfrom adafruit_led_animation.animation.sparklepulse import SparklePulse\nfrom adafruit_led_animation.color import AMBER, JADE, PURPLE, WHITE\nfrom adafruit_led_animation.group import AnimationGroup\nfrom adafruit_led_animation.helper import PixelMap\nfrom adafruit_neopxl8 import NeoPxl8\n\ndef strand(n):\n    return PixelMap(pixels, range(n * strand_length, (n + 1) * strand_length), individual_pixels=True)\n\n# Usage example:\nfrom adafruit_neopxl8 import NeoPxl8\n\n# Customize for your strands here\nnum_strands = 8\nstrand_length = 30",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopxl8/examples/neopxl8_multiple_animations.py",
      "library": "neopxl8",
      "type": "example",
      "file_name": "neopxl8_multiple_animations.py",
      "chunk_type": "function",
      "function_name": "strand"
    }
  },
  {
    "content": "import adafruit_ticks\nimport board\nfrom adafruit_led_animation.animation.chase import Chase\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_led_animation.animation.pulse import Pulse\nfrom adafruit_led_animation.animation.rainbowchase import RainbowChase\nfrom adafruit_led_animation.animation.rainbowcomet import RainbowComet\nfrom adafruit_led_animation.animation.rainbowsparkle import RainbowSparkle\nfrom adafruit_led_animation.animation.sparkle import Sparkle\nfrom adafruit_led_animation.animation.sparklepulse import SparklePulse\nfrom adafruit_led_animation.color import AMBER, JADE, PURPLE, WHITE\nfrom adafruit_led_animation.group import AnimationGroup\nfrom adafruit_led_animation.helper import PixelMap\nfrom adafruit_neopxl8 import NeoPxl8\n\n# Group them so we can run them all at once\nanimations = AnimationGroup(*animations)\n# Run the animations and report on the speed in frame per second\nt0 = adafruit_ticks.ticks_ms()\nframe_count = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/neopxl8/examples/neopxl8_multiple_animations.py",
      "library": "neopxl8",
      "type": "example",
      "file_name": "neopxl8_multiple_animations.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport adafruit_lis2mdl\n\nimport board\nimport adafruit_lis2mdl\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lis2mdl.LIS2MDL(i2c)\n# You will need the calibration values from your magnetometer calibration",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis2mdl/examples/lis2mdl_compass.py",
      "library": "lis2mdl",
      "type": "example",
      "file_name": "lis2mdl_compass.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport adafruit_lis2mdl\n\nimport adafruit_lis2mdl\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_lis2mdl.LIS2MDL(i2c)\n# You will need the calibration values from your magnetometer calibration\n# these values are in uT and are in X, Y, Z order (min and max values).\n#",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis2mdl/examples/lis2mdl_compass.py",
      "library": "lis2mdl",
      "type": "example",
      "file_name": "lis2mdl_compass.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport adafruit_lis2mdl\n\ndef normalize(_magvals):\n    ret = [0, 0, 0]\n    for i, axis in enumerate(_magvals):\n        minv, maxv = hardiron_calibration[i]\n        axis = min(max(minv, axis), maxv)\n        ret[i] = (axis - minv) * 200 / (maxv - minv) + -100\n    return ret\n\n# Usage example:\nwhile True:\n    magvals = sensor.magnetic\n    normvals = normalize(magvals)\n    print(f\"magnetometer: {magvals} -> {normvals}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis2mdl/examples/lis2mdl_compass.py",
      "library": "lis2mdl",
      "type": "example",
      "file_name": "lis2mdl_compass.py",
      "chunk_type": "function",
      "function_name": "normalize"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bmp280\n\nimport board\nimport adafruit_bmp280\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nbmp280 = adafruit_bmp280.Adafruit_BMP280_I2C(i2c)\n# OR Create sensor object, communicating over the board's default SPI bus",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp280/examples/bmp280_normal_mode.py",
      "library": "bmp280",
      "type": "example",
      "file_name": "bmp280_normal_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bmp280\n\nimport adafruit_bmp280\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nbmp280 = adafruit_bmp280.Adafruit_BMP280_I2C(i2c)\n# OR Create sensor object, communicating over the board's default SPI bus\n# spi = busio.SPI()\n# bmp_cs = digitalio.DigitalInOut(board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp280/examples/bmp280_normal_mode.py",
      "library": "bmp280",
      "type": "example",
      "file_name": "bmp280_normal_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bmp280\n\n# bmp_cs = digitalio.DigitalInOut(board.D5)\n# bmp280 = adafruit_bmp280.Adafruit_BMP280_SPI(spi, bmp_cs)\n# change this to match the location's pressure (hPa) at sea level\nbmp280.sea_level_pressure = 1013.25\nbmp280.mode = adafruit_bmp280.MODE_NORMAL\nbmp280.standby_period = adafruit_bmp280.STANDBY_TC_500\nbmp280.iir_filter = adafruit_bmp280.IIR_FILTER_X16\nbmp280.overscan_pressure = adafruit_bmp280.OVERSCAN_X16\nbmp280.overscan_temperature = adafruit_bmp280.OVERSCAN_X2",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp280/examples/bmp280_normal_mode.py",
      "library": "bmp280",
      "type": "example",
      "file_name": "bmp280_normal_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bmp280\n\n# bmp280 = adafruit_bmp280.Adafruit_BMP280_SPI(spi, bmp_cs)\n# change this to match the location's pressure (hPa) at sea level\nbmp280.sea_level_pressure = 1013.25\nbmp280.mode = adafruit_bmp280.MODE_NORMAL\nbmp280.standby_period = adafruit_bmp280.STANDBY_TC_500\nbmp280.iir_filter = adafruit_bmp280.IIR_FILTER_X16\nbmp280.overscan_pressure = adafruit_bmp280.OVERSCAN_X16\nbmp280.overscan_temperature = adafruit_bmp280.OVERSCAN_X2\n# The sensor will need a moment to gather inital readings",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp280/examples/bmp280_normal_mode.py",
      "library": "bmp280",
      "type": "example",
      "file_name": "bmp280_normal_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bmp280\n\n# change this to match the location's pressure (hPa) at sea level\nbmp280.sea_level_pressure = 1013.25\nbmp280.mode = adafruit_bmp280.MODE_NORMAL\nbmp280.standby_period = adafruit_bmp280.STANDBY_TC_500\nbmp280.iir_filter = adafruit_bmp280.IIR_FILTER_X16\nbmp280.overscan_pressure = adafruit_bmp280.OVERSCAN_X16\nbmp280.overscan_temperature = adafruit_bmp280.OVERSCAN_X2\n# The sensor will need a moment to gather inital readings",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp280/examples/bmp280_normal_mode.py",
      "library": "bmp280",
      "type": "example",
      "file_name": "bmp280_normal_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bmp280\n\n# change this to match the location's pressure (hPa) at sea level\nbmp280.sea_level_pressure = 1013.25\nbmp280.mode = adafruit_bmp280.MODE_NORMAL\nbmp280.standby_period = adafruit_bmp280.STANDBY_TC_500\nbmp280.iir_filter = adafruit_bmp280.IIR_FILTER_X16\nbmp280.overscan_pressure = adafruit_bmp280.OVERSCAN_X16\nbmp280.overscan_temperature = adafruit_bmp280.OVERSCAN_X2\n# The sensor will need a moment to gather inital readings",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp280/examples/bmp280_normal_mode.py",
      "library": "bmp280",
      "type": "example",
      "file_name": "bmp280_normal_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_bmp280\n\nbmp280.sea_level_pressure = 1013.25\nbmp280.mode = adafruit_bmp280.MODE_NORMAL\nbmp280.standby_period = adafruit_bmp280.STANDBY_TC_500\nbmp280.iir_filter = adafruit_bmp280.IIR_FILTER_X16\nbmp280.overscan_pressure = adafruit_bmp280.OVERSCAN_X16\nbmp280.overscan_temperature = adafruit_bmp280.OVERSCAN_X2\n# The sensor will need a moment to gather inital readings",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bmp280/examples/bmp280_normal_mode.py",
      "library": "bmp280",
      "type": "example",
      "file_name": "bmp280_normal_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/minimqtt_simpletest.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/minimqtt_simpletest.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/minimqtt_simpletest.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/minimqtt_simpletest.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/minimqtt_simpletest.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef connect(mqtt_client, userdata, flags, rc):\n    print('Connected to MQTT Broker!')\n    print(f'Flags: {flags}\\n RC: {rc}')\n\n# Usage example:\nfrom os import getenv\n\nimport adafruit_connection_manager\nimport board\nimport busio",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/minimqtt_simpletest.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest.py",
      "chunk_type": "function",
      "function_name": "connect"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef disconnect(mqtt_client, userdata, rc):\n    print('Disconnected from MQTT Broker!')\n\n# Usage example:\n\ndef disconnect(mqtt_client, userdata, rc):\n    # This method is called when the mqtt_client disconnects\n    # from the broker.\n    print(\"Disconnected from MQTT Broker!\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/minimqtt_simpletest.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest.py",
      "chunk_type": "function",
      "function_name": "disconnect"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef subscribe(mqtt_client, userdata, topic, granted_qos):\n    print(f'Subscribed to {topic} with QOS level {granted_qos}')\n\n# Usage example:\n\ndef subscribe(mqtt_client, userdata, topic, granted_qos):\n    # This method is called when the mqtt_client subscribes to a new feed.\n    print(f\"Subscribed to {topic} with QOS level {granted_qos}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/minimqtt_simpletest.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest.py",
      "chunk_type": "function",
      "function_name": "subscribe"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef unsubscribe(mqtt_client, userdata, topic, pid):\n    print(f'Unsubscribed from {topic} with PID {pid}')\n\n# Usage example:\n\ndef unsubscribe(mqtt_client, userdata, topic, pid):\n    # This method is called when the mqtt_client unsubscribes from a feed.\n    print(f\"Unsubscribed from {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/minimqtt_simpletest.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest.py",
      "chunk_type": "function",
      "function_name": "unsubscribe"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef publish(mqtt_client, userdata, topic, pid):\n    print(f'Published to {topic} with PID {pid}')\n\n# Usage example:\n\ndef publish(mqtt_client, userdata, topic, pid):\n    # This method is called when the mqtt_client publishes data to a feed.\n    print(f\"Published to {topic} with PID {pid}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/minimqtt_simpletest.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest.py",
      "chunk_type": "function",
      "function_name": "publish"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef message(client, topic, message):\n    print(f'New message on topic {topic}: {message}')\n\n# Usage example:\n\ndef message(client, topic, message):\n    print(f\"New message on topic {topic}: {message}\")\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/minimqtt_simpletest.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest.py",
      "chunk_type": "function",
      "function_name": "message"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Set up a MiniMQTT Client\nmqtt_client = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/minimqtt_simpletest.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Set up a MiniMQTT Client\nmqtt_client = MQTT.MQTT(\n    broker=\"io.adafruit.com\",",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/minimqtt_simpletest.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport busio\nfrom adafruit_is31fl3731.rgbmatrix5x5 import RGBmatrix5x5 as Display\n\n# Convert HSV colour to RGB\n\n:param hue: hue; 0.0-1.0\n:param sat: saturation; 0.0-1.0\n:param val: value; 0.0-1.0\ndef hsv_to_rgb(hue, sat, val):\n    \"\"\"\n    Convert HSV colour to RGB\n\n    :param hue: hue; 0.0-1.0\n    :param sat: saturation; 0.0-1.0\n    :param val: value; 0.0-1.0\n    \"\"\"\n    if sat == 0.0:\n        return (val, val, val)\n    i = int(hue * 6.0)\n    p = val * (1.0 - sat)\n    f = hue * 6.0 - i\n    q = val * (1.0 - sat * f)\n    t = val * (1.0 - sat * (1.0 - f))\n    i %= 6\n    if i == 0:\n        return (val, t, p)\n    if i == 1:\n        return (q, val, p)\n    if i == 2:\n        return (p, val, t)\n    if i == 3:\n        return (p, q, val)\n    if i == 4:\n        return (t, p, val)\n    if i == 5:\n        return (val, p, q)\n\n# Usage example:\n                pixel_hue = pixel_hue - math.floor(pixel_hue)\n\n                rgb = hsv_to_rgb(pixel_hue, 1, 1)\n\n                display.pixelrgb(x, y, int(rgb[0] * 255), int(rgb[1] * 255), int(rgb[2] * 255))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3731/examples/is31fl3731_rgbmatrix5x5_rainbow.py",
      "library": "is31fl3731",
      "type": "example",
      "file_name": "is31fl3731_rgbmatrix5x5_rainbow.py",
      "chunk_type": "function",
      "function_name": "hsv_to_rgb"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport busio\nfrom adafruit_is31fl3731.rgbmatrix5x5 import RGBmatrix5x5 as Display\n\n    if i == 5:\n# Create the I2C bus on a Pico Explorer Base\ni2c = busio.I2C(board.GP5, board.GP4)\n# Set up 5x5 RGB matrix Breakout\ndisplay = Display(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3731/examples/is31fl3731_rgbmatrix5x5_rainbow.py",
      "library": "is31fl3731",
      "type": "example",
      "file_name": "is31fl3731_rgbmatrix5x5_rainbow.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport busio\nfrom adafruit_is31fl3731.rgbmatrix5x5 import RGBmatrix5x5 as Display\n\ndef test_pixels(r, g, b):\n    for y in range(0, 5):\n        for x in range(0, 5):\n            display.fill(0)\n            display.pixelrgb(x, y, r, g, b)\n            time.sleep(0.05)\n\n# Usage example:\n\nwhile True:\n    test_pixels(64, 0, 0)  # RED\n    test_pixels(0, 64, 0)  # GREEN\n    test_pixels(0, 0, 64)  # BLUE",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3731/examples/is31fl3731_rgbmatrix5x5_rainbow.py",
      "library": "is31fl3731",
      "type": "example",
      "file_name": "is31fl3731_rgbmatrix5x5_rainbow.py",
      "chunk_type": "function",
      "function_name": "test_pixels"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport busio\nfrom adafruit_is31fl3731.rgbmatrix5x5 import RGBmatrix5x5 as Display\n\ndef test_rows(r, g, b):\n    for y in range(0, 5):\n        display.fill(0)\n        for x in range(0, 5):\n            display.pixelrgb(x, y, r, g, b)\n        time.sleep(0.2)\n\n# Usage example:\n    test_pixels(64, 64, 64)  # WHITE\n\n    test_rows(64, 0, 0)  # RED\n    test_rows(0, 64, 0)  # GREEN\n    test_rows(0, 0, 64)  # BLUE",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3731/examples/is31fl3731_rgbmatrix5x5_rainbow.py",
      "library": "is31fl3731",
      "type": "example",
      "file_name": "is31fl3731_rgbmatrix5x5_rainbow.py",
      "chunk_type": "function",
      "function_name": "test_rows"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport busio\nfrom adafruit_is31fl3731.rgbmatrix5x5 import RGBmatrix5x5 as Display\n\ndef test_columns(r, g, b):\n    for x in range(0, 5):\n        display.fill(0)\n        for y in range(0, 5):\n            display.pixelrgb(x, y, r, g, b)\n        time.sleep(0.2)\n\n# Usage example:\n    test_rows(64, 64, 64)  # WHITE\n\n    test_columns(64, 0, 0)  # RED\n    test_columns(0, 64, 0)  # GREEN\n    test_columns(0, 0, 64)  # BLUE",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3731/examples/is31fl3731_rgbmatrix5x5_rainbow.py",
      "library": "is31fl3731",
      "type": "example",
      "file_name": "is31fl3731_rgbmatrix5x5_rainbow.py",
      "chunk_type": "function",
      "function_name": "test_columns"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport busio\nfrom adafruit_is31fl3731.rgbmatrix5x5 import RGBmatrix5x5 as Display\n\ndef test_rainbow_sweep():\n    step = 0\n    for _ in range(100):\n        for y in range(0, 5):\n            for x in range(0, 5):\n                pixel_hue = (x + y + step / 20) / 8\n                pixel_hue = pixel_hue - int(pixel_hue)\n                pixel_hue += 0\n                pixel_hue = pixel_hue - math.floor(pixel_hue)\n                rgb = hsv_to_rgb(pixel_hue, 1, 1)\n                display.pixelrgb(x, y, int(rgb[0] * 255), int(rgb[1] * 255), int(rgb[2] * 255))\n        time.sleep(0.01)\n        step += 3\n\n# Usage example:\n    test_columns(64, 64, 64)  # WHITE\n\n    test_rainbow_sweep()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/is31fl3731/examples/is31fl3731_rgbmatrix5x5_rainbow.py",
      "library": "is31fl3731",
      "type": "example",
      "file_name": "is31fl3731_rgbmatrix5x5_rainbow.py",
      "chunk_type": "function",
      "function_name": "test_rainbow_sweep"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\nssid = getenv(\"CIRCUITPY_WIFI_SSID\")\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\nRELAY = DigitalInOut(board.D10)\nRELAY.direction = Direction.OUTPUT\n### WiFi ###",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_hi_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_hi_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\nRELAY.direction = Direction.OUTPUT\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_hi_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_hi_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D13)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_hi_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_hi_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\n### WiFi ###\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D13)\n# esp32_ready = DigitalInOut(board.D11)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_hi_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_hi_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\n    spi = busio.SPI(board.SCK1, board.MOSI1, board.MISO1)\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_hi_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_hi_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_hi_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_hi_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\n# RED_LED = PWMOut.PWMOut(esp, 26)\n# GREEN_LED = PWMOut.PWMOut(esp, 27)\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password, status_pixel=status_pixel)\n# Define callback functions which will be called when certain events happen.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_hi_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_hi_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\ndef connected(client):\n    client.subscribe('heatindex')\n\n# Usage example:\nesp32_reset = DigitalInOut(board.ESP_RESET)\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D13)\n# esp32_ready = DigitalInOut(board.D11)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_hi_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_hi_daughter.py",
      "chunk_type": "function",
      "function_name": "connected"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\ndef subscribe(client, userdata, topic, granted_qos):\n    print(f'Subscribed to {topic} with QOS level {granted_qos}')\n\n# Usage example:\n# Define callback functions which will be called when certain events happen.\ndef connected(client):\n    client.subscribe(\"heatindex\")\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_hi_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_hi_daughter.py",
      "chunk_type": "function",
      "function_name": "subscribe"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\ndef on_hi(client, topic, message):\n    if float(message) > 80.0:\n        RELAY.value = True\n    else:\n        RELAY.value = False\n\n# Usage example:\nio = IO_MQTT(mqtt_client)\n\nio.add_feed_callback(\"heatindex\", on_hi)\n# Connect the callback methods defined above to Adafruit IO\nio.on_connect = connected",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_hi_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_hi_daughter.py",
      "chunk_type": "function",
      "function_name": "on_hi"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\n# Connect to WiFi\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_hi_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_hi_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom adafruit_io.adafruit_io import IO_MQTT\nfrom digitalio import DigitalInOut, Direction\n\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Initialize a new MQTT Client object\nmqtt_client = MQTT.MQTT(\n    broker=\"io.adafruit.com\",",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dash_display/examples/dash_display_client_examples/relay_hi_daughter.py",
      "library": "dash_display",
      "type": "example",
      "file_name": "relay_hi_daughter.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport adafruit_framebuf\n\nWIDTH = 32\nHEIGHT = 8\nbuffer = bytearray(round(WIDTH * math.ceil(HEIGHT / 8)))\nfb = adafruit_framebuf.FrameBuffer(buffer, WIDTH, HEIGHT, buf_format=adafruit_framebuf.MVLSB)\n# Ascii printer for very small framebufs!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/framebuf/examples/framebuf_simpletest.py",
      "library": "framebuf",
      "type": "example",
      "file_name": "framebuf_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport adafruit_framebuf\n\ndef print_buffer(the_fb):\n    print('.' * (the_fb.width + 2))\n    for y in range(the_fb.height):\n        print('.', end='')\n        for x in range(the_fb.width):\n            if fb.pixel(x, y):\n                print('*', end='')\n            else:\n                print(' ', end='')\n        print('.')\n    print('.' * (the_fb.width + 2))\n\n# Usage example:\nfb.line(1, 1, fb.width - 2, fb.height - 2, True)\nfb.fill_rect(25, 2, 2, 2, True)\nprint_buffer(fb)\n\nprint(\"Text test: \")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/framebuf/examples/framebuf_simpletest.py",
      "library": "framebuf",
      "type": "example",
      "file_name": "framebuf_simpletest.py",
      "chunk_type": "function",
      "function_name": "print_buffer"
    }
  },
  {
    "content": "import math\nimport adafruit_framebuf\n\ndef clear_buffer():\n    for i, _ in enumerate(buffer):\n        buffer[i] = 0\n\n# Usage example:\nfb.text(\"hello\", 0, 0, True)\nprint_buffer(fb)\nclear_buffer()\n\n# write some larger text",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/framebuf/examples/framebuf_simpletest.py",
      "library": "framebuf",
      "type": "example",
      "file_name": "framebuf_simpletest.py",
      "chunk_type": "function",
      "function_name": "clear_buffer"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom adafruit_display_shapes.circle import Circle\nimport adafruit_monsterm4sk\n\n# Account for slight screen difference if you want\nLEFT_Y_OFFSET = 0  # 12 # my left screen is a tad higher\nSCREEN_SIZE = 240\ni2c_bus = board.I2C()  # uses board.SCL and board.SDA\n# i2c_bus = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmask = adafruit_monsterm4sk.MonsterM4sk(i2c=i2c_bus)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/monsterm4sk/examples/monsterm4sk_simpletest.py",
      "library": "monsterm4sk",
      "type": "example",
      "file_name": "monsterm4sk_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom adafruit_display_shapes.circle import Circle\nimport adafruit_monsterm4sk\n\nSCREEN_SIZE = 240\ni2c_bus = board.I2C()  # uses board.SCL and board.SDA\n# i2c_bus = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmask = adafruit_monsterm4sk.MonsterM4sk(i2c=i2c_bus)\nleft_group = displayio.Group()\nmask.left_display.root_group = left_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/monsterm4sk/examples/monsterm4sk_simpletest.py",
      "library": "monsterm4sk",
      "type": "example",
      "file_name": "monsterm4sk_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import _bleio\nimport adafruit_ble\nfrom adafruit_ble.advertising.standard import Advertisement\nfrom adafruit_ble.services.standard.device_info import DeviceInfoService\nfrom adafruit_ble_berrymed_pulse_oximeter import BerryMedPulseOximeterService\n\nconnection_error = ConnectionError\n    connection_error = _bleio.ConnectionError\n# PyLint can't find BLERadio for some reason so special case it here.\nble = adafruit_ble.BLERadio()\npulse_ox_connection = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_berrymed_pulse_oximeter/examples/ble_berrymed_pulse_oximeter_simpletest.py",
      "library": "ble_berrymed_pulse_oximeter",
      "type": "example",
      "file_name": "ble_berrymed_pulse_oximeter_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\n\nTEXT_URL = \"http://wifitest.adafruit.com/testwifi/index.html\"\nJSON_URL = \"http://wifitest.adafruit.com/testwifi/sample.json\"\n# ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# SPI Configuration",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pyportal/examples/pyportal_internet_json_fetching.py",
      "library": "pyportal",
      "type": "example",
      "file_name": "pyportal_internet_json_fetching.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\n\nJSON_URL = \"http://wifitest.adafruit.com/testwifi/sample.json\"\n# ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# SPI Configuration\nspi = board.SPI()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pyportal/examples/pyportal_internet_json_fetching.py",
      "library": "pyportal",
      "type": "example",
      "file_name": "pyportal_internet_json_fetching.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\n\n# ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# SPI Configuration\nspi = board.SPI()\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pyportal/examples/pyportal_internet_json_fetching.py",
      "library": "pyportal",
      "type": "example",
      "file_name": "pyportal_internet_json_fetching.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\n\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# SPI Configuration\nspi = board.SPI()\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pyportal/examples/pyportal_internet_json_fetching.py",
      "library": "pyportal",
      "type": "example",
      "file_name": "pyportal_internet_json_fetching.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\n\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# SPI Configuration\nspi = board.SPI()\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pyportal/examples/pyportal_internet_json_fetching.py",
      "library": "pyportal",
      "type": "example",
      "file_name": "pyportal_internet_json_fetching.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\n\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# SPI Configuration\nspi = board.SPI()\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\nif esp.status == adafruit_esp32spi.WL_IDLE_STATUS:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pyportal/examples/pyportal_internet_json_fetching.py",
      "library": "pyportal",
      "type": "example",
      "file_name": "pyportal_internet_json_fetching.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\n\n# SPI Configuration\nspi = board.SPI()\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\nif esp.status == adafruit_esp32spi.WL_IDLE_STATUS:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pyportal/examples/pyportal_internet_json_fetching.py",
      "library": "pyportal",
      "type": "example",
      "file_name": "pyportal_internet_json_fetching.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\n\n# SPI Configuration\nspi = board.SPI()\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\nif esp.status == adafruit_esp32spi.WL_IDLE_STATUS:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pyportal/examples/pyportal_internet_json_fetching.py",
      "library": "pyportal",
      "type": "example",
      "file_name": "pyportal_internet_json_fetching.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_lis3dh\n\n# i2c = board.I2C()  # uses board.SCL and board.SDA\n# lis3dh = adafruit_lis3dh.LIS3DH_I2C(i2c, address=0x19)\n# Set range of accelerometer (can be RANGE_2_G, RANGE_4_G, RANGE_8_G or RANGE_16_G).\nlis3dh.range = adafruit_lis3dh.RANGE_2_G\n# Loop forever printing accelerometer values",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lis3dh/examples/lis3dh_simpletest.py",
      "library": "lis3dh",
      "type": "example",
      "file_name": "lis3dh_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport adafruit_rsa\n\npublic_key, private_key = adafruit_rsa.newkeys(512)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rsa/examples/rsa_generate_json_keys.py",
      "library": "rsa",
      "type": "example",
      "file_name": "rsa_generate_json_keys.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2024 Tim Cocks\n# SPDX-License-Identifier: MIT\n\"\"\"\nThis script can be used to generate a new key pair and output them as JSON.\nYou can copy the JSON from serial console and paste it into a new file\non the device and then use it with the rsa_json_keys.py example.\n\"\"\"\n\nimport json\n\nimport adafruit_rsa\n\n# Create a keypair\nprint(\"Generating keypair...\")\n(public_key, private_key) = adafruit_rsa.newkeys(512)\n\n\nprint(\"public json:\")\nprint(\"-------------------------------\")\npublic_obj = {\"public_key_arguments\": [public_key.n, public_key.e]}\nprint(json.dumps(public_obj))\nprint(\"-------------------------------\")\n\n\nprint(\"private json:\")\nprint(\"-------------------------------\")\nprivate_obj = {\n    \"private_key_arguments\": [\n        private_key.n,\n        private_key.e,\n        private_key.d,\n        private_key.p,\n        private_key.q,\n    ]\n}\nprint(json.dumps(private_obj))\nprint(\"-------------------------------\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/rsa/examples/rsa_generate_json_keys.py",
      "library": "rsa",
      "type": "example",
      "file_name": "rsa_generate_json_keys.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_ads1x15.ads1115 as ADS\nfrom adafruit_ads1x15.analog_in import AnalogIn\n\nimport adafruit_ads1x15.ads1115 as ADS\n# Create the I2C bus\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create the ADC object using the I2C bus\nads = ADS.ADS1115(i2c)\n# you can specify an I2C adress instead of the default 0x48",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ads1x15/examples/ads1x15_ads1115_simpletest.py",
      "library": "ads1x15",
      "type": "example",
      "file_name": "ads1x15_ads1115_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport busio\n\nimport adafruit_ads1x15.ads1115 as ADS\nfrom adafruit_ads1x15.analog_in import AnalogIn\n\n# Create the I2C bus\ni2c = busio.I2C(board.SCL, board.SDA)\n\n# Create the ADC object using the I2C bus\nads = ADS.ADS1115(i2c)\n# you can specify an I2C adress instead of the default 0x48\n# ads = ADS.ADS1115(i2c, address=0x49)\n\n# Create single-ended input on channel 0\nchan = AnalogIn(ads, ADS.P0)\n\n# Create differential input between channel 0 and 1\n# chan = AnalogIn(ads, ADS.P0, ADS.P1)\n\nprint(\"{:>5}\\t{:>5}\".format(\"raw\", \"v\"))\n\nwhile True:\n    print(f\"{chan.value:>5}\\t{chan.voltage:>5.3f}\")\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ads1x15/examples/ads1x15_ads1115_simpletest.py",
      "library": "ads1x15",
      "type": "example",
      "file_name": "ads1x15_ads1115_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport rp2pio\nimport adafruit_pioasm\n\nled_quarter_brightness = adafruit_pioasm.assemble('\\n    set pins, 0 [2]\\n    set pins, 1\\n')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_led_brightness.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_led_brightness.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport rp2pio\nimport adafruit_pioasm\n\nled_half_brightness = adafruit_pioasm.assemble('\\n    set pins, 0\\n    set pins, 1\\n')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_led_brightness.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_led_brightness.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport rp2pio\nimport adafruit_pioasm\n\nled_full_brightness = adafruit_pioasm.assemble('\\n    set pins, 1\\n')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_led_brightness.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_led_brightness.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 Jeff Epler, written for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n#\n# Adapted from the an example in Appendix C of RPi_PiPico_Digital_v10.pdf\n\nimport time\n\nimport board\nimport rp2pio\n\nimport adafruit_pioasm\n\nled_quarter_brightness = adafruit_pioasm.assemble(\n    \"\"\"\n    set pins, 0 [2]\n    set pins, 1\n\"\"\"\n)\n\nled_half_brightness = adafruit_pioasm.assemble(\n    \"\"\"\n    set pins, 0\n    set pins, 1\n\"\"\"\n)\n\nled_full_brightness = adafruit_pioasm.assemble(\n    \"\"\"\n    set pins, 1\n\"\"\"\n)\n\nwhile True:\n    sm = rp2pio.StateMachine(led_quarter_brightness, frequency=10000, first_set_pin=board.LED)\n    time.sleep(1)\n    sm.deinit()\n\n    sm = rp2pio.StateMachine(led_half_brightness, frequency=10000, first_set_pin=board.LED)\n    time.sleep(1)\n    sm.deinit()\n\n    sm = rp2pio.StateMachine(led_full_brightness, frequency=10000, first_set_pin=board.LED)\n    time.sleep(1)\n    sm.deinit()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_led_brightness.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_led_brightness.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nfrom adafruit_motor import servo\nfrom adafruit_seesaw.pwmout import PWMOut\nfrom adafruit_seesaw.seesaw import Seesaw\n\n# from analogio import AnalogOut\n# import board\ni2c_bus = board.I2C()  # uses board.SCL and board.SDA\n# i2c_bus = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nss = Seesaw(i2c_bus)\npwm1 = PWMOut(ss, 17)\npwm2 = PWMOut(ss, 16)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_crickit_test.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_crickit_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import array\nimport adafruit_ticks\nimport board\nimport rp2pio\nimport ulab.numpy as np\nfrom adafruit_motor import servo\nimport adafruit_pioasm\n\n_program = adafruit_pioasm.Program('\\n.wrap_target\\n    out pins, 32            ; Immediately set the pins to their new state\\n    out y, 32               ; Set the counter\\ncount_check:\\n    jmp y-- delay           ; Check if the counter is 0, and if so wrap around.\\n                            ; If not decrement the counter and jump to the delay\\n.wrap\\n\\ndelay:\\n    jmp count_check [1]     ; Wait a few cycles then jump back to the loop\\n')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_pulsegroup.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_pulsegroup.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import array\nimport adafruit_ticks\nimport board\nimport rp2pio\nimport ulab.numpy as np\nfrom adafruit_motor import servo\nimport adafruit_pioasm\n\nclass PulseItem:\n\n    def __init__(self, group, index, phase, maxval):\n        self._group = group\n        self._index = index\n        self._phase = phase\n        self._value = 0\n        self._maxval = maxval\n        self._turn_on = self._turn_off = None\n        self._mask = 1 << index\n\n    @property\n    def frequency(self):\n        return self._group.frequency\n\n    @property\n    def duty_cycle(self):\n        return self._value\n\n    @duty_cycle.setter\n    def duty_cycle(self, value):\n        if value < 0 or value > self._maxval:\n            raise ValueError(f'value must be in the range(0, {self._maxval + 1})')\n        self._value = value\n        self._recalculate()\n\n    @property\n    def phase(self):\n        return self._phase\n\n    @phase.setter\n    def phase(self, phase):\n        if phase < 0 or phase >= self._maxval:\n            raise ValueError(f'phase must be in the range(0, {self._maxval})')\n        self._phase = phase\n        self._recalculate()\n\n    def _recalculate(self):\n        self._turn_on = self._get_turn_on()\n        self._turn_off = self._get_turn_off()\n        self._group._maybe_update()\n\n    def _get_turn_on(self):\n        maxval = self._maxval\n        if self._value == 0:\n            return None\n        if self._value == self._maxval:\n            return 0\n        return self.phase % maxval\n\n    def _get_turn_off(self):\n        maxval = self._maxval\n        if self._value == 0:\n            return None\n        if self._value == self._maxval:\n            return None\n        return (self._value + self.phase) % maxval\n\n    def __str__(self):\n        return f'<PulseItem: self.duty_cycle={self.duty_cycle!r} self.phase={self.phase!r} self._turn_on={self._turn_on!r} self._turn_off={self._turn_off!r}>'\n\n# Usage example:\n\n\nclass PulseItem:\n    def __init__(self, group, index, phase, maxval):\n        self._group = group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_pulsegroup.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_pulsegroup.py",
      "chunk_type": "function",
      "function_name": "PulseItem"
    }
  },
  {
    "content": "import array\nimport adafruit_ticks\nimport board\nimport rp2pio\nimport ulab.numpy as np\nfrom adafruit_motor import servo\nimport adafruit_pioasm\n\nclass PulseGroup:\n\n    def __init__(self, first_pin, pin_count, period=0.02, maxval=65535, stagger=False, auto_update=True):\n        \"\"\"Create a pulse group with the given characteristics\"\"\"\n        self._frequency = round(1 / period)\n        pio_frequency = round((1 + maxval) * _cycle_count / period)\n        self._sm = rp2pio.StateMachine(_program.assembled, frequency=pio_frequency, first_out_pin=first_pin, out_pin_count=pin_count, auto_pull=True, pull_threshold=32, **_program.pio_kwargs)\n        self._auto_update = auto_update\n        self._items = [PulseItem(self, i, round(maxval * i / pin_count) if stagger else 0, maxval) for i in range(pin_count)]\n        self._maxval = maxval\n\n    @property\n    def frequency(self):\n        return self._frequency\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.deinit()\n\n    def deinit(self):\n        self._sm.deinit()\n        del self._items[:]\n\n    def __getitem__(self, i):\n        \"\"\"Get an individual pulse generator\"\"\"\n        return self._items[i]\n\n    def __len__(self):\n        return len(self._items)\n\n    def update(self):\n        changes = {0: [0, 0]}\n        for i in self._items:\n            turn_on = i._turn_on\n            turn_off = i._turn_off\n            mask = i._mask\n            if turn_on is not None:\n                this_change = changes.get(turn_on)\n                if this_change:\n                    this_change[0] |= mask\n                else:\n                    changes[turn_on] = [mask, 0]\n                if turn_off is not None and turn_off < turn_on:\n                    changes[0][0] |= mask\n            if turn_off is not None:\n                this_change = changes.get(turn_off)\n                if this_change:\n                    this_change[1] |= mask\n                else:\n                    changes[turn_off] = [0, mask]\n\n        def make_sequence():\n            sorted_changes = sorted(changes.items())\n            old_time = 0\n            value = 0\n            for time, (turn_on, turn_off) in sorted_changes:\n                if time != 0:\n                    yield (time - old_time - 1)\n                old_time = time\n                value = (value | turn_on) & ~turn_off\n                yield value\n            yield (self._maxval - old_time)\n        buf = array.array('L', make_sequence())\n        self._sm.background_write(loop=buf)\n\n    def _maybe_update(self):\n        if self._auto_update:\n            self.update()\n\n    @property\n    def auto_update(self):\n        return self.auto_update\n\n    @auto_update.setter\n    def auto_update(self, value):\n        self.auto_update = bool(value)\n\n    def __str__(self):\n        return f'<PulseGroup({len(self)})>'\n\n# Usage example:\n\n\nclass PulseGroup:\n    def __init__(\n        self,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_pulsegroup.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_pulsegroup.py",
      "chunk_type": "function",
      "function_name": "PulseGroup"
    }
  },
  {
    "content": "import array\nimport adafruit_ticks\nimport board\nimport rp2pio\nimport ulab.numpy as np\nfrom adafruit_motor import servo\nimport adafruit_pioasm\n\nclass CyclicSignal:\n\n    def __init__(self, data, phase=0):\n        self._data = data\n        self._phase = 0\n        self.phase = phase\n        self._scale = len(self._data) - 1\n\n    @property\n    def phase(self):\n        return self._phase\n\n    @phase.setter\n    def phase(self, value):\n        self._phase = value % 1\n\n    @property\n    def value(self):\n        idxf = self._phase * len(self._data)\n        idx = int(idxf)\n        frac = idxf % 1\n        idx1 = (idx + 1) % len(self._data)\n        val = self._data[idx]\n        val1 = self._data[idx1]\n        return val + (val1 - val) * frac\n\n    def advance(self, delta):\n        self._phase = (self._phase + delta) % 1\n\n# Usage example:\n\n\nclass CyclicSignal:\n    def __init__(self, data, phase=0):\n        self._data = data",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pioasm/examples/pioasm_pulsegroup.py",
      "library": "pioasm",
      "type": "example",
      "file_name": "pioasm_pulsegroup.py",
      "chunk_type": "function",
      "function_name": "CyclicSignal"
    }
  },
  {
    "content": "import array\nimport math\nimport time\nimport audiobusio\nimport audiocore\nimport board\nimport digitalio\nimport adafruit_tlv320\n\nimport digitalio\nimport adafruit_tlv320\n# Reset the DAC before use\nreset_pin = digitalio.DigitalInOut(board.D12)\nreset_pin.direction = digitalio.Direction.OUTPUT\nreset_pin.value = False  # Set low to reset",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlv320/examples/tlv320_simpletest.py",
      "library": "tlv320",
      "type": "example",
      "file_name": "tlv320_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import array\nimport math\nimport time\nimport audiobusio\nimport audiocore\nimport board\nimport digitalio\nimport adafruit_tlv320\n\nimport adafruit_tlv320\n# Reset the DAC before use\nreset_pin = digitalio.DigitalInOut(board.D12)\nreset_pin.direction = digitalio.Direction.OUTPUT\nreset_pin.value = False  # Set low to reset",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlv320/examples/tlv320_simpletest.py",
      "library": "tlv320",
      "type": "example",
      "file_name": "tlv320_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import array\nimport math\nimport time\nimport audiobusio\nimport audiocore\nimport board\nimport digitalio\nimport adafruit_tlv320\n\nreset_pin.direction = digitalio.Direction.OUTPUT\nreset_pin.value = False  # Set low to reset\nreset_pin.value = True  # Set high to release from reset\ni2c = board.I2C()\ndac = adafruit_tlv320.TLV320DAC3100(i2c)\n# set sample rate & bit depth, use bclk\ndac.configure_clocks(sample_rate=44100, bit_depth=16)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlv320/examples/tlv320_simpletest.py",
      "library": "tlv320",
      "type": "example",
      "file_name": "tlv320_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import array\nimport math\nimport time\nimport audiobusio\nimport audiocore\nimport board\nimport digitalio\nimport adafruit_tlv320\n\nreset_pin.value = False  # Set low to reset\nreset_pin.value = True  # Set high to release from reset\ni2c = board.I2C()\ndac = adafruit_tlv320.TLV320DAC3100(i2c)\n# set sample rate & bit depth, use bclk\ndac.configure_clocks(sample_rate=44100, bit_depth=16)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlv320/examples/tlv320_simpletest.py",
      "library": "tlv320",
      "type": "example",
      "file_name": "tlv320_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nfrom adafruit_ble.advertising.standard import SolicitServicesAdvertisement\nfrom adafruit_ble_apple_media import AppleMediaService\nfrom adafruit_clue import clue\n\n# PyLint can't find BLERadio for some reason so special case it here.\nradio = adafruit_ble.BLERadio()\na = SolicitServicesAdvertisement()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/clue/examples/clue_ams_remote.py",
      "library": "clue",
      "type": "example",
      "file_name": "clue_ams_remote.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1305\n\nimport adafruit_ssd1305\n# Define the Reset Pin\noled_reset = digitalio.DigitalInOut(board.D4)\n# Change these\n# to the right size for your display!\nWIDTH = 128",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1305/examples/ssd1305_pillow_demo.py",
      "library": "ssd1305",
      "type": "example",
      "file_name": "ssd1305_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1305\n\nHEIGHT = 64  # Change to 32 if needed\nBORDER = 8\nCOL = 0  # If you see static, change 0 --> 4, fixes alignment\n# Use for SPI\nspi = board.SPI()\noled_cs = digitalio.DigitalInOut(board.D5)\noled_dc = digitalio.DigitalInOut(board.D6)\noled = adafruit_ssd1305.SSD1305_SPI(WIDTH, HEIGHT, spi, oled_dc, oled_reset, oled_cs, col=COL)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1305/examples/ssd1305_pillow_demo.py",
      "library": "ssd1305",
      "type": "example",
      "file_name": "ssd1305_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1305\n\nBORDER = 8\nCOL = 0  # If you see static, change 0 --> 4, fixes alignment\n# Use for SPI\nspi = board.SPI()\noled_cs = digitalio.DigitalInOut(board.D5)\noled_dc = digitalio.DigitalInOut(board.D6)\noled = adafruit_ssd1305.SSD1305_SPI(WIDTH, HEIGHT, spi, oled_dc, oled_reset, oled_cs, col=COL)\n# Use for I2C.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1305/examples/ssd1305_pillow_demo.py",
      "library": "ssd1305",
      "type": "example",
      "file_name": "ssd1305_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1305\n\nCOL = 0  # If you see static, change 0 --> 4, fixes alignment\n# Use for SPI\nspi = board.SPI()\noled_cs = digitalio.DigitalInOut(board.D5)\noled_dc = digitalio.DigitalInOut(board.D6)\noled = adafruit_ssd1305.SSD1305_SPI(WIDTH, HEIGHT, spi, oled_dc, oled_reset, oled_cs, col=COL)\n# Use for I2C.\n# i2c = board.I2C()  # uses board.SCL and board.SDA",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1305/examples/ssd1305_pillow_demo.py",
      "library": "ssd1305",
      "type": "example",
      "file_name": "ssd1305_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1305\n\n# Use for SPI\nspi = board.SPI()\noled_cs = digitalio.DigitalInOut(board.D5)\noled_dc = digitalio.DigitalInOut(board.D6)\noled = adafruit_ssd1305.SSD1305_SPI(WIDTH, HEIGHT, spi, oled_dc, oled_reset, oled_cs, col=COL)\n# Use for I2C.\n# i2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1305/examples/ssd1305_pillow_demo.py",
      "library": "ssd1305",
      "type": "example",
      "file_name": "ssd1305_pillow_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_touchscreen\nimport board\nimport displayio\nfrom adafruit_displayio_layout.widgets.switch_round import SwitchRound as Switch\n\nimport board\nimport displayio\ndisplay = board.DISPLAY\nts = adafruit_touchscreen.Touchscreen(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_switch_simpletest.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_switch_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_touchscreen\nimport board\nimport displayio\nfrom adafruit_displayio_layout.widgets.switch_round import SwitchRound as Switch\n\nts = adafruit_touchscreen.Touchscreen(board.TOUCH_XL, board.TOUCH_XR, board.TOUCH_YD, board.TOUCH_YU, calibration=((5200, 59000), (5800, 57000)), size=(display.width, display.height))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_switch_simpletest.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_switch_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\ntft_cs = board.GP17\ntft_dc = board.GP16\nspi_mosi = board.GP19\nspi_clk = board.GP18\nspi = busio.SPI(spi_clk, spi_mosi)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x240_simpletest_Pimoroni_Pico_Explorer.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x240_simpletest_Pimoroni_Pico_Explorer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\ntft_cs = board.GP17\ntft_dc = board.GP16\nspi_mosi = board.GP19\nspi_clk = board.GP18\nspi = busio.SPI(spi_clk, spi_mosi)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x240_simpletest_Pimoroni_Pico_Explorer.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x240_simpletest_Pimoroni_Pico_Explorer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\ntft_cs = board.GP17\ntft_dc = board.GP16\nspi_mosi = board.GP19\nspi_clk = board.GP18\nspi = busio.SPI(spi_clk, spi_mosi)\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x240_simpletest_Pimoroni_Pico_Explorer.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x240_simpletest_Pimoroni_Pico_Explorer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\ntft_cs = board.GP17\ntft_dc = board.GP16\nspi_mosi = board.GP19\nspi_clk = board.GP18\nspi = busio.SPI(spi_clk, spi_mosi)\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x240_simpletest_Pimoroni_Pico_Explorer.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x240_simpletest_Pimoroni_Pico_Explorer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\ntft_cs = board.GP17\ntft_dc = board.GP16\nspi_mosi = board.GP19\nspi_clk = board.GP18\nspi = busio.SPI(spi_clk, spi_mosi)\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = ST7789(display_bus, width=240, height=240, rowstart=80, rotation=180)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x240_simpletest_Pimoroni_Pico_Explorer.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x240_simpletest_Pimoroni_Pico_Explorer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nTEXT_URL = \"http://wifitest.adafruit.com/testwifi/index.html\"\nJSON_GET_URL = \"https://httpbin.org/get\"\nJSON_POST_URL = \"https://httpbin.org/post\"\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nrssi = wifi.radio.ap_info.rssi",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/requests_wifi_simpletest.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nJSON_GET_URL = \"https://httpbin.org/get\"\nJSON_POST_URL = \"https://httpbin.org/post\"\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nrssi = wifi.radio.ap_info.rssi",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/requests_wifi_simpletest.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nJSON_POST_URL = \"https://httpbin.org/post\"\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nrssi = wifi.radio.ap_info.rssi",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/requests_wifi_simpletest.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8151d\n\nimport adafruit_uc8151d\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8151d/examples/uc8151d_simpletest.py",
      "library": "uc8151d",
      "type": "example",
      "file_name": "uc8151d_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8151d\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8151d/examples/uc8151d_simpletest.py",
      "library": "uc8151d",
      "type": "example",
      "file_name": "uc8151d_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8151d\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = None\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8151d/examples/uc8151d_simpletest.py",
      "library": "uc8151d",
      "type": "example",
      "file_name": "uc8151d_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8151d\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = None\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8151d/examples/uc8151d_simpletest.py",
      "library": "uc8151d",
      "type": "example",
      "file_name": "uc8151d_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_uc8151d\n\ndisplay = adafruit_uc8151d.UC8151D(display_bus, width=296, height=128, rotation=90, busy_pin=epd_busy)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/uc8151d/examples/uc8151d_simpletest.py",
      "library": "uc8151d",
      "type": "example",
      "file_name": "uc8151d_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_ltr329_ltr303 import LTR329\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ltr329_ltr303/examples/ltr329_simpletest.py",
      "library": "ltr329_ltr303",
      "type": "example",
      "file_name": "ltr329_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2022 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport board\n\nfrom adafruit_ltr329_ltr303 import LTR329\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\ntime.sleep(0.1)  # sensor takes 100ms to 'boot' on power up\nltr329 = LTR329(i2c)\n\nwhile True:\n    print(\"Visible + IR:\", ltr329.visible_plus_ir_light)\n    print(\"Infrared    :\", ltr329.ir_light)\n    print()\n    time.sleep(0.5)  # sleep for half a second\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ltr329_ltr303/examples/ltr329_simpletest.py",
      "library": "ltr329_ltr303",
      "type": "example",
      "file_name": "ltr329_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_st7789 import ST7789\nfrom displayio import Bitmap, ColorConverter, Colorspace, FourWire, Group, TileGrid, release_displays\nfrom adafruit_ov7670 import OV7670, OV7670_SIZE_DIV1, OV7670_SIZE_DIV16\n\n# Set up the display (You must customize this block for your display!)\nspi = busio.SPI(clock=board.GP2, MOSI=board.GP3)\ndisplay_bus = FourWire(spi, command=board.GP0, chip_select=board.GP1, reset=None)\ndisplay = ST7789(display_bus, width=320, height=240, rotation=270)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov7670/examples/ov7670_displayio_pico_st7789_2in.py",
      "library": "ov7670",
      "type": "example",
      "file_name": "ov7670_displayio_pico_st7789_2in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_st7789 import ST7789\nfrom displayio import Bitmap, ColorConverter, Colorspace, FourWire, Group, TileGrid, release_displays\nfrom adafruit_ov7670 import OV7670, OV7670_SIZE_DIV1, OV7670_SIZE_DIV16\n\n# Set up the display (You must customize this block for your display!)\nspi = busio.SPI(clock=board.GP2, MOSI=board.GP3)\ndisplay_bus = FourWire(spi, command=board.GP0, chip_select=board.GP1, reset=None)\ndisplay = ST7789(display_bus, width=320, height=240, rotation=270)\n# Ensure the camera is shut down, so that it releases the SDA/SCL lines,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov7670/examples/ov7670_displayio_pico_st7789_2in.py",
      "library": "ov7670",
      "type": "example",
      "file_name": "ov7670_displayio_pico_st7789_2in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_st7789 import ST7789\nfrom displayio import Bitmap, ColorConverter, Colorspace, FourWire, Group, TileGrid, release_displays\nfrom adafruit_ov7670 import OV7670, OV7670_SIZE_DIV1, OV7670_SIZE_DIV16\n\ncam = OV7670(bus, data_pins=[board.GP12, board.GP13, board.GP14, board.GP15, board.GP16, board.GP17, board.GP18, board.GP19], clock=board.GP11, vsync=board.GP7, href=board.GP21, mclk=board.GP20, shutdown=None, reset=board.GP10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov7670/examples/ov7670_displayio_pico_st7789_2in.py",
      "library": "ov7670",
      "type": "example",
      "file_name": "ov7670_displayio_pico_st7789_2in.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_rockblock import RockBlock\n\nimport time\n# CircuitPython / Blinka\nimport board\nuart = board.UART()\nuart.baudrate = 19200\n# via USB cable\n# import serial",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rockblock/examples/rockblock_recv_text.py",
      "library": "rockblock",
      "type": "example",
      "file_name": "rockblock_recv_text.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\n# CircuitPython / Blinka\nimport board\n\nuart = board.UART()\nuart.baudrate = 19200\n\n# via USB cable\n# import serial\n# uart = serial.Serial(\"/dev/ttyUSB0\", 19200)\n\nfrom adafruit_rockblock import RockBlock\n\nrb = RockBlock(uart)\n\n# try a satellite Short Burst Data transfer\nprint(\"Talking to satellite...\")\nstatus = rb.satellite_transfer()\n# loop as needed\nretry = 0\nwhile status[0] > 8:\n    time.sleep(10)\n    status = rb.satellite_transfer()\n    print(retry, status)\n    retry += 1\nprint(\"\\nDONE.\")\n\n# get the text\nprint(rb.text_in)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rockblock/examples/rockblock_recv_text.py",
      "library": "rockblock",
      "type": "example",
      "file_name": "rockblock_recv_text.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport serial\nimport adafruit_fingerprint\n\n# uart = serial.Serial(\"/dev/ttyS0\", baudrate=57600, timeout=1)\n# If using with Linux/Raspberry Pi 3 with pi3-disable-bt\n# uart = serial.Serial(\"/dev/ttyAMA0\", baudrate=57600, timeout=1)\nfinger = adafruit_fingerprint.Adafruit_Fingerprint(uart)\n##################################################",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_r503_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_r503_rpi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport serial\nimport adafruit_fingerprint\n\n# Get a finger print image, template it, and see if it matches!\ndef get_fingerprint():\n    \"\"\"Get a finger print image, template it, and see if it matches!\"\"\"\n    print('Waiting for image...')\n    while finger.get_image() != adafruit_fingerprint.OK:\n        pass\n    print('Templating...')\n    if finger.image_2_tz(1) != adafruit_fingerprint.OK:\n        return False\n    print('Searching...')\n    if finger.finger_search() != adafruit_fingerprint.OK:\n        return False\n    return True\n\n# Usage example:\n        # breathing LED\n        finger.set_led(color=3, mode=1)\n        if get_fingerprint():\n            print(\"Detected #\", finger.finger_id, \"with confidence\", finger.confidence)\n        else:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_r503_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_r503_rpi.py",
      "chunk_type": "function",
      "function_name": "get_fingerprint"
    }
  },
  {
    "content": "import time\nimport serial\nimport adafruit_fingerprint\n\n# Get a finger print image, template it, and see if it matches!\nThis time, print out each error instead of just returning on failure\ndef get_fingerprint_detail():\n    \"\"\"Get a finger print image, template it, and see if it matches!\n    This time, print out each error instead of just returning on failure\"\"\"\n    print('Getting image...', end='')\n    i = finger.get_image()\n    if i == adafruit_fingerprint.OK:\n        print('Image taken')\n    else:\n        if i == adafruit_fingerprint.NOFINGER:\n            print('No finger detected')\n        elif i == adafruit_fingerprint.IMAGEFAIL:\n            print('Imaging error')\n        else:\n            print('Other error')\n        return False\n    print('Templating...', end='')\n    i = finger.image_2_tz(1)\n    if i == adafruit_fingerprint.OK:\n        print('Templated')\n    else:\n        if i == adafruit_fingerprint.IMAGEMESS:\n            print('Image too messy')\n        elif i == adafruit_fingerprint.FEATUREFAIL:\n            print('Could not identify features')\n        elif i == adafruit_fingerprint.INVALIDIMAGE:\n            print('Image invalid')\n        else:\n            print('Other error')\n        return False\n    print('Searching...', end='')\n    i = finger.finger_fast_search()\n    if i == adafruit_fingerprint.OK:\n        print('Found fingerprint!')\n        return True\n    else:\n        if i == adafruit_fingerprint.NOTFOUND:\n            print('No match found')\n        else:\n            print('Other error')\n        return False",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_r503_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_r503_rpi.py",
      "chunk_type": "function",
      "function_name": "get_fingerprint_detail"
    }
  },
  {
    "content": "import time\nimport serial\nimport adafruit_fingerprint\n\n# Take a 2 finger images and template it, then store in 'location'\ndef enroll_finger(location):\n    \"\"\"Take a 2 finger images and template it, then store in 'location'\"\"\"\n    for fingerimg in range(1, 3):\n        if fingerimg == 1:\n            print('Place finger on sensor...', end='')\n        else:\n            print('Place same finger again...', end='')\n        while True:\n            i = finger.get_image()\n            if i == adafruit_fingerprint.OK:\n                print('Image taken')\n                break\n            if i == adafruit_fingerprint.NOFINGER:\n                print('.', end='')\n            elif i == adafruit_fingerprint.IMAGEFAIL:\n                print('Imaging error')\n                return False\n            else:\n                print('Other error')\n                return False\n        print('Templating...', end='')\n        i = finger.image_2_tz(fingerimg)\n        if i == adafruit_fingerprint.OK:\n            print('Templated')\n        else:\n            if i == adafruit_fingerprint.IMAGEMESS:\n                print('Image too messy')\n            elif i == adafruit_fingerprint.FEATUREFAIL:\n                print('Could not identify features')\n            elif i == adafruit_fingerprint.INVALIDIMAGE:\n                print('Image invalid')\n            else:\n                print('Other error')\n            return False\n        if fingerimg == 1:\n            print('Remove finger')\n            time.sleep(1)\n            while i != adafruit_fingerprint.NOFINGER:\n                i = finger.get_image()\n    print('Creating model...', end='')\n    i = finger.create_model()\n    if i == adafruit_fingerprint.OK:\n        print('Created')\n    else:\n        if i == adafruit_fingerprint.ENROLLMISMATCH:\n            print('Prints did not match')\n        else:\n            print('Other error')\n        return False\n    print('Storing model #%d...' % location, end='')\n    i = finger.store_model(location)\n    if i == adafruit_fingerprint.OK:\n        print('Stored')\n    else:\n        if i == adafruit_fingerprint.BADLOCATION:\n            print('Bad storage location')\n        elif i == adafruit_fingerprint.FLASHERR:\n            print('Flash storage error')\n        else:\n            print('Other error')\n        return False\n    return True\n\n# Usage example:\n            led_mode = 4\n    elif c == \"e\":\n        enroll_finger(get_num(finger.library_size))\n    elif c == \"f\":\n        # breathing LED",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_r503_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_r503_rpi.py",
      "chunk_type": "function",
      "function_name": "enroll_finger"
    }
  },
  {
    "content": "import time\nimport serial\nimport adafruit_fingerprint\n\n# Scan fingerprint then save image to filename.\ndef save_fingerprint_image(filename):\n    \"\"\"Scan fingerprint then save image to filename.\"\"\"\n    print('Place finger on sensor...', end='')\n    while True:\n        i = finger.get_image()\n        if i == adafruit_fingerprint.OK:\n            print('Image taken')\n            break\n        if i == adafruit_fingerprint.NOFINGER:\n            print('.', end='')\n        elif i == adafruit_fingerprint.IMAGEFAIL:\n            print('Imaging error')\n            return False\n        else:\n            print('Other error')\n            return False\n    from PIL import Image\n    img = Image.new('L', (192, 192), 'white')\n    pixeldata = img.load()\n    mask = 15\n    result = finger.get_fpdata(sensorbuffer='image')\n    x = 0\n    y = 0\n    for i in range(len(result)):\n        pixeldata[x, y] = (int(result[i]) >> 4) * 17\n        x += 1\n        pixeldata[x, y] = (int(result[i]) & mask) * 17\n        if x == 191:\n            x = 0\n            y += 1\n        else:\n            x += 1\n    if not img.save(filename):\n        return True\n    return False\n\n# Usage example:\n            print(\"Failed to delete\")\n    elif c == \"s\":\n        if save_fingerprint_image(\"fingerprint.png\"):\n            print(\"Fingerprint image saved\")\n        else:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_r503_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_r503_rpi.py",
      "chunk_type": "function",
      "function_name": "save_fingerprint_image"
    }
  },
  {
    "content": "import time\nimport serial\nimport adafruit_fingerprint\n\n# Use input() to get a valid number from 0 to the maximum size\nof the library. Retry till success!\ndef get_num(max_number):\n    \"\"\"Use input() to get a valid number from 0 to the maximum size\n    of the library. Retry till success!\"\"\"\n    i = -1\n    while i > max_number - 1 or i < 0:\n        try:\n            i = int(input(f'Enter ID # from 0-{max_number - 1}: '))\n        except ValueError:\n            pass\n    return i\n\n# Usage example:\n            led_mode = 4\n    elif c == \"e\":\n        enroll_finger(get_num(finger.library_size))\n    elif c == \"f\":\n        # breathing LED",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_r503_rpi.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_r503_rpi.py",
      "chunk_type": "function",
      "function_name": "get_num"
    }
  },
  {
    "content": "import adafruit_ble\nimport adafruit_ble_broadcastnet\n\nimport adafruit_ble\nimport adafruit_ble_broadcastnet\nble = adafruit_ble.BLERadio()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_scan_test.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_scan_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"This example merely scans for broadcastnet packets to check that something is sending them.\"\"\"\n\nimport adafruit_ble\n\nimport adafruit_ble_broadcastnet\n\nble = adafruit_ble.BLERadio()\n\nprint(\"scanning\")\n# By providing Advertisement as well we include everything, not just specific advertisements.\nfor advert in ble.start_scan(adafruit_ble_broadcastnet.AdafruitSensorMeasurement, interval=0.5):\n    print(advert)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_scan_test.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_scan_test.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_scd4x\n\nimport board\nimport adafruit_scd4x\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nscd4x = adafruit_scd4x.SCD4X(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/scd4x/examples/scd4x_simpletest.py",
      "library": "scd4x",
      "type": "example",
      "file_name": "scd4x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_scd4x\n\nimport adafruit_scd4x\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nscd4x = adafruit_scd4x.SCD4X(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/scd4x/examples/scd4x_simpletest.py",
      "library": "scd4x",
      "type": "example",
      "file_name": "scd4x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 by Bryan Siepert, written for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\nimport time\n\nimport board\n\nimport adafruit_scd4x\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nscd4x = adafruit_scd4x.SCD4X(i2c)\nprint(\"Serial number:\", [hex(i) for i in scd4x.serial_number])\n\nscd4x.start_periodic_measurement()\nprint(\"Waiting for first measurement....\")\n\nwhile True:\n    if scd4x.data_ready:\n        print(\"CO2: %d ppm\" % scd4x.CO2)\n        print(\"Temperature: %0.1f *C\" % scd4x.temperature)\n        print(\"Humidity: %0.1f %%\" % scd4x.relative_humidity)\n        print()\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/scd4x/examples/scd4x_simpletest.py",
      "library": "scd4x",
      "type": "example",
      "file_name": "scd4x_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport audiobusio\nimport board\nimport digitalio\nimport synthio\nfrom adafruit_wm8960 import WM8960\n\nimport digitalio\nimport synthio\ncodec = WM8960(board.I2C(), 44100, 16)\ncodec.volume = 1.0\ncodec.headphone = 0.5\ncodec.speaker = 0.5",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wm8960/examples/wm8960_simpletest.py",
      "library": "wm8960",
      "type": "example",
      "file_name": "wm8960_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport audiobusio\nimport board\nimport digitalio\nimport synthio\nfrom adafruit_wm8960 import WM8960\n\ncodec.volume = 1.0\ncodec.headphone = 0.5\ncodec.speaker = 0.5\n# Configure I2S Output\naudio = audiobusio.I2SOut(board.AUDIO_BCLK, board.AUDIO_SYNC, board.AUDIO_TXD)\n# Setup synthio\nsynth = synthio.Synthesizer(sample_rate=codec.sample_rate)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wm8960/examples/wm8960_simpletest.py",
      "library": "wm8960",
      "type": "example",
      "file_name": "wm8960_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport audiobusio\nimport board\nimport digitalio\nimport synthio\nfrom adafruit_wm8960 import WM8960\n\n# Setup synthio\nsynth = synthio.Synthesizer(sample_rate=codec.sample_rate)\nled = digitalio.DigitalInOut(board.LED)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wm8960/examples/wm8960_simpletest.py",
      "library": "wm8960",
      "type": "example",
      "file_name": "wm8960_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import analogio\nimport board\nimport storage\n\nimport storage\nV_MODE = 1.98\nV_RECORD = 2.41\na = analogio.AnalogIn(board.IO6)\na_voltage = a.value * a.reference_voltage / 65535",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_kaluga1_3_boot.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_kaluga1_3_boot.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2017 Scott Shawcroft, written for Adafruit Industries\n# SPDX-FileCopyrightText: Copyright (c) 2021 Jeff Epler for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\"\"\"Use this file as CIRCUITPY/boot.py in conjunction with ov5640_jpeg_kaluga1_3.py\n\nIt makes the CIRCUITPY filesystem writable to CircuitPython\n(and read-only to the PC) if the \"MODE\" button on the audio\ndaughterboard is held while the board is powered on or reset.\n\"\"\"\n\nimport analogio\nimport board\nimport storage\n\nV_MODE = 1.98\nV_RECORD = 2.41\n\na = analogio.AnalogIn(board.IO6)\na_voltage = a.value * a.reference_voltage / 65535\nprint(\"measured voltage\", a_voltage)\nif abs(a_voltage - V_MODE) < 0.05:  # If mode IS pressed...\n    print(\"storage writable by CircuitPython\")\n    storage.remount(\"/\", readonly=False)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov5640/examples/ov5640_jpeg_kaluga1_3_boot.py",
      "library": "ov5640",
      "type": "example",
      "file_name": "ov5640_jpeg_kaluga1_3_boot.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_lps35hw import LPS35HW, DataRate\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nlps = LPS35HW(i2c)\nlps.data_rate = DataRate.ONE_SHOT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps35hw/examples/lps35hw_data_rate.py",
      "library": "lps35hw",
      "type": "example",
      "file_name": "lps35hw_data_rate.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2019 Bryan Siepert, written for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\nimport time\n\nimport board\n\nfrom adafruit_lps35hw import LPS35HW, DataRate\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nlps = LPS35HW(i2c)\n\nlps.data_rate = DataRate.ONE_SHOT\nlps.take_measurement()\n\n\nwhile True:\n    print(\"Pressure: %.2f hPa\" % lps.pressure)\n    print(\"\")\n    time.sleep(1)\n    print(\"Pressure: %.2f hPa\" % lps.pressure)\n    print(\"\")\n    time.sleep(1)\n    print(\"Pressure: %.2f hPa\" % lps.pressure)\n    print(\"\")\n    time.sleep(1)\n\n    # take another measurement\n    lps.take_measurement()\n\n    print(\"New Pressure: %.2f hPa\" % lps.pressure)\n    print(\"\")\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lps35hw/examples/lps35hw_data_rate.py",
      "library": "lps35hw",
      "type": "example",
      "file_name": "lps35hw_data_rate.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mpu6050\n\nimport board\nimport adafruit_mpu6050\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmpu = adafruit_mpu6050.MPU6050(i2c)\n# This example is meant to be used with the serial plotter which makes",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpu6050/examples/mpu6050_sleep_example.py",
      "library": "mpu6050",
      "type": "example",
      "file_name": "mpu6050_sleep_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mpu6050\n\nimport adafruit_mpu6050\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmpu = adafruit_mpu6050.MPU6050(i2c)\n# This example is meant to be used with the serial plotter which makes\n# it easier to see how the readings change with different settings.\n# Make sure to poke and prod the sensor while the demo is running to",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpu6050/examples/mpu6050_sleep_example.py",
      "library": "mpu6050",
      "type": "example",
      "file_name": "mpu6050_sleep_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nimport time\nimport usb_midi\nimport adafruit_midi\nfrom adafruit_midi.control_change import ControlChange\nfrom adafruit_midi.note_off import NoteOff\nfrom adafruit_midi.note_on import NoteOn\nfrom adafruit_midi.pitch_bend import PitchBend\n\nmidi = adafruit_midi.MIDI(midi_in=usb_midi.ports[0], in_channel=0, midi_out=usb_midi.ports[1], out_channel=0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/midi/examples/midi_simpletest.py",
      "library": "midi",
      "type": "example",
      "file_name": "midi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nfrom adafruit_ble.advertising.standard import Advertisement\nfrom adafruit_ble_lywsd03mmc import LYWSD03MMCService\n\n# BLERadio for bluetooth operations\nble = adafruit_ble.BLERadio()\nconnection = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_lywsd03mmc/examples/ble_lywsd03mmc_simpletest.py",
      "library": "ble_lywsd03mmc",
      "type": "example",
      "file_name": "ble_lywsd03mmc_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 Dan Halbert, written for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\nimport time\n\nimport adafruit_ble\nfrom adafruit_ble.advertising.standard import Advertisement\n\nfrom adafruit_ble_lywsd03mmc import LYWSD03MMCService\n\n# BLERadio for bluetooth operations\nble = adafruit_ble.BLERadio()\n\nconnection = None\n\nwhile True:\n    print(\"Scanning...\")\n    for adv in ble.start_scan(Advertisement, timeout=5):\n        if adv.complete_name == \"LYWSD03MMC\":\n            connection = ble.connect(adv)\n            print(\"Connected\")\n            break\n\n    # Stop scanning whether or not we are connected.\n    ble.stop_scan()\n\n    if connection and connection.connected:\n        service = connection[LYWSD03MMCService]\n        while connection.connected:\n            print(\n                \"Temperature, Humidity\",\n                service.temperature_humidity,\n            )\n            time.sleep(5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_lywsd03mmc/examples/ble_lywsd03mmc_simpletest.py",
      "library": "ble_lywsd03mmc",
      "type": "example",
      "file_name": "ble_lywsd03mmc_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import ssl\nfrom os import getenv\nimport adafruit_requests\nimport socketpool\nimport wifi\nfrom adafruit_oauth2 import OAuth2\n\npool = socketpool.SocketPool(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl.create_default_context())\n# Set scope(s) of access required by the API you're using\nscopes = [\"email\"]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/oauth_2/examples/oauth2_simpletest.py",
      "library": "oauth_2",
      "type": "example",
      "file_name": "oauth2_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mma8451\n\nimport board\nimport adafruit_mma8451\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Initialize MMA8451 module.\nsensor = adafruit_mma8451.MMA8451(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mma8451/examples/mma8451_simpletest.py",
      "library": "mma8451",
      "type": "example",
      "file_name": "mma8451_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mma8451\n\n# Create sensor object, communicating over the board's default I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Initialize MMA8451 module.\nsensor = adafruit_mma8451.MMA8451(i2c)\n# Optionally change the address if it's not the default:\n# sensor = adafruit_mma8451.MMA8451(i2c, address=0x1C)\n# Optionally change the range from its default of +/-4G:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mma8451/examples/mma8451_simpletest.py",
      "library": "mma8451",
      "type": "example",
      "file_name": "mma8451_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom adafruit_atecc.adafruit_atecc import ATECC\n\n# Use 100kHz frequency for wake condition\nWAKE_CLK_FREQ = 100000\n# Initialize the i2c bus\ni2c = busio.I2C(board.SCL, board.SDA, frequency=WAKE_CLK_FREQ)\n# Initialize a new atecc object\natecc = ATECC(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/atecc/examples/atecc_simpletest.py",
      "library": "atecc",
      "type": "example",
      "file_name": "atecc_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom adafruit_tla202x import TLA2024\n\nimport board\nimport busio\ni2c = busio.I2C(board.SCL, board.SDA)\ntla = TLA2024(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tla202x/examples/tla202x_conversion_test.py",
      "library": "tla202x",
      "type": "example",
      "file_name": "tla202x_conversion_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 Bryan Siepert, written for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n# pylint:disable=no-member\n\"\"\"\n\u2265 +FS (2^11 \u2013 1) / 2^11  ==>  0x7FF0\n+FS /2^11                ==>  0x0010\n0                        ==>  0x0000\n-FS /2^11                ==>  0xFFF0\n\u2264 \u2013FS                    ==>  0x8000\n\"\"\"\n\nimport board\nimport busio\n\nfrom adafruit_tla202x import TLA2024\n\ni2c = busio.I2C(board.SCL, board.SDA)\ntla = TLA2024(i2c)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tla202x/examples/tla202x_conversion_test.py",
      "library": "tla202x",
      "type": "example",
      "file_name": "tla202x_conversion_test.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import os\nimport time\nimport traceback\nimport adafruit_pycamera\n\nMODE_SCALE = 1\nCURRENT_MODE = 0\nint_scale = 100\npycam = adafruit_pycamera.PyCamera()\npycam.mode = 0  # only mode 0 (JPEG) will work in this example\n# User settings - try changing these:\npycam.resolution = 1  # 0-12 preset resolutions:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pycamera/examples/overlay/code_select.py",
      "library": "pycamera",
      "type": "example",
      "file_name": "code_select.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text import label\nfrom adafruit_bitmap_font import bitmap_font\n\n# use built in display (MagTag, PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\n# wait until we can refresh the display",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/bitmap-font/examples/bitmap_font_label_magtag.py",
      "library": "bitmap-font",
      "type": "example",
      "file_name": "bitmap_font_label_magtag.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_gps\n\n# Create a serial connection for the GPS connection using default speed and\n# a slightly higher timeout (GPS modules typically update once a second).\n# These are the defaults you should use for the GPS FeatherWing.\n# For other boards set RX = GPS module TX, and TX = GPS module RX pins.\nrx = board.RX  # Change to board.GP4 for Raspberry Pi Pico boards\ntx = board.TX  # Change to board.GP5 for Raspberry Pi Pico boards\nuart = busio.UART(rx, tx, baudrate=9600, timeout=10)\n# for a computer, use the pyserial library for uart access",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/gps/examples/gps_simpletest.py",
      "library": "gps",
      "type": "example",
      "file_name": "gps_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_gps\n\n# Create a serial connection for the GPS connection using default speed and\n# a slightly higher timeout (GPS modules typically update once a second).\n# These are the defaults you should use for the GPS FeatherWing.\n# For other boards set RX = GPS module TX, and TX = GPS module RX pins.\nrx = board.RX  # Change to board.GP4 for Raspberry Pi Pico boards\ntx = board.TX  # Change to board.GP5 for Raspberry Pi Pico boards\nuart = busio.UART(rx, tx, baudrate=9600, timeout=10)\n# for a computer, use the pyserial library for uart access\n# import serial",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/gps/examples/gps_simpletest.py",
      "library": "gps",
      "type": "example",
      "file_name": "gps_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_gps\n\n# a slightly higher timeout (GPS modules typically update once a second).\n# These are the defaults you should use for the GPS FeatherWing.\n# For other boards set RX = GPS module TX, and TX = GPS module RX pins.\nrx = board.RX  # Change to board.GP4 for Raspberry Pi Pico boards\ntx = board.TX  # Change to board.GP5 for Raspberry Pi Pico boards\nuart = busio.UART(rx, tx, baudrate=9600, timeout=10)\n# for a computer, use the pyserial library for uart access\n# import serial\n# uart = serial.Serial(\"/dev/ttyUSB0\", baudrate=9600, timeout=10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/gps/examples/gps_simpletest.py",
      "library": "gps",
      "type": "example",
      "file_name": "gps_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_gps\n\n# If using I2C, we'll create an I2C interface to talk to using default pins\n# i2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Create a GPS module instance.\ngps = adafruit_gps.GPS(uart, debug=False)  # Use UART/pyserial\n# gps = adafruit_gps.GPS_GtopI2C(i2c, debug=False)  # Use I2C interface\n# Initialize the GPS module by changing what data it sends and at what rate.\n# These are NMEA extensions for PMTK_314_SET_NMEA_OUTPUT and",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/gps/examples/gps_simpletest.py",
      "library": "gps",
      "type": "example",
      "file_name": "gps_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nfrom adafruit_ht16k33.animations import Animation\nfrom adafruit_ht16k33.segments import Seg14x4\n\n#   Initialize the I2C bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndisplay = Seg14x4(i2c, auto_write=False)\n#   Brightness of the display (0.0 to 1.0)\ndisplay.brightness = 0.3",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ht16k33/examples/ht16k33_animation_demo.py",
      "library": "ht16k33",
      "type": "example",
      "file_name": "ht16k33_animation_demo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport pulseio\nimport adafruit_irremote\n\nimport board\nimport pulseio\nimport adafruit_irremote\npulsein = pulseio.PulseIn(board.REMOTEIN, maxlen=120, idle_state=True)\ndecoder = adafruit_irremote.NonblockingGenericDecode(pulsein)\nt0 = next_heartbeat = time.monotonic()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/irremote/examples/irremote_nonblocking.py",
      "library": "irremote",
      "type": "example",
      "file_name": "irremote_nonblocking.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport pulseio\nimport adafruit_irremote\n\nimport pulseio\nimport adafruit_irremote\npulsein = pulseio.PulseIn(board.REMOTEIN, maxlen=120, idle_state=True)\ndecoder = adafruit_irremote.NonblockingGenericDecode(pulsein)\nt0 = next_heartbeat = time.monotonic()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/irremote/examples/irremote_nonblocking.py",
      "library": "irremote",
      "type": "example",
      "file_name": "irremote_nonblocking.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ina228\n\nimport board\nimport adafruit_ina228\ni2c = board.I2C()\nina228 = adafruit_ina228.INA228(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ina228/examples/ina228_simpletest.py",
      "library": "ina228",
      "type": "example",
      "file_name": "ina228_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ina228\n\nimport board\nimport adafruit_ina228\ni2c = board.I2C()\nina228 = adafruit_ina228.INA228(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ina228/examples/ina228_simpletest.py",
      "library": "ina228",
      "type": "example",
      "file_name": "ina228_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2025 Liz Clark for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_ina228\n\ni2c = board.I2C()\nina228 = adafruit_ina228.INA228(i2c)\nprint(\"Adafruit INA228 Test\")\n\nprint(f\"Bus conversion time: {ina228.bus_voltage_conv_time} microseconds\")\nprint(f\"Shunt conversion time: {ina228.shunt_voltage_conv_time} microseconds\")\nprint(f\"Samples averaged: {ina228.averaging_count}\")\n\nwhile True:\n    print(\"\\nCurrent Measurements:\")\n    print(f\"Current: {ina228.current:.2f} mA\")\n    print(f\"Bus Voltage: {ina228.bus_voltage:.2f} V\")\n    print(f\"Shunt Voltage: {ina228.shunt_voltage*1000:.2f} mV\")\n    print(f\"Power: {ina228.power:.2f} mW\")\n    print(f\"Energy: {ina228.energy:.2f} J\")\n    print(f\"Temperature: {ina228.die_temperature:.2f} \u00b0C\")\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ina228/examples/ina228_simpletest.py",
      "library": "ina228",
      "type": "example",
      "file_name": "ina228_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_vl53l1x\n\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Create sensor object, communicating over the board's default I2C bus\n# i2c = board.I2C()  # uses board.SCL and board.SDA\ni2c = board.STEMMA_I2C()\n# For using the built-in STEMMA QT connector on a microcontroller\nvl53 = adafruit_vl53l1x.VL53L1X(i2c)\n# Create a Label to show the readings. If you have a very small",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l1x/examples/vl53l1x_displayio_simpletest.py",
      "library": "vl53l1x",
      "type": "example",
      "file_name": "vl53l1x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_vl53l1x\n\n# Create sensor object, communicating over the board's default I2C bus\n# i2c = board.I2C()  # uses board.SCL and board.SDA\ni2c = board.STEMMA_I2C()\n# For using the built-in STEMMA QT connector on a microcontroller\nvl53 = adafruit_vl53l1x.VL53L1X(i2c)\n# Create a Label to show the readings. If you have a very small\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l1x/examples/vl53l1x_displayio_simpletest.py",
      "library": "vl53l1x",
      "type": "example",
      "file_name": "vl53l1x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_vl53l1x\n\n# add the label to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# create a display object placeholder to be updated by the loop\nscreen = f\"Distance: {''}cm, {''}in, {''}ft\"\n# initiate repeated sensor readings",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl53l1x/examples/vl53l1x_displayio_simpletest.py",
      "library": "vl53l1x",
      "type": "example",
      "file_name": "vl53l1x_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport countio\nfrom digitalio import Pull\nfrom adafruit_opt4048 import OPT4048, ConversionTime, Mode, Range\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = OPT4048(i2c)\nsensor.range = Range.AUTO",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/opt4048/examples/opt4048_interruptpin.py",
      "library": "opt4048",
      "type": "example",
      "file_name": "opt4048_interruptpin.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport countio\nfrom digitalio import Pull\nfrom adafruit_opt4048 import OPT4048, ConversionTime, Mode, Range\n\nsensor.range = Range.AUTO\nsensor.conversion_time = ConversionTime.TIME_100MS\nsensor.mode = Mode.CONTINUOUS\n# counter that will track the pulses on the interrupt pin\npin_counter = countio.Counter(board.D5, edge=countio.Edge.RISE, pull=Pull.UP)\nlast_read_time = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/opt4048/examples/opt4048_interruptpin.py",
      "library": "opt4048",
      "type": "example",
      "file_name": "opt4048_interruptpin.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\nimport adafruit_ssd1680\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.9_mono_magtag2025.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.9_mono_magtag2025.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.9_mono_magtag2025.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.9_mono_magtag2025.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.9_mono_magtag2025.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.9_mono_magtag2025.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.9_mono_magtag2025.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.9_mono_magtag2025.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a MagTag with the newer screen and may need to be altered for other boards.\nspi = busio.SPI(board.EPD_SCK, board.EPD_MOSI)  # Uses SCK and MOSI\nepd_cs = board.EPD_CS\nepd_dc = board.EPD_DC\nepd_reset = board.EPD_RESET\nepd_busy = board.EPD_BUSY\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.9_mono_magtag2025.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.9_mono_magtag2025.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\ndisplay = adafruit_ssd1680.SSD1680(display_bus, width=296, height=128, busy_pin=epd_busy, rotation=270, colstart=0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.9_mono_magtag2025.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.9_mono_magtag2025.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom digitalio import DigitalInOut\nimport adafruit_matrixkeypad\n\nimport adafruit_matrixkeypad\n# Extended 4x4 matrix keypad\ncols = [DigitalInOut(x) for x in (board.D0, board.D1, board.D2, board.D3)]\nrows = [DigitalInOut(x) for x in (board.D4, board.D5, board.D6, board.D7)]\nkeys = ((1, 2, 3, \"A\"), (4, 5, 6, \"B\"), (7, 8, 9, \"C\"), (\"*\", 0, \"#\", \"D\"))\nkeypad = adafruit_matrixkeypad.Matrix_Keypad(rows, cols, keys)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/matrixkeypad/examples/matrixkeypad_4x4.py",
      "library": "matrixkeypad",
      "type": "example",
      "file_name": "matrixkeypad_4x4.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom digitalio import DigitalInOut\nimport adafruit_matrixkeypad\n\nimport adafruit_matrixkeypad\n# Extended 4x4 matrix keypad\ncols = [DigitalInOut(x) for x in (board.D0, board.D1, board.D2, board.D3)]\nrows = [DigitalInOut(x) for x in (board.D4, board.D5, board.D6, board.D7)]\nkeys = ((1, 2, 3, \"A\"), (4, 5, 6, \"B\"), (7, 8, 9, \"C\"), (\"*\", 0, \"#\", \"D\"))\nkeypad = adafruit_matrixkeypad.Matrix_Keypad(rows, cols, keys)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/matrixkeypad/examples/matrixkeypad_4x4.py",
      "library": "matrixkeypad",
      "type": "example",
      "file_name": "matrixkeypad_4x4.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom digitalio import DigitalInOut\nimport adafruit_matrixkeypad\n\n# Extended 4x4 matrix keypad\ncols = [DigitalInOut(x) for x in (board.D0, board.D1, board.D2, board.D3)]\nrows = [DigitalInOut(x) for x in (board.D4, board.D5, board.D6, board.D7)]\nkeys = ((1, 2, 3, \"A\"), (4, 5, 6, \"B\"), (7, 8, 9, \"C\"), (\"*\", 0, \"#\", \"D\"))\nkeypad = adafruit_matrixkeypad.Matrix_Keypad(rows, cols, keys)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/matrixkeypad/examples/matrixkeypad_4x4.py",
      "library": "matrixkeypad",
      "type": "example",
      "file_name": "matrixkeypad_4x4.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nfrom digitalio import DigitalInOut\n\nimport adafruit_matrixkeypad\n\n# Extended 4x4 matrix keypad\ncols = [DigitalInOut(x) for x in (board.D0, board.D1, board.D2, board.D3)]\nrows = [DigitalInOut(x) for x in (board.D4, board.D5, board.D6, board.D7)]\nkeys = ((1, 2, 3, \"A\"), (4, 5, 6, \"B\"), (7, 8, 9, \"C\"), (\"*\", 0, \"#\", \"D\"))\n\nkeypad = adafruit_matrixkeypad.Matrix_Keypad(rows, cols, keys)\n\nwhile True:\n    keys = keypad.pressed_keys\n    if keys:\n        print(\"Pressed: \", keys)\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/matrixkeypad/examples/matrixkeypad_4x4.py",
      "library": "matrixkeypad",
      "type": "example",
      "file_name": "matrixkeypad_4x4.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport adafruit_ble\nfrom adafruit_ble.advertising.standard import SolicitServicesAdvertisement\nfrom adafruit_ble.services.standard import CurrentTimeService\n\nimport adafruit_ble\nradio = adafruit_ble.BLERadio()\na = SolicitServicesAdvertisement()\na.complete_name = \"TimePlease\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_current_time_service.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_current_time_service.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nThis example solicits that devices that provide the current time service connect to it, initiates\npairing and then prints the time every second.\n\"\"\"\n\nimport time\n\nimport adafruit_ble\nfrom adafruit_ble.advertising.standard import SolicitServicesAdvertisement\nfrom adafruit_ble.services.standard import CurrentTimeService\n\nradio = adafruit_ble.BLERadio()\na = SolicitServicesAdvertisement()\na.complete_name = \"TimePlease\"\na.solicited_services.append(CurrentTimeService)\nradio.start_advertising(a)\n\nwhile not radio.connected:\n    pass\n\nprint(\"connected\")\n\nwhile radio.connected:\n    for connection in radio.connections:\n        if not connection.paired:\n            connection.pair()\n            print(\"paired\")\n        cts = connection[CurrentTimeService]\n        print(cts.current_time)\n    time.sleep(1)\n\nprint(\"disconnected\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_current_time_service.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_current_time_service.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import adafruit_midi\nimport audiobusio\nimport board\nimport synthio\nimport usb.core\nimport wm8960\nfrom adafruit_midi.note_off import NoteOff\nfrom adafruit_midi.note_on import NoteOn\nimport adafruit_usb_host_midi\n\n# This setup is for the headphone output on the iMX RT 1060 EVK.\ndac = wm8960.WM8960(board.I2C())",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/usb_host_midi/examples/usb_host_midi_simpletest.py",
      "library": "usb_host_midi",
      "type": "example",
      "file_name": "usb_host_midi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_midi\nimport audiobusio\nimport board\nimport synthio\nimport usb.core\nimport wm8960\nfrom adafruit_midi.note_off import NoteOff\nfrom adafruit_midi.note_on import NoteOn\nimport adafruit_usb_host_midi\n\naudio = audiobusio.I2SOut(board.AUDIO_BCLK, board.AUDIO_SYNC, board.AUDIO_TXD, main_clock=board.AUDIO_MCLK)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/usb_host_midi/examples/usb_host_midi_simpletest.py",
      "library": "usb_host_midi",
      "type": "example",
      "file_name": "usb_host_midi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_midi\nimport audiobusio\nimport board\nimport synthio\nimport usb.core\nimport wm8960\nfrom adafruit_midi.note_off import NoteOff\nfrom adafruit_midi.note_on import NoteOn\nimport adafruit_usb_host_midi\n\n    board.AUDIO_BCLK, board.AUDIO_SYNC, board.AUDIO_TXD, main_clock=board.AUDIO_MCLK\nsynth = synthio.Synthesizer(sample_rate=44100)\nmidi = adafruit_midi.MIDI(midi_in=raw_midi, in_channel=0)\npressed = {}",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/usb_host_midi/examples/usb_host_midi_simpletest.py",
      "library": "usb_host_midi",
      "type": "example",
      "file_name": "usb_host_midi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport fourwire\nfrom adafruit_hx8357 import HX8357\nimport adafruit_tsc2007\n\nimport adafruit_tsc2007\n# Initialize the Display\nspi = board.SPI()\ntft_cs = board.D9\ntft_dc = board.D10\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tsc2007/examples/tsc2007_3.5_feather_v2.py",
      "library": "tsc2007",
      "type": "example",
      "file_name": "tsc2007_3.5_feather_v2.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport fourwire\nfrom adafruit_hx8357 import HX8357\nimport adafruit_tsc2007\n\n# Initialize the Display\nspi = board.SPI()\ntft_cs = board.D9\ntft_dc = board.D10\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = HX8357(display_bus, width=480, height=320)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tsc2007/examples/tsc2007_3.5_feather_v2.py",
      "library": "tsc2007",
      "type": "example",
      "file_name": "tsc2007_3.5_feather_v2.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport fourwire\nfrom adafruit_hx8357 import HX8357\nimport adafruit_tsc2007\n\n# Initialize the Display\nspi = board.SPI()\ntft_cs = board.D9\ntft_dc = board.D10\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = HX8357(display_bus, width=480, height=320)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tsc2007/examples/tsc2007_3.5_feather_v2.py",
      "library": "tsc2007",
      "type": "example",
      "file_name": "tsc2007_3.5_feather_v2.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport fourwire\nfrom adafruit_hx8357 import HX8357\nimport adafruit_tsc2007\n\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = HX8357(display_bus, width=480, height=320)\n# Use for I2C\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntsc = adafruit_tsc2007.TSC2007(i2c, invert_x=True, swap_xy=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tsc2007/examples/tsc2007_3.5_feather_v2.py",
      "library": "tsc2007",
      "type": "example",
      "file_name": "tsc2007_3.5_feather_v2.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport fourwire\nfrom adafruit_hx8357 import HX8357\nimport adafruit_tsc2007\n\n# Use for I2C\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntsc = adafruit_tsc2007.TSC2007(i2c, invert_x=True, swap_xy=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tsc2007/examples/tsc2007_3.5_feather_v2.py",
      "library": "tsc2007",
      "type": "example",
      "file_name": "tsc2007_3.5_feather_v2.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2024 Melissa LeBlanc-Williams for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\n\n\nimport board\nimport displayio\nimport fourwire\nfrom adafruit_hx8357 import HX8357\n\nimport adafruit_tsc2007\n\n# Initialize the Display\ndisplayio.release_displays()\n\nspi = board.SPI()\ntft_cs = board.D9\ntft_dc = board.D10\n\ndisplay_bus = fourwire.FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = HX8357(display_bus, width=480, height=320)\n\n# Use for I2C\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\ntsc = adafruit_tsc2007.TSC2007(i2c, invert_x=True, swap_xy=True)\n\nwhile True:\n    if tsc.touched:\n        point = tsc.touch\n        if point[\"pressure\"] < 100:  # ignore touches with no 'pressure' as false\n            continue\n        print(\"Touchpoint: (%d, %d, %d)\" % (point[\"x\"], point[\"y\"], point[\"pressure\"]))\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tsc2007/examples/tsc2007_3.5_feather_v2.py",
      "library": "tsc2007",
      "type": "example",
      "file_name": "tsc2007_3.5_feather_v2.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_ble\nimport requests\nfrom adafruit_ble.advertising.standard import ManufacturerDataField\nfrom adafruit_blinka import load_settings_toml\nimport adafruit_ble_broadcastnet\n\ndef aio_post(path, **kwargs):\n    kwargs['headers'] = aio_auth_header\n    return requests.post(aio_base_url + path, **kwargs)\n\n# Usage example:\n\ndef create_group(name):\n    response = aio_post(\"/groups\", json={\"name\": name})\n    if response.status_code != 201:\n        print(name)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_blinka_bridge.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_blinka_bridge.py",
      "chunk_type": "function",
      "function_name": "aio_post"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_ble\nimport requests\nfrom adafruit_ble.advertising.standard import ManufacturerDataField\nfrom adafruit_blinka import load_settings_toml\nimport adafruit_ble_broadcastnet\n\ndef aio_get(path, **kwargs):\n    kwargs['headers'] = aio_auth_header\n    return requests.get(aio_base_url + path, **kwargs)\n\n# Usage example:\n\nexisting_feeds = {}\nresponse = aio_get(\"/groups\")\nfor group in response.json():\n    if \"-\" not in group[\"key\"]:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_blinka_bridge.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_blinka_bridge.py",
      "chunk_type": "function",
      "function_name": "aio_get"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_ble\nimport requests\nfrom adafruit_ble.advertising.standard import ManufacturerDataField\nfrom adafruit_blinka import load_settings_toml\nimport adafruit_ble_broadcastnet\n\ndef create_group(name):\n    response = aio_post('/groups', json={'name': name})\n    if response.status_code != 201:\n        print(name)\n        print(response.content)\n        print(response.status_code)\n        raise RuntimeError('unable to create new group')\n    return response.json()['key']\n\n# Usage example:\n    group_key = f\"bridge-{bridge_address}-sensor-{sensor_address}\"\n    if sensor_address not in existing_feeds:\n        create_group(f\"Bridge {bridge_address} Sensor {sensor_address}\")\n        create_feed(group_key, \"Missed Message Count\")\n        existing_feeds[sensor_address] = [\"missed-message-count\"]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_blinka_bridge.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_blinka_bridge.py",
      "chunk_type": "function",
      "function_name": "create_group"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_ble\nimport requests\nfrom adafruit_ble.advertising.standard import ManufacturerDataField\nfrom adafruit_blinka import load_settings_toml\nimport adafruit_ble_broadcastnet\n\ndef create_feed(group_key, name):\n    response = aio_post(f'/groups/{group_key}/feeds', json={'feed': {'name': name}})\n    if response.status_code != 201:\n        print(name)\n        print(response.content)\n        print(response.status_code)\n        raise RuntimeError('unable to create new feed')\n    return response.json()['key']\n\n# Usage example:\n    if sensor_address not in existing_feeds:\n        create_group(f\"Bridge {bridge_address} Sensor {sensor_address}\")\n        create_feed(group_key, \"Missed Message Count\")\n        existing_feeds[sensor_address] = [\"missed-message-count\"]\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_blinka_bridge.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_blinka_bridge.py",
      "chunk_type": "function",
      "function_name": "create_feed"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_ble\nimport requests\nfrom adafruit_ble.advertising.standard import ManufacturerDataField\nfrom adafruit_blinka import load_settings_toml\nimport adafruit_ble_broadcastnet\n\ndef create_data(group_key, data):\n    response = aio_post(f'/groups/{group_key}/data', json={'feeds': data})\n    if response.status_code == 429:\n        print('Throttled!')\n        return False\n    if response.status_code != 200:\n        print(response.status_code, response.json())\n        raise RuntimeError('unable to create new data')\n    response.close()\n    return True\n\n# Usage example:\n    print(group_key, data)\n    # Only update the previous sequence if we logged successfully.\n    if create_data(group_key, data):\n        sequence_numbers[sensor_address] = measurement.sequence_number\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_blinka_bridge.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_blinka_bridge.py",
      "chunk_type": "function",
      "function_name": "create_data"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_ble\nimport requests\nfrom adafruit_ble.advertising.standard import ManufacturerDataField\nfrom adafruit_blinka import load_settings_toml\nimport adafruit_ble_broadcastnet\n\ndef convert_to_feed_data(values, attribute_name, attribute_instance):\n    feed_data = []\n    if not isinstance(values, tuple) or (attribute_instance.element_count > 1 and (not isinstance(values[0], tuple))):\n        values = (values,)\n    for i, value in enumerate(values):\n        key = attribute_name.replace('_', '-') + '-' + str(i)\n        if isinstance(value, tuple):\n            for j in range(attribute_instance.element_count):\n                feed_data.append({'key': key + '-' + attribute_instance.field_names[j], 'value': value[j]})\n        else:\n            feed_data.append({'key': key, 'value': value})\n    return feed_data\n\n# Usage example:\n                values = getattr(measurement, attribute)\n                if values is not None:\n                    data.extend(convert_to_feed_data(values, attribute, attribute_instance))\n\n    for feed_data in data:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_blinka_bridge.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_blinka_bridge.py",
      "chunk_type": "function",
      "function_name": "convert_to_feed_data"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_ble\nimport requests\nfrom adafruit_ble.advertising.standard import ManufacturerDataField\nfrom adafruit_blinka import load_settings_toml\nimport adafruit_ble_broadcastnet\n\nble = adafruit_ble.BLERadio()\nbridge_address = adafruit_ble_broadcastnet.device_address",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_blinka_bridge.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_blinka_bridge.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_ble\nimport requests\nfrom adafruit_ble.advertising.standard import ManufacturerDataField\nfrom adafruit_blinka import load_settings_toml\nimport adafruit_ble_broadcastnet\n\nble = adafruit_ble.BLERadio()\nbridge_address = adafruit_ble_broadcastnet.device_address",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble-broadcastnet/examples/ble_broadcastnet_blinka_bridge.py",
      "library": "ble-broadcastnet",
      "type": "example",
      "file_name": "ble_broadcastnet_blinka_bridge.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\n\napn_password = getenv(\"apn_password\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# Create a serial connection for the FONA\nuart = busio.UART(board.TX, board.RX)\nrst = digitalio.DigitalInOut(board.D4)\n# Use this for FONA800 and FONA808\nfona = FONA(uart, rst)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fona/examples/fona_aio_post.py",
      "library": "fona",
      "type": "example",
      "file_name": "fona_aio_post.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# Create a serial connection for the FONA\nuart = busio.UART(board.TX, board.RX)\nrst = digitalio.DigitalInOut(board.D4)\n# Use this for FONA800 and FONA808\nfona = FONA(uart, rst)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fona/examples/fona_aio_post.py",
      "library": "fona",
      "type": "example",
      "file_name": "fona_aio_post.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\n\n# create requests session\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, fona)\nrequests = adafruit_requests.Session(pool, ssl_context)\ncounter = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fona/examples/fona_aio_post.py",
      "library": "fona",
      "type": "example",
      "file_name": "fona_aio_post.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nimport digitalio\nimport adafruit_fona.adafruit_fona_network as network\nimport adafruit_fona.adafruit_fona_socket as pool\nfrom adafruit_fona.adafruit_fona import FONA\nfrom adafruit_fona.fona_3g import FONA3G\n\n# create requests session\nssl_context = adafruit_connection_manager.create_fake_ssl_context(pool, fona)\nrequests = adafruit_requests.Session(pool, ssl_context)\ncounter = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fona/examples/fona_aio_post.py",
      "library": "fona",
      "type": "example",
      "file_name": "fona_aio_post.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_pyportal import PyPortal\nfrom displayio import CIRCUITPYTHON_TERMINAL\n\n# Set a data source URL\nTEXT_URL = \"http://wifitest.adafruit.com/testwifi/index.html\"\n# Create the PyPortal object\npyportal = PyPortal(url=TEXT_URL, status_neopixel=board.NEOPIXEL)\n# Set display to show REPL\nboard.DISPLAY.root_group = CIRCUITPYTHON_TERMINAL",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/portalbase/examples/portalbase_simpletest.py",
      "library": "portalbase",
      "type": "example",
      "file_name": "portalbase_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_pyportal import PyPortal\nfrom displayio import CIRCUITPYTHON_TERMINAL\n\n# Create the PyPortal object\npyportal = PyPortal(url=TEXT_URL, status_neopixel=board.NEOPIXEL)\n# Set display to show REPL\nboard.DISPLAY.root_group = CIRCUITPYTHON_TERMINAL\n# Go get that data",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/portalbase/examples/portalbase_simpletest.py",
      "library": "portalbase",
      "type": "example",
      "file_name": "portalbase_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_fingerprint\n\nimport board\nimport busio\nimport adafruit_fingerprint\nuart = busio.UART(board.TX, board.RX, baudrate=57600)\n# If using with a computer such as Linux/RaspberryPi, Mac, Windows with USB/serial converter:\n# import serial\n# uart = serial.Serial(\"/dev/ttyUSB0\", baudrate=57600, timeout=1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_r503.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_r503.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_fingerprint\n\n# If using with Linux/Raspberry Pi and hardware UART:\n# import serial\n# uart = serial.Serial(\"/dev/ttyS0\", baudrate=57600, timeout=1)\nfinger = adafruit_fingerprint.Adafruit_Fingerprint(uart)\n##################################################",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_r503.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_r503.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_fingerprint\n\n# Get a finger print image, template it, and see if it matches!\ndef get_fingerprint():\n    \"\"\"Get a finger print image, template it, and see if it matches!\"\"\"\n    print('Waiting for image...')\n    while finger.get_image() != adafruit_fingerprint.OK:\n        pass\n    print('Templating...')\n    if finger.image_2_tz(1) != adafruit_fingerprint.OK:\n        return False\n    print('Searching...')\n    if finger.finger_search() != adafruit_fingerprint.OK:\n        return False\n    return True\n\n# Usage example:\n        # breathing LED\n        finger.set_led(color=3, mode=1)\n        if get_fingerprint():\n            print(\"Detected #\", finger.finger_id, \"with confidence\", finger.confidence)\n        else:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_r503.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_r503.py",
      "chunk_type": "function",
      "function_name": "get_fingerprint"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_fingerprint\n\n# Get a finger print image, template it, and see if it matches!\nThis time, print out each error instead of just returning on failure\ndef get_fingerprint_detail():\n    \"\"\"Get a finger print image, template it, and see if it matches!\n    This time, print out each error instead of just returning on failure\"\"\"\n    print('Getting image...', end='')\n    i = finger.get_image()\n    if i == adafruit_fingerprint.OK:\n        print('Image taken')\n    else:\n        if i == adafruit_fingerprint.NOFINGER:\n            print('No finger detected')\n        elif i == adafruit_fingerprint.IMAGEFAIL:\n            print('Imaging error')\n        else:\n            print('Other error')\n        return False\n    print('Templating...', end='')\n    i = finger.image_2_tz(1)\n    if i == adafruit_fingerprint.OK:\n        print('Templated')\n    else:\n        if i == adafruit_fingerprint.IMAGEMESS:\n            print('Image too messy')\n        elif i == adafruit_fingerprint.FEATUREFAIL:\n            print('Could not identify features')\n        elif i == adafruit_fingerprint.INVALIDIMAGE:\n            print('Image invalid')\n        else:\n            print('Other error')\n        return False\n    print('Searching...', end='')\n    i = finger.finger_fast_search()\n    if i == adafruit_fingerprint.OK:\n        print('Found fingerprint!')\n        return True\n    else:\n        if i == adafruit_fingerprint.NOTFOUND:\n            print('No match found')\n        else:\n            print('Other error')\n        return False",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_r503.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_r503.py",
      "chunk_type": "function",
      "function_name": "get_fingerprint_detail"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_fingerprint\n\n# Take a 2 finger images and template it, then store in 'location'\ndef enroll_finger(location):\n    \"\"\"Take a 2 finger images and template it, then store in 'location'\"\"\"\n    for fingerimg in range(1, 3):\n        if fingerimg == 1:\n            print('Place finger on sensor...', end='')\n        else:\n            print('Place same finger again...', end='')\n        while True:\n            i = finger.get_image()\n            if i == adafruit_fingerprint.OK:\n                print('Image taken')\n                break\n            if i == adafruit_fingerprint.NOFINGER:\n                print('.', end='')\n            elif i == adafruit_fingerprint.IMAGEFAIL:\n                print('Imaging error')\n                return False\n            else:\n                print('Other error')\n                return False\n        print('Templating...', end='')\n        i = finger.image_2_tz(fingerimg)\n        if i == adafruit_fingerprint.OK:\n            print('Templated')\n        else:\n            if i == adafruit_fingerprint.IMAGEMESS:\n                print('Image too messy')\n            elif i == adafruit_fingerprint.FEATUREFAIL:\n                print('Could not identify features')\n            elif i == adafruit_fingerprint.INVALIDIMAGE:\n                print('Image invalid')\n            else:\n                print('Other error')\n            return False\n        if fingerimg == 1:\n            print('Remove finger')\n            time.sleep(1)\n            while i != adafruit_fingerprint.NOFINGER:\n                i = finger.get_image()\n    print('Creating model...', end='')\n    i = finger.create_model()\n    if i == adafruit_fingerprint.OK:\n        print('Created')\n    else:\n        if i == adafruit_fingerprint.ENROLLMISMATCH:\n            print('Prints did not match')\n        else:\n            print('Other error')\n        return False\n    print('Storing model #%d...' % location, end='')\n    i = finger.store_model(location)\n    if i == adafruit_fingerprint.OK:\n        print('Stored')\n    else:\n        if i == adafruit_fingerprint.BADLOCATION:\n            print('Bad storage location')\n        elif i == adafruit_fingerprint.FLASHERR:\n            print('Flash storage error')\n        else:\n            print('Other error')\n        return False\n    return True\n\n# Usage example:\n            led_mode = 4\n    elif c == \"e\":\n        enroll_finger(get_num())\n    elif c == \"f\":\n        # breathing LED",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_r503.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_r503.py",
      "chunk_type": "function",
      "function_name": "enroll_finger"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_fingerprint\n\n# Use input() to get a valid number from 1 to 127. Retry till success!\ndef get_num():\n    \"\"\"Use input() to get a valid number from 1 to 127. Retry till success!\"\"\"\n    i = 0\n    while i > 127 or i < 1:\n        try:\n            i = int(input('Enter ID # from 1-127: '))\n        except ValueError:\n            pass\n    return i\n\n# Usage example:\n            led_mode = 4\n    elif c == \"e\":\n        enroll_finger(get_num())\n    elif c == \"f\":\n        # breathing LED",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/fingerprint/examples/fingerprint_r503.py",
      "library": "fingerprint",
      "type": "example",
      "file_name": "fingerprint_r503.py",
      "chunk_type": "function",
      "function_name": "get_num"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_as5600\n\nimport board\nimport adafruit_as5600\ni2c = board.I2C()\nsensor = adafruit_as5600.AS5600(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/as5600/examples/as5600_simpletest.py",
      "library": "as5600",
      "type": "example",
      "file_name": "as5600_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_as5600\n\nimport board\nimport adafruit_as5600\ni2c = board.I2C()\nsensor = adafruit_as5600.AS5600(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/as5600/examples/as5600_simpletest.py",
      "library": "as5600",
      "type": "example",
      "file_name": "as5600_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2025 Liz Clark for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\"\"\"AS5600 Simple Test\"\"\"\n\nimport time\n\nimport board\n\nimport adafruit_as5600\n\ni2c = board.I2C()\nsensor = adafruit_as5600.AS5600(i2c)\n\nwhile True:\n    # Read angle values\n    if sensor.magnet_detected:\n        if sensor.max_gain_overflow is True:\n            print(\"Magnet is too weak\")\n        if sensor.min_gain_overflow is True:\n            print(\"Magnet is too strong\")\n        print(f\"Raw angle: {sensor.raw_angle}\")\n        print(f\"Scaled angle: {sensor.angle}\")\n        print(f\"Magnitude: {sensor.magnitude}\")\n    else:\n        print(\"Waiting for magnet..\")\n    print()\n    time.sleep(2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/as5600/examples/as5600_simpletest.py",
      "library": "as5600",
      "type": "example",
      "file_name": "as5600_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import bitmap_label as label\nfrom i2cdisplaybus import I2CDisplayBus\nfrom adafruit_displayio_sh1107 import SH1107, DISPLAY_OFFSET_ADAFRUIT_128x128_OLED_5297\n\n# For I2C\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndisplay_bus = I2CDisplayBus(i2c, device_address=0x3D)\n# For SPI:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/displayio_sh1107/examples/displayio_sh1107_mono_128x128_test.py",
      "library": "displayio_sh1107",
      "type": "example",
      "file_name": "displayio_sh1107_mono_128x128_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_base_ack.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_base_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_base_ack.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_base_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\n# uncommnet the desired import and rfm initialization depending on the radio boards being used",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_base_ack.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_base_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_gizmo import tft_gizmo\nfrom adafruit_slideshow import PlayBackDirection, SlideShow\n\ndisplay = tft_gizmo.TFT_Gizmo()\nforward_button = digitalio.DigitalInOut(board.BUTTON_A)\nforward_button.switch_to_input(pull=digitalio.Pull.DOWN)\nback_button = digitalio.DigitalInOut(board.BUTTON_B)\nback_button.switch_to_input(pull=digitalio.Pull.DOWN)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/slideshow/examples/slideshow_tft_gizmo.py",
      "library": "slideshow",
      "type": "example",
      "file_name": "slideshow_tft_gizmo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_gizmo import tft_gizmo\nfrom adafruit_slideshow import PlayBackDirection, SlideShow\n\ndisplay = tft_gizmo.TFT_Gizmo()\nforward_button = digitalio.DigitalInOut(board.BUTTON_A)\nforward_button.switch_to_input(pull=digitalio.Pull.DOWN)\nback_button = digitalio.DigitalInOut(board.BUTTON_B)\nback_button.switch_to_input(pull=digitalio.Pull.DOWN)\nslideshow = SlideShow(display, None, folder=\"/\", auto_advance=False, dwell=0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/slideshow/examples/slideshow_tft_gizmo.py",
      "library": "slideshow",
      "type": "example",
      "file_name": "slideshow_tft_gizmo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nSlideshow Example using the CircuitPlayground and TFT Gizmo\n\nWritten by Melissa LeBlanc-Williams for Adafruit Industries\n\"\"\"\n\nimport board\nimport digitalio\nfrom adafruit_gizmo import tft_gizmo\n\nfrom adafruit_slideshow import PlayBackDirection, SlideShow\n\ndisplay = tft_gizmo.TFT_Gizmo()\n\nforward_button = digitalio.DigitalInOut(board.BUTTON_A)\nforward_button.switch_to_input(pull=digitalio.Pull.DOWN)\nback_button = digitalio.DigitalInOut(board.BUTTON_B)\nback_button.switch_to_input(pull=digitalio.Pull.DOWN)\n\nslideshow = SlideShow(display, None, folder=\"/\", auto_advance=False, dwell=0)\n\nwhile True:\n    if forward_button.value:\n        slideshow.direction = PlayBackDirection.FORWARD\n        slideshow.advance()\n    if back_button.value:\n        slideshow.direction = PlayBackDirection.BACKWARD\n        slideshow.advance()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/slideshow/examples/slideshow_tft_gizmo.py",
      "library": "slideshow",
      "type": "example",
      "file_name": "slideshow_tft_gizmo.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mpl115a2\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nmpl = adafruit_mpl115a2.MPL115A2(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpl115a2/examples/mpl115a2_displayio_simpletest.py",
      "library": "mpl115a2",
      "type": "example",
      "file_name": "mpl115a2_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mpl115a2\n\n# Simple demo of using the built-in display.\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nmpl = adafruit_mpl115a2.MPL115A2(i2c)\n# Create Label(s) to show the readings. If you have a very small\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpl115a2/examples/mpl115a2_displayio_simpletest.py",
      "library": "mpl115a2",
      "type": "example",
      "file_name": "mpl115a2_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mpl115a2\n\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2 - 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpl115a2/examples/mpl115a2_displayio_simpletest.py",
      "library": "mpl115a2",
      "type": "example",
      "file_name": "mpl115a2_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_mpl115a2\n\n# add the label(s) to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mpl115a2/examples/mpl115a2_displayio_simpletest.py",
      "library": "mpl115a2",
      "type": "example",
      "file_name": "mpl115a2_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_lsm6ds import Rate\nfrom adafruit_lsm6ds.lsm6dsox import LSM6DSOX as LSM6DS\n\n# from adafruit_lsm6ds.lsm6ds33 import LSM6DS33 as LSM6DS\n# from adafruit_lsm6ds.lsm6dso32 import LSM6DSO32 as LSM6DS\n# from adafruit_lsm6ds.ism330dhcx import ISM330DHCX as LSM6DS\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = LSM6DS(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lsm6ds/examples/lsm6ds_rate_test.py",
      "library": "lsm6ds",
      "type": "example",
      "file_name": "lsm6ds_rate_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# WARNING: makes credentials visible. based on how many flights\n# in your area, full response could crash microcontroller\nDEBUG = False\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# -- Base64 Conversion --",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_openskynetwork_private_area.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_openskynetwork_private_area.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# in your area, full response could crash microcontroller\nDEBUG = False\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# -- Base64 Conversion --\nOSN_CREDENTIALS = str(osnusername) + \":\" + str(osnpassword)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_openskynetwork_private_area.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_openskynetwork_private_area.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nDEBUG = False\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# -- Base64 Conversion --\nOSN_CREDENTIALS = str(osnusername) + \":\" + str(osnpassword)\n# base64 encode and strip appended \\n from bytearray",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_openskynetwork_private_area.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_openskynetwork_private_area.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Converts seconds to minutes/hours/days\ndef time_calc(input_time):\n    \"\"\"Converts seconds to minutes/hours/days\"\"\"\n    if input_time < 60:\n        return f'{input_time:.0f} seconds'\n    if input_time < 3600:\n        return f'{input_time / 60:.0f} minutes'\n    if input_time < 86400:\n        return f'{input_time / 60 / 60:.0f} hours'\n    return f'{input_time / 60 / 60 / 24:.1f} days'\n\n# Usage example:\n\n        print(\"\\nFinished!\")\n        print(f\"Board Uptime: {time_calc(time.monotonic())}\")\n        print(f\"Next Update: {time_calc(SLEEP_TIME)}\")\n        print(\"===============================\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_openskynetwork_private_area.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_openskynetwork_private_area.py",
      "chunk_type": "function",
      "function_name": "time_calc"
    }
  },
  {
    "content": "import binascii\nimport os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\ndef _format_datetime(datetime):\n    return f'{datetime.tm_mon:02}/{datetime.tm_mday:02}/{datetime.tm_year} {datetime.tm_hour:02}:{datetime.tm_min:02}:{datetime.tm_sec:02}'\n\n# Usage example:\n            # print(f\" |  | Last Contact Unix Time: {osn_time}\")\n            osn_struct_time = time.localtime(osn_time)\n            osn_readable_time = f\"{_format_datetime(osn_struct_time)}\"\n            print(f\" |  | Timestamp: {osn_readable_time}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_openskynetwork_private_area.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_openskynetwork_private_area.py",
      "chunk_type": "function",
      "function_name": "_format_datetime"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_adxl37x\n\nimport board\nimport adafruit_adxl37x\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\naccelerometer = adafruit_adxl37x.ADXL375(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl37x/examples/adxl37x_simpletest.py",
      "library": "adxl37x",
      "type": "example",
      "file_name": "adxl37x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_adxl37x\n\nimport adafruit_adxl37x\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\naccelerometer = adafruit_adxl37x.ADXL375(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl37x/examples/adxl37x_simpletest.py",
      "library": "adxl37x",
      "type": "example",
      "file_name": "adxl37x_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2022 Kattni Rembor for Adafruit Industries\n#\n# SPDX-License-Identifier: Unlicense\nimport time\n\nimport board\n\nimport adafruit_adxl37x\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\naccelerometer = adafruit_adxl37x.ADXL375(i2c)\n\nwhile True:\n    print(\n        f\"{accelerometer.acceleration[0]} {accelerometer.acceleration[1]} {accelerometer.acceleration[2]} m/s^2\"  # noqa: E501\n    )\n    time.sleep(0.2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl37x/examples/adxl37x_simpletest.py",
      "library": "adxl37x",
      "type": "example",
      "file_name": "adxl37x_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9xfsk\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_fsk_node2.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_fsk_node2.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9xfsk\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_fsk_node2.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_fsk_node2.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9xfsk\n\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\n# uncommnet the desired import and rfm initialization depending on the radio boards being used",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_fsk_node2.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_fsk_node2.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_ili9341\n\nimport adafruit_ili9341\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.CE0\ntft_dc = board.D25\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ili9341/examples/ili9341_pitft_simpletest.py",
      "library": "ili9341",
      "type": "example",
      "file_name": "ili9341_pitft_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_ili9341\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.CE0\ntft_dc = board.D25\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = adafruit_ili9341.ILI9341(display_bus, width=320, height=240)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ili9341/examples/ili9341_pitft_simpletest.py",
      "library": "ili9341",
      "type": "example",
      "file_name": "ili9341_pitft_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_ili9341\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.CE0\ntft_dc = board.D25\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = adafruit_ili9341.ILI9341(display_bus, width=320, height=240)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ili9341/examples/ili9341_pitft_simpletest.py",
      "library": "ili9341",
      "type": "example",
      "file_name": "ili9341_pitft_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_ili9341\n\nspi = board.SPI()\ntft_cs = board.CE0\ntft_dc = board.D25\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs)\ndisplay = adafruit_ili9341.ILI9341(display_bus, width=320, height=240)\n# Make the display context\nsplash = displayio.Group()\ndisplay.root_group = splash",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ili9341/examples/ili9341_pitft_simpletest.py",
      "library": "ili9341",
      "type": "example",
      "file_name": "ili9341_pitft_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pwmio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\n# Modify this if you have a different sized character LCD\nlcd_columns = 16\nlcd_rows = 2\n# Raspberry Pi Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D26)  # LCD pin 4\nlcd_en = digitalio.DigitalInOut(board.D19)  # LCD pin 6\nlcd_d7 = digitalio.DigitalInOut(board.D27)  # LCD pin 14\nlcd_d6 = digitalio.DigitalInOut(board.D22)  # LCD pin 13\nlcd_d5 = digitalio.DigitalInOut(board.D24)  # LCD pin 12",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rpi_rgb_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rpi_rgb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pwmio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_columns = 16\nlcd_rows = 2\n# Raspberry Pi Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D26)  # LCD pin 4\nlcd_en = digitalio.DigitalInOut(board.D19)  # LCD pin 6\nlcd_d7 = digitalio.DigitalInOut(board.D27)  # LCD pin 14\nlcd_d6 = digitalio.DigitalInOut(board.D22)  # LCD pin 13\nlcd_d5 = digitalio.DigitalInOut(board.D24)  # LCD pin 12\nlcd_d4 = digitalio.DigitalInOut(board.D25)  # LCD pin 11",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rpi_rgb_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rpi_rgb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pwmio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_rows = 2\n# Raspberry Pi Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D26)  # LCD pin 4\nlcd_en = digitalio.DigitalInOut(board.D19)  # LCD pin 6\nlcd_d7 = digitalio.DigitalInOut(board.D27)  # LCD pin 14\nlcd_d6 = digitalio.DigitalInOut(board.D22)  # LCD pin 13\nlcd_d5 = digitalio.DigitalInOut(board.D24)  # LCD pin 12\nlcd_d4 = digitalio.DigitalInOut(board.D25)  # LCD pin 11\nlcd_rw = digitalio.DigitalInOut(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rpi_rgb_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rpi_rgb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pwmio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\n# Raspberry Pi Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D26)  # LCD pin 4\nlcd_en = digitalio.DigitalInOut(board.D19)  # LCD pin 6\nlcd_d7 = digitalio.DigitalInOut(board.D27)  # LCD pin 14\nlcd_d6 = digitalio.DigitalInOut(board.D22)  # LCD pin 13\nlcd_d5 = digitalio.DigitalInOut(board.D24)  # LCD pin 12\nlcd_d4 = digitalio.DigitalInOut(board.D25)  # LCD pin 11\nlcd_rw = digitalio.DigitalInOut(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rpi_rgb_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rpi_rgb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pwmio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\n# Raspberry Pi Pin Config:\nlcd_rs = digitalio.DigitalInOut(board.D26)  # LCD pin 4\nlcd_en = digitalio.DigitalInOut(board.D19)  # LCD pin 6\nlcd_d7 = digitalio.DigitalInOut(board.D27)  # LCD pin 14\nlcd_d6 = digitalio.DigitalInOut(board.D22)  # LCD pin 13\nlcd_d5 = digitalio.DigitalInOut(board.D24)  # LCD pin 12\nlcd_d4 = digitalio.DigitalInOut(board.D25)  # LCD pin 11\nlcd_rw = digitalio.DigitalInOut(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rpi_rgb_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rpi_rgb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pwmio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_rs = digitalio.DigitalInOut(board.D26)  # LCD pin 4\nlcd_en = digitalio.DigitalInOut(board.D19)  # LCD pin 6\nlcd_d7 = digitalio.DigitalInOut(board.D27)  # LCD pin 14\nlcd_d6 = digitalio.DigitalInOut(board.D22)  # LCD pin 13\nlcd_d5 = digitalio.DigitalInOut(board.D24)  # LCD pin 12\nlcd_d4 = digitalio.DigitalInOut(board.D25)  # LCD pin 11\nlcd_rw = digitalio.DigitalInOut(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rpi_rgb_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rpi_rgb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pwmio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_rw = digitalio.DigitalInOut(board.D4)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rpi_rgb_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rpi_rgb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pwmio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\nlcd_rw = digitalio.DigitalInOut(\n# Not necessary if only writing to the display. Used on shield.\nred = pwmio.PWMOut(board.D21)\ngreen = pwmio.PWMOut(board.D12)\nblue = pwmio.PWMOut(board.D18)\n# Initialize the LCD class",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rpi_rgb_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rpi_rgb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pwmio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\n# Not necessary if only writing to the display. Used on shield.\nred = pwmio.PWMOut(board.D21)\ngreen = pwmio.PWMOut(board.D12)\nblue = pwmio.PWMOut(board.D18)\n# Initialize the LCD class\n# The lcd_rw parameter is optional.  You can omit the line below if you're only",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rpi_rgb_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rpi_rgb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport pwmio\nimport adafruit_character_lcd.character_lcd as characterlcd\n\n# Not necessary if only writing to the display. Used on shield.\nred = pwmio.PWMOut(board.D21)\ngreen = pwmio.PWMOut(board.D12)\nblue = pwmio.PWMOut(board.D18)\n# Initialize the LCD class\n# The lcd_rw parameter is optional.  You can omit the line below if you're only\n# writing to the display.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/charlcd/examples/charlcd_rpi_rgb_simpletest.py",
      "library": "charlcd",
      "type": "example",
      "file_name": "charlcd_rpi_rgb_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport terminalio\nfrom adafruit_display_text import outlined_label\n\n    padding_bottom=2,\n    scale=3,\ntext_area.anchor_point = (0, 0)\ntext_area.anchored_position = (10, 10)\nboard.DISPLAY.root_group = text_area",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-text/examples/display_text_outlined_label_simpletest.py",
      "library": "display-text",
      "type": "example",
      "file_name": "display_text_outlined_label_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2023 Tim C\n# SPDX-License-Identifier: MIT\n\nimport board\nimport terminalio\n\nfrom adafruit_display_text import outlined_label\n\nif board.DISPLAY.width <= 150:\n    text = \"Hello\\nworld\"\nelse:\n    text = \"Hello world\"\n\ntext_area = outlined_label.OutlinedLabel(\n    terminalio.FONT,\n    text=text,\n    color=0xFF00FF,\n    outline_color=0x00FF00,\n    outline_size=1,\n    padding_left=2,\n    padding_right=2,\n    padding_top=2,\n    padding_bottom=2,\n    scale=3,\n)\ntext_area.anchor_point = (0, 0)\ntext_area.anchored_position = (10, 10)\nboard.DISPLAY.root_group = text_area\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-text/examples/display_text_outlined_label_simpletest.py",
      "library": "display-text",
      "type": "example",
      "file_name": "display_text_outlined_label_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_am2320\n\nimport board\nimport adafruit_am2320\n# create the I2C shared bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nam = adafruit_am2320.AM2320(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/am2320/examples/am2320_simpletest.py",
      "library": "am2320",
      "type": "example",
      "file_name": "am2320_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_am2320\n\nimport adafruit_am2320\n# create the I2C shared bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nam = adafruit_am2320.AM2320(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/am2320/examples/am2320_simpletest.py",
      "library": "am2320",
      "type": "example",
      "file_name": "am2320_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_am2320\n\n# create the I2C shared bus\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nam = adafruit_am2320.AM2320(i2c)\n\nwhile True:\n    print(\"Temperature: \", am.temperature)\n    print(\"Humidity: \", am.relative_humidity)\n    time.sleep(2)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/am2320/examples/am2320_simpletest.py",
      "library": "am2320",
      "type": "example",
      "file_name": "am2320_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_imageload\nimport adafruit_ntp\nimport board\nimport socketpool\nimport wifi\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_clock import FlipClock\n\nMEDIUM_LEVEL = 0.9\nUTC_OFFSET = -5\npool = socketpool.SocketPool(wifi.radio)\nntp = adafruit_ntp.NTP(pool, tz_offset=UTC_OFFSET)\ndisplay = board.DISPLAY",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipclock_ntp_test.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipclock_ntp_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_imageload\nimport adafruit_ntp\nimport board\nimport socketpool\nimport wifi\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_clock import FlipClock\n\npool = socketpool.SocketPool(wifi.radio)\nntp = adafruit_ntp.NTP(pool, tz_offset=UTC_OFFSET)\ndisplay = board.DISPLAY\nstatic_spritesheet, static_palette = adafruit_imageload.load(\"static_sheet.bmp\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipclock_ntp_test.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipclock_ntp_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_imageload\nimport adafruit_ntp\nimport board\nimport socketpool\nimport wifi\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_clock import FlipClock\n\nstatic_spritesheet, static_palette = adafruit_imageload.load('static_sheet.bmp')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipclock_ntp_test.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipclock_ntp_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_imageload\nimport adafruit_ntp\nimport board\nimport socketpool\nimport wifi\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_clock import FlipClock\n\ntop_animation_spritesheet, top_animation_palette = adafruit_imageload.load('grey_top_animation_sheet.bmp')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipclock_ntp_test.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipclock_ntp_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_imageload\nimport adafruit_ntp\nimport board\nimport socketpool\nimport wifi\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_clock import FlipClock\n\nbottom_animation_spritesheet, bottom_animation_palette = adafruit_imageload.load('grey_bottom_animation_sheet.bmp')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipclock_ntp_test.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipclock_ntp_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_imageload\nimport adafruit_ntp\nimport board\nimport socketpool\nimport wifi\nfrom displayio import Group\nfrom adafruit_displayio_flipclock.flip_clock import FlipClock\n\nclock.anchor_point = (0.5, 0.5)\nclock.anchored_position = (display.width // 2, display.height // 2)\nmain_group = Group()\nboard.DISPLAY.root_group = main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_flipclock/examples/displayio_flipclock_ntp_test.py",
      "library": "displayio_flipclock",
      "type": "example",
      "file_name": "displayio_flipclock_ntp_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\ntft_dc = board.GP8\ntft_cs = board.GP9\nspi_clk = board.GP10\nspi_mosi = board.GP11\ntft_rst = board.GP12",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x240_simpletest_Waveshare_PicoLCD_1_3.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x240_simpletest_Waveshare_PicoLCD_1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\ntft_dc = board.GP8\ntft_cs = board.GP9\nspi_clk = board.GP10\nspi_mosi = board.GP11\ntft_rst = board.GP12\nbacklight = board.GP13",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x240_simpletest_Waveshare_PicoLCD_1_3.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x240_simpletest_Waveshare_PicoLCD_1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\ntft_dc = board.GP8\ntft_cs = board.GP9\nspi_clk = board.GP10\nspi_mosi = board.GP11\ntft_rst = board.GP12\nbacklight = board.GP13\nspi = busio.SPI(spi_clk, spi_mosi)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x240_simpletest_Waveshare_PicoLCD_1_3.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x240_simpletest_Waveshare_PicoLCD_1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\ntft_dc = board.GP8\ntft_cs = board.GP9\nspi_clk = board.GP10\nspi_mosi = board.GP11\ntft_rst = board.GP12\nbacklight = board.GP13\nspi = busio.SPI(spi_clk, spi_mosi)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x240_simpletest_Waveshare_PicoLCD_1_3.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x240_simpletest_Waveshare_PicoLCD_1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\ntft_dc = board.GP8\ntft_cs = board.GP9\nspi_clk = board.GP10\nspi_mosi = board.GP11\ntft_rst = board.GP12\nbacklight = board.GP13\nspi = busio.SPI(spi_clk, spi_mosi)\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=tft_rst)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x240_simpletest_Waveshare_PicoLCD_1_3.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x240_simpletest_Waveshare_PicoLCD_1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\ntft_dc = board.GP8\ntft_cs = board.GP9\nspi_clk = board.GP10\nspi_mosi = board.GP11\ntft_rst = board.GP12\nbacklight = board.GP13\nspi = busio.SPI(spi_clk, spi_mosi)\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=tft_rst)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x240_simpletest_Waveshare_PicoLCD_1_3.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x240_simpletest_Waveshare_PicoLCD_1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\ntft_cs = board.GP9\nspi_clk = board.GP10\nspi_mosi = board.GP11\ntft_rst = board.GP12\nbacklight = board.GP13\nspi = busio.SPI(spi_clk, spi_mosi)\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=tft_rst)\ndisplay = ST7789(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_240x240_simpletest_Waveshare_PicoLCD_1_3.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_240x240_simpletest_Waveshare_PicoLCD_1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom RPi import GPIO\nfrom adafruit_mcp230xx.mcp23s17 import MCP23S17\n\n# Initialize the SPI bus:\nspi = busio.SPI(board.SCK_1, MOSI=board.MOSI_1, MISO=board.MISO_1)\ncs = DigitalInOut(board.CS0)\n# Initialize the MCP23S17 chip on the bonnet\nmcp = MCP23S17(spi, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp230xx/examples/mcp23Sxx_event_detect_interrupt.py",
      "library": "mcp230xx",
      "type": "example",
      "file_name": "mcp23Sxx_event_detect_interrupt.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom RPi import GPIO\nfrom adafruit_mcp230xx.mcp23s17 import MCP23S17\n\n# Initialize the SPI bus:\nspi = busio.SPI(board.SCK_1, MOSI=board.MOSI_1, MISO=board.MISO_1)\ncs = DigitalInOut(board.CS0)\n# Initialize the MCP23S17 chip on the bonnet\nmcp = MCP23S17(spi, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp230xx/examples/mcp23Sxx_event_detect_interrupt.py",
      "library": "mcp230xx",
      "type": "example",
      "file_name": "mcp23Sxx_event_detect_interrupt.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom RPi import GPIO\nfrom adafruit_mcp230xx.mcp23s17 import MCP23S17\n\n# Callback function to be called when an Interrupt occurs.\ndef print_interrupt(port):\n    \"\"\"Callback function to be called when an Interrupt occurs.\"\"\"\n    for pin_flag in mcp.int_flag:\n        print(f'Interrupt connected to Pin: {port}')\n        print(f'Pin number: {pin_flag} changed to: {pins[pin_flag].value}')\n    mcp.clear_ints()\n\n# Usage example:\nGPIO.setup(interrupt, GPIO.IN, GPIO.PUD_UP)  # Set up Pi's pin as input, pull up\n\n# The add_event_detect fuction will call our print_interrupt callback function\n# every time an interrupt gets triggered.\nGPIO.add_event_detect(interrupt, GPIO.FALLING, callback=print_interrupt, bouncetime=10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp230xx/examples/mcp23Sxx_event_detect_interrupt.py",
      "library": "mcp230xx",
      "type": "example",
      "file_name": "mcp23Sxx_event_detect_interrupt.py",
      "chunk_type": "function",
      "function_name": "print_interrupt"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport sdcardio\nimport storage\nimport adafruit_vc0706\n\nimport storage\nimport adafruit_vc0706\n# Configuration:\nSD_CS_PIN = board.D10  # CS for SD card (SD_CS is for Feather Adalogger)\nIMAGE_FILE = \"/sd/image.jpg\"  # Full path to file name to save captured image.\n# Will overwrite!\n# Setup SPI bus (hardware SPI).",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vc0706/examples/vc0706_snapshot_simpletest.py",
      "library": "vc0706",
      "type": "example",
      "file_name": "vc0706_snapshot_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport sdcardio\nimport storage\nimport adafruit_vc0706\n\nSD_CS_PIN = board.D10  # CS for SD card (SD_CS is for Feather Adalogger)\nIMAGE_FILE = \"/sd/image.jpg\"  # Full path to file name to save captured image.\n# Will overwrite!\n# Setup SPI bus (hardware SPI).\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Setup SD card and mount it in the filesystem.\n# Uncomment if your board doesn't support sdcardio\n# sd_cs = digitalio.DigitalInOut(SD_CS_PIN)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vc0706/examples/vc0706_snapshot_simpletest.py",
      "library": "vc0706",
      "type": "example",
      "file_name": "vc0706_snapshot_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport sdcardio\nimport storage\nimport adafruit_vc0706\n\nvfs = storage.VfsFat(sdcard)\n# Create a serial connection for the VC0706 connection, speed is auto-detected.\nuart = busio.UART(board.TX, board.RX)\n# Setup VC0706 camera\nvc0706 = adafruit_vc0706.VC0706(uart)\n# Print the version string from the camera.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vc0706/examples/vc0706_snapshot_simpletest.py",
      "library": "vc0706",
      "type": "example",
      "file_name": "vc0706_snapshot_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport sdcardio\nimport storage\nimport adafruit_vc0706\n\n# Create a serial connection for the VC0706 connection, speed is auto-detected.\nuart = busio.UART(board.TX, board.RX)\n# Setup VC0706 camera\nvc0706 = adafruit_vc0706.VC0706(uart)\n# Print the version string from the camera.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vc0706/examples/vc0706_snapshot_simpletest.py",
      "library": "vc0706",
      "type": "example",
      "file_name": "vc0706_snapshot_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport sdcardio\nimport storage\nimport adafruit_vc0706\n\n# Set the baud rate to 115200 for fastest transfer (its the max speed)\nvc0706.baudrate = 115200\n# Set the image size.\nvc0706.image_size = adafruit_vc0706.IMAGE_SIZE_640x480  # Or set IMAGE_SIZE_320x240 or\n# IMAGE_SIZE_160x120\n# Note you can also read the property and compare against those values to\n# see the current size:\nsize = vc0706.image_size",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vc0706/examples/vc0706_snapshot_simpletest.py",
      "library": "vc0706",
      "type": "example",
      "file_name": "vc0706_snapshot_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import socket\nimport ssl\nimport time\nfrom os import getenv\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef connected(client, userdata, flags, rc):\n    print(f'Connected to Adafruit IO! Listening for topic changes on {onoff_feed}')\n    client.subscribe(onoff_feed)\n\n# Usage example:\n# Define callback methods which are called when events occur\ndef connected(client, userdata, flags, rc):\n    # This function will be called when the client is connected\n    # successfully to the broker.\n    print(f\"Connected to Adafruit IO! Listening for topic changes on {onoff_feed}\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cpython/minimqtt_adafruitio_cpython.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_cpython.py",
      "chunk_type": "function",
      "function_name": "connected"
    }
  },
  {
    "content": "import socket\nimport ssl\nimport time\nfrom os import getenv\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef disconnected(client, userdata, rc):\n    print('Disconnected from Adafruit IO!')\n\n# Usage example:\n\ndef disconnected(client, userdata, rc):\n    # This method is called when the client is disconnected\n    print(\"Disconnected from Adafruit IO!\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cpython/minimqtt_adafruitio_cpython.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_cpython.py",
      "chunk_type": "function",
      "function_name": "disconnected"
    }
  },
  {
    "content": "import socket\nimport ssl\nimport time\nfrom os import getenv\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\n\ndef message(client, topic, message):\n    print(f'New message on topic {topic}: {message}')\n\n# Usage example:\ndef message(client, topic, message):\n    # This method is called when a topic the client is subscribed to\n    # has a new message.\n    print(f\"New message on topic {topic}: {message}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/minimqtt/examples/cpython/minimqtt_adafruitio_cpython.py",
      "library": "minimqtt",
      "type": "example",
      "file_name": "minimqtt_adafruitio_cpython.py",
      "chunk_type": "function",
      "function_name": "message"
    }
  },
  {
    "content": "import board\nimport neopixel\nimport adafruit_led_animation.animation.blink as blink_animation\nimport adafruit_led_animation.animation.comet as comet_animation\nimport adafruit_led_animation.animation.sparkle as sparkle_animation\nfrom adafruit_led_animation import color\nfrom adafruit_led_animation.timedsequence import TimedAnimationSequence\n\nimport adafruit_led_animation.animation.comet as comet_animation\nimport adafruit_led_animation.animation.sparkle as sparkle_animation\nstrip_pixels = neopixel.NeoPixel(board.D6, 32, brightness=0.1, auto_write=False)\nblink = blink_animation.Blink(strip_pixels, 0.3, color.RED)\ncomet = comet_animation.Comet(strip_pixels, 0.1, color.BLUE)\nsparkle = sparkle_animation.Sparkle(strip_pixels, 0.05, color.GREEN)\nanimations = TimedAnimationSequence(blink, 2, comet, 4, sparkle, 5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_timedsequence.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_timedsequence.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2020 Gamblor21\n#\n# SPDX-License-Identifier: MIT\n\"\"\"\nExample for TimedSequence\n\"\"\"\n\nimport board\nimport neopixel\n\nimport adafruit_led_animation.animation.blink as blink_animation\nimport adafruit_led_animation.animation.comet as comet_animation\nimport adafruit_led_animation.animation.sparkle as sparkle_animation\nfrom adafruit_led_animation import color\nfrom adafruit_led_animation.timedsequence import TimedAnimationSequence\n\nstrip_pixels = neopixel.NeoPixel(board.D6, 32, brightness=0.1, auto_write=False)\nblink = blink_animation.Blink(strip_pixels, 0.3, color.RED)\ncomet = comet_animation.Comet(strip_pixels, 0.1, color.BLUE)\nsparkle = sparkle_animation.Sparkle(strip_pixels, 0.05, color.GREEN)\nanimations = TimedAnimationSequence(blink, 2, comet, 4, sparkle, 5)\nwhile True:\n    animations.animate()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_timedsequence.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_timedsequence.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node2.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node2.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node2.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node2.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm69 = adafruit_rfm69.RFM69(spi, CS, RESET, RADIO_FREQ_MHZ)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node2.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node2.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm69\n\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm69 = adafruit_rfm69.RFM69(spi, CS, RESET, RADIO_FREQ_MHZ)\n# Optionally set an encryption key (16 byte AES key). MUST match both\n# on the transmitter and receiver (or be set to None to disable/the default).\nrfm69.encryption_key = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm69/examples/rfm69_node2.py",
      "library": "rfm69",
      "type": "example",
      "file_name": "rfm69_node2.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.sparkle import Sparkle\nfrom adafruit_led_animation.animation.sparklepulse import SparklePulse\nfrom adafruit_led_animation.color import AMBER, JADE\nfrom adafruit_led_animation.sequence import AnimationSequence\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\npixel_num = 32\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_sparkle_animations.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_sparkle_animations.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.sparkle import Sparkle\nfrom adafruit_led_animation.animation.sparklepulse import SparklePulse\nfrom adafruit_led_animation.color import AMBER, JADE\nfrom adafruit_led_animation.sequence import AnimationSequence\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.D6\n# Update to match the number of NeoPixels you have connected\npixel_num = 32\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)\nsparkle = Sparkle(pixels, speed=0.05, color=AMBER, num_sparkles=10)\nsparkle_pulse = SparklePulse(pixels, speed=0.05, period=3, color=JADE)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_sparkle_animations.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_sparkle_animations.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_touchscreen\nimport board\nimport displayio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_button import Button\n\n# use built in display (MagTag, PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\n# These pins are used as both analog and digital! XL, XR and YU must be analog\n# and digital capable. YD just need to be digital\nts = adafruit_touchscreen.Touchscreen(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-button/examples/display_button_customfont.py",
      "library": "display-button",
      "type": "example",
      "file_name": "display_button_customfont.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_touchscreen\nimport board\nimport displayio\nfrom adafruit_bitmap_font import bitmap_font\nfrom adafruit_button import Button\n\nts = adafruit_touchscreen.Touchscreen(board.TOUCH_XL, board.TOUCH_XR, board.TOUCH_YD, board.TOUCH_YU, calibration=((5200, 59000), (5800, 57000)), size=(display.width, display.height))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/display-button/examples/display_button_customfont.py",
      "library": "display-button",
      "type": "example",
      "file_name": "display_button_customfont.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_lidarlite\n\nimport busio\nimport adafruit_lidarlite\n# Create library object using our Bus I2C port\ni2c = busio.I2C(board.SCL, board.SDA)\n# Default configuration, with only i2c wires\nsensor = adafruit_lidarlite.LIDARLite(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lidarlite/examples/lidarlite_simpletest.py",
      "library": "lidarlite",
      "type": "example",
      "file_name": "lidarlite_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_lidarlite\n\n# Create library object using our Bus I2C port\ni2c = busio.I2C(board.SCL, board.SDA)\n# Default configuration, with only i2c wires\nsensor = adafruit_lidarlite.LIDARLite(i2c)\n# Optionally, we can pass in a hardware reset pin, or custom config\n# import digitalio\n# reset = digitalio.DigitalInOut(board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/lidarlite/examples/lidarlite_simpletest.py",
      "library": "lidarlite",
      "type": "example",
      "file_name": "lidarlite_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\n\nMIDI_CHAN_BANK = 0x00\nMIDI_CHAN_VOLUME = 0x07\nMIDI_CHAN_PAN = 0x0A\nMIDI_CHAN_PROGRAM = 0xC0\nuart = busio.UART(board.TX, board.RX, baudrate=31250)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vs1053/examples/vs1053_MIDI.py",
      "library": "vs1053",
      "type": "example",
      "file_name": "vs1053_MIDI.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\n\ndef note_on(channel, note, vel):\n    uart.write(bytearray([MIDI_NOTE_ON | channel, note, vel]))\n\n# Usage example:\n\n# Play Do Re Mi\nnote_on(0, 60, 127)\ntime.sleep(0.5)\nnote_off(0, 60)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vs1053/examples/vs1053_MIDI.py",
      "library": "vs1053",
      "type": "example",
      "file_name": "vs1053_MIDI.py",
      "chunk_type": "function",
      "function_name": "note_on"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\n\ndef note_off(channel, note):\n    uart.write(bytearray([MIDI_NOTE_OFF | channel, note, 0]))\n\n# Usage example:\nnote_on(0, 60, 127)\ntime.sleep(0.5)\nnote_off(0, 60)\n\nnote_on(0, 62, 127)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vs1053/examples/vs1053_MIDI.py",
      "library": "vs1053",
      "type": "example",
      "file_name": "vs1053_MIDI.py",
      "chunk_type": "function",
      "function_name": "note_off"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\n\ndef set_channel_bank(channel, bank):\n    uart.write(bytearray([MIDI_CHAN_MSG | channel, MIDI_CHAN_BANK, bank]))\n\n# Usage example:\n\n# Set up a piano instrument on channel 0\nset_channel_bank(0, VS1053_BANK_MELODY)\nset_channel_volume(0, 127)\nset_channel_instrument(0, 0)  # piano",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vs1053/examples/vs1053_MIDI.py",
      "library": "vs1053",
      "type": "example",
      "file_name": "vs1053_MIDI.py",
      "chunk_type": "function",
      "function_name": "set_channel_bank"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\n\ndef set_channel_volume(channel, vol):\n    uart.write(bytearray([MIDI_CHAN_MSG | channel, MIDI_CHAN_VOLUME, vol]))\n\n# Usage example:\n# Set up a piano instrument on channel 0\nset_channel_bank(0, VS1053_BANK_MELODY)\nset_channel_volume(0, 127)\nset_channel_instrument(0, 0)  # piano\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vs1053/examples/vs1053_MIDI.py",
      "library": "vs1053",
      "type": "example",
      "file_name": "vs1053_MIDI.py",
      "chunk_type": "function",
      "function_name": "set_channel_volume"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\n\ndef set_channel_instrument(channel, num):\n    uart.write(bytearray([MIDI_CHAN_PROGRAM | channel]))\n    time.sleep(0.01)\n    uart.write(bytearray([num]))\n    time.sleep(0.01)\n\n# Usage example:\nset_channel_bank(0, VS1053_BANK_MELODY)\nset_channel_volume(0, 127)\nset_channel_instrument(0, 0)  # piano\n\n# Play Do Re Mi",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vs1053/examples/vs1053_MIDI.py",
      "library": "vs1053",
      "type": "example",
      "file_name": "vs1053_MIDI.py",
      "chunk_type": "function",
      "function_name": "set_channel_instrument"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\n\ndef set_channel_pan(channel, pan):\n    uart.write(bytearray([MIDI_CHAN_MSG | channel, MIDI_CHAN_PAN, pan]))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vs1053/examples/vs1053_MIDI.py",
      "library": "vs1053",
      "type": "example",
      "file_name": "vs1053_MIDI.py",
      "chunk_type": "function",
      "function_name": "set_channel_pan"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\n# Get WiFi details, ensure these are setup in settings.toml\nssid = os.getenv(\"CIRCUITPY_WIFI_SSID\")\npassword = os.getenv(\"CIRCUITPY_WIFI_PASSWORD\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/esp32spi/requests_esp32spi_simpletest.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_esp32spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\nssid = os.getenv(\"CIRCUITPY_WIFI_SSID\")\npassword = os.getenv(\"CIRCUITPY_WIFI_PASSWORD\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/esp32spi/requests_esp32spi_simpletest.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_esp32spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\npassword = os.getenv(\"CIRCUITPY_WIFI_PASSWORD\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/esp32spi/requests_esp32spi_simpletest.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_esp32spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\n# If you have an AirLift Featherwing or ItsyBitsy Airlift:\n# esp32_cs = DigitalInOut(board.D13)\n# esp32_ready = DigitalInOut(board.D11)\n# esp32_reset = DigitalInOut(board.D12)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nradio = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/esp32spi/requests_esp32spi_simpletest.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_esp32spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\n# esp32_cs = DigitalInOut(board.D13)\n# esp32_ready = DigitalInOut(board.D11)\n# esp32_reset = DigitalInOut(board.D12)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nradio = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/esp32spi/requests_esp32spi_simpletest.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_esp32spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nTEXT_URL = \"http://wifitest.adafruit.com/testwifi/index.html\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/esp32spi/requests_esp32spi_simpletest.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_esp32spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nTEXT_URL = \"http://wifitest.adafruit.com/testwifi/index.html\"\nJSON_GET_URL = \"https://httpbin.org/get\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/esp32spi/requests_esp32spi_simpletest.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_esp32spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nTEXT_URL = \"http://wifitest.adafruit.com/testwifi/index.html\"\nJSON_GET_URL = \"https://httpbin.org/get\"\nJSON_POST_URL = \"https://httpbin.org/post\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/esp32spi/requests_esp32spi_simpletest.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_esp32spi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport pulseio\nimport adafruit_irremote\n\nimport board\nimport pulseio\nimport adafruit_irremote\npulsein = pulseio.PulseIn(board.REMOTEIN, maxlen=120, idle_state=True)\ndecoder = adafruit_irremote.GenericDecode()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/irremote/examples/irremote_simpletest.py",
      "library": "irremote",
      "type": "example",
      "file_name": "irremote_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport pulseio\nimport adafruit_irremote\n\nimport pulseio\nimport adafruit_irremote\npulsein = pulseio.PulseIn(board.REMOTEIN, maxlen=120, idle_state=True)\ndecoder = adafruit_irremote.GenericDecode()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/irremote/examples/irremote_simpletest.py",
      "library": "irremote",
      "type": "example",
      "file_name": "irremote_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# Circuit Playground Express Demo Code\n# Adjust the pulseio 'board.PIN' if using something else\nimport board\nimport pulseio\n\nimport adafruit_irremote\n\npulsein = pulseio.PulseIn(board.REMOTEIN, maxlen=120, idle_state=True)\ndecoder = adafruit_irremote.GenericDecode()\n\n\nwhile True:\n    pulses = decoder.read_pulses(pulsein)\n    print(\"Heard\", len(pulses), \"Pulses:\", pulses)\n    try:\n        code = decoder.decode_bits(pulses)\n        print(\"Decoded:\", code)\n    except adafruit_irremote.IRNECRepeatException:  # unusual short code!\n        print(\"NEC repeat!\")\n    except (\n        adafruit_irremote.IRDecodeException,\n        adafruit_irremote.FailedToDecode,\n    ) as e:  # failed to decode\n        print(\"Failed to decode: \", e.args)\n\n    print(\"----------------------------\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/irremote/examples/irremote_simpletest.py",
      "library": "irremote",
      "type": "example",
      "file_name": "irremote_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_tca8418 import TCA8418\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntca = TCA8418(i2c)\n# set up all R0-R4 pins and C0-C3 pins as keypads",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca8418/examples/tca8418_keypad.py",
      "library": "tca8418",
      "type": "example",
      "file_name": "tca8418_keypad.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import subprocess\nimport time\nimport busio\nimport digitalio\nfrom board import D4, SCL, SDA\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1305\n\nimport adafruit_ssd1305\n# Define the Reset Pin\noled_reset = digitalio.DigitalInOut(D4)\n# Create the I2C interface.\ni2c = busio.I2C(SCL, SDA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1305/examples/ssd1305_stats.py",
      "library": "ssd1305",
      "type": "example",
      "file_name": "ssd1305_stats.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import subprocess\nimport time\nimport busio\nimport digitalio\nfrom board import D4, SCL, SDA\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1305\n\n# Define the Reset Pin\noled_reset = digitalio.DigitalInOut(D4)\n# Create the I2C interface.\ni2c = busio.I2C(SCL, SDA)\n# Create the SSD1305 OLED class.\n# The first two parameters are the pixel width and pixel height.  Change these\n# to the right size for your display!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1305/examples/ssd1305_stats.py",
      "library": "ssd1305",
      "type": "example",
      "file_name": "ssd1305_stats.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import subprocess\nimport time\nimport busio\nimport digitalio\nfrom board import D4, SCL, SDA\nfrom PIL import Image, ImageDraw, ImageFont\nimport adafruit_ssd1305\n\ni2c = busio.I2C(SCL, SDA)\n# Create the SSD1305 OLED class.\n# The first two parameters are the pixel width and pixel height.  Change these\n# to the right size for your display!\ndisp = adafruit_ssd1305.SSD1305_I2C(128, 32, i2c, reset=oled_reset)\n# Clear display.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1305/examples/ssd1305_stats.py",
      "library": "ssd1305",
      "type": "example",
      "file_name": "ssd1305_stats.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_digital_out.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_digital_out.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_digital_out.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_digital_out.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_digital_out.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_digital_out.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_digital_out.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_digital_out.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)\n# esp32_reset = DigitalInOut(board.D5)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_digital_out.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_digital_out.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_digital_out.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_digital_out.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_digital_out.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_digital_out.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# Initialize an Adafruit IO HTTP API object\nio = IO_HTTP(aio_username, aio_key, requests)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_digital_out.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_digital_out.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_requests\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut, Direction\nfrom adafruit_io.adafruit_io import IO_HTTP, AdafruitIO_RequestError\n\n    # If no 'digital' feed exists, create one\n    digital_feed = io.create_new_feed(\"digital\")\n# Set up LED\nLED = DigitalInOut(board.D13)\nLED.direction = Direction.OUTPUT",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/adafruitio/examples/adafruit_io_http/adafruit_io_digital_out.py",
      "library": "adafruitio",
      "type": "example",
      "file_name": "adafruit_io_digital_out.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport microcontroller\nimport wifi\nimport adafruit_requests\n\n# API Polling Rate\n# 900 = 15 mins, 1800 = 30 mins, 3600 = 1 hour\nSLEEP_TIME = 900\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_fitbit.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_fitbit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport microcontroller\nimport wifi\nimport adafruit_requests\n\n# 900 = 15 mins, 1800 = 30 mins, 3600 = 1 hour\nSLEEP_TIME = 900\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_fitbit.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_fitbit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport microcontroller\nimport wifi\nimport adafruit_requests\n\nSLEEP_TIME = 900\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_fitbit.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_fitbit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport microcontroller\nimport wifi\nimport adafruit_requests\n\n# Converts seconds to minutes/hours/days\ndef time_calc(input_time):\n    \"\"\"Converts seconds to minutes/hours/days\"\"\"\n    if input_time < 60:\n        return f'{input_time:.0f} seconds'\n    if input_time < 3600:\n        return f'{input_time / 60:.0f} minutes'\n    if input_time < 86400:\n        return f'{input_time / 60 / 60:.0f} hours'\n    return f'{input_time / 60 / 60 / 24:.1f} days'\n\n# Usage example:\n                    continue\n                if DEBUG:\n                    print(\"Token Expires in: \", time_calc(fitbit_token_expiration))\n                    print(\"Scope: \", fitbit_scope)\n                    print(\"Token Type: \", fitbit_token_type)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_fitbit.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_fitbit.py",
      "chunk_type": "function",
      "function_name": "time_calc"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport microcontroller\nimport wifi\nimport adafruit_requests\n\nFITBIT_OAUTH_TOKEN = \"https://api.fitbit.com/oauth2/token\"\n# Use to confirm first instance of NVM is the correct refresh token\nFIRST_RUN = True\nRefresh_Token = Fitbit_First_Refresh_Token\ntop_nvm = microcontroller.nvm[0:64].decode()\nnvm_bytes = microcontroller.nvm[0:64]\ntop_nvm_3bytes = nvm_bytes[0:3]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_fitbit.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_fitbit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport microcontroller\nimport wifi\nimport adafruit_requests\n\n# Use to confirm first instance of NVM is the correct refresh token\nFIRST_RUN = True\nRefresh_Token = Fitbit_First_Refresh_Token\ntop_nvm = microcontroller.nvm[0:64].decode()\nnvm_bytes = microcontroller.nvm[0:64]\ntop_nvm_3bytes = nvm_bytes[0:3]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_fitbit.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_fitbit.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\nfrom digitalio import DigitalInOut\nfrom adafruit_hue import Bridge\n\n# Get WiFi details, ensure these are setup in settings.toml\nssid = getenv(\"CIRCUITPY_WIFI_SSID\")\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\n# ESP32 SPI\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hue/examples/hue_simpletest.py",
      "library": "hue",
      "type": "example",
      "file_name": "hue_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\nfrom digitalio import DigitalInOut\nfrom adafruit_hue import Bridge\n\nssid = getenv(\"CIRCUITPY_WIFI_SSID\")\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\n# ESP32 SPI\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hue/examples/hue_simpletest.py",
      "library": "hue",
      "type": "example",
      "file_name": "hue_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\nfrom digitalio import DigitalInOut\nfrom adafruit_hue import Bridge\n\npassword = getenv(\"CIRCUITPY_WIFI_PASSWORD\")\n# ESP32 SPI\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)\nwifi = WiFiManager(esp, ssid, password, status_pixel=status_pixel)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hue/examples/hue_simpletest.py",
      "library": "hue",
      "type": "example",
      "file_name": "hue_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\nfrom digitalio import DigitalInOut\nfrom adafruit_hue import Bridge\n\n# ESP32 SPI\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)\nwifi = WiFiManager(esp, ssid, password, status_pixel=status_pixel)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hue/examples/hue_simpletest.py",
      "library": "hue",
      "type": "example",
      "file_name": "hue_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\nfrom digitalio import DigitalInOut\nfrom adafruit_hue import Bridge\n\n# ESP32 SPI\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)\nwifi = WiFiManager(esp, ssid, password, status_pixel=status_pixel)\n# Attempt to load bridge username and IP address from settings.toml",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hue/examples/hue_simpletest.py",
      "library": "hue",
      "type": "example",
      "file_name": "hue_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport board\nimport busio\nimport neopixel\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\nfrom digitalio import DigitalInOut\nfrom adafruit_hue import Bridge\n\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)\nwifi = WiFiManager(esp, ssid, password, status_pixel=status_pixel)\n# Attempt to load bridge username and IP address from settings.toml\nusername = getenv(\"hue_username\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hue/examples/hue_simpletest.py",
      "library": "hue",
      "type": "example",
      "file_name": "hue_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_lis3dh\nimport board\nimport digitalio\nfrom adafruit_debug_i2c import DebugI2C\n\nimport board\nimport digitalio\ni2c = DebugI2C(board.I2C())\nint1 = digitalio.DigitalInOut(board.ACCELEROMETER_INTERRUPT)\naccelerometer = adafruit_lis3dh.LIS3DH_I2C(i2c, address=0x19, int1=int1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debug-i2c/examples/debug_i2c_simpletest.py",
      "library": "debug-i2c",
      "type": "example",
      "file_name": "debug_i2c_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_lis3dh\nimport board\nimport digitalio\nfrom adafruit_debug_i2c import DebugI2C\n\nimport digitalio\ni2c = DebugI2C(board.I2C())\nint1 = digitalio.DigitalInOut(board.ACCELEROMETER_INTERRUPT)\naccelerometer = adafruit_lis3dh.LIS3DH_I2C(i2c, address=0x19, int1=int1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debug-i2c/examples/debug_i2c_simpletest.py",
      "library": "debug-i2c",
      "type": "example",
      "file_name": "debug_i2c_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_lis3dh\nimport board\nimport digitalio\nfrom adafruit_debug_i2c import DebugI2C\n\naccelerometer = adafruit_lis3dh.LIS3DH_I2C(i2c, address=25, int1=int1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debug-i2c/examples/debug_i2c_simpletest.py",
      "library": "debug-i2c",
      "type": "example",
      "file_name": "debug_i2c_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"This example uses the LIS3DH accelerometer. Debug_I2C can be used with any I2C device.\"\"\"\n\nimport adafruit_lis3dh\nimport board\nimport digitalio\n\nfrom adafruit_debug_i2c import DebugI2C\n\ni2c = DebugI2C(board.I2C())\nint1 = digitalio.DigitalInOut(board.ACCELEROMETER_INTERRUPT)\naccelerometer = adafruit_lis3dh.LIS3DH_I2C(i2c, address=0x19, int1=int1)\n\nprint(accelerometer.acceleration)\n\nfor i in range(2):\n    print(accelerometer.acceleration)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debug-i2c/examples/debug_i2c_simpletest.py",
      "library": "debug-i2c",
      "type": "example",
      "file_name": "debug_i2c_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_pct2075\n\nimport board\nimport adafruit_pct2075\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npct = adafruit_pct2075.PCT2075(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pct2075/examples/pct2075_simpletest.py",
      "library": "pct2075",
      "type": "example",
      "file_name": "pct2075_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_pct2075\n\nimport adafruit_pct2075\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npct = adafruit_pct2075.PCT2075(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pct2075/examples/pct2075_simpletest.py",
      "library": "pct2075",
      "type": "example",
      "file_name": "pct2075_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_pct2075\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\npct = adafruit_pct2075.PCT2075(i2c)\n\nwhile True:\n    print(\"Temperature: %.2f C\" % pct.temperature)\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pct2075/examples/pct2075_simpletest.py",
      "library": "pct2075",
      "type": "example",
      "file_name": "pct2075_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport supervisor\nimport terminalio\nfrom displayio import Group, Palette, TileGrid\nfrom terminalio import Terminal\nimport adafruit_dang as curses\n\nclass Window:\n\n    def __init__(self, n_rows, n_cols, row=0, col=0):\n        self.n_rows = n_rows\n        self.n_cols = n_cols\n        self.row = row\n        self.col = col\n\n    @property\n    def bottom(self):\n        return self.row + self.n_rows - 1\n\n    def up(self, cursor):\n        if cursor.row == self.row - 1 and self.row > 0:\n            self.row -= 1\n\n    def down(self, buffer, cursor):\n        if cursor.row == self.bottom + 1 and self.bottom < len(buffer) - 1:\n            self.row += 1\n\n    def horizontal_scroll(self, cursor, left_margin=5, right_margin=2):\n        n_pages = cursor.col // (self.n_cols - right_margin)\n        self.col = max(n_pages * self.n_cols - right_margin - left_margin, 0)\n\n    def translate(self, cursor):\n        return (cursor.row - self.row, cursor.col - self.col)\n\n# Usage example:\n\n\nclass Window:\n    def __init__(self, n_rows, n_cols, row=0, col=0):\n        self.n_rows = n_rows",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dang/examples/dang_simpletest.py",
      "library": "dang",
      "type": "example",
      "file_name": "dang_simpletest.py",
      "chunk_type": "function",
      "function_name": "Window"
    }
  },
  {
    "content": "import time\nimport supervisor\nimport terminalio\nfrom displayio import Group, Palette, TileGrid\nfrom terminalio import Terminal\nimport adafruit_dang as curses\n\ndef helloworld_main(stdscr, terminal_tilegrid):\n    window = Window(terminal_tilegrid.height, terminal_tilegrid.width)\n    stdscr.erase()\n    img = [None] * window.n_rows\n    user_input = ''\n    user_entered_message = ''\n    last_key_press = ''\n\n    def setline(row, line):\n        if img[row] == line:\n            return\n        img[row] = line\n        line += ' ' * (window.n_cols - len(line) - 1)\n        stdscr.addstr(row, 0, line)\n    while True:\n        header = 'Hello World Adafruit Dang'\n        margin = (window.n_cols - 1 - len(header)) // 2\n        setline(1, f'{' ' * margin}{header}')\n        key_press_message = f'Last key pressed: {last_key_press}'\n        margin = (window.n_cols - 1 - len(key_press_message)) // 2\n        setline(4, f'{' ' * margin}{key_press_message}')\n        last_entered = f'Entered Message: {user_entered_message}'\n        margin = (window.n_cols - 1 - len(last_entered)) // 2\n        setline(6, f'{' ' * margin}{last_entered}')\n        user_input_row = window.n_rows - 2\n        if user_input:\n            setline(user_input_row, user_input)\n        else:\n            setline(user_input_row, ' ' * (window.n_cols - 1))\n        status_message_row = terminal_tilegrid.height - 1\n        status_message = f' Adafruit Dang | Demo | Fruit Jam | {int(time.monotonic())}'\n        status_message += ' ' * (window.n_cols - len(status_message) - 1)\n        line = f'{status_message}'\n        setline(status_message_row, line)\n        k = stdscr.getkey()\n        if k is not None:\n            if len(k) == 1 and ' ' <= k <= '~':\n                user_input += k\n                last_key_press = k\n            elif k == '\\n':\n                user_entered_message = user_input\n                user_input = ''\n            elif k in {'KEY_BACKSPACE', '\\x7f', '\\x08'}:\n                user_input = user_input[:-1]\n\n# Usage example:\n\ndef run_helloworld_main(terminal, terminal_tilegrid):\n    return curses.custom_terminal_wrapper(terminal, helloworld_main, terminal_tilegrid)\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dang/examples/dang_simpletest.py",
      "library": "dang",
      "type": "example",
      "file_name": "dang_simpletest.py",
      "chunk_type": "function",
      "function_name": "helloworld_main"
    }
  },
  {
    "content": "import time\nimport supervisor\nimport terminalio\nfrom displayio import Group, Palette, TileGrid\nfrom terminalio import Terminal\nimport adafruit_dang as curses\n\ndef run_helloworld_main(terminal, terminal_tilegrid):\n    return curses.custom_terminal_wrapper(terminal, helloworld_main, terminal_tilegrid)\n\n# Usage example:\ndisplay.root_group = main_group\n\nrun_helloworld_main(terminal, terminal_area)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/dang/examples/dang_simpletest.py",
      "library": "dang",
      "type": "example",
      "file_name": "dang_simpletest.py",
      "chunk_type": "function",
      "function_name": "run_helloworld_main"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ens160\n\nimport board\nimport adafruit_ens160\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nens = adafruit_ens160.ENS160(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ens160/examples/ens160_advancedtest.py",
      "library": "ens160",
      "type": "example",
      "file_name": "ens160_advancedtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ens160\n\nimport adafruit_ens160\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nens = adafruit_ens160.ENS160(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ens160/examples/ens160_advancedtest.py",
      "library": "ens160",
      "type": "example",
      "file_name": "ens160_advancedtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_ens160\n\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nens = adafruit_ens160.ENS160(i2c)\nens.mode = adafruit_ens160.MODE_STANDARD\ncurr_mode = ens.mode\nprint(\"Current mode: \", end=\"\")\nif curr_mode == adafruit_ens160.MODE_SLEEP:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ens160/examples/ens160_advancedtest.py",
      "library": "ens160",
      "type": "example",
      "file_name": "ens160_advancedtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import _bleio\nimport adafruit_ble\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom rainbowio import colorwheel\nfrom adafruit_ble_magic_light import MagicLightService\n\ndef find_connection():\n    for connection in radio.connections:\n        if MagicLightService not in connection:\n            continue\n        return (connection, connection[MagicLightService])\n    return (None, None)\n\n# Usage example:\nradio = adafruit_ble.BLERadio()\n\nactive_connection, pixels = find_connection()\ncurrent_notification = None\napp_icon_file = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_magic_light/examples/ble_magic_light_simpletest.py",
      "library": "ble_magic_light",
      "type": "example",
      "file_name": "ble_magic_light_simpletest.py",
      "chunk_type": "function",
      "function_name": "find_connection"
    }
  },
  {
    "content": "import _bleio\nimport adafruit_ble\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom rainbowio import colorwheel\nfrom adafruit_ble_magic_light import MagicLightService\n\n# Start advertising before messing with the display so that we can connect immediately.\nradio = adafruit_ble.BLERadio()\nactive_connection, pixels = find_connection()\ncurrent_notification = None\napp_icon_file = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_magic_light/examples/ble_magic_light_simpletest.py",
      "library": "ble_magic_light",
      "type": "example",
      "file_name": "ble_magic_light_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_bitbangio as bitbangio\n\nimport digitalio\nimport adafruit_bitbangio as bitbangio\n# Change these to the actual connections\nSCLK_PIN = board.D6\nMOSI_PIN = board.D17\nMISO_PIN = board.D18\nCS_PIN = board.D5",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/bitbangio/examples/bitbangio_simpletest.py",
      "library": "bitbangio",
      "type": "example",
      "file_name": "bitbangio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_bitbangio as bitbangio\n\nimport adafruit_bitbangio as bitbangio\n# Change these to the actual connections\nSCLK_PIN = board.D6\nMOSI_PIN = board.D17\nMISO_PIN = board.D18\nCS_PIN = board.D5\ncs = digitalio.DigitalInOut(CS_PIN)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/bitbangio/examples/bitbangio_simpletest.py",
      "library": "bitbangio",
      "type": "example",
      "file_name": "bitbangio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_bitbangio as bitbangio\n\nimport adafruit_bitbangio as bitbangio\n# Change these to the actual connections\nSCLK_PIN = board.D6\nMOSI_PIN = board.D17\nMISO_PIN = board.D18\nCS_PIN = board.D5\ncs = digitalio.DigitalInOut(CS_PIN)\ncs.switch_to_output(value=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/bitbangio/examples/bitbangio_simpletest.py",
      "library": "bitbangio",
      "type": "example",
      "file_name": "bitbangio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_bitbangio as bitbangio\n\n# Change these to the actual connections\nSCLK_PIN = board.D6\nMOSI_PIN = board.D17\nMISO_PIN = board.D18\nCS_PIN = board.D5\ncs = digitalio.DigitalInOut(CS_PIN)\ncs.switch_to_output(value=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/bitbangio/examples/bitbangio_simpletest.py",
      "library": "bitbangio",
      "type": "example",
      "file_name": "bitbangio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_bitbangio as bitbangio\n\nSCLK_PIN = board.D6\nMOSI_PIN = board.D17\nMISO_PIN = board.D18\nCS_PIN = board.D5\ncs = digitalio.DigitalInOut(CS_PIN)\ncs.switch_to_output(value=True)\nspi = bitbangio.SPI(SCLK_PIN, MOSI=MOSI_PIN, MISO=MISO_PIN)\ncs.value = 0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/bitbangio/examples/bitbangio_simpletest.py",
      "library": "bitbangio",
      "type": "example",
      "file_name": "bitbangio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nThis example is for demonstrating how to retrieving the\nboard ID from a BME280, which is stored in register 0xD0.\nIt should return a result of [96]\n\"\"\"\n\nimport board\nimport digitalio\n\nimport adafruit_bitbangio as bitbangio\n\n# Change these to the actual connections\nSCLK_PIN = board.D6\nMOSI_PIN = board.D17\nMISO_PIN = board.D18\nCS_PIN = board.D5\n\ncs = digitalio.DigitalInOut(CS_PIN)\ncs.switch_to_output(value=True)\n\nspi = bitbangio.SPI(SCLK_PIN, MOSI=MOSI_PIN, MISO=MISO_PIN)\ncs.value = 0\nwhile not spi.try_lock():\n    pass\nspi.write([0xD0])\ndata = [0x00]\nspi.readinto(data)\nspi.unlock()\ncs.value = 1\nprint(f\"Result is {data}\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/bitbangio/examples/bitbangio_simpletest.py",
      "library": "bitbangio",
      "type": "example",
      "file_name": "bitbangio_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)\ndisplay = ST7789(display_bus, width=240, height=240, rowstart=80, bgr=True, invert=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7789 import ST7789\n\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)\ndisplay = ST7789(display_bus, width=240, height=240, rowstart=80, bgr=True, invert=True)\n# Make the display context",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7789/examples/st7789_simpletest.py",
      "library": "st7789",
      "type": "example",
      "file_name": "st7789_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_ina219 import INA219, ADCResolution, BusVoltageRange\n\nimport board\ni2c_bus = board.I2C()  # uses board.SCL and board.SDA\n# i2c_bus = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nina219 = INA219(i2c_bus)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ina219/examples/ina219_simpletest.py",
      "library": "ina219",
      "type": "example",
      "file_name": "ina219_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_debouncer import Debouncer\n\nimport board\nimport digitalio\npin = digitalio.DigitalInOut(board.D12)\npin.direction = digitalio.Direction.INPUT\npin.pull = digitalio.Pull.UP\nswitch = Debouncer(pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debouncer/examples/debouncer_simpletest.py",
      "library": "debouncer",
      "type": "example",
      "file_name": "debouncer_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_debouncer import Debouncer\n\nimport digitalio\npin = digitalio.DigitalInOut(board.D12)\npin.direction = digitalio.Direction.INPUT\npin.pull = digitalio.Pull.UP\nswitch = Debouncer(pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debouncer/examples/debouncer_simpletest.py",
      "library": "debouncer",
      "type": "example",
      "file_name": "debouncer_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom adafruit_debouncer import Debouncer\n\npin = digitalio.DigitalInOut(board.D12)\npin.direction = digitalio.Direction.INPUT\npin.pull = digitalio.Pull.UP\nswitch = Debouncer(pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debouncer/examples/debouncer_simpletest.py",
      "library": "debouncer",
      "type": "example",
      "file_name": "debouncer_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2019 Dave Astels for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport digitalio\n\nfrom adafruit_debouncer import Debouncer\n\npin = digitalio.DigitalInOut(board.D12)\npin.direction = digitalio.Direction.INPUT\npin.pull = digitalio.Pull.UP\nswitch = Debouncer(pin)\n\nwhile True:\n    switch.update()\n    if switch.fell:\n        print(\"Just pressed\")\n    if switch.rose:\n        print(\"Just released\")\n    if switch.value:\n        print(\"not pressed\")\n    else:\n        print(\"pressed\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debouncer/examples/debouncer_simpletest.py",
      "library": "debouncer",
      "type": "example",
      "file_name": "debouncer_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_mcp3xxx.mcp3002 as MCP\nfrom adafruit_mcp3xxx.analog_in import AnalogIn\n\nimport adafruit_mcp3xxx.mcp3002 as MCP\n# create the spi bus\nspi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)\n# create the cs (chip select)\ncs = digitalio.DigitalInOut(board.D5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp3xxx/examples/mcp3xxx_mcp3002_single_ended_simpletest.py",
      "library": "mcp3xxx",
      "type": "example",
      "file_name": "mcp3xxx_mcp3002_single_ended_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_mcp3xxx.mcp3002 as MCP\nfrom adafruit_mcp3xxx.analog_in import AnalogIn\n\n# create the spi bus\nspi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)\n# create the cs (chip select)\ncs = digitalio.DigitalInOut(board.D5)\n# create the mcp object\nmcp = MCP.MCP3002(spi, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp3xxx/examples/mcp3xxx_mcp3002_single_ended_simpletest.py",
      "library": "mcp3xxx",
      "type": "example",
      "file_name": "mcp3xxx_mcp3002_single_ended_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport busio\nimport digitalio\n\nimport adafruit_mcp3xxx.mcp3002 as MCP\nfrom adafruit_mcp3xxx.analog_in import AnalogIn\n\n# create the spi bus\nspi = busio.SPI(clock=board.SCK, MISO=board.MISO, MOSI=board.MOSI)\n\n# create the cs (chip select)\ncs = digitalio.DigitalInOut(board.D5)\n\n# create the mcp object\nmcp = MCP.MCP3002(spi, cs)\n\n# create an analog input channel on pin 0\nchan = AnalogIn(mcp, MCP.P0)\n\nprint(\"Raw ADC Value: \", chan.value)\nprint(\"ADC Voltage: \" + str(chan.voltage) + \"V\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp3xxx/examples/mcp3xxx_mcp3002_single_ended_simpletest.py",
      "library": "mcp3xxx",
      "type": "example",
      "file_name": "mcp3xxx_mcp3002_single_ended_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import struct\nimport time\nfrom os import getenv\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nimport adafruit_esp32spi.adafruit_esp32spi_socketpool as socketpool\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n    spi = board.SPI()\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\n# PyPortal or similar; edit pins as needed\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_udp_client.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_udp_client.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport time\nfrom os import getenv\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nimport adafruit_esp32spi.adafruit_esp32spi_socketpool as socketpool\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n    spi = board.SPI()\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\n# PyPortal or similar; edit pins as needed\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\n# connect to wifi AP",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_udp_client.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_udp_client.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport time\nfrom os import getenv\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nimport adafruit_esp32spi.adafruit_esp32spi_socketpool as socketpool\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\n# PyPortal or similar; edit pins as needed\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\n# connect to wifi AP",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_udp_client.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_udp_client.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import struct\nimport time\nfrom os import getenv\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nimport adafruit_esp32spi.adafruit_esp32spi_socketpool as socketpool\nfrom adafruit_esp32spi import adafruit_esp32spi\n\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\n# PyPortal or similar; edit pins as needed\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\n# connect to wifi AP",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_udp_client.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_udp_client.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_lis3dh\nimport board\nimport busio\nimport digitalio\nimport neopixel\nfrom adafruit_bluefruit_connect.color_packet import ColorPacket\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_ble.services.nordic import UARTService\n\n# Scale an value from  (acceleration range) to 0-255 (RGB range)\ndef scale(value):\n    \"\"\"Scale an value from  (acceleration range) to 0-255 (RGB range)\"\"\"\n    value = abs(value)\n    value = max(min(19.6, value), 0)\n    return int(value / 19.6 * 255)\n\n# Usage example:\n\n    while uart_connection and uart_connection.connected:\n        r, g, b = map(scale, accelerometer.acceleration)\n\n        color = (r, g, b)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_demo_central.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_demo_central.py",
      "chunk_type": "function",
      "function_name": "scale"
    }
  },
  {
    "content": "import time\nimport adafruit_lis3dh\nimport board\nimport busio\nimport digitalio\nimport neopixel\nfrom adafruit_bluefruit_connect.color_packet import ColorPacket\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_ble.services.nordic import UARTService\n\n    value = abs(value)\n    value = max(min(19.6, value), 0)\ni2c = busio.I2C(board.ACCELEROMETER_SCL, board.ACCELEROMETER_SDA)\nint1 = digitalio.DigitalInOut(board.ACCELEROMETER_INTERRUPT)\naccelerometer = adafruit_lis3dh.LIS3DH_I2C(i2c, address=0x19, int1=int1)\naccelerometer.range = adafruit_lis3dh.RANGE_8_G",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_demo_central.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_demo_central.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_lis3dh\nimport board\nimport busio\nimport digitalio\nimport neopixel\nfrom adafruit_bluefruit_connect.color_packet import ColorPacket\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_ble.services.nordic import UARTService\n\n    value = max(min(19.6, value), 0)\ni2c = busio.I2C(board.ACCELEROMETER_SCL, board.ACCELEROMETER_SDA)\nint1 = digitalio.DigitalInOut(board.ACCELEROMETER_INTERRUPT)\naccelerometer = adafruit_lis3dh.LIS3DH_I2C(i2c, address=0x19, int1=int1)\naccelerometer.range = adafruit_lis3dh.RANGE_8_G\nneopixels = neopixel.NeoPixel(board.NEOPIXEL, 10, brightness=0.1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_demo_central.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_demo_central.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_lis3dh\nimport board\nimport busio\nimport digitalio\nimport neopixel\nfrom adafruit_bluefruit_connect.color_packet import ColorPacket\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_ble.services.nordic import UARTService\n\naccelerometer = adafruit_lis3dh.LIS3DH_I2C(i2c, address=25, int1=int1)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_demo_central.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_demo_central.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_lis3dh\nimport board\nimport busio\nimport digitalio\nimport neopixel\nfrom adafruit_bluefruit_connect.color_packet import ColorPacket\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_ble.services.nordic import UARTService\n\ni2c = busio.I2C(board.ACCELEROMETER_SCL, board.ACCELEROMETER_SDA)\nint1 = digitalio.DigitalInOut(board.ACCELEROMETER_INTERRUPT)\naccelerometer = adafruit_lis3dh.LIS3DH_I2C(i2c, address=0x19, int1=int1)\naccelerometer.range = adafruit_lis3dh.RANGE_8_G\nneopixels = neopixel.NeoPixel(board.NEOPIXEL, 10, brightness=0.1)\nble = BLERadio()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_demo_central.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_demo_central.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_lis3dh\nimport board\nimport busio\nimport digitalio\nimport neopixel\nfrom adafruit_bluefruit_connect.color_packet import ColorPacket\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.standard import ProvideServicesAdvertisement\nfrom adafruit_ble.services.nordic import UARTService\n\ni2c = busio.I2C(board.ACCELEROMETER_SCL, board.ACCELEROMETER_SDA)\nint1 = digitalio.DigitalInOut(board.ACCELEROMETER_INTERRUPT)\naccelerometer = adafruit_lis3dh.LIS3DH_I2C(i2c, address=0x19, int1=int1)\naccelerometer.range = adafruit_lis3dh.RANGE_8_G\nneopixels = neopixel.NeoPixel(board.NEOPIXEL, 10, brightness=0.1)\nble = BLERadio()\nuart_connection = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble/examples/ble_demo_central.py",
      "library": "ble",
      "type": "example",
      "file_name": "ble_demo_central.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_sgp30\n\nimport board\nimport busio\nimport adafruit_sgp30\ni2c = busio.I2C(board.SCL, board.SDA, frequency=100000)\n# Create library object on our I2C port\nsgp30 = adafruit_sgp30.Adafruit_SGP30(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sgp30/examples/sgp30_simpletest.py",
      "library": "sgp30",
      "type": "example",
      "file_name": "sgp30_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_sgp30\n\nimport adafruit_sgp30\ni2c = busio.I2C(board.SCL, board.SDA, frequency=100000)\n# Create library object on our I2C port\nsgp30 = adafruit_sgp30.Adafruit_SGP30(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sgp30/examples/sgp30_simpletest.py",
      "library": "sgp30",
      "type": "example",
      "file_name": "sgp30_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"Example for using the SGP30 with CircuitPython and the Adafruit library\"\"\"\n\nimport time\n\nimport board\nimport busio\n\nimport adafruit_sgp30\n\ni2c = busio.I2C(board.SCL, board.SDA, frequency=100000)\n\n# Create library object on our I2C port\nsgp30 = adafruit_sgp30.Adafruit_SGP30(i2c)\n\nprint(\"SGP30 serial #\", [hex(i) for i in sgp30.serial])\n\nsgp30.set_iaq_baseline(0x8973, 0x8AAE)\nsgp30.set_iaq_relative_humidity(celsius=22.1, relative_humidity=44)\n\nelapsed_sec = 0\n\nwhile True:\n    print(f\"eCO2 = {sgp30.eCO2} ppm \\t TVOC = {sgp30.TVOC} ppb\")\n    time.sleep(1)\n    elapsed_sec += 1\n    if elapsed_sec > 10:\n        elapsed_sec = 0\n        print(\n            f\"**** Baseline values: eCO2 = 0x{sgp30.baseline_eCO2:x}, TVOC = 0x{sgp30.baseline_TVOC:x}\"  # noqa: E501\n        )\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/sgp30/examples/sgp30_simpletest.py",
      "library": "sgp30",
      "type": "example",
      "file_name": "sgp30_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nimport wifi\nimport adafruit_requests\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# API Polling Rate",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_youtube.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_youtube.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nimport adafruit_requests\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# API Polling Rate\n# 900 = 15 mins, 1800 = 30 mins, 3600 = 1 hour",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_youtube.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_youtube.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nimport adafruit_requests\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\n# API Polling Rate\n# 900 = 15 mins, 1800 = 30 mins, 3600 = 1 hour\nSLEEP_TIME = 900",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_youtube.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_youtube.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Converts seconds to minutes/hours/days\ndef time_calc(input_time):\n    \"\"\"Converts seconds to minutes/hours/days\"\"\"\n    if input_time < 60:\n        return f'{input_time:.0f} seconds'\n    if input_time < 3600:\n        return f'{input_time / 60:.0f} minutes'\n    if input_time < 86400:\n        return f'{input_time / 60 / 60:.0f} hours'\n    return f'{input_time / 60 / 60 / 24:.1f} days'\n\n# Usage example:\n\n        print(\"\\nFinished!\")\n        print(f\"Board Uptime: {time_calc(time.monotonic())}\")\n        print(f\"Next Update: {time_calc(SLEEP_TIME)}\")\n        print(\"===============================\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_youtube.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_youtube.py",
      "chunk_type": "function",
      "function_name": "time_calc"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\nimport adafruit_ssd1680\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.CE0\nepd_dc = board.D22\nepd_reset = board.D27  # Set to None for FeatherWing\nepd_busy = board.D17  # Set to None for FeatherWing",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.13_mono_eink_bonnet.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.13_mono_eink_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.CE0\nepd_dc = board.D22\nepd_reset = board.D27  # Set to None for FeatherWing\nepd_busy = board.D17  # Set to None for FeatherWing",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.13_mono_eink_bonnet.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.13_mono_eink_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.CE0\nepd_dc = board.D22\nepd_reset = board.D27  # Set to None for FeatherWing\nepd_busy = board.D17  # Set to None for FeatherWing\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.13_mono_eink_bonnet.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.13_mono_eink_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.CE0\nepd_dc = board.D22\nepd_reset = board.D27  # Set to None for FeatherWing\nepd_busy = board.D17  # Set to None for FeatherWing\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.13_mono_eink_bonnet.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.13_mono_eink_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\n# This pinout works on a Metro M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.CE0\nepd_dc = board.D22\nepd_reset = board.D27  # Set to None for FeatherWing\nepd_busy = board.D17  # Set to None for FeatherWing\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.13_mono_eink_bonnet.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.13_mono_eink_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1680\n\ndisplay = adafruit_ssd1680.SSD1680(display_bus, width=250, height=122, busy_pin=epd_busy, highlight_color=16711680, rotation=90, colstart=-8)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1680/examples/ssd1680_2.13_mono_eink_bonnet.py",
      "library": "ssd1680",
      "type": "example",
      "file_name": "ssd1680_2.13_mono_eink_bonnet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_clue import clue\n\nimport displayio\ndisplay = board.DISPLAY\nclue_group = displayio.Group()\nouter_circle = Circle(120, 120, 119, outline=clue.WHITE)\nmiddle_circle = Circle(120, 120, 75, outline=clue.YELLOW)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/clue/examples/clue_spirit_level.py",
      "library": "clue",
      "type": "example",
      "file_name": "clue_spirit_level.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2019 Kattni Rembor, written for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\"\"\"CLUE Spirit Level Demo\"\"\"\n\nimport board\nimport displayio\nfrom adafruit_display_shapes.circle import Circle\n\nfrom adafruit_clue import clue\n\ndisplay = board.DISPLAY\nclue_group = displayio.Group()\n\nouter_circle = Circle(120, 120, 119, outline=clue.WHITE)\nmiddle_circle = Circle(120, 120, 75, outline=clue.YELLOW)\ninner_circle = Circle(120, 120, 35, outline=clue.GREEN)\nclue_group.append(outer_circle)\nclue_group.append(middle_circle)\nclue_group.append(inner_circle)\n\nx, y, _ = clue.acceleration\nbubble_group = displayio.Group()\nlevel_bubble = Circle(int(x + 120), int(y + 120), 20, fill=clue.RED, outline=clue.RED)\nbubble_group.append(level_bubble)\n\nclue_group.append(bubble_group)\ndisplay.root_group = clue_group\n\nwhile True:\n    x, y, _ = clue.acceleration\n    bubble_group.x = int(x * -10)\n    bubble_group.y = int(y * -10)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/clue/examples/clue_spirit_level.py",
      "library": "clue",
      "type": "example",
      "file_name": "clue_spirit_level.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\nimport adafruit_requests\ncs = DigitalInOut(board.D10)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialize ethernet interface with DHCP\nradio = WIZNET5K(spi_bus, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wiznet5k/requests_wiznet5k_advanced.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wiznet5k_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\nimport adafruit_requests\ncs = DigitalInOut(board.D10)\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialize ethernet interface with DHCP\nradio = WIZNET5K(spi_bus, cs)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wiznet5k/requests_wiznet5k_advanced.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wiznet5k_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\n# Initialize ethernet interface with DHCP\nradio = WIZNET5K(spi_bus, cs)\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nJSON_GET_URL = \"http://httpbin.org/get\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wiznet5k/requests_wiznet5k_advanced.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wiznet5k_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\n# Initialize ethernet interface with DHCP\nradio = WIZNET5K(spi_bus, cs)\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nJSON_GET_URL = \"http://httpbin.org/get\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wiznet5k/requests_wiznet5k_advanced.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wiznet5k_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_wiznet5k.adafruit_wiznet5k import WIZNET5K\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\nradio = WIZNET5K(spi_bus, cs)\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nJSON_GET_URL = \"http://httpbin.org/get\"\n# Define a custom header as a dict.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wiznet5k/requests_wiznet5k_advanced.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wiznet5k_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_seesaw import digitalio, rotaryio, seesaw\n\n# For use with the STEMMA connector on QT Py RP2040\n# import busio\n# i2c = busio.I2C(board.SCL1, board.SDA1)\n# seesaw = seesaw.Seesaw(i2c, 0x49)\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nseesaw = seesaw.Seesaw(i2c, addr=0x49)\nseesaw_product = (seesaw.get_version() >> 16) & 0xFFFF",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_ano_rotary_simpletest.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_ano_rotary_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_seesaw import digitalio, rotaryio, seesaw\n\nselect = digitalio.DigitalIO(seesaw, 1)\nselect_held = False\nup = digitalio.DigitalIO(seesaw, 2)\nup_held = False\nleft = digitalio.DigitalIO(seesaw, 3)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_ano_rotary_simpletest.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_ano_rotary_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_seesaw import digitalio, rotaryio, seesaw\n\nselect = digitalio.DigitalIO(seesaw, 1)\nselect_held = False\nup = digitalio.DigitalIO(seesaw, 2)\nup_held = False\nleft = digitalio.DigitalIO(seesaw, 3)\nleft_held = False\ndown = digitalio.DigitalIO(seesaw, 4)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_ano_rotary_simpletest.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_ano_rotary_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_seesaw import digitalio, rotaryio, seesaw\n\nselect = digitalio.DigitalIO(seesaw, 1)\nselect_held = False\nup = digitalio.DigitalIO(seesaw, 2)\nup_held = False\nleft = digitalio.DigitalIO(seesaw, 3)\nleft_held = False\ndown = digitalio.DigitalIO(seesaw, 4)\ndown_held = False\nright = digitalio.DigitalIO(seesaw, 5)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_ano_rotary_simpletest.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_ano_rotary_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_seesaw import digitalio, rotaryio, seesaw\n\nselect_held = False\nup = digitalio.DigitalIO(seesaw, 2)\nup_held = False\nleft = digitalio.DigitalIO(seesaw, 3)\nleft_held = False\ndown = digitalio.DigitalIO(seesaw, 4)\ndown_held = False\nright = digitalio.DigitalIO(seesaw, 5)\nright_held = False",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_ano_rotary_simpletest.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_ano_rotary_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_seesaw import digitalio, rotaryio, seesaw\n\nup_held = False\nleft = digitalio.DigitalIO(seesaw, 3)\nleft_held = False\ndown = digitalio.DigitalIO(seesaw, 4)\ndown_held = False\nright = digitalio.DigitalIO(seesaw, 5)\nright_held = False\nencoder = rotaryio.IncrementalEncoder(seesaw)\nlast_position = None",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_ano_rotary_simpletest.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_ano_rotary_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_pm25.i2c import PM25_I2C\n\n# Connect to a PM2.5 sensor over UART\n# from adafruit_pm25.uart import PM25_UART\n# pm25 = PM25_UART(uart, reset_pin)\n# Create library object, use 'slow' 100KHz frequency!\ni2c = busio.I2C(board.SCL, board.SDA, frequency=100000)\n# Connect to a PM2.5 sensor over I2C\npm25 = PM25_I2C(i2c, reset_pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pm25/examples/pm25_simpletest.py",
      "library": "pm25",
      "type": "example",
      "file_name": "pm25_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom rainbowio import colorwheel\nimport adafruit_pixie\n\nimport adafruit_pixie\n# For use with CircuitPython:\nuart = busio.UART(board.TX, rx=None, baudrate=115200)\n# For use on Raspberry Pi/Linux with Adafruit_Blinka:\n# import serial\n# uart = serial.Serial(\"/dev/ttyS0\", baudrate=115200, timeout=3000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pixie/examples/pixie_simpletest.py",
      "library": "pixie",
      "type": "example",
      "file_name": "pixie_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom rainbowio import colorwheel\nimport adafruit_pixie\n\n# For use on Raspberry Pi/Linux with Adafruit_Blinka:\n# import serial\n# uart = serial.Serial(\"/dev/ttyS0\", baudrate=115200, timeout=3000)\nnum_pixies = 2  # Change this to the number of Pixie LEDs you have.\npixies = adafruit_pixie.Pixie(uart, num_pixies, brightness=0.2, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pixie/examples/pixie_simpletest.py",
      "library": "pixie",
      "type": "example",
      "file_name": "pixie_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_guvx_i2c\n\nimport board\nimport adafruit_guvx_i2c\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_guvx_i2c.GUVB_C31SM(i2c)\n# You can select four different power modes: GUVXI2C_PMODE_NORMAL,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/guvx-i2c/examples/guvb_c31sm_fulltest.py",
      "library": "guvx-i2c",
      "type": "example",
      "file_name": "guvb_c31sm_fulltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_guvx_i2c\n\nimport adafruit_guvx_i2c\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = adafruit_guvx_i2c.GUVB_C31SM(i2c)\n# You can select four different power modes: GUVXI2C_PMODE_NORMAL,\n# GUVXI2C_PMODE_LOWPOWER, GUVXI2C_PMODE_AUTOSHUT, or UVXI2C_PMODE_SHUTDOWN\n# NORMAL is recommended to start!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/guvx-i2c/examples/guvb_c31sm_fulltest.py",
      "library": "guvx-i2c",
      "type": "example",
      "file_name": "guvb_c31sm_fulltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_guvx_i2c\n\nsensor = adafruit_guvx_i2c.GUVB_C31SM(i2c)\n# You can select four different power modes: GUVXI2C_PMODE_NORMAL,\n# GUVXI2C_PMODE_LOWPOWER, GUVXI2C_PMODE_AUTOSHUT, or UVXI2C_PMODE_SHUTDOWN\n# NORMAL is recommended to start!\nsensor.power_mode = adafruit_guvx_i2c.GUVXI2C_PMODE_NORMAL\npowermodes = (\"Normal\", \"Low power\", \"Auto shutdown\", \"Shutdown\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/guvx-i2c/examples/guvb_c31sm_fulltest.py",
      "library": "guvx-i2c",
      "type": "example",
      "file_name": "guvb_c31sm_fulltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_vl6180x\n\nimport busio\nimport adafruit_vl6180x\n# Create I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create sensor instance.\nsensor = adafruit_vl6180x.VL6180X(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl6180x/examples/vl6180x_historytest.py",
      "library": "vl6180x",
      "type": "example",
      "file_name": "vl6180x_historytest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_vl6180x\n\n# Create I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create sensor instance.\nsensor = adafruit_vl6180x.VL6180X(i2c)\n# Starting continuous mode",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl6180x/examples/vl6180x_historytest.py",
      "library": "vl6180x",
      "type": "example",
      "file_name": "vl6180x_historytest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2022 Jonas Schatz\n# SPDX-License-Identifier: MIT\n\n# Demo of reading the range from the history buffer of the VL6180x\n# distance sensor\n\nimport time\n\nimport board\nimport busio\n\nimport adafruit_vl6180x\n\n# Create I2C bus.\ni2c = busio.I2C(board.SCL, board.SDA)\n\n# Create sensor instance.\nsensor = adafruit_vl6180x.VL6180X(i2c)\n\n# Starting continuous mode\nprint(\"Starting continuous mode\")\nsensor.start_range_continuous()\n\n# Main loop prints the ranges every 0.01 seconds for about 5 seconds\n# You should see changes 'ripple through' the history array\nfor _ in range(500):\n    # Read the last 16 ranges from the history buffer as a List[int]\n    ranges_mm = sensor.ranges_from_history\n    print(ranges_mm)\n\n    # Delay for 10 ms so that the loop is not too fast\n    time.sleep(0.01)\n\n# Stop continuous mode. This is advised as the sensor\n# wouldn't stop measuring after the program has ended\nsensor.stop_range_continuous()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vl6180x/examples/vl6180x_historytest.py",
      "library": "vl6180x",
      "type": "example",
      "file_name": "vl6180x_historytest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport adafruit_bno08x\nfrom adafruit_bno08x.uart import BNO08X_UART\n\nimport busio\nimport adafruit_bno08x\nuart = busio.UART(board.TX, board.RX, baudrate=3000000, receiver_buffer_size=2048)\n# uncomment and comment out the above for use with Raspberry Pi\n# import serial\n# uart = serial.Serial(\"/dev/serial0\", 3000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno08x/examples/bno08x_simpletest_uart.py",
      "library": "bno08x",
      "type": "example",
      "file_name": "bno08x_simpletest_uart.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_ssd1331 import SSD1331\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1331/examples/ssd1331_simpletest.py",
      "library": "ssd1331",
      "type": "example",
      "file_name": "ssd1331_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_ssd1331 import SSD1331\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1331/examples/ssd1331_simpletest.py",
      "library": "ssd1331",
      "type": "example",
      "file_name": "ssd1331_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_ssd1331 import SSD1331\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)\ndisplay = SSD1331(display_bus, width=96, height=64)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1331/examples/ssd1331_simpletest.py",
      "library": "ssd1331",
      "type": "example",
      "file_name": "ssd1331_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_ssd1331 import SSD1331\n\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)\ndisplay = SSD1331(display_bus, width=96, height=64)\n# Make the display context",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1331/examples/ssd1331_simpletest.py",
      "library": "ssd1331",
      "type": "example",
      "file_name": "ssd1331_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_apds9960.apds9960\nimport adafruit_bmp280\nimport adafruit_lsm6ds.lsm6ds33\nimport adafruit_sht31d\nimport audiobusio\nimport board\nimport digitalio\nimport neopixel_write\nfrom adafruit_ble import BLERadio\nfrom ulab import numpy as np\nfrom adafruit_ble_adafruit.accelerometer_service import AccelerometerService\nfrom adafruit_ble_adafruit.adafruit_service import AdafruitServerAdvertisement\nfrom adafruit_ble_adafruit.addressable_pixel_service import AddressablePixelService\nfrom adafruit_ble_adafruit.barometric_pressure_service import BarometricPressureService\nfrom adafruit_ble_adafruit.button_service import ButtonService\nfrom adafruit_ble_adafruit.humidity_service import HumidityService\nfrom adafruit_ble_adafruit.light_sensor_service import LightSensorService\nfrom adafruit_ble_adafruit.microphone_service import MicrophoneService\nfrom adafruit_ble_adafruit.temperature_service import TemperatureService\n\n# Accelerometer\nlsm6ds33 = adafruit_lsm6ds.lsm6ds33.LSM6DS33(board.I2C())\n# Used for pressure and temperature.\nbmp280 = adafruit_bmp280.Adafruit_BMP280_I2C(board.I2C())\n# Humidity.\nsht31d = adafruit_sht31d.SHT31D(board.I2C())",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_adafruit/examples/ble_adafruit_feather_bluefruit_sense.py",
      "library": "ble_adafruit",
      "type": "example",
      "file_name": "ble_adafruit_feather_bluefruit_sense.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_apds9960.apds9960\nimport adafruit_bmp280\nimport adafruit_lsm6ds.lsm6ds33\nimport adafruit_sht31d\nimport audiobusio\nimport board\nimport digitalio\nimport neopixel_write\nfrom adafruit_ble import BLERadio\nfrom ulab import numpy as np\nfrom adafruit_ble_adafruit.accelerometer_service import AccelerometerService\nfrom adafruit_ble_adafruit.adafruit_service import AdafruitServerAdvertisement\nfrom adafruit_ble_adafruit.addressable_pixel_service import AddressablePixelService\nfrom adafruit_ble_adafruit.barometric_pressure_service import BarometricPressureService\nfrom adafruit_ble_adafruit.button_service import ButtonService\nfrom adafruit_ble_adafruit.humidity_service import HumidityService\nfrom adafruit_ble_adafruit.light_sensor_service import LightSensorService\nfrom adafruit_ble_adafruit.microphone_service import MicrophoneService\nfrom adafruit_ble_adafruit.temperature_service import TemperatureService\n\n# Accelerometer\nlsm6ds33 = adafruit_lsm6ds.lsm6ds33.LSM6DS33(board.I2C())\n# Used for pressure and temperature.\nbmp280 = adafruit_bmp280.Adafruit_BMP280_I2C(board.I2C())\n# Humidity.\nsht31d = adafruit_sht31d.SHT31D(board.I2C())\n# Used only for light sensor\napds9960 = adafruit_apds9960.apds9960.APDS9960(board.I2C())",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_adafruit/examples/ble_adafruit_feather_bluefruit_sense.py",
      "library": "ble_adafruit",
      "type": "example",
      "file_name": "ble_adafruit_feather_bluefruit_sense.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_apds9960.apds9960\nimport adafruit_bmp280\nimport adafruit_lsm6ds.lsm6ds33\nimport adafruit_sht31d\nimport audiobusio\nimport board\nimport digitalio\nimport neopixel_write\nfrom adafruit_ble import BLERadio\nfrom ulab import numpy as np\nfrom adafruit_ble_adafruit.accelerometer_service import AccelerometerService\nfrom adafruit_ble_adafruit.adafruit_service import AdafruitServerAdvertisement\nfrom adafruit_ble_adafruit.addressable_pixel_service import AddressablePixelService\nfrom adafruit_ble_adafruit.barometric_pressure_service import BarometricPressureService\nfrom adafruit_ble_adafruit.button_service import ButtonService\nfrom adafruit_ble_adafruit.humidity_service import HumidityService\nfrom adafruit_ble_adafruit.light_sensor_service import LightSensorService\nfrom adafruit_ble_adafruit.microphone_service import MicrophoneService\nfrom adafruit_ble_adafruit.temperature_service import TemperatureService\n\n# Accelerometer\nlsm6ds33 = adafruit_lsm6ds.lsm6ds33.LSM6DS33(board.I2C())\n# Used for pressure and temperature.\nbmp280 = adafruit_bmp280.Adafruit_BMP280_I2C(board.I2C())\n# Humidity.\nsht31d = adafruit_sht31d.SHT31D(board.I2C())\n# Used only for light sensor\napds9960 = adafruit_apds9960.apds9960.APDS9960(board.I2C())\napds9960.enable_color = True",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_adafruit/examples/ble_adafruit_feather_bluefruit_sense.py",
      "library": "ble_adafruit",
      "type": "example",
      "file_name": "ble_adafruit_feather_bluefruit_sense.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_apds9960.apds9960\nimport adafruit_bmp280\nimport adafruit_lsm6ds.lsm6ds33\nimport adafruit_sht31d\nimport audiobusio\nimport board\nimport digitalio\nimport neopixel_write\nfrom adafruit_ble import BLERadio\nfrom ulab import numpy as np\nfrom adafruit_ble_adafruit.accelerometer_service import AccelerometerService\nfrom adafruit_ble_adafruit.adafruit_service import AdafruitServerAdvertisement\nfrom adafruit_ble_adafruit.addressable_pixel_service import AddressablePixelService\nfrom adafruit_ble_adafruit.barometric_pressure_service import BarometricPressureService\nfrom adafruit_ble_adafruit.button_service import ButtonService\nfrom adafruit_ble_adafruit.humidity_service import HumidityService\nfrom adafruit_ble_adafruit.light_sensor_service import LightSensorService\nfrom adafruit_ble_adafruit.microphone_service import MicrophoneService\nfrom adafruit_ble_adafruit.temperature_service import TemperatureService\n\n# Used for pressure and temperature.\nbmp280 = adafruit_bmp280.Adafruit_BMP280_I2C(board.I2C())\n# Humidity.\nsht31d = adafruit_sht31d.SHT31D(board.I2C())\n# Used only for light sensor\napds9960 = adafruit_apds9960.apds9960.APDS9960(board.I2C())\napds9960.enable_color = True\nmic = audiobusio.PDMIn(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_adafruit/examples/ble_adafruit_feather_bluefruit_sense.py",
      "library": "ble_adafruit",
      "type": "example",
      "file_name": "ble_adafruit_feather_bluefruit_sense.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_apds9960.apds9960\nimport adafruit_bmp280\nimport adafruit_lsm6ds.lsm6ds33\nimport adafruit_sht31d\nimport audiobusio\nimport board\nimport digitalio\nimport neopixel_write\nfrom adafruit_ble import BLERadio\nfrom ulab import numpy as np\nfrom adafruit_ble_adafruit.accelerometer_service import AccelerometerService\nfrom adafruit_ble_adafruit.adafruit_service import AdafruitServerAdvertisement\nfrom adafruit_ble_adafruit.addressable_pixel_service import AddressablePixelService\nfrom adafruit_ble_adafruit.barometric_pressure_service import BarometricPressureService\nfrom adafruit_ble_adafruit.button_service import ButtonService\nfrom adafruit_ble_adafruit.humidity_service import HumidityService\nfrom adafruit_ble_adafruit.light_sensor_service import LightSensorService\nfrom adafruit_ble_adafruit.microphone_service import MicrophoneService\nfrom adafruit_ble_adafruit.temperature_service import TemperatureService\n\nmic = audiobusio.PDMIn(board.MICROPHONE_CLOCK, board.MICROPHONE_DATA, sample_rate=16000, bit_depth=16)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_adafruit/examples/ble_adafruit_feather_bluefruit_sense.py",
      "library": "ble_adafruit",
      "type": "example",
      "file_name": "ble_adafruit_feather_bluefruit_sense.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_apds9960.apds9960\nimport adafruit_bmp280\nimport adafruit_lsm6ds.lsm6ds33\nimport adafruit_sht31d\nimport audiobusio\nimport board\nimport digitalio\nimport neopixel_write\nfrom adafruit_ble import BLERadio\nfrom ulab import numpy as np\nfrom adafruit_ble_adafruit.accelerometer_service import AccelerometerService\nfrom adafruit_ble_adafruit.adafruit_service import AdafruitServerAdvertisement\nfrom adafruit_ble_adafruit.addressable_pixel_service import AddressablePixelService\nfrom adafruit_ble_adafruit.barometric_pressure_service import BarometricPressureService\nfrom adafruit_ble_adafruit.button_service import ButtonService\nfrom adafruit_ble_adafruit.humidity_service import HumidityService\nfrom adafruit_ble_adafruit.light_sensor_service import LightSensorService\nfrom adafruit_ble_adafruit.microphone_service import MicrophoneService\nfrom adafruit_ble_adafruit.temperature_service import TemperatureService\n\naccel_svc.measurement_period = 100\naccel_last_update = 0\n# Feather Bluefruit Sense has just one board pixel. 3 RGB bytes * 1 pixel\nNEOPIXEL_BUF_LENGTH = 3 * 1\nneopixel_svc = AddressablePixelService()\nneopixel_buf = bytearray(NEOPIXEL_BUF_LENGTH)\nneopixel_out = digitalio.DigitalInOut(board.NEOPIXEL)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_adafruit/examples/ble_adafruit_feather_bluefruit_sense.py",
      "library": "ble_adafruit",
      "type": "example",
      "file_name": "ble_adafruit_feather_bluefruit_sense.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_apds9960.apds9960\nimport adafruit_bmp280\nimport adafruit_lsm6ds.lsm6ds33\nimport adafruit_sht31d\nimport audiobusio\nimport board\nimport digitalio\nimport neopixel_write\nfrom adafruit_ble import BLERadio\nfrom ulab import numpy as np\nfrom adafruit_ble_adafruit.accelerometer_service import AccelerometerService\nfrom adafruit_ble_adafruit.adafruit_service import AdafruitServerAdvertisement\nfrom adafruit_ble_adafruit.addressable_pixel_service import AddressablePixelService\nfrom adafruit_ble_adafruit.barometric_pressure_service import BarometricPressureService\nfrom adafruit_ble_adafruit.button_service import ButtonService\nfrom adafruit_ble_adafruit.humidity_service import HumidityService\nfrom adafruit_ble_adafruit.light_sensor_service import LightSensorService\nfrom adafruit_ble_adafruit.microphone_service import MicrophoneService\nfrom adafruit_ble_adafruit.temperature_service import TemperatureService\n\naccel_last_update = 0\n# Feather Bluefruit Sense has just one board pixel. 3 RGB bytes * 1 pixel\nNEOPIXEL_BUF_LENGTH = 3 * 1\nneopixel_svc = AddressablePixelService()\nneopixel_buf = bytearray(NEOPIXEL_BUF_LENGTH)\nneopixel_out = digitalio.DigitalInOut(board.NEOPIXEL)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_adafruit/examples/ble_adafruit_feather_bluefruit_sense.py",
      "library": "ble_adafruit",
      "type": "example",
      "file_name": "ble_adafruit_feather_bluefruit_sense.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_apds9960.apds9960\nimport adafruit_bmp280\nimport adafruit_lsm6ds.lsm6ds33\nimport adafruit_sht31d\nimport audiobusio\nimport board\nimport digitalio\nimport neopixel_write\nfrom adafruit_ble import BLERadio\nfrom ulab import numpy as np\nfrom adafruit_ble_adafruit.accelerometer_service import AccelerometerService\nfrom adafruit_ble_adafruit.adafruit_service import AdafruitServerAdvertisement\nfrom adafruit_ble_adafruit.addressable_pixel_service import AddressablePixelService\nfrom adafruit_ble_adafruit.barometric_pressure_service import BarometricPressureService\nfrom adafruit_ble_adafruit.button_service import ButtonService\nfrom adafruit_ble_adafruit.humidity_service import HumidityService\nfrom adafruit_ble_adafruit.light_sensor_service import LightSensorService\nfrom adafruit_ble_adafruit.microphone_service import MicrophoneService\nfrom adafruit_ble_adafruit.temperature_service import TemperatureService\n\n# Feather Bluefruit Sense has just one board pixel. 3 RGB bytes * 1 pixel\nNEOPIXEL_BUF_LENGTH = 3 * 1\nneopixel_svc = AddressablePixelService()\nneopixel_buf = bytearray(NEOPIXEL_BUF_LENGTH)\nneopixel_out = digitalio.DigitalInOut(board.NEOPIXEL)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_adafruit/examples/ble_adafruit_feather_bluefruit_sense.py",
      "library": "ble_adafruit",
      "type": "example",
      "file_name": "ble_adafruit_feather_bluefruit_sense.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_apds9960.apds9960\nimport adafruit_bmp280\nimport adafruit_lsm6ds.lsm6ds33\nimport adafruit_sht31d\nimport audiobusio\nimport board\nimport digitalio\nimport neopixel_write\nfrom adafruit_ble import BLERadio\nfrom ulab import numpy as np\nfrom adafruit_ble_adafruit.accelerometer_service import AccelerometerService\nfrom adafruit_ble_adafruit.adafruit_service import AdafruitServerAdvertisement\nfrom adafruit_ble_adafruit.addressable_pixel_service import AddressablePixelService\nfrom adafruit_ble_adafruit.barometric_pressure_service import BarometricPressureService\nfrom adafruit_ble_adafruit.button_service import ButtonService\nfrom adafruit_ble_adafruit.humidity_service import HumidityService\nfrom adafruit_ble_adafruit.light_sensor_service import LightSensorService\nfrom adafruit_ble_adafruit.microphone_service import MicrophoneService\nfrom adafruit_ble_adafruit.temperature_service import TemperatureService\n\nbaro_svc = BarometricPressureService()\nbaro_svc.measurement_period = 100\nbaro_last_update = 0\nbutton_svc = ButtonService()\nbutton = digitalio.DigitalInOut(board.SWITCH)\nbutton.pull = digitalio.Pull.UP",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_adafruit/examples/ble_adafruit_feather_bluefruit_sense.py",
      "library": "ble_adafruit",
      "type": "example",
      "file_name": "ble_adafruit_feather_bluefruit_sense.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport adafruit_apds9960.apds9960\nimport adafruit_bmp280\nimport adafruit_lsm6ds.lsm6ds33\nimport adafruit_sht31d\nimport audiobusio\nimport board\nimport digitalio\nimport neopixel_write\nfrom adafruit_ble import BLERadio\nfrom ulab import numpy as np\nfrom adafruit_ble_adafruit.accelerometer_service import AccelerometerService\nfrom adafruit_ble_adafruit.adafruit_service import AdafruitServerAdvertisement\nfrom adafruit_ble_adafruit.addressable_pixel_service import AddressablePixelService\nfrom adafruit_ble_adafruit.barometric_pressure_service import BarometricPressureService\nfrom adafruit_ble_adafruit.button_service import ButtonService\nfrom adafruit_ble_adafruit.humidity_service import HumidityService\nfrom adafruit_ble_adafruit.light_sensor_service import LightSensorService\nfrom adafruit_ble_adafruit.microphone_service import MicrophoneService\nfrom adafruit_ble_adafruit.temperature_service import TemperatureService\n\nbaro_svc.measurement_period = 100\nbaro_last_update = 0\nbutton_svc = ButtonService()\nbutton = digitalio.DigitalInOut(board.SWITCH)\nbutton.pull = digitalio.Pull.UP",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_adafruit/examples/ble_adafruit_feather_bluefruit_sense.py",
      "library": "ble_adafruit",
      "type": "example",
      "file_name": "ble_adafruit_feather_bluefruit_sense.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mcp9808\n\nimport board\nimport adafruit_mcp9808\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmcp = adafruit_mcp9808.MCP9808(i2c)\n# Change the values according to the desired values",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp9808/examples/mcp9808_temperature_limits.py",
      "library": "mcp9808",
      "type": "example",
      "file_name": "mcp9808_temperature_limits.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mcp9808\n\nimport adafruit_mcp9808\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmcp = adafruit_mcp9808.MCP9808(i2c)\n# Change the values according to the desired values",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp9808/examples/mcp9808_temperature_limits.py",
      "library": "mcp9808",
      "type": "example",
      "file_name": "mcp9808_temperature_limits.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 Jose David M.\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nShow the MCP9808 to setup different temperature values\n\"\"\"\n\nimport time\n\nimport board\n\nimport adafruit_mcp9808\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nmcp = adafruit_mcp9808.MCP9808(i2c)\n\n# Change the values according to the desired values\nprint(\"Setting Temperature Limits\")\nmcp.upper_temperature = 23\nmcp.lower_temperature = 10\nmcp.critical_temperature = 100\n\n# To verify the limits we need to read the temperature value\nprint(mcp.temperature)\ntime.sleep(0.3)  # This is the time temperature conversion at maximum resolution\n\n# Showing temperature Limits\nwhile True:\n    if mcp.below_lower:\n        print(\"too cold!\")\n    if mcp.above_upper:\n        print(\"getting hot!\")\n    if mcp.above_critical:\n        print(\"Above critical temp!\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp9808/examples/mcp9808_temperature_limits.py",
      "library": "mcp9808",
      "type": "example",
      "file_name": "mcp9808_temperature_limits.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import math\nimport os\nimport time\nimport board\nimport busio\nimport numpy as np\nimport pygame\nfrom colour import Color\nfrom scipy.interpolate import griddata\nimport adafruit_amg88xx\n\nimport adafruit_amg88xx\ni2c_bus = busio.I2C(board.SCL, board.SDA)\n# low range of the sensor (this will be blue on the screen)\nMINTEMP = 26.0",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/amg88xx/examples/amg88xx_rpi_thermal_cam.py",
      "library": "amg88xx",
      "type": "example",
      "file_name": "amg88xx_rpi_thermal_cam.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport os\nimport time\nimport board\nimport busio\nimport numpy as np\nimport pygame\nfrom colour import Color\nfrom scipy.interpolate import griddata\nimport adafruit_amg88xx\n\n# initialize the sensor\nsensor = adafruit_amg88xx.AMG88XX(i2c_bus)\npoints = [(math.floor(ix / 8), (ix % 8)) for ix in range(0, 64)]\ngrid_x, grid_y = np.mgrid[0:7:32j, 0:7:32j]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/amg88xx/examples/amg88xx_rpi_thermal_cam.py",
      "library": "amg88xx",
      "type": "example",
      "file_name": "amg88xx_rpi_thermal_cam.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport os\nimport time\nimport board\nimport busio\nimport numpy as np\nimport pygame\nfrom colour import Color\nfrom scipy.interpolate import griddata\nimport adafruit_amg88xx\n\ndef constrain(val, min_val, max_val):\n    return min(max_val, max(min_val, val))\n\n# Usage example:\n            pygame.draw.rect(\n                lcd,\n                colors[constrain(int(pixel), 0, COLORDEPTH - 1)],\n                (\n                    displayPixelHeight * ix,",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/amg88xx/examples/amg88xx_rpi_thermal_cam.py",
      "library": "amg88xx",
      "type": "example",
      "file_name": "amg88xx_rpi_thermal_cam.py",
      "chunk_type": "function",
      "function_name": "constrain"
    }
  },
  {
    "content": "import math\nimport os\nimport time\nimport board\nimport busio\nimport numpy as np\nimport pygame\nfrom colour import Color\nfrom scipy.interpolate import griddata\nimport adafruit_amg88xx\n\ndef map_value(x, in_min, in_max, out_min, out_max):\n    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min\n\n# Usage example:\n    for row in sensor.pixels:\n        pixels = pixels + row\n    pixels = [map_value(p, MINTEMP, MAXTEMP, 0, COLORDEPTH - 1) for p in pixels]\n\n    # perform interpolation",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/amg88xx/examples/amg88xx_rpi_thermal_cam.py",
      "library": "amg88xx",
      "type": "example",
      "file_name": "amg88xx_rpi_thermal_cam.py",
      "chunk_type": "function",
      "function_name": "map_value"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom adafruit_cursorcontrol.cursorcontrol import Cursor\nfrom adafruit_cursorcontrol.cursorcontrol_cursormanager import CursorManager\n\n# Create the display\ndisplay = board.DISPLAY\n# Create the display context\nsplash = displayio.Group()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/cursorcontrol/examples/cursorcontrol_simpletest.py",
      "library": "cursorcontrol",
      "type": "example",
      "file_name": "cursorcontrol_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport displayio\n\nfrom adafruit_cursorcontrol.cursorcontrol import Cursor\nfrom adafruit_cursorcontrol.cursorcontrol_cursormanager import CursorManager\n\n# Create the display\ndisplay = board.DISPLAY\n\n# Create the display context\nsplash = displayio.Group()\n\n# initialize the mouse cursor object\nmouse_cursor = Cursor(display, display_group=splash)\n\n# initialize the cursormanager\ncursor = CursorManager(mouse_cursor)\n\n# show displayio group\ndisplay.root_group = splash\n\nwhile True:\n    cursor.update()\n    if cursor.is_clicked:\n        if mouse_cursor.hidden:\n            mouse_cursor.show()\n        else:\n            mouse_cursor.hide()\n    time.sleep(0.01)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/cursorcontrol/examples/cursorcontrol_simpletest.py",
      "library": "cursorcontrol",
      "type": "example",
      "file_name": "cursorcontrol_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\n# Get WiFi details, ensure these are setup in settings.toml\nssid = os.getenv(\"CIRCUITPY_WIFI_SSID\")\npassword = os.getenv(\"CIRCUITPY_WIFI_PASSWORD\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/esp32spi/requests_esp32spi_advanced.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_esp32spi_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\nssid = os.getenv(\"CIRCUITPY_WIFI_SSID\")\npassword = os.getenv(\"CIRCUITPY_WIFI_PASSWORD\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/esp32spi/requests_esp32spi_advanced.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_esp32spi_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\npassword = os.getenv(\"CIRCUITPY_WIFI_PASSWORD\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/esp32spi/requests_esp32spi_advanced.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_esp32spi_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\n# If you have an AirLift Featherwing or ItsyBitsy Airlift:\n# esp32_cs = DigitalInOut(board.D13)\n# esp32_ready = DigitalInOut(board.D11)\n# esp32_reset = DigitalInOut(board.D12)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nradio = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/esp32spi/requests_esp32spi_advanced.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_esp32spi_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\n# esp32_cs = DigitalInOut(board.D13)\n# esp32_ready = DigitalInOut(board.D11)\n# esp32_reset = DigitalInOut(board.D12)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nradio = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/esp32spi/requests_esp32spi_advanced.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_esp32spi_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nJSON_GET_URL = \"https://httpbin.org/get\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/esp32spi/requests_esp32spi_advanced.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_esp32spi_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nJSON_GET_URL = \"https://httpbin.org/get\"",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/esp32spi/requests_esp32spi_advanced.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_esp32spi_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport adafruit_connection_manager\nimport board\nimport busio\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom digitalio import DigitalInOut\nimport adafruit_requests\n\n# Initialize a requests session\npool = adafruit_connection_manager.get_radio_socketpool(radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(radio)\nrequests = adafruit_requests.Session(pool, ssl_context)\nJSON_GET_URL = \"https://httpbin.org/get\"\n# Define a custom header as a dict.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/esp32spi/requests_esp32spi_advanced.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_esp32spi_advanced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_pyportal.graphics import Graphics\n\nimport board\n# Set display to show\ndisplay = board.DISPLAY\n# Background Information\nbase = Graphics(default_bg=0x990099, debug=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pyportal/examples/pyportal_qrcode_generation.py",
      "library": "pyportal",
      "type": "example",
      "file_name": "pyportal_qrcode_generation.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 Jose David M.\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nThis example shows a web address QR in the display\n\"\"\"\n\nimport board\n\nfrom adafruit_pyportal.graphics import Graphics\n\n# Set display to show\ndisplay = board.DISPLAY\n\n# Background Information\nbase = Graphics(default_bg=0x990099, debug=True)\n\n# WebPage to show in the QR\nwebpage = \"http://www.adafruit.com\"\n\n# QR size Information\nqr_size = 9  # Pixels\nscale = 3\n\n# Create a barcode\nbase.qrcode(\n    webpage,\n    qr_size=scale,\n    x=display.width // 2 - qr_size * scale,\n    y=display.height // 2 - qr_size * scale,\n)\n\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pyportal/examples/pyportal_qrcode_generation.py",
      "library": "pyportal",
      "type": "example",
      "file_name": "pyportal_qrcode_generation.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_max7219 import matrices\n\nimport digitalio\n# You may need to change the chip select pin depending on your wiring\nspi = board.SPI()\ncs = digitalio.DigitalInOut(board.D4)\nmatrix = matrices.CustomMatrix(spi, cs, 32, 8)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max7219/examples/max7219_custommatrixtest.py",
      "library": "max7219",
      "type": "example",
      "file_name": "max7219_custommatrixtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_max7219 import matrices\n\n# You may need to change the chip select pin depending on your wiring\nspi = board.SPI()\ncs = digitalio.DigitalInOut(board.D4)\nmatrix = matrices.CustomMatrix(spi, cs, 32, 8)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/max7219/examples/max7219_custommatrixtest.py",
      "library": "max7219",
      "type": "example",
      "file_name": "max7219_custommatrixtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport terminalio\nfrom adafruit_button import Button\nfrom adafruit_cursorcontrol.cursorcontrol import Cursor\nfrom adafruit_cursorcontrol.cursorcontrol_cursormanager import DebouncedCursorManager\n\n    label_font=terminalio.FONT,\n    label_color=B_BUTTON_LABEL_COLOR,\n# Create the display\ndisplay = board.DISPLAY\n# Create the display context\nsplash = displayio.Group()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/cursorcontrol/examples/cursorcontrol_buttons_debounced.py",
      "library": "cursorcontrol",
      "type": "example",
      "file_name": "cursorcontrol_buttons_debounced.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_display_text import label\nfrom bitmap_font_forkawesome_icons import microchip, python, terminal\nfrom adafruit_bitmap_font import bitmap_font\n\n# use built in display (MagTag, PyPortal, PyGamer, PyBadge, CLUE, etc.)\n# see guide for setting up external displays (TFT / OLED breakouts, RGB matrices, etc.)\n# https://learn.adafruit.com/circuitpython-display-support-using-displayio/display-and-display-bus\ndisplay = board.DISPLAY\nfont_file = \"fonts/forkawesome-42.pcf\"\n# Set text, font, and color",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/bitmap-font/examples/bitmap_font_label_forkawesome.py",
      "library": "bitmap-font",
      "type": "example",
      "file_name": "bitmap_font_label_forkawesome.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_onewire.bus import OneWireAddress, OneWireBus\nfrom adafruit_ds18x20 import DS18X20\n\nROM2 = b\"(\\xb3t\\xd3\\x08\\x00\\x00\\x9e\"\nROM3 = b\"(8`\\xd4\\x08\\x00\\x00i\"\n# !!!! REPLACE THESE WITH ROM CODES FOR YOUR SENSORS !!!!\n# Initialize one-wire bus on board pin D5.\now_bus = OneWireBus(board.D5)\n# Uncomment this to get a listing of currently attached ROMs\n# for device in ow_bus.scan():\n#     print(device.rom)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ds18x20/examples/ds18x20_multi.py",
      "library": "ds18x20",
      "type": "example",
      "file_name": "ds18x20_multi.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_pn532.i2c import PN532_I2C\n\n# from adafruit_pn532.spi import PN532_SPI\n# from adafruit_pn532.uart import PN532_UART\n# I2C connection:\ni2c = busio.I2C(board.SCL, board.SDA)\n# Non-hardware\n# pn532 = PN532_I2C(i2c, debug=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pn532/examples/pn532_simpletest.py",
      "library": "pn532",
      "type": "example",
      "file_name": "pn532_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_pn532.i2c import PN532_I2C\n\n# Non-hardware\n# pn532 = PN532_I2C(i2c, debug=False)\n# With I2C, we recommend connecting RSTPD_N (reset) to a digital pin for manual\n# harware reset\nreset_pin = DigitalInOut(board.D6)\n# On Raspberry Pi, you must also connect a pin to P32 \"H_Request\" for hardware\n# wakeup! this means we don't need to do the I2C clock-stretch thing\nreq_pin = DigitalInOut(board.D12)\npn532 = PN532_I2C(i2c, debug=False, reset=reset_pin, req=req_pin)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pn532/examples/pn532_simpletest.py",
      "library": "pn532",
      "type": "example",
      "file_name": "pn532_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_pn532.i2c import PN532_I2C\n\n# With I2C, we recommend connecting RSTPD_N (reset) to a digital pin for manual\n# harware reset\nreset_pin = DigitalInOut(board.D6)\n# On Raspberry Pi, you must also connect a pin to P32 \"H_Request\" for hardware\n# wakeup! this means we don't need to do the I2C clock-stretch thing\nreq_pin = DigitalInOut(board.D12)\npn532 = PN532_I2C(i2c, debug=False, reset=reset_pin, req=req_pin)\n# SPI connection:\n# spi = busio.SPI(board.SCK, board.MOSI, board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pn532/examples/pn532_simpletest.py",
      "library": "pn532",
      "type": "example",
      "file_name": "pn532_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_pathlib\n\n# Recursively prints an ASCII tree of the given directory.\ndef print_directory_tree(path: adafruit_pathlib.Path, prefix: str=''):\n    \"\"\"Recursively prints an ASCII tree of the given directory.\"\"\"\n    if not path.is_dir():\n        print(f'{path} is not a directory.')\n        return\n    entries = sorted(path.iterdir(), key=lambda x: (not x.is_dir(), x.name.lower()))\n    for index, entry in enumerate(entries):\n        connector = '|-- ' if index < len(entries) - 1 else \"'-- \"\n        print(f'{prefix}{connector}{entry.name}')\n        if entry.is_dir():\n            extension = '|   ' if index < len(entries) - 1 else '    '\n            print_directory_tree(entry, prefix + extension)\n\n# Usage example:\n        if entry.is_dir():\n            extension = \"|   \" if index < len(entries) - 1 else \"    \"\n            print_directory_tree(entry, prefix + extension)\n\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pathlib/examples/pathlib_simpletest.py",
      "library": "pathlib",
      "type": "example",
      "file_name": "pathlib_simpletest.py",
      "chunk_type": "function",
      "function_name": "print_directory_tree"
    }
  },
  {
    "content": "import adafruit_pathlib\n\ndir_path = adafruit_pathlib.Path('/lib')",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pathlib/examples/pathlib_simpletest.py",
      "library": "pathlib",
      "type": "example",
      "file_name": "pathlib_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2025 Tim Cocks for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\nimport adafruit_pathlib\n\n\ndef print_directory_tree(path: adafruit_pathlib.Path, prefix: str = \"\"):\n    \"\"\"Recursively prints an ASCII tree of the given directory.\"\"\"\n    if not path.is_dir():\n        print(f\"{path} is not a directory.\")\n        return\n\n    entries = sorted(path.iterdir(), key=lambda x: (not x.is_dir(), x.name.lower()))\n    for index, entry in enumerate(entries):\n        connector = \"|-- \" if index < len(entries) - 1 else \"'-- \"\n        print(f\"{prefix}{connector}{entry.name}\")\n        if entry.is_dir():\n            extension = \"|   \" if index < len(entries) - 1 else \"    \"\n            print_directory_tree(entry, prefix + extension)\n\n\ndir_path = adafruit_pathlib.Path(\"/lib\")\n\nprint_directory_tree(dir_path)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/pathlib/examples/pathlib_simpletest.py",
      "library": "pathlib",
      "type": "example",
      "file_name": "pathlib_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport countio\nfrom digitalio import Pull\nfrom adafruit_pcf8523.clock import Clock\n\nimport countio\nPIN_SDA = board.GP2  # connect to RTC\nPIN_SCL = board.GP3  # connect to RTC\n# use board.SCL and board.SDA if available\ni2c = busio.I2C(PIN_SCL, PIN_SDA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8523/examples/pcf8523_clockout.py",
      "library": "pcf8523",
      "type": "example",
      "file_name": "pcf8523_clockout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport countio\nfrom digitalio import Pull\nfrom adafruit_pcf8523.clock import Clock\n\nPIN_SDA = board.GP2  # connect to RTC\nPIN_SCL = board.GP3  # connect to RTC\n# use board.SCL and board.SDA if available\ni2c = busio.I2C(PIN_SCL, PIN_SDA)\n# or i2c = board.I2C() if available",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8523/examples/pcf8523_clockout.py",
      "library": "pcf8523",
      "type": "example",
      "file_name": "pcf8523_clockout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport countio\nfrom digitalio import Pull\nfrom adafruit_pcf8523.clock import Clock\n\nPIN_SDA = board.GP2  # connect to RTC\nPIN_SCL = board.GP3  # connect to RTC\n# use board.SCL and board.SDA if available\ni2c = busio.I2C(PIN_SCL, PIN_SDA)\n# or i2c = board.I2C() if available\nclock = Clock(i2c)\n# pin must support countio",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8523/examples/pcf8523_clockout.py",
      "library": "pcf8523",
      "type": "example",
      "file_name": "pcf8523_clockout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport countio\nfrom digitalio import Pull\nfrom adafruit_pcf8523.clock import Clock\n\ni2c = busio.I2C(PIN_SCL, PIN_SDA)\n# or i2c = board.I2C() if available\nclock = Clock(i2c)\n# pin must support countio\nPIN_COUT = board.GP5\ncounter = countio.Counter(pin=PIN_COUT, edge=countio.Edge.RISE, pull=Pull.UP)\nDURATION = 10\n# Main loop:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/pcf8523/examples/pcf8523_clockout.py",
      "library": "pcf8523",
      "type": "example",
      "file_name": "pcf8523_clockout.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice\n\n    esp32_cs = DigitalInOut(board.D13)\n    esp32_ready = DigitalInOut(board.D11)\n    esp32_reset = DigitalInOut(board.D12)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_simpletest.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice\n\n    esp32_cs = DigitalInOut(board.D13)\n    esp32_ready = DigitalInOut(board.D11)\n    esp32_reset = DigitalInOut(board.D12)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_simpletest.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice\n\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)  # Uncomment for Most Boards",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_simpletest.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice\n\n# from adafruit_esp32spi import PWMOut\n# RED_LED = PWMOut.PWMOut(esp, 26)\n# GREEN_LED = PWMOut.PWMOut(esp, 27)\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password, status_pixel=status_pixel)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_simpletest.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice\n\n#\n# From the Adafruit CircuitPython Bundle https://github.com/adafruit/Adafruit_CircuitPython_Bundle:\n# * adafruit-circuitpython-minimqtt\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Create an IoT Hub device client and connect\ndevice = IoTCentralDevice(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_simpletest.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTCentralDevice\n\n# From the Adafruit CircuitPython Bundle https://github.com/adafruit/Adafruit_CircuitPython_Bundle:\n# * adafruit-circuitpython-minimqtt\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Create an IoT Hub device client and connect\ndevice = IoTCentralDevice(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_central_simpletest.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_central_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_bluefruitspi import BluefruitSPI\n\nimport busio\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\ncs = DigitalInOut(board.D8)\nirq = DigitalInOut(board.D7)\nrst = DigitalInOut(board.D4)\nbluefruit = BluefruitSPI(spi_bus, cs, irq, rst, debug=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bluefruitspi/examples/bluefruitspi_simpletest.py",
      "library": "bluefruitspi",
      "type": "example",
      "file_name": "bluefruitspi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_bluefruitspi import BluefruitSPI\n\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\ncs = DigitalInOut(board.D8)\nirq = DigitalInOut(board.D7)\nrst = DigitalInOut(board.D4)\nbluefruit = BluefruitSPI(spi_bus, cs, irq, rst, debug=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bluefruitspi/examples/bluefruitspi_simpletest.py",
      "library": "bluefruitspi",
      "type": "example",
      "file_name": "bluefruitspi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_bluefruitspi import BluefruitSPI\n\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\ncs = DigitalInOut(board.D8)\nirq = DigitalInOut(board.D7)\nrst = DigitalInOut(board.D4)\nbluefruit = BluefruitSPI(spi_bus, cs, irq, rst, debug=False)\n# Initialize the device and perform a factory reset",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bluefruitspi/examples/bluefruitspi_simpletest.py",
      "library": "bluefruitspi",
      "type": "example",
      "file_name": "bluefruitspi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nfrom digitalio import DigitalInOut\nfrom adafruit_bluefruitspi import BluefruitSPI\n\nspi_bus = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\ncs = DigitalInOut(board.D8)\nirq = DigitalInOut(board.D7)\nrst = DigitalInOut(board.D4)\nbluefruit = BluefruitSPI(spi_bus, cs, irq, rst, debug=False)\n# Initialize the device and perform a factory reset",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bluefruitspi/examples/bluefruitspi_simpletest.py",
      "library": "bluefruitspi",
      "type": "example",
      "file_name": "bluefruitspi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom adafruit_bus_device.i2c_device import I2CDevice\n\nDEVICE_ADDRESS = 0x68  # device address of DS3231 board\nA_DEVICE_REGISTER = 0x0E  # device id register on the DS3231 board\n# The follow is for I2C communications\ncomm_port = busio.I2C(board.SCL, board.SDA)\ndevice = I2CDevice(comm_port, DEVICE_ADDRESS)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/bus_device/examples/busdevice_read_register_i2c_simpletest.py",
      "library": "bus_device",
      "type": "example",
      "file_name": "busdevice_read_register_i2c_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport busio\n\nfrom adafruit_bus_device.i2c_device import I2CDevice\n\nDEVICE_ADDRESS = 0x68  # device address of DS3231 board\nA_DEVICE_REGISTER = 0x0E  # device id register on the DS3231 board\n\n# The follow is for I2C communications\ncomm_port = busio.I2C(board.SCL, board.SDA)\ndevice = I2CDevice(comm_port, DEVICE_ADDRESS)\n\nwith device as bus_device:\n    bus_device.write(bytes([A_DEVICE_REGISTER]))\n    result = bytearray(1)\n    bus_device.readinto(result)\n\nprint(\"\".join(f\"{x:02x}\" for x in result))\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/bus_device/examples/busdevice_read_register_i2c_simpletest.py",
      "library": "bus_device",
      "type": "example",
      "file_name": "busdevice_read_register_i2c_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import adafruit_framebuf\nimport board\nimport busio\nfrom adafruit_ht16k33 import matrix\n\n# Import the HT16K33 LED matrix module.\n# Create the I2C interface.\ni2c = busio.I2C(board.SCL, board.SDA)\n# Create the matrix class.\n# This creates a 16x8 matrix:\nmatrix = matrix.Matrix16x8(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ht16k33/examples/ht16k33_matrix_text_example.py",
      "library": "ht16k33",
      "type": "example",
      "file_name": "ht16k33_matrix_text_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_framebuf\nimport board\nimport busio\nfrom adafruit_ht16k33 import matrix\n\ntext_to_show = \"Hello Blinka\"\n# Create a framebuffer for our display\nbuf = bytearray(16)  # 1 bytes tall x 16 wide = 16 bytes\nfb = adafruit_framebuf.FrameBuffer(buf, 16, 8, adafruit_framebuf.MVLSB)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ht16k33/examples/ht16k33_matrix_text_example.py",
      "library": "ht16k33",
      "type": "example",
      "file_name": "ht16k33_matrix_text_example.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom adafruit_displayio_layout.widgets.cartesian import Cartesian\n\nimport displayio\n# create the display on the PyPortal or Clue or PyBadge(for example)\ndisplay = board.DISPLAY\n# otherwise change this to setup the display\n# for display chip driver and pinout you have (e.g. ILI9341)\n# pybadge display:  160x128",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/displayio_layout/examples/displayio_layout_cartesian_lineplot.py",
      "library": "displayio_layout",
      "type": "example",
      "file_name": "displayio_layout_cartesian_lineplot.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_128x160_simpletest.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_128x160_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_128x160_simpletest.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_128x160_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\n# Release any resources currently in use for the displays\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)\ndisplay = ST7735R(display_bus, width=160, height=128, rotation=90, bgr=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_128x160_simpletest.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_128x160_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport displayio\nimport terminalio\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nfrom adafruit_st7735r import ST7735R\n\nspi = board.SPI()\ntft_cs = board.D5\ntft_dc = board.D6\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.D9)\ndisplay = ST7735R(display_bus, width=160, height=128, rotation=90, bgr=True)\n# Make the display context",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/st7735r/examples/st7735r_128x160_simpletest.py",
      "library": "st7735r",
      "type": "example",
      "file_name": "st7735r_128x160_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nfrom time import sleep\nfrom adafruit_featherwing import neopixel_featherwing\n\nimport random\nneopixel = neopixel_featherwing.NeoPixelFeatherWing()\n# HELPERS\n# a random color 0 -> 224",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/featherwing/examples/featherwing_neopixel_simpletest.py",
      "library": "featherwing",
      "type": "example",
      "file_name": "featherwing_neopixel_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nfrom time import sleep\nfrom adafruit_featherwing import neopixel_featherwing\n\ndef random_color():\n    return random.randrange(0, 8) * 32\n\n# Usage example:\n# Fill screen with random colors at random brightnesses\nfor i in range(0, 5):\n    neopixel.fill((random_color(), random_color(), random_color()))\n    neopixel.brightness = random.randrange(2, 10) / 10\n    sleep(0.2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/featherwing/examples/featherwing_neopixel_simpletest.py",
      "library": "featherwing",
      "type": "example",
      "file_name": "featherwing_neopixel_simpletest.py",
      "chunk_type": "function",
      "function_name": "random_color"
    }
  },
  {
    "content": "import random\nfrom time import sleep\nfrom adafruit_featherwing import neopixel_featherwing\n\n    neopixel.brightness = random.randrange(2, 10) / 10\n# Set display to 30% brightness\nneopixel.brightness = 0.3\n# Create a gradiant drawing each pixel",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/featherwing/examples/featherwing_neopixel_simpletest.py",
      "library": "featherwing",
      "type": "example",
      "file_name": "featherwing_neopixel_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import random\nfrom time import sleep\nfrom adafruit_featherwing import neopixel_featherwing\n\nneopixel.auto_write = True\n# Shift pixels without rotating for an animated screen wipe",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/featherwing/examples/featherwing_neopixel_simpletest.py",
      "library": "featherwing",
      "type": "example",
      "file_name": "featherwing_neopixel_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\nimport adafruit_il0373\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_1.54_color.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_1.54_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_1.54_color.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_1.54_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = fourwire.FourWire(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_1.54_color.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_1.54_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = fourwire.FourWire(\n    spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_1.54_color.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_1.54_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = fourwire.FourWire(\n    spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_1.54_color.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_1.54_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_il0373\n\ndisplay = adafruit_il0373.IL0373(display_bus, width=152, height=152, busy_pin=epd_busy, highlight_color=16711680, rotation=180)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/il0373/examples/il0373_1.54_color.py",
      "library": "il0373",
      "type": "example",
      "file_name": "il0373_1.54_color.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_ssd1608\n\nimport adafruit_ssd1608\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1608/examples/ssd1608_simpletest.py",
      "library": "ssd1608",
      "type": "example",
      "file_name": "ssd1608_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_ssd1608\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1608/examples/ssd1608_simpletest.py",
      "library": "ssd1608",
      "type": "example",
      "file_name": "ssd1608_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_ssd1608\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = fourwire.FourWire(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1608/examples/ssd1608_simpletest.py",
      "library": "ssd1608",
      "type": "example",
      "file_name": "ssd1608_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_ssd1608\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = fourwire.FourWire(\n    spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1608/examples/ssd1608_simpletest.py",
      "library": "ssd1608",
      "type": "example",
      "file_name": "ssd1608_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_ssd1608\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = fourwire.FourWire(\n    spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1608/examples/ssd1608_simpletest.py",
      "library": "ssd1608",
      "type": "example",
      "file_name": "ssd1608_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nimport fourwire\nimport adafruit_ssd1608\n\ndisplay = adafruit_ssd1608.SSD1608(display_bus, width=200, height=200, busy_pin=epd_busy, rotation=180)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1608/examples/ssd1608_simpletest.py",
      "library": "ssd1608",
      "type": "example",
      "file_name": "ssd1608_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_adxl37x\n\nimport board\nimport digitalio\nimport adafruit_adxl37x\ni2c = board.STEMMA_I2C()  # uses board.SCL and board.SDA\naccelerometer = adafruit_adxl37x.ADXL375(i2c)\ninterrupt = digitalio.DigitalInOut(board.GP3)  # Set interrupt dio pin",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl37x/examples/adxl37x_data_ready.py",
      "library": "adxl37x",
      "type": "example",
      "file_name": "adxl37x_data_ready.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_adxl37x\n\nimport digitalio\nimport adafruit_adxl37x\ni2c = board.STEMMA_I2C()  # uses board.SCL and board.SDA\naccelerometer = adafruit_adxl37x.ADXL375(i2c)\ninterrupt = digitalio.DigitalInOut(board.GP3)  # Set interrupt dio pin",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl37x/examples/adxl37x_data_ready.py",
      "library": "adxl37x",
      "type": "example",
      "file_name": "adxl37x_data_ready.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_adxl37x\n\nimport adafruit_adxl37x\ni2c = board.STEMMA_I2C()  # uses board.SCL and board.SDA\naccelerometer = adafruit_adxl37x.ADXL375(i2c)\ninterrupt = digitalio.DigitalInOut(board.GP3)  # Set interrupt dio pin",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl37x/examples/adxl37x_data_ready.py",
      "library": "adxl37x",
      "type": "example",
      "file_name": "adxl37x_data_ready.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nimport adafruit_adxl37x\n\ninterrupt = digitalio.DigitalInOut(board.GP3)  # Set interrupt dio pin\naccelerometer.data_rate = accelerometer.DataRate.RATE_800_HZ  # Set Data Rate of accelerometer\naccelerometer.range = adafruit_adxl37x.Range.RANGE_200_G  # Set Full Data Range 200g",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl37x/examples/adxl37x_data_ready.py",
      "library": "adxl37x",
      "type": "example",
      "file_name": "adxl37x_data_ready.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2022 Kattni Rembor for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport digitalio\n\nimport adafruit_adxl37x\n\ni2c = board.STEMMA_I2C()  # uses board.SCL and board.SDA\naccelerometer = adafruit_adxl37x.ADXL375(i2c)\n\ninterrupt = digitalio.DigitalInOut(board.GP3)  # Set interrupt dio pin\n\nprint(\"Accelerometer starting...\")\naccelerometer.data_rate = accelerometer.DataRate.RATE_800_HZ  # Set Data Rate of accelerometer\naccelerometer.range = adafruit_adxl37x.Range.RANGE_200_G  # Set Full Data Range 200g\naccelerometer.enable_data_ready_interrupt()  # Enable Data Ready Interrupt\n\nwhile True:\n    if interrupt.value:\n        # ADXL375 interrupt pin stays HIGH until data is read, so simply reading the logic state\n        # is sufficient instead of having to catch the rising edge.\n        print(\n            f\"{accelerometer.acceleration[0]} {accelerometer.acceleration[1]} {accelerometer.acceleration[2]} m/s^2\"  # noqa: E501\n        )\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl37x/examples/adxl37x_data_ready.py",
      "library": "adxl37x",
      "type": "example",
      "file_name": "adxl37x_data_ready.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_aio_post.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_aio_post.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_aio_post.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_aio_post.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\n# If you are using a board with pre-defined ESP32 Pins:\nesp32_cs = DigitalInOut(board.ESP_CS)\nesp32_ready = DigitalInOut(board.ESP_BUSY)\nesp32_reset = DigitalInOut(board.ESP_RESET)\n# If you have an externally connected ESP32:\n# esp32_cs = DigitalInOut(board.D9)\n# esp32_ready = DigitalInOut(board.D10)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_aio_post.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_aio_post.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\n\n# Secondary (SCK1) SPI used to connect to WiFi board on Arduino Nano Connect RP2040\n    spi = busio.SPI(board.SCK1, board.MOSI1, board.MISO1)\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_aio_post.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_aio_post.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nfrom os import getenv\nimport board\nimport busio\nimport neopixel\nfrom digitalio import DigitalInOut\nfrom adafruit_esp32spi import adafruit_esp32spi\nfrom adafruit_esp32spi.adafruit_esp32spi_wifimanager import WiFiManager\n\n    spi = busio.SPI(board.SCK1, board.MOSI1, board.MISO1)\n    spi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/esp32spi/examples/esp32spi_aio_post.py",
      "library": "esp32spi",
      "type": "example",
      "file_name": "esp32spi_aio_post.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nfrom adafruit_as7341 import AS7341\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nsensor = AS7341(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/as7341/examples/as7341_batched_readings.py",
      "library": "as7341",
      "type": "example",
      "file_name": "as7341_batched_readings.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "from time import sleep\nimport board\nfrom adafruit_as7341 import AS7341\n\ndef bar_graph(read_value):\n    scaled = int(read_value / 1000)\n    return '[%5d] ' % read_value + scaled * '*'\n\n# Usage example:\nwhile True:\n    sensor_channels = sensor.all_channels\n    print(\"F1 - 415nm/Violet  %s\" % bar_graph(sensor_channels[0]))\n    print(\"F2 - 445nm//Indigo %s\" % bar_graph(sensor_channels[1]))\n    print(\"F3 - 480nm//Blue   %s\" % bar_graph(sensor_channels[2]))",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/as7341/examples/as7341_batched_readings.py",
      "library": "as7341",
      "type": "example",
      "file_name": "as7341_batched_readings.py",
      "chunk_type": "function",
      "function_name": "bar_graph"
    }
  },
  {
    "content": "import sys\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.standard import Advertisement, ProvideServicesAdvertisement\nimport adafruit_ble_file_transfer\n\nservice = connection[adafruit_ble_file_transfer.FileTransferService]\nclient = adafruit_ble_file_transfer.FileTransferClient(service)\n# Do the file operations",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_file_transfer/examples/ble_file_transfer_listdirs.py",
      "library": "ble_file_transfer",
      "type": "example",
      "file_name": "ble_file_transfer_listdirs.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import sys\nfrom adafruit_ble import BLERadio\nfrom adafruit_ble.advertising.standard import Advertisement, ProvideServicesAdvertisement\nimport adafruit_ble_file_transfer\n\nservice = connection[adafruit_ble_file_transfer.FileTransferService]\nclient = adafruit_ble_file_transfer.FileTransferClient(service)\n# Do the file operations",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/ble_file_transfer/examples/ble_file_transfer_listdirs.py",
      "library": "ble_file_transfer",
      "type": "example",
      "file_name": "ble_file_transfer_listdirs.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_adxl34x\n\nimport board\nimport adafruit_adxl34x\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# For ADXL343\naccelerometer = adafruit_adxl34x.ADXL343(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl34x/examples/adxl34x_motion_detection_test.py",
      "library": "adxl34x",
      "type": "example",
      "file_name": "adxl34x_motion_detection_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_adxl34x\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# For ADXL343\naccelerometer = adafruit_adxl34x.ADXL343(i2c)\n# For ADXL345\n# accelerometer = adafruit_adxl34x.ADXL345(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl34x/examples/adxl34x_motion_detection_test.py",
      "library": "adxl34x",
      "type": "example",
      "file_name": "adxl34x_motion_detection_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_adxl34x\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\n# For ADXL343\naccelerometer = adafruit_adxl34x.ADXL343(i2c)\n# For ADXL345\n# accelerometer = adafruit_adxl34x.ADXL345(i2c)\n\naccelerometer.enable_motion_detection()\n# alternatively you can specify the threshold when you enable motion detection for more control:\n# accelerometer.enable_motion_detection(threshold=10)\n\nwhile True:\n    print(\"{} {} {}\".format(*accelerometer.acceleration))\n\n    print(\"Motion detected: {}\".format(accelerometer.events[\"motion\"]))\n    time.sleep(0.5)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/adxl34x/examples/adxl34x_motion_detection_test.py",
      "library": "adxl34x",
      "type": "example",
      "file_name": "adxl34x_motion_detection_test.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# Define pins connected to the chip.\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm9x = adafruit_rfm9x.RFM9x(spi, CS, RESET, RADIO_FREQ_MHZ)\n# set node addresses",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm9x = adafruit_rfm9x.RFM9x(spi, CS, RESET, RADIO_FREQ_MHZ)\n# set node addresses\nrfm9x.node = 1\nrfm9x.destination = 2",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_node1.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_node1.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_slideshow import HorizontalAlignment, PlayBackOrder, SlideShow, VerticalAlignment\n\nslideshow = SlideShow(board.DISPLAY, None, folder='/images/', loop=True, order=PlayBackOrder.ALPHABETICAL)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/slideshow/examples/slideshow_alignment_test.py",
      "library": "slideshow",
      "type": "example",
      "file_name": "slideshow_alignment_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport usb_midi\nimport adafruit_midi\nfrom adafruit_midi.control_change import ControlChange\nfrom adafruit_midi.note_off import NoteOff\nfrom adafruit_midi.note_on import NoteOn\nfrom adafruit_midi.pitch_bend import PitchBend\nfrom adafruit_midi.timing_clock import TimingClock\n\n# 0 is MIDI channel 1\nmidi = adafruit_midi.MIDI(midi_in=usb_midi.ports[0], in_channel=0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/midi/examples/midi_intest1.py",
      "library": "midi",
      "type": "example",
      "file_name": "midi_intest1.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport usb_midi\n\nimport adafruit_midi\n\n# from adafruit_midi.channel_pressure        import ChannelPressure\nfrom adafruit_midi.control_change import ControlChange\nfrom adafruit_midi.note_off import NoteOff\nfrom adafruit_midi.note_on import NoteOn\nfrom adafruit_midi.pitch_bend import PitchBend\nfrom adafruit_midi.timing_clock import TimingClock\n\n# 0 is MIDI channel 1\nmidi = adafruit_midi.MIDI(midi_in=usb_midi.ports[0], in_channel=0)\n\nprint(\"Midi input test\")\n\n# Convert channel numbers at the presentation layer to the ones musicians use\nprint(\"Input channel:\", midi.in_channel + 1)\n\nwhile True:\n    msg = midi.receive()\n    if msg is not None:\n        print(time.monotonic(), msg)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/midi/examples/midi_intest1.py",
      "library": "midi",
      "type": "example",
      "file_name": "midi_intest1.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_vcnl4010\n\nimport adafruit_vcnl4010\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = adafruit_vcnl4010.VCNL4010(i2c)\n# Create a Label to show the readings. If you have a very small\n# display you may need to change to scale=1.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4010/examples/vcnl4010_displayio_simpletest.py",
      "library": "vcnl4010",
      "type": "example",
      "file_name": "vcnl4010_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_vcnl4010\n\n# create a main_group to hold anything we want to show on the display.\nmain_group = Group()\n# Initialize I2C bus and sensor.\ni2c = board.I2C()  # uses board.SCL and board.SDA\nsensor = adafruit_vcnl4010.VCNL4010(i2c)\n# Create a Label to show the readings. If you have a very small\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4010/examples/vcnl4010_displayio_simpletest.py",
      "library": "vcnl4010",
      "type": "example",
      "file_name": "vcnl4010_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_vcnl4010\n\n# display you may need to change to scale=1.\ndisplay_output_label = Label(FONT, text=\"\", scale=2)\n# place the label in the middle of the screen with anchored positioning\ndisplay_output_label.anchor_point = (0, 0)\ndisplay_output_label.anchored_position = (4, board.DISPLAY.height // 2)\n# add the label to the main_group",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4010/examples/vcnl4010_displayio_simpletest.py",
      "library": "vcnl4010",
      "type": "example",
      "file_name": "vcnl4010_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_display_text.bitmap_label import Label\nfrom displayio import Group\nfrom terminalio import FONT\nimport adafruit_vcnl4010\n\n# add the label to the main_group\n# set the main_group as the root_group of the built-in DISPLAY\nboard.DISPLAY.root_group = main_group\n# begin main loop",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/vcnl4010/examples/vcnl4010_displayio_simpletest.py",
      "library": "vcnl4010",
      "type": "example",
      "file_name": "vcnl4010_displayio_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\nimport adafruit_ov2640\n\naio_username = getenv(\"ADAFRUIT_AIO_USERNAME\")\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_aio_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_aio_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\nimport adafruit_ov2640\n\naio_key = getenv(\"ADAFRUIT_AIO_KEY\")\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_aio_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_aio_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\nimport adafruit_ov2640\n\n    ssl_context=ssl_context,\nio = IO_MQTT(mqtt_client)\nbus = busio.I2C(scl=board.CAMERA_SIOC, sda=board.CAMERA_SIOD)\ncam = adafruit_ov2640.OV2640(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_aio_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_aio_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\nimport adafruit_ov2640\n\ncam = adafruit_ov2640.OV2640(bus, data_pins=board.CAMERA_DATA, clock=board.CAMERA_PCLK, vsync=board.CAMERA_VSYNC, href=board.CAMERA_HREF, mclk=board.CAMERA_XCLK, mclk_frequency=20000000, size=adafruit_ov2640.OV2640_SIZE_QVGA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_aio_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_aio_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\nimport adafruit_ov2640\n\ncam.flip_x = False\ncam.flip_y = False\ncam.test_pattern = False\ncam.size = adafruit_ov2640.OV2640_SIZE_SVGA\ncam.colorspace = adafruit_ov2640.OV2640_COLOR_JPEG\njpeg_buffer = bytearray(cam.capture_buffer_size)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_aio_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_aio_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import binascii\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport adafruit_minimqtt.adafruit_minimqtt as MQTT\nimport board\nimport busio\nimport wifi\nfrom adafruit_io.adafruit_io import IO_MQTT\nimport adafruit_ov2640\n\ncam.flip_x = False\ncam.flip_y = False\ncam.test_pattern = False\ncam.size = adafruit_ov2640.OV2640_SIZE_SVGA\ncam.colorspace = adafruit_ov2640.OV2640_COLOR_JPEG\njpeg_buffer = bytearray(cam.capture_buffer_size)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_aio_kaluga1_3.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_aio_kaluga1_3.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_spa06_003 import SPA06_003_I2C\n\nimport board\ni2c = board.I2C()\nspa = SPA06_003_I2C(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spa06_003/examples/spa06_003_simpletest.py",
      "library": "spa06_003",
      "type": "example",
      "file_name": "spa06_003_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2025 Tim Cocks for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nfrom adafruit_spa06_003 import SPA06_003_I2C\n\ni2c = board.I2C()\nspa = SPA06_003_I2C(i2c)\n\n\nwhile True:\n    if spa.temperature_data_ready and spa.pressure_data_ready:\n        print(f\"Temperature: {spa.temperature} \u00b0C\", end=\"   \")\n        print(f\"Pressure: {spa.pressure}  hPa\")\n\n    time.sleep(0.01)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/spa06_003/examples/spa06_003_simpletest.py",
      "library": "spa06_003",
      "type": "example",
      "file_name": "spa06_003_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import analogio\nimport board\nimport digitalio\nimport usb_hid\nfrom hid_gamepad import Gamepad\n\ngp = Gamepad(usb_hid.devices)\n# Create some buttons. The physical buttons are connected\n# to ground on one side and these and these pins on the other.\nbutton_pins = (board.D2, board.D3, board.D4, board.D5)\n# Map the buttons to button numbers on the Gamepad.\n# gamepad_buttons[i] will send that button number when buttons[i]\n# is pushed.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_simple_gamepad.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_simple_gamepad.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import analogio\nimport board\nimport digitalio\nimport usb_hid\nfrom hid_gamepad import Gamepad\n\n# Map the buttons to button numbers on the Gamepad.\n# gamepad_buttons[i] will send that button number when buttons[i]\n# is pushed.\ngamepad_buttons = (1, 2, 8, 15)\nbuttons = [digitalio.DigitalInOut(pin) for pin in button_pins]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_simple_gamepad.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_simple_gamepad.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import analogio\nimport board\nimport digitalio\nimport usb_hid\nfrom hid_gamepad import Gamepad\n\n    button.direction = digitalio.Direction.INPUT\n    button.pull = digitalio.Pull.UP\n# Connect an analog two-axis joystick to A4 and A5.\nax = analogio.AnalogIn(board.A4)\nay = analogio.AnalogIn(board.A5)\n# Equivalent of Arduino's map() function.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_simple_gamepad.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_simple_gamepad.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import analogio\nimport board\nimport digitalio\nimport usb_hid\nfrom hid_gamepad import Gamepad\n\n    button.direction = digitalio.Direction.INPUT\n    button.pull = digitalio.Pull.UP\n# Connect an analog two-axis joystick to A4 and A5.\nax = analogio.AnalogIn(board.A4)\nay = analogio.AnalogIn(board.A5)\n# Equivalent of Arduino's map() function.",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_simple_gamepad.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_simple_gamepad.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import analogio\nimport board\nimport digitalio\nimport usb_hid\nfrom hid_gamepad import Gamepad\n\ndef range_map(x, in_min, in_max, out_min, out_max):\n    return (x - in_min) * (out_max - out_min) // (in_max - in_min) + out_min\n\n# Usage example:\n    # Convert range[0, 65535] to -127 to 127\n    gp.move_joysticks(\n        x=range_map(ax.value, 0, 65535, -127, 127),\n        y=range_map(ay.value, 0, 65535, -127, 127),\n    )",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/hid/examples/hid_simple_gamepad.py",
      "library": "hid",
      "type": "example",
      "file_name": "hid_simple_gamepad.py",
      "chunk_type": "function",
      "function_name": "range_map"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Set DEBUG to True for full JSON response.\n# STREAMER WARNING: Credentials will be viewable\nDEBUG = False\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_twitch.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_twitch.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# STREAMER WARNING: Credentials will be viewable\nDEBUG = False\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_twitch.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_twitch.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\nDEBUG = False\n# Initalize Wifi, Socket Pool, Request Session\npool = adafruit_connection_manager.get_radio_socketpool(wifi.radio)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(wifi.radio)\nrequests = adafruit_requests.Session(pool, ssl_context)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_twitch.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_twitch.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# Converts seconds to minutes/hours/days\ndef time_calc(input_time):\n    \"\"\"Converts seconds to minutes/hours/days\"\"\"\n    if input_time < 60:\n        return f'{input_time:.0f} seconds'\n    if input_time < 3600:\n        return f'{input_time / 60:.0f} minutes'\n    if input_time < 86400:\n        return f'{input_time / 60 / 60:.0f} hours'\n    return f'{input_time / 60 / 60 / 24:.1f} days'\n\n# Usage example:\n\n        twitch_token_expiration = twitch_0auth_json[\"expires_in\"]\n        print(f\" | Token Expires in: {time_calc(twitch_token_expiration)}\")\n\n        # ----------------------------- GET DATA --------------------",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_twitch.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_twitch.py",
      "chunk_type": "function",
      "function_name": "time_calc"
    }
  },
  {
    "content": "import os\nimport time\nimport adafruit_connection_manager\nimport wifi\nimport adafruit_requests\n\n# F-String formatted struct time conversion\ndef _format_datetime(datetime):\n    \"\"\"F-String formatted struct time conversion\"\"\"\n    return f'{datetime.tm_mon:02}/' + f'{datetime.tm_mday:02}/' + f'{datetime.tm_year:02} ' + f'{datetime.tm_hour:02}:' + f'{datetime.tm_min:02}:' + f'{datetime.tm_sec:02}'",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/requests/examples/wifi/expanded/requests_wifi_api_twitch.py",
      "library": "requests",
      "type": "example",
      "file_name": "requests_wifi_api_twitch.py",
      "chunk_type": "function",
      "function_name": "_format_datetime"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nimport adafruit_ov2640\n\nimport adafruit_ov2640\nV_MODE = 1.98\nV_RECORD = 2.41\na = analogio.AnalogIn(board.IO6)\n# Release any resources currently in use for the displays",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_directio_kaluga1_3_ili9341.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_directio_kaluga1_3_ili9341.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nimport adafruit_ov2640\n\na = analogio.AnalogIn(board.IO6)\n# Release any resources currently in use for the displays\nspi = busio.SPI(MOSI=board.LCD_MOSI, clock=board.LCD_CLK)\ndisplay_bus = fourwire.FourWire(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_directio_kaluga1_3_ili9341.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_directio_kaluga1_3_ili9341.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nimport adafruit_ov2640\n\ndisplay_bus = fourwire.FourWire(spi, command=board.LCD_D_C, chip_select=board.LCD_CS, reset=board.LCD_RST, baudrate=80000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_directio_kaluga1_3_ili9341.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_directio_kaluga1_3_ili9341.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nimport adafruit_ov2640\n\ndisplay = busdisplay.BusDisplay(display_bus, _INIT_SEQUENCE, width=320, height=240)\nbus = busio.I2C(scl=board.CAMERA_SIOC, sda=board.CAMERA_SIOD)\ncam = adafruit_ov2640.OV2640(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_directio_kaluga1_3_ili9341.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_directio_kaluga1_3_ili9341.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nimport adafruit_ov2640\n\ncam = adafruit_ov2640.OV2640(bus, data_pins=board.CAMERA_DATA, clock=board.CAMERA_PCLK, vsync=board.CAMERA_VSYNC, href=board.CAMERA_HREF, mclk=board.CAMERA_XCLK, mclk_frequency=20000000, size=adafruit_ov2640.OV2640_SIZE_QVGA)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_directio_kaluga1_3_ili9341.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_directio_kaluga1_3_ili9341.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nimport adafruit_ov2640\n\nbitmap = displayio.Bitmap(320, 240, 65536)\ndisplay.auto_refresh = False\nsd_spi = busio.SPI(clock=board.IO18, MOSI=board.IO14, MISO=board.IO17)\nsd_cs = board.IO12\nsdcard = sdcardio.SDCard(sd_spi, sd_cs)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_directio_kaluga1_3_ili9341.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_directio_kaluga1_3_ili9341.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nimport adafruit_ov2640\n\nbitmap = displayio.Bitmap(320, 240, 65536)\ndisplay.auto_refresh = False\nsd_spi = busio.SPI(clock=board.IO18, MOSI=board.IO14, MISO=board.IO17)\nsd_cs = board.IO12\nsdcard = sdcardio.SDCard(sd_spi, sd_cs)\nvfs = storage.VfsFat(sdcard)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_directio_kaluga1_3_ili9341.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_directio_kaluga1_3_ili9341.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nimport adafruit_ov2640\n\ndef exists(filename):\n    try:\n        os.stat(filename)\n        return True\n    except OSError:\n        return False\n\n# Usage example:\n        filename = f\"/sd/img{_image_counter:04d}.jpg\"\n        _image_counter += 1\n        if exists(filename):\n            continue\n        print(\"#\", filename)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_directio_kaluga1_3_ili9341.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_directio_kaluga1_3_ili9341.py",
      "chunk_type": "function",
      "function_name": "exists"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nimport adafruit_ov2640\n\ndef open_next_image():\n    global _image_counter\n    while True:\n        filename = f'/sd/img{_image_counter:04d}.jpg'\n        _image_counter += 1\n        if exists(filename):\n            continue\n        print('#', filename)\n        return open(filename, 'wb')\n\n# Usage example:\n\n        print(f\"Captured {len(jpeg)} bytes of jpeg data\")\n        with open_next_image() as f:\n            f.write(jpeg)\n    finally:",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_directio_kaluga1_3_ili9341.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_directio_kaluga1_3_ili9341.py",
      "chunk_type": "function",
      "function_name": "open_next_image"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nimport adafruit_ov2640\n\ndef capture_image():\n    old_size = cam.size\n    old_colorspace = cam.colorspace\n    exposure = cam.exposure\n    try:\n        cam.size = adafruit_ov2640.OV2640_SIZE_UXGA\n        cam.colorspace = adafruit_ov2640.OV2640_COLOR_JPEG\n        cam.exposure = exposure\n        b = bytearray(cam.capture_buffer_size)\n        jpeg = cam.capture(b)\n        print(f'Captured {len(jpeg)} bytes of jpeg data')\n        with open_next_image() as f:\n            f.write(jpeg)\n    finally:\n        cam.size = old_size\n        cam.colorspace = old_colorspace\n        cam.exposure = exposure\n\n# Usage example:\n        record_pressed = abs(a_voltage - V_RECORD) < 0.05\n        if record_pressed:\n            capture_image()\n        cam.capture(bitmap)\n        display_bus.send(44, bitmap)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_directio_kaluga1_3_ili9341.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_directio_kaluga1_3_ili9341.py",
      "chunk_type": "function",
      "function_name": "capture_image"
    }
  },
  {
    "content": "import os\nimport struct\nimport analogio\nimport board\nimport busdisplay\nimport busio\nimport displayio\nimport fourwire\nimport sdcardio\nimport storage\nimport adafruit_ov2640\n\ndef main():\n    display.auto_refresh = False\n    display_bus.send(42, struct.pack('>hh', 0, 319))\n    display_bus.send(43, struct.pack('>hh', 0, 239))\n    while True:\n        a_voltage = a.value * a.reference_voltage / 65535\n        record_pressed = abs(a_voltage - V_RECORD) < 0.05\n        if record_pressed:\n            capture_image()\n        cam.capture(bitmap)\n        display_bus.send(44, bitmap)\n\n# Usage example:\n\n\nmain()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ov2640/examples/ov2640_directio_kaluga1_3_ili9341.py",
      "library": "ov2640",
      "type": "example",
      "file_name": "ov2640_directio_kaluga1_3_ili9341.py",
      "chunk_type": "function",
      "function_name": "main"
    }
  },
  {
    "content": "import board\nimport busio\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_mcp230xx.mcp23017 import MCP23017\n\n# Initialize the I2C bus:\ni2c = busio.I2C(board.SCL, board.SDA)\n# Initialize the MCP23017 chip on the bonnet\nmcp = MCP23017(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp230xx/examples/mcp230xx_leds_and_buttons_irq.py",
      "library": "mcp230xx",
      "type": "example",
      "file_name": "mcp230xx_leds_and_buttons_irq.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_mcp230xx.mcp23017 import MCP23017\n\n# we won't get an IRQ pulse when the pin is HIGH!\n# mcp.interrupt_configuration = 0xFF00         # notify pin value\n# mcp.default_value = 0xFF00         # default value is 'high' so notify whenever 'low'\n# connect the IRQ B pin to D4\nirq_b = DigitalInOut(board.D4)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mcp230xx/examples/mcp230xx_leds_and_buttons_irq.py",
      "library": "mcp230xx",
      "type": "example",
      "file_name": "mcp230xx_leds_and_buttons_irq.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_mlx90393\n\nimport board\nimport adafruit_mlx90393\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90393/examples/mlx90393_simpletest.py",
      "library": "mlx90393",
      "type": "example",
      "file_name": "mlx90393_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_mlx90393\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ntry:\n    SENSOR = adafruit_mlx90393.MLX90393(i2c, gain=adafruit_mlx90393.GAIN_1X)\nexcept ValueError:\n    SENSOR = adafruit_mlx90393.MLX90393(i2c, gain=adafruit_mlx90393.GAIN_1X, address=0x18)\n\nwhile True:\n    MX, MY, MZ = SENSOR.magnetic\n    print(f\"[{time.monotonic()}]\")\n    print(f\"X: {MX} uT\")\n    print(f\"Y: {MY} uT\")\n    print(f\"Z: {MZ} uT\")\n    # Display the status field if an error occured, etc.\n    if SENSOR.last_status > adafruit_mlx90393.STATUS_OK:\n        SENSOR.display_status()\n    time.sleep(1.0)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/mlx90393/examples/mlx90393_simpletest.py",
      "library": "mlx90393",
      "type": "example",
      "file_name": "mlx90393_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport touchio\nfrom adafruit_debouncer import Debouncer\n\nimport board\nimport touchio\ntouch_pad = board.A1\ntouch = touchio.TouchIn(touch_pad)\ntouch_debounced = Debouncer(touch)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debouncer/examples/debouncer_touchio_test.py",
      "library": "debouncer",
      "type": "example",
      "file_name": "debouncer_touchio_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nThis example shows how to use the debouncer library on the signals coming from\na cap-sense pin with touchio.\n\"\"\"\n\nimport time\n\nimport board\nimport touchio\n\nfrom adafruit_debouncer import Debouncer\n\ntouch_pad = board.A1\ntouch = touchio.TouchIn(touch_pad)\ntouch_debounced = Debouncer(touch)\n\nwhile True:\n    touch_debounced.update()\n    if touch_debounced.fell:\n        print(\"Just released\")\n    if touch_debounced.rose:\n        print(\"Just pressed\")\n    if touch_debounced.value:\n        print(\"touching\")\n    else:\n        # print('not touching')\n        pass\n    time.sleep(0.05)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debouncer/examples/debouncer_touchio_test.py",
      "library": "debouncer",
      "type": "example",
      "file_name": "debouncer_touchio_test.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom digitalio import DigitalInOut, Direction, Pull\nfrom adafruit_debouncer import Debouncer\n\nimport board\nbutton = DigitalInOut(board.D4)\nbutton.direction = Direction.INPUT\nbutton.pull = Pull.UP\nswitch = Debouncer(button)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debouncer/examples/debouncer_timing_test.py",
      "library": "debouncer",
      "type": "example",
      "file_name": "debouncer_timing_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nfrom digitalio import DigitalInOut, Direction, Pull\n\nfrom adafruit_debouncer import Debouncer\n\nbutton = DigitalInOut(board.D4)\nbutton.direction = Direction.INPUT\nbutton.pull = Pull.UP\nswitch = Debouncer(button)\n\nwhile True:\n    switch.update()\n    if switch.fell:\n        print(\"pressed\")\n        print(\"was released for \", switch.last_duration)\n    elif switch.rose:\n        print(\"released\")\n        print(\"was pressed for \", switch.last_duration)\n    else:\n        print(\"Stable for \", switch.current_duration)\n    time.sleep(0.1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/debouncer/examples/debouncer_timing_test.py",
      "library": "debouncer",
      "type": "example",
      "file_name": "debouncer_timing_test.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport adafruit_dacx578\n\nimport board\nimport adafruit_dacx578\n# Initialize I2C and DAC\ni2c = board.I2C()\ndac = adafruit_dacx578.DACx578(i2c)\nMAX_VALUE = 65535  # 16-bit value\nBASE_FREQ = 1.0  # frequency in Hz",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dacx578/examples/dacx578_sinewaves.py",
      "library": "dacx578",
      "type": "example",
      "file_name": "dacx578_sinewaves.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport adafruit_dacx578\n\nimport adafruit_dacx578\n# Initialize I2C and DAC\ni2c = board.I2C()\ndac = adafruit_dacx578.DACx578(i2c)\nMAX_VALUE = 65535  # 16-bit value\nBASE_FREQ = 1.0  # frequency in Hz\nSAMPLE_RATE = 100  # samples per second",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dacx578/examples/dacx578_sinewaves.py",
      "library": "dacx578",
      "type": "example",
      "file_name": "dacx578_sinewaves.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport adafruit_dacx578\n\ndef calculate_sinewave(frequency, time_point):\n    angle = 2 * math.pi * frequency * time_point\n    return int((math.sin(angle) + 1) * (MAX_VALUE / 2))\n\n# Usage example:\n    for channel_num in range(8):\n        frequency = BASE_FREQ * FREQ_MULTIPLIERS[channel_num]\n        value = calculate_sinewave(frequency, current_time)\n        dac.channels[channel_num].value = value\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dacx578/examples/dacx578_sinewaves.py",
      "library": "dacx578",
      "type": "example",
      "file_name": "dacx578_sinewaves.py",
      "chunk_type": "function",
      "function_name": "calculate_sinewave"
    }
  },
  {
    "content": "import board\nfrom adafruit_rockblock import RockBlock\n\n# SPDX-License-Identifier: MIT\n# CircuitPython / Blinka\nimport board\nuart = board.UART()\nuart.baudrate = 19200\n# via USB cable\n# import serial",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rockblock/examples/rockblock_simpletest.py",
      "library": "rockblock",
      "type": "example",
      "file_name": "rockblock_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# CircuitPython / Blinka\nimport board\n\nuart = board.UART()\nuart.baudrate = 19200\n\n# via USB cable\n# import serial\n# uart = serial.Serial(\"/dev/ttyUSB0\", 19200)\n\nfrom adafruit_rockblock import RockBlock\n\nrb = RockBlock(uart)\n\nprint(rb.model)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rockblock/examples/rockblock_simpletest.py",
      "library": "rockblock",
      "type": "example",
      "file_name": "rockblock_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nfrom adafruit_debug_i2c import DebugI2C\nfrom adafruit_tca8418 import TCA8418\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ndebug_i2c = DebugI2C(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca8418/examples/tca8418_gpio_fifo.py",
      "library": "tca8418",
      "type": "example",
      "file_name": "tca8418_gpio_fifo.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_dymoscale\n\nimport digitalio\nimport adafruit_dymoscale\n# initialize the dymo scale\nunits_pin = digitalio.DigitalInOut(board.D3)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dymoscale/examples/dymoscale_simpletest.py",
      "library": "dymoscale",
      "type": "example",
      "file_name": "dymoscale_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nimport adafruit_dymoscale\n\nimport adafruit_dymoscale\n# initialize the dymo scale\nunits_pin = digitalio.DigitalInOut(board.D3)\ndymo = adafruit_dymoscale.DYMOScale(board.D4, units_pin)\n# take a reading of the current time\ntime_stamp = time.monotonic()",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dymoscale/examples/dymoscale_simpletest.py",
      "library": "dymoscale",
      "type": "example",
      "file_name": "dymoscale_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\nimport digitalio\n\nimport adafruit_dymoscale\n\n# initialize the dymo scale\nunits_pin = digitalio.DigitalInOut(board.D3)\nunits_pin.switch_to_output()\ndymo = adafruit_dymoscale.DYMOScale(board.D4, units_pin)\n\n# take a reading of the current time\ntime_stamp = time.monotonic()\n\nwhile True:\n    reading = dymo.weight\n    text = f\"{reading.weight} g\"\n    print(text)\n    # to avoid sleep mode, toggle the units pin every 2 mins.\n    if (time.monotonic() - time_stamp) > 120:\n        print(\"toggling units button...\")\n        dymo.toggle_unit_button()\n        # reset the time\n        time_stamp = time.monotonic()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/dymoscale/examples/dymoscale_simpletest.py",
      "library": "dymoscale",
      "type": "example",
      "file_name": "dymoscale_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\n\n    esp32_cs = DigitalInOut(board.D13)\n    esp32_ready = DigitalInOut(board.D11)\n    esp32_reset = DigitalInOut(board.D12)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_messages.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_messages.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\n\n    esp32_cs = DigitalInOut(board.D13)\n    esp32_ready = DigitalInOut(board.D11)\n    esp32_reset = DigitalInOut(board.D12)\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_messages.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_messages.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\n\nspi = busio.SPI(board.SCK, board.MOSI, board.MISO)\nesp = adafruit_esp32spi.ESP_SPIcontrol(spi, esp32_cs, esp32_ready, esp32_reset)\nstatus_pixel = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)  # Uncomment for Most Boards",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_messages.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_messages.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\n\n# from adafruit_esp32spi import PWMOut\n# RED_LED = PWMOut.PWMOut(esp, 26)\n# GREEN_LED = PWMOut.PWMOut(esp, 27)\n# BLUE_LED = PWMOut.PWMOut(esp, 25)\n# status_pixel = adafruit_rgbled.RGBLED(RED_LED, BLUE_LED, GREEN_LED)\nwifi = adafruit_esp32spi_wifimanager.WiFiManager(esp, ssid, password, status_pixel=status_pixel)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_messages.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_messages.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\n\n#\n# From the Adafruit CircuitPython Bundle https://github.com/adafruit/Adafruit_CircuitPython_Bundle:\n# * adafruit-circuitpython-minimqtt\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Create an IoT Hub device client and connect\ndevice = IoTHubDevice(pool, ssl_context, device_connection_string)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_messages.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_messages.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\n\n# From the Adafruit CircuitPython Bundle https://github.com/adafruit/Adafruit_CircuitPython_Bundle:\n# * adafruit-circuitpython-minimqtt\npool = adafruit_connection_manager.get_radio_socketpool(esp)\nssl_context = adafruit_connection_manager.get_radio_ssl_context(esp)\n# Create an IoT Hub device client and connect\ndevice = IoTHubDevice(pool, ssl_context, device_connection_string)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_messages.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_messages.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import json\nimport random\nimport time\nfrom os import getenv\nimport adafruit_connection_manager\nimport board\nimport busio\nimport neopixel\nimport rtc\nfrom adafruit_esp32spi import adafruit_esp32spi, adafruit_esp32spi_wifimanager\nfrom digitalio import DigitalInOut\nfrom adafruit_azureiot import IoTHubDevice\n\ndef cloud_to_device_message_received(body: str, properties: dict):\n    print('Received message with body', body, 'and properties', json.dumps(properties))\n\n# Usage example:\n\n# Subscribe to the cloud to device message received events\ndevice.on_cloud_to_device_message_received = cloud_to_device_message_received\n\nprint(\"Connecting to Azure IoT Hub...\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/azure/examples/azureiot_esp32spi/azureiot_hub_messages.py",
      "library": "azure",
      "type": "example",
      "file_name": "azureiot_hub_messages.py",
      "chunk_type": "function",
      "function_name": "cloud_to_device_message_received"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_tlv320 import DAC_PATH_MIXED, DAC_PATH_NORMAL, DAC_PATH_OFF, DAC_PATH_SWAPPED, DAC_ROUTE_HP, DAC_ROUTE_MIXER, DAC_ROUTE_NONE, GPIO1_CLKOUT, GPIO1_DISABLED, GPIO1_GPI, GPIO1_GPO, GPIO1_INPUT_MODE, HP_COMMON_1_35V, HP_COMMON_1_50V, HP_COMMON_1_65V, HP_COMMON_1_80V, SPK_GAIN_6DB, SPK_GAIN_12DB, SPK_GAIN_18DB, SPK_GAIN_24DB, TLV320DAC3100, VOL_INDEPENDENT, VOL_LEFT_TO_RIGHT, VOL_RIGHT_TO_LEFT\n\n# Reset the DAC before use\nreset_pin = digitalio.DigitalInOut(board.D12)\nreset_pin.direction = digitalio.Direction.OUTPUT\nreset_pin.value = False  # Set low to reset",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlv320/examples/tlv320_fulltest.py",
      "library": "tlv320",
      "type": "example",
      "file_name": "tlv320_fulltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_tlv320 import DAC_PATH_MIXED, DAC_PATH_NORMAL, DAC_PATH_OFF, DAC_PATH_SWAPPED, DAC_ROUTE_HP, DAC_ROUTE_MIXER, DAC_ROUTE_NONE, GPIO1_CLKOUT, GPIO1_DISABLED, GPIO1_GPI, GPIO1_GPO, GPIO1_INPUT_MODE, HP_COMMON_1_35V, HP_COMMON_1_50V, HP_COMMON_1_65V, HP_COMMON_1_80V, SPK_GAIN_6DB, SPK_GAIN_12DB, SPK_GAIN_18DB, SPK_GAIN_24DB, TLV320DAC3100, VOL_INDEPENDENT, VOL_LEFT_TO_RIGHT, VOL_RIGHT_TO_LEFT\n\n# Reset the DAC before use\nreset_pin = digitalio.DigitalInOut(board.D12)\nreset_pin.direction = digitalio.Direction.OUTPUT\nreset_pin.value = False  # Set low to reset",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlv320/examples/tlv320_fulltest.py",
      "library": "tlv320",
      "type": "example",
      "file_name": "tlv320_fulltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport digitalio\nfrom adafruit_tlv320 import DAC_PATH_MIXED, DAC_PATH_NORMAL, DAC_PATH_OFF, DAC_PATH_SWAPPED, DAC_ROUTE_HP, DAC_ROUTE_MIXER, DAC_ROUTE_NONE, GPIO1_CLKOUT, GPIO1_DISABLED, GPIO1_GPI, GPIO1_GPO, GPIO1_INPUT_MODE, HP_COMMON_1_35V, HP_COMMON_1_50V, HP_COMMON_1_65V, HP_COMMON_1_80V, SPK_GAIN_6DB, SPK_GAIN_12DB, SPK_GAIN_18DB, SPK_GAIN_24DB, TLV320DAC3100, VOL_INDEPENDENT, VOL_LEFT_TO_RIGHT, VOL_RIGHT_TO_LEFT\n\nreset_pin.value = False  # Set low to reset\nreset_pin.value = True  # Set high to release from reset\ni2c = board.I2C()\ndac = TLV320DAC3100(i2c)\n# Display basic information\nprint(\"\\n=== Basic Information ===\")",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tlv320/examples/tlv320_fulltest.py",
      "library": "tlv320",
      "type": "example",
      "file_name": "tlv320_fulltest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_htu31d\n\nimport board\nimport adafruit_htu31d\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nhtu = adafruit_htu31d.HTU31D(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/htu31d/examples/htu31d_simpletest.py",
      "library": "htu31d",
      "type": "example",
      "file_name": "htu31d_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_htu31d\n\nimport adafruit_htu31d\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nhtu = adafruit_htu31d.HTU31D(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/htu31d/examples/htu31d_simpletest.py",
      "library": "htu31d",
      "type": "example",
      "file_name": "htu31d_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: Copyright (c) 2020 ladyada for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nimport time\n\nimport board\n\nimport adafruit_htu31d\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nhtu = adafruit_htu31d.HTU31D(i2c)\nprint(\"Found HTU31D with serial number\", hex(htu.serial_number))\n\nhtu.heater = True\nprint(\"Heater is on?\", htu.heater)\nhtu.heater = False\nprint(\"Heater is on?\", htu.heater)\n\nwhile True:\n    temperature, relative_humidity = htu.measurements\n    print(\"Temperature: %0.1f C\" % temperature)\n    print(\"Humidity: %0.1f %%\" % relative_humidity)\n    print(\"\")\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/htu31d/examples/htu31d_simpletest.py",
      "library": "htu31d",
      "type": "example",
      "file_name": "htu31d_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom rainbowio import colorwheel\nimport adafruit_seesaw.digitalio\nimport adafruit_seesaw.neopixel\nimport adafruit_seesaw.rotaryio\nimport adafruit_seesaw.seesaw\n\n# For boards/chips that don't handle clock-stretching well, try running I2C at 50KHz\n# import busio\n# i2c = busio.I2C(board.SCL, board.SDA, frequency=50000)\n# For using the built-in STEMMA QT connector on a microcontroller\ni2c = board.STEMMA_I2C()\nseesaw = adafruit_seesaw.seesaw.Seesaw(i2c, 0x49)\nencoders = [adafruit_seesaw.rotaryio.IncrementalEncoder(seesaw, n) for n in range(4)]\nswitches = [adafruit_seesaw.digitalio.DigitalIO(seesaw, pin) for pin in (12, 14, 17, 9)]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_quadrotary.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_quadrotary.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom rainbowio import colorwheel\nimport adafruit_seesaw.digitalio\nimport adafruit_seesaw.neopixel\nimport adafruit_seesaw.rotaryio\nimport adafruit_seesaw.seesaw\n\nseesaw = adafruit_seesaw.seesaw.Seesaw(i2c, 73)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_quadrotary.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_quadrotary.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom rainbowio import colorwheel\nimport adafruit_seesaw.digitalio\nimport adafruit_seesaw.neopixel\nimport adafruit_seesaw.rotaryio\nimport adafruit_seesaw.seesaw\n\n# i2c = busio.I2C(board.SCL, board.SDA, frequency=50000)\n# For using the built-in STEMMA QT connector on a microcontroller\ni2c = board.STEMMA_I2C()\nseesaw = adafruit_seesaw.seesaw.Seesaw(i2c, 0x49)\nencoders = [adafruit_seesaw.rotaryio.IncrementalEncoder(seesaw, n) for n in range(4)]\nswitches = [adafruit_seesaw.digitalio.DigitalIO(seesaw, pin) for pin in (12, 14, 17, 9)]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_quadrotary.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_quadrotary.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom rainbowio import colorwheel\nimport adafruit_seesaw.digitalio\nimport adafruit_seesaw.neopixel\nimport adafruit_seesaw.rotaryio\nimport adafruit_seesaw.seesaw\n\n# For using the built-in STEMMA QT connector on a microcontroller\ni2c = board.STEMMA_I2C()\nseesaw = adafruit_seesaw.seesaw.Seesaw(i2c, 0x49)\nencoders = [adafruit_seesaw.rotaryio.IncrementalEncoder(seesaw, n) for n in range(4)]\nswitches = [adafruit_seesaw.digitalio.DigitalIO(seesaw, pin) for pin in (12, 14, 17, 9)]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_quadrotary.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_quadrotary.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport digitalio\nfrom rainbowio import colorwheel\nimport adafruit_seesaw.digitalio\nimport adafruit_seesaw.neopixel\nimport adafruit_seesaw.rotaryio\nimport adafruit_seesaw.seesaw\n\nswitches = [adafruit_seesaw.digitalio.DigitalIO(seesaw, pin) for pin in (12, 14, 17, 9)]\n# four neopixels per PCB\npixels = adafruit_seesaw.neopixel.NeoPixel(seesaw, 18, 4)\npixels.brightness = 0.5\nlast_positions = [-1, -1, -1, -1]\ncolors = [0, 0, 0, 0]  # start at red",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_quadrotary.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_quadrotary.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_turtle import Color, turtle\n\nimport board\nturtle = turtle(board.DISPLAY)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_square.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_square.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\n\nfrom adafruit_turtle import Color, turtle\n\nturtle = turtle(board.DISPLAY)\nprint(\"Turtle time! Lets draw a simple square\")\n\nturtle.pencolor(Color.WHITE)\nturtle.pendown()\n\nfor _ in range(4):\n    turtle.forward(25)\n    turtle.left(90)\n\nwhile True:\n    pass\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/turtle/examples/turtle_square.py",
      "library": "turtle",
      "type": "example",
      "file_name": "turtle_square.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_stspin\n\n# Define the number of steps per revolution for your stepper motor\n# Most steppers are 200 steps per revolution (1.8 degrees per step)\nSTEPS_PER_REVOLUTION = 200\nDIR_PIN = board.D5  # DIRection pin\nSTEP_PIN = board.D6  # STEP pin\nMODE1_PIN = board.D9  # Mode 1 pin (REQUIRED for mode switching)\nMODE2_PIN = board.D10  # Mode 2 pin (REQUIRED for mode switching)\nEN_FAULT_PIN = board.D11  # Enable/Fault pin (optional)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/stspin/examples/stspin_microsteps.py",
      "library": "stspin",
      "type": "example",
      "file_name": "stspin_microsteps.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_stspin\n\n# Define the number of steps per revolution for your stepper motor\n# Most steppers are 200 steps per revolution (1.8 degrees per step)\nSTEPS_PER_REVOLUTION = 200\nDIR_PIN = board.D5  # DIRection pin\nSTEP_PIN = board.D6  # STEP pin\nMODE1_PIN = board.D9  # Mode 1 pin (REQUIRED for mode switching)\nMODE2_PIN = board.D10  # Mode 2 pin (REQUIRED for mode switching)\nEN_FAULT_PIN = board.D11  # Enable/Fault pin (optional)\nSTBY_RESET_PIN = board.D12  # Standby/Reset pin (REQUIRED for mode switching)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/stspin/examples/stspin_microsteps.py",
      "library": "stspin",
      "type": "example",
      "file_name": "stspin_microsteps.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_stspin\n\n# Most steppers are 200 steps per revolution (1.8 degrees per step)\nSTEPS_PER_REVOLUTION = 200\nDIR_PIN = board.D5  # DIRection pin\nSTEP_PIN = board.D6  # STEP pin\nMODE1_PIN = board.D9  # Mode 1 pin (REQUIRED for mode switching)\nMODE2_PIN = board.D10  # Mode 2 pin (REQUIRED for mode switching)\nEN_FAULT_PIN = board.D11  # Enable/Fault pin (optional)\nSTBY_RESET_PIN = board.D12  # Standby/Reset pin (REQUIRED for mode switching)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/stspin/examples/stspin_microsteps.py",
      "library": "stspin",
      "type": "example",
      "file_name": "stspin_microsteps.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_stspin\n\nSTEPS_PER_REVOLUTION = 200\nDIR_PIN = board.D5  # DIRection pin\nSTEP_PIN = board.D6  # STEP pin\nMODE1_PIN = board.D9  # Mode 1 pin (REQUIRED for mode switching)\nMODE2_PIN = board.D10  # Mode 2 pin (REQUIRED for mode switching)\nEN_FAULT_PIN = board.D11  # Enable/Fault pin (optional)\nSTBY_RESET_PIN = board.D12  # Standby/Reset pin (REQUIRED for mode switching)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/stspin/examples/stspin_microsteps.py",
      "library": "stspin",
      "type": "example",
      "file_name": "stspin_microsteps.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_stspin\n\nDIR_PIN = board.D5  # DIRection pin\nSTEP_PIN = board.D6  # STEP pin\nMODE1_PIN = board.D9  # Mode 1 pin (REQUIRED for mode switching)\nMODE2_PIN = board.D10  # Mode 2 pin (REQUIRED for mode switching)\nEN_FAULT_PIN = board.D11  # Enable/Fault pin (optional)\nSTBY_RESET_PIN = board.D12  # Standby/Reset pin (REQUIRED for mode switching)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/stspin/examples/stspin_microsteps.py",
      "library": "stspin",
      "type": "example",
      "file_name": "stspin_microsteps.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_stspin\n\nDIR_PIN = board.D5  # DIRection pin\nSTEP_PIN = board.D6  # STEP pin\nMODE1_PIN = board.D9  # Mode 1 pin (REQUIRED for mode switching)\nMODE2_PIN = board.D10  # Mode 2 pin (REQUIRED for mode switching)\nEN_FAULT_PIN = board.D11  # Enable/Fault pin (optional)\nSTBY_RESET_PIN = board.D12  # Standby/Reset pin (REQUIRED for mode switching)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/stspin/examples/stspin_microsteps.py",
      "library": "stspin",
      "type": "example",
      "file_name": "stspin_microsteps.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_stspin\n\nmotor = adafruit_stspin.STSPIN(STEP_PIN, DIR_PIN, STEPS_PER_REVOLUTION, mode1_pin=MODE1_PIN, mode2_pin=MODE2_PIN, en_fault_pin=EN_FAULT_PIN, stby_reset_pin=STBY_RESET_PIN)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/stspin/examples/stspin_microsteps.py",
      "library": "stspin",
      "type": "example",
      "file_name": "stspin_microsteps.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport adafruit_stspin\n\nMODES = [(adafruit_stspin.Modes.STEP_FULL, 'Full Step'), (adafruit_stspin.Modes.STEP_1_2, '1/2 Step'), (adafruit_stspin.Modes.STEP_1_4, '1/4 Step'), (adafruit_stspin.Modes.STEP_1_8, '1/8 Step'), (adafruit_stspin.Modes.STEP_1_16, '1/16 Step'), (adafruit_stspin.Modes.STEP_1_32, '1/32 Step'), (adafruit_stspin.Modes.STEP_1_64, '1/64 Step'), (adafruit_stspin.Modes.STEP_1_128, '1/128 Step'), (adafruit_stspin.Modes.STEP_1_256, '1/256 Step')]",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/stspin/examples/stspin_microsteps.py",
      "library": "stspin",
      "type": "example",
      "file_name": "stspin_microsteps.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport pwmio\nimport touchio\nfrom adafruit_slideshow import PlayBackDirection, SlideShow\n\nimport pwmio\nimport touchio\nforward_button = touchio.TouchIn(board.TOUCH4)\nback_button = touchio.TouchIn(board.TOUCH1)\nbrightness_up = touchio.TouchIn(board.TOUCH3)\nbrightness_down = touchio.TouchIn(board.TOUCH2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/slideshow/examples/slideshow_touch.py",
      "library": "slideshow",
      "type": "example",
      "file_name": "slideshow_touch.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport pwmio\nimport touchio\nfrom adafruit_slideshow import PlayBackDirection, SlideShow\n\nimport touchio\nforward_button = touchio.TouchIn(board.TOUCH4)\nback_button = touchio.TouchIn(board.TOUCH1)\nbrightness_up = touchio.TouchIn(board.TOUCH3)\nbrightness_down = touchio.TouchIn(board.TOUCH2)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/slideshow/examples/slideshow_touch.py",
      "library": "slideshow",
      "type": "example",
      "file_name": "slideshow_touch.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport pwmio\nimport touchio\nfrom adafruit_slideshow import PlayBackDirection, SlideShow\n\nforward_button = touchio.TouchIn(board.TOUCH4)\nback_button = touchio.TouchIn(board.TOUCH1)\nbrightness_up = touchio.TouchIn(board.TOUCH3)\nbrightness_down = touchio.TouchIn(board.TOUCH2)\nslideshow = SlideShow(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/slideshow/examples/slideshow_touch.py",
      "library": "slideshow",
      "type": "example",
      "file_name": "slideshow_touch.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport pwmio\nimport touchio\nfrom adafruit_slideshow import PlayBackDirection, SlideShow\n\nforward_button = touchio.TouchIn(board.TOUCH4)\nback_button = touchio.TouchIn(board.TOUCH1)\nbrightness_up = touchio.TouchIn(board.TOUCH3)\nbrightness_down = touchio.TouchIn(board.TOUCH2)\nslideshow = SlideShow(",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/slideshow/examples/slideshow_touch.py",
      "library": "slideshow",
      "type": "example",
      "file_name": "slideshow_touch.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport pwmio\nimport touchio\nfrom adafruit_slideshow import PlayBackDirection, SlideShow\n\nslideshow = SlideShow(board.DISPLAY, pwmio.PWMOut(board.TFT_BACKLIGHT), folder='/', auto_advance=False, dwell=0)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/slideshow/examples/slideshow_touch.py",
      "library": "slideshow",
      "type": "example",
      "file_name": "slideshow_touch.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\nimport board\nimport pwmio\nimport touchio\n\nfrom adafruit_slideshow import PlayBackDirection, SlideShow\n\nforward_button = touchio.TouchIn(board.TOUCH4)\nback_button = touchio.TouchIn(board.TOUCH1)\n\nbrightness_up = touchio.TouchIn(board.TOUCH3)\nbrightness_down = touchio.TouchIn(board.TOUCH2)\n\nslideshow = SlideShow(\n    board.DISPLAY,\n    pwmio.PWMOut(board.TFT_BACKLIGHT),\n    folder=\"/\",\n    auto_advance=False,\n    dwell=0,\n)\n\nwhile True:\n    if forward_button.value:\n        slideshow.direction = PlayBackDirection.FORWARD\n        slideshow.advance()\n    if back_button.value:\n        slideshow.direction = PlayBackDirection.BACKWARD\n        slideshow.advance()\n\n    if brightness_up.value:\n        slideshow.brightness += 0.001\n    elif brightness_down.value:\n        slideshow.brightness -= 0.001\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/slideshow/examples/slideshow_touch.py",
      "library": "slideshow",
      "type": "example",
      "file_name": "slideshow_touch.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport adafruit_bno055\n\nimport board\nimport adafruit_bno055\ni2c = board.I2C()\nsensor = adafruit_bno055.BNO055_I2C(i2c)\n# Set the sensor to compass mode",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno055/examples/bno055_compass_mode.py",
      "library": "bno055",
      "type": "example",
      "file_name": "bno055_compass_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport adafruit_bno055\n\nimport adafruit_bno055\ni2c = board.I2C()\nsensor = adafruit_bno055.BNO055_I2C(i2c)\n# Set the sensor to compass mode\nsensor.mode = adafruit_bno055.COMPASS_MODE",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno055/examples/bno055_compass_mode.py",
      "library": "bno055",
      "type": "example",
      "file_name": "bno055_compass_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import math\nimport time\nimport board\nimport adafruit_bno055\n\ni2c = board.I2C()\nsensor = adafruit_bno055.BNO055_I2C(i2c)\n# Set the sensor to compass mode\nsensor.mode = adafruit_bno055.COMPASS_MODE",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno055/examples/bno055_compass_mode.py",
      "library": "bno055",
      "type": "example",
      "file_name": "bno055_compass_mode.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2024 Tim Cocks for Adafruit Industries\n# SPDX-License-Identifier: MIT\nimport math\nimport time\n\nimport board\n\nimport adafruit_bno055\n\ni2c = board.I2C()\n\nsensor = adafruit_bno055.BNO055_I2C(i2c)\n\n# Set the sensor to compass mode\nsensor.mode = adafruit_bno055.COMPASS_MODE\n\nwhile True:\n    values = sensor.magnetic\n    print(\"Heading: \" + str(180 + math.atan2(values[1], values[0]) * 180 / math.pi))\n    time.sleep(1)\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/bno055/examples/bno055_compass_mode.py",
      "library": "bno055",
      "type": "example",
      "file_name": "bno055_compass_mode.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport adafruit_tca9548a\n\nimport board\nimport adafruit_tca9548a\n# Create I2C bus as normal\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Create the TCA9548A object and give it the I2C bus\ntca = adafruit_tca9548a.TCA9548A(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca9584a/examples/tca9548a_simpletest.py",
      "library": "tca9584a",
      "type": "example",
      "file_name": "tca9548a_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport adafruit_tca9548a\n\n# Create I2C bus as normal\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n# Create the TCA9548A object and give it the I2C bus\ntca = adafruit_tca9548a.TCA9548A(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca9584a/examples/tca9548a_simpletest.py",
      "library": "tca9584a",
      "type": "example",
      "file_name": "tca9548a_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 Carter Nelson for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n# This example shows using TCA9548A to perform a simple scan for connected devices\nimport board\n\nimport adafruit_tca9548a\n\n# Create I2C bus as normal\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\n\n# Create the TCA9548A object and give it the I2C bus\ntca = adafruit_tca9548a.TCA9548A(i2c)\n\nfor channel in range(8):\n    if tca[channel].try_lock():\n        print(f\"Channel {channel}:\", end=\"\")\n        addresses = tca[channel].scan()\n        print([hex(address) for address in addresses if address != 0x70])\n        tca[channel].unlock()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/tca9584a/examples/tca9548a_simpletest.py",
      "library": "tca9584a",
      "type": "example",
      "file_name": "tca9548a_simpletest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1681\n\nimport adafruit_ssd1681\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1681/examples/ssd1681_simpletest.py",
      "library": "ssd1681",
      "type": "example",
      "file_name": "ssd1681_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1681\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1681/examples/ssd1681_simpletest.py",
      "library": "ssd1681",
      "type": "example",
      "file_name": "ssd1681_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1681\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1681/examples/ssd1681_simpletest.py",
      "library": "ssd1681",
      "type": "example",
      "file_name": "ssd1681_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1681\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1681/examples/ssd1681_simpletest.py",
      "library": "ssd1681",
      "type": "example",
      "file_name": "ssd1681_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1681\n\n# This pinout works on a Feather M4 and may need to be altered for other boards.\nspi = board.SPI()  # Uses SCK and MOSI\nepd_cs = board.D9\nepd_dc = board.D10\nepd_reset = board.D5\nepd_busy = board.D6\ndisplay_bus = FourWire(spi, command=epd_dc, chip_select=epd_cs, reset=epd_reset, baudrate=1000000)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1681/examples/ssd1681_simpletest.py",
      "library": "ssd1681",
      "type": "example",
      "file_name": "ssd1681_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nimport displayio\nfrom fourwire import FourWire\nimport adafruit_ssd1681\n\ndisplay = adafruit_ssd1681.SSD1681(display_bus, width=200, height=200, busy_pin=epd_busy, highlight_color=16711680, rotation=180)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/ssd1681/examples/ssd1681_simpletest.py",
      "library": "ssd1681",
      "type": "example",
      "file_name": "ssd1681_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom rainbowio import colorwheel\nfrom adafruit_seesaw import neopixel, seesaw\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\nss = seesaw.Seesaw(i2c)\nNEOPIXEL_PIN = 19  # Can be any pin",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_neopixel_test.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_neopixel_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import time\nimport board\nfrom rainbowio import colorwheel\nfrom adafruit_seesaw import neopixel, seesaw\n\nss = seesaw.Seesaw(i2c)\nNEOPIXEL_PIN = 19  # Can be any pin\nNEOPIXEL_NUM = 12  # No more than 60 pixels!\npixels = neopixel.NeoPixel(ss, NEOPIXEL_PIN, NEOPIXEL_NUM)\npixels.brightness = 0.3  # Not so bright!\ncolor_offset = 0  # Start at red",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/seesaw/examples/seesaw_neopixel_test.py",
      "library": "seesaw",
      "type": "example",
      "file_name": "seesaw_neopixel_test.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ili9341\nimport board\nimport displayio\nimport simpleio\nimport terminalio\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_wii_classic\n\nimport adafruit_wii_classic\nspi = board.SPI()\ntft_cs = board.A2\ntft_dc = board.A1\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.A3)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wii_classic/examples/wii_classic_displayio_visualizer.py",
      "library": "wii_classic",
      "type": "example",
      "file_name": "wii_classic_displayio_visualizer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ili9341\nimport board\nimport displayio\nimport simpleio\nimport terminalio\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_wii_classic\n\nimport adafruit_wii_classic\nspi = board.SPI()\ntft_cs = board.A2\ntft_dc = board.A1\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.A3)\ndisplay = adafruit_ili9341.ILI9341(display_bus, width=320, height=240)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wii_classic/examples/wii_classic_displayio_visualizer.py",
      "library": "wii_classic",
      "type": "example",
      "file_name": "wii_classic_displayio_visualizer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ili9341\nimport board\nimport displayio\nimport simpleio\nimport terminalio\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_wii_classic\n\nspi = board.SPI()\ntft_cs = board.A2\ntft_dc = board.A1\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.A3)\ndisplay = adafruit_ili9341.ILI9341(display_bus, width=320, height=240)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wii_classic/examples/wii_classic_displayio_visualizer.py",
      "library": "wii_classic",
      "type": "example",
      "file_name": "wii_classic_displayio_visualizer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ili9341\nimport board\nimport displayio\nimport simpleio\nimport terminalio\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_wii_classic\n\nspi = board.SPI()\ntft_cs = board.A2\ntft_dc = board.A1\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.A3)\ndisplay = adafruit_ili9341.ILI9341(display_bus, width=320, height=240)\nbg = displayio.OnDiskBitmap(\"/wii_classic.bmp\")\nbg_tilegrid = displayio.TileGrid(bg, pixel_shader=bg.pixel_shader)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wii_classic/examples/wii_classic_displayio_visualizer.py",
      "library": "wii_classic",
      "type": "example",
      "file_name": "wii_classic_displayio_visualizer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ili9341\nimport board\nimport displayio\nimport simpleio\nimport terminalio\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_wii_classic\n\nspi = board.SPI()\ntft_cs = board.A2\ntft_dc = board.A1\ndisplay_bus = FourWire(spi, command=tft_dc, chip_select=tft_cs, reset=board.A3)\ndisplay = adafruit_ili9341.ILI9341(display_bus, width=320, height=240)\nbg = displayio.OnDiskBitmap(\"/wii_classic.bmp\")\nbg_tilegrid = displayio.TileGrid(bg, pixel_shader=bg.pixel_shader)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wii_classic/examples/wii_classic_displayio_visualizer.py",
      "library": "wii_classic",
      "type": "example",
      "file_name": "wii_classic_displayio_visualizer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ili9341\nimport board\nimport displayio\nimport simpleio\nimport terminalio\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_wii_classic\n\n# Make the display context\nsplash = displayio.Group()\ndisplay.root_group = splash\ni2c = board.STEMMA_I2C()\nctrl_pad = adafruit_wii_classic.Wii_Classic(i2c)\nRED = 0xFF0000\nBLACK = 0x000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wii_classic/examples/wii_classic_displayio_visualizer.py",
      "library": "wii_classic",
      "type": "example",
      "file_name": "wii_classic_displayio_visualizer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import adafruit_ili9341\nimport board\nimport displayio\nimport simpleio\nimport terminalio\nfrom adafruit_display_shapes.circle import Circle\nfrom adafruit_display_text import label\nfrom fourwire import FourWire\nimport adafruit_wii_classic\n\nsplash = displayio.Group()\ndisplay.root_group = splash\ni2c = board.STEMMA_I2C()\nctrl_pad = adafruit_wii_classic.Wii_Classic(i2c)\nRED = 0xFF0000\nBLACK = 0x000000",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/wii_classic/examples/wii_classic_displayio_visualizer.py",
      "library": "wii_classic",
      "type": "example",
      "file_name": "wii_classic_displayio_visualizer.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nfrom adafruit_cap1188.i2c import CAP1188_I2C\n\nimport board\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ncap = CAP1188_I2C(i2c)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/cap1188/examples/cap1188_advancedtest.py",
      "library": "cap1188",
      "type": "example",
      "file_name": "cap1188_advancedtest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 Jose David M.\n# SPDX-License-Identifier: MIT\n\n# To use in the REPL >>> import cap1188_advancetest\n\nimport board\n\nfrom adafruit_cap1188.i2c import CAP1188_I2C\n\ni2c = board.I2C()  # uses board.SCL and board.SDA\n# i2c = board.STEMMA_I2C()  # For using the built-in STEMMA QT connector on a microcontroller\ncap = CAP1188_I2C(i2c)\n\nprint(f\"Sensor Initial Configuration Values: {cap.averaging, cap.sample, cap.cycle}\")\n\naverages = (1, 2, 4, 8, 16, 32, 64, 128)\nsamples = (\"320us\", \"640us\", \"1.28ms\", \"2.56ms\")\ncycles = (\"35ms\", \"70ms\", \"105ms\", \"140ms\")\n\nprint(\"Setting Up Averages\")\nfor i in averages:\n    cap.averaging = i\n    print(f\"Average: {cap.averaging}\")\n\nprint(\"Setting Up Samples\")\nfor i in samples:\n    cap.sample = i\n    print(f\"Sample: {cap.sample}\")\n\nprint(\"Setting Up Samples\")\nfor i in cycles:\n    cap.cycle = i\n    print(f\"Cycle: {cap.cycle}\")\n\nprint(\"Done!\")\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/cap1188/examples/cap1188_advancedtest.py",
      "library": "cap1188",
      "type": "example",
      "file_name": "cap1188_advancedtest.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_rpi_simpletest.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_rpi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_rpi_simpletest.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_rpi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm9x = adafruit_rfm9x.RFM9x(spi, CS, RESET, RADIO_FREQ_MHZ)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_rpi_simpletest.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_rpi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport busio\nimport digitalio\nimport adafruit_rfm9x\n\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\nrfm9x = adafruit_rfm9x.RFM9x(spi, CS, RESET, RADIO_FREQ_MHZ)\n# Note that the radio is configured in LoRa mode so you can't control sync\n# word, encryption, frequency deviation, or other settings!",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm9x/examples/rfm9x_rpi_simpletest.py",
      "library": "rfm9x",
      "type": "example",
      "file_name": "rfm9x_rpi_simpletest.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_led_animation.color import JADE\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.A3\n# Update to match the number of NeoPixels you have connected\npixel_num = 30\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_comet.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_comet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import board\nimport neopixel\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_led_animation.color import JADE\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.A3\n# Update to match the number of NeoPixels you have connected\npixel_num = 30\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)\ncomet = Comet(pixels, speed=0.02, color=JADE, tail_length=10, bounce=True)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_comet.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_comet.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "# SPDX-FileCopyrightText: 2021 Kattni Rembor for Adafruit Industries\n# SPDX-License-Identifier: MIT\n\n\"\"\"\nThis example animates a jade comet that bounces from end to end of the strip.\n\nFor QT Py Haxpress and a NeoPixel strip. Update pixel_pin and pixel_num to match your wiring if\nusing a different board or form of NeoPixels.\n\nThis example will run on SAMD21 (M0) Express boards (such as Circuit Playground Express or QT Py\nHaxpress), but not on SAMD21 non-Express boards (such as QT Py or Trinket).\n\"\"\"\n\nimport board\nimport neopixel\n\nfrom adafruit_led_animation.animation.comet import Comet\nfrom adafruit_led_animation.color import JADE\n\n# Update to match the pin connected to your NeoPixels\npixel_pin = board.A3\n# Update to match the number of NeoPixels you have connected\npixel_num = 30\n\npixels = neopixel.NeoPixel(pixel_pin, pixel_num, brightness=0.5, auto_write=False)\n\ncomet = Comet(pixels, speed=0.02, color=JADE, tail_length=10, bounce=True)\n\nwhile True:\n    comet.animate()\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/helpers/led-animation/examples/led_animation_comet.py",
      "library": "led-animation",
      "type": "example",
      "file_name": "led_animation_comet.py",
      "chunk_type": "complete_example"
    }
  },
  {
    "content": "import asyncio\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\n# Define radio parameters.\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_asyncio_listen_ack.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_asyncio_listen_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import asyncio\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\nRADIO_FREQ_MHZ = 915.0  # Frequency of the radio in Mhz. Must match your\n# module! Can be a value like 915.0, 433.0, etc.\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_asyncio_listen_ack.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_asyncio_listen_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import asyncio\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\n# Define pins connected to the chip, use these if wiring up the breakout according to the guide:\nCS = digitalio.DigitalInOut(board.CE1)\nRESET = digitalio.DigitalInOut(board.D25)\n# Initialize SPI bus.\nspi = busio.SPI(board.SCK, MOSI=board.MOSI, MISO=board.MISO)\n# Initialze RFM radio\n# uncommnet the desired import and rfm initialization depending on the radio boards being used",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_asyncio_listen_ack.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_asyncio_listen_ack.py",
      "chunk_type": "setup"
    }
  },
  {
    "content": "import asyncio\nimport board\nimport busio\nimport digitalio\nfrom adafruit_rfm import rfm9x\n\n# Simple class to hold an  value. Use .value to to read or write.\nclass Packet:\n    \"\"\"Simple class to hold an  value. Use .value to to read or write.\"\"\"\n\n    def __init__(self):\n        self.received = False\n\n# Usage example:\n\n# pylint: disable=too-few-public-methods\nclass Packet:\n    \"\"\"Simple class to hold an  value. Use .value to to read or write.\"\"\"\n",
    "metadata": {
      "source": "Adafruit_CircuitPython_Bundle/libraries/drivers/rfm/examples/rfm_rh_asyncio_listen_ack.py",
      "library": "rfm",
      "type": "example",
      "file_name": "rfm_rh_asyncio_listen_ack.py",
      "chunk_type": "function",
      "function_name": "Packet"
    }
  }
]